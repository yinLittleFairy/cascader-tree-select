function _mergeNamespaces(n, m) {
  for (var i = 0; i < m.length; i++) {
    const e = m[i];
    if (typeof e !== "string" && !Array.isArray(e)) {
      for (const k in e) {
        if (k !== "default" && !(k in n)) {
          const d = Object.getOwnPropertyDescriptor(e, k);
          if (d) {
            Object.defineProperty(n, k, d.get ? d : {
              enumerable: true,
              get: () => e[k]
            });
          }
        }
      }
    }
  }
  return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, { value: "Module" }));
}
const style$1 = "";
/*!
 * Vue.js v2.7.14
 * (c) 2014-2022 Evan You
 * Released under the MIT License.
 */
var emptyObject = Object.freeze({});
var isArray$1 = Array.isArray;
function isUndef(v) {
  return v === void 0 || v === null;
}
function isDef(v) {
  return v !== void 0 && v !== null;
}
function isTrue(v) {
  return v === true;
}
function isFalse(v) {
  return v === false;
}
function isPrimitive(value) {
  return typeof value === "string" || typeof value === "number" || // $flow-disable-line
  typeof value === "symbol" || typeof value === "boolean";
}
function isFunction(value) {
  return typeof value === "function";
}
function isObject$5(obj) {
  return obj !== null && typeof obj === "object";
}
var _toString = Object.prototype.toString;
function toRawType(value) {
  return _toString.call(value).slice(8, -1);
}
function isPlainObject(obj) {
  return _toString.call(obj) === "[object Object]";
}
function isRegExp(v) {
  return _toString.call(v) === "[object RegExp]";
}
function isValidArrayIndex(val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val);
}
function isPromise(val) {
  return isDef(val) && typeof val.then === "function" && typeof val.catch === "function";
}
function toString$2(val) {
  return val == null ? "" : Array.isArray(val) || isPlainObject(val) && val.toString === _toString ? JSON.stringify(val, null, 2) : String(val);
}
function toNumber$1(val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n;
}
function makeMap(str, expectsLowerCase) {
  var map = /* @__PURE__ */ Object.create(null);
  var list = str.split(",");
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase ? function(val) {
    return map[val.toLowerCase()];
  } : function(val) {
    return map[val];
  };
}
var isBuiltInTag = makeMap("slot,component", true);
var isReservedAttribute = makeMap("key,ref,slot,slot-scope,is");
function remove$2(arr, item) {
  var len = arr.length;
  if (len) {
    if (item === arr[len - 1]) {
      arr.length = len - 1;
      return;
    }
    var index2 = arr.indexOf(item);
    if (index2 > -1) {
      return arr.splice(index2, 1);
    }
  }
}
var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
function hasOwn(obj, key) {
  return hasOwnProperty$1.call(obj, key);
}
function cached(fn) {
  var cache = /* @__PURE__ */ Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}
var camelizeRE = /-(\w)/g;
var camelize = cached(function(str) {
  return str.replace(camelizeRE, function(_, c) {
    return c ? c.toUpperCase() : "";
  });
});
var capitalize = cached(function(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function(str) {
  return str.replace(hyphenateRE, "-$1").toLowerCase();
});
function polyfillBind(fn, ctx2) {
  function boundFn(a) {
    var l = arguments.length;
    return l ? l > 1 ? fn.apply(ctx2, arguments) : fn.call(ctx2, a) : fn.call(ctx2);
  }
  boundFn._length = fn.length;
  return boundFn;
}
function nativeBind(fn, ctx2) {
  return fn.bind(ctx2);
}
var bind$1 = Function.prototype.bind ? nativeBind : polyfillBind;
function toArray(list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret;
}
function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to;
}
function toObject$2(arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res;
}
function noop(a, b, c) {
}
var no = function(a, b, c) {
  return false;
};
var identity = function(_) {
  return _;
};
function looseEqual(a, b) {
  if (a === b)
    return true;
  var isObjectA = isObject$5(a);
  var isObjectB = isObject$5(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function(e, i) {
          return looseEqual(e, b[i]);
        });
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime();
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function(key) {
          return looseEqual(a[key], b[key]);
        });
      } else {
        return false;
      }
    } catch (e) {
      return false;
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
}
function looseIndexOf(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val))
      return i;
  }
  return -1;
}
function once(fn) {
  var called = false;
  return function() {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  };
}
function hasChanged(x, y) {
  if (x === y) {
    return x === 0 && 1 / x !== 1 / y;
  } else {
    return x === x || y === y;
  }
}
var SSR_ATTR = "data-server-rendered";
var ASSET_TYPES = ["component", "directive", "filter"];
var LIFECYCLE_HOOKS = [
  "beforeCreate",
  "created",
  "beforeMount",
  "mounted",
  "beforeUpdate",
  "updated",
  "beforeDestroy",
  "destroyed",
  "activated",
  "deactivated",
  "errorCaptured",
  "serverPrefetch",
  "renderTracked",
  "renderTriggered"
];
var config$1 = {
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: /* @__PURE__ */ Object.create(null),
  /**
   * Whether to suppress warnings.
   */
  silent: false,
  /**
   * Show production mode tip message on boot?
   */
  productionTip: process.env.NODE_ENV !== "production",
  /**
   * Whether to enable devtools
   */
  devtools: process.env.NODE_ENV !== "production",
  /**
   * Whether to record perf
   */
  performance: false,
  /**
   * Error handler for watcher errors
   */
  errorHandler: null,
  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,
  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],
  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: /* @__PURE__ */ Object.create(null),
  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,
  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,
  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,
  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,
  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,
  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,
  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,
  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
};
var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;
function isReserved(str) {
  var c = (str + "").charCodeAt(0);
  return c === 36 || c === 95;
}
function def$1(obj, key, val, enumerable2) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable2,
    writable: true,
    configurable: true
  });
}
var bailRE = new RegExp("[^".concat(unicodeRegExp.source, ".$_\\d]"));
function parsePath(path) {
  if (bailRE.test(path)) {
    return;
  }
  var segments = path.split(".");
  return function(obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj)
        return;
      obj = obj[segments[i]];
    }
    return obj;
  };
}
var hasProto = "__proto__" in {};
var inBrowser = typeof window !== "undefined";
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE$1 = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf("msie 9.0") > 0;
var isEdge = UA && UA.indexOf("edge/") > 0;
UA && UA.indexOf("android") > 0;
var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/);
var nativeWatch = {}.watch;
var supportsPassive$1 = false;
if (inBrowser) {
  try {
    var opts$1 = {};
    Object.defineProperty(opts$1, "passive", {
      get: function() {
        supportsPassive$1 = true;
      }
    });
    window.addEventListener("test-passive", null, opts$1);
  } catch (e) {
  }
}
var _isServer;
var isServerRendering = function() {
  if (_isServer === void 0) {
    if (!inBrowser && typeof global !== "undefined") {
      _isServer = global["process"] && global["process"].env.VUE_ENV === "server";
    } else {
      _isServer = false;
    }
  }
  return _isServer;
};
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
function isNative(Ctor) {
  return typeof Ctor === "function" && /native code/.test(Ctor.toString());
}
var hasSymbol = typeof Symbol !== "undefined" && isNative(Symbol) && typeof Reflect !== "undefined" && isNative(Reflect.ownKeys);
var _Set;
if (typeof Set !== "undefined" && isNative(Set)) {
  _Set = Set;
} else {
  _Set = /** @class */
  function() {
    function Set2() {
      this.set = /* @__PURE__ */ Object.create(null);
    }
    Set2.prototype.has = function(key) {
      return this.set[key] === true;
    };
    Set2.prototype.add = function(key) {
      this.set[key] = true;
    };
    Set2.prototype.clear = function() {
      this.set = /* @__PURE__ */ Object.create(null);
    };
    return Set2;
  }();
}
var currentInstance = null;
function getCurrentInstance() {
  return currentInstance && { proxy: currentInstance };
}
function setCurrentInstance(vm) {
  if (vm === void 0) {
    vm = null;
  }
  if (!vm)
    currentInstance && currentInstance._scope.off();
  currentInstance = vm;
  vm && vm._scope.on();
}
var VNode = (
  /** @class */
  function() {
    function VNode2(tag2, data, children, text, elm, context, componentOptions, asyncFactory) {
      this.tag = tag2;
      this.data = data;
      this.children = children;
      this.text = text;
      this.elm = elm;
      this.ns = void 0;
      this.context = context;
      this.fnContext = void 0;
      this.fnOptions = void 0;
      this.fnScopeId = void 0;
      this.key = data && data.key;
      this.componentOptions = componentOptions;
      this.componentInstance = void 0;
      this.parent = void 0;
      this.raw = false;
      this.isStatic = false;
      this.isRootInsert = true;
      this.isComment = false;
      this.isCloned = false;
      this.isOnce = false;
      this.asyncFactory = asyncFactory;
      this.asyncMeta = void 0;
      this.isAsyncPlaceholder = false;
    }
    Object.defineProperty(VNode2.prototype, "child", {
      // DEPRECATED: alias for componentInstance for backwards compat.
      /* istanbul ignore next */
      get: function() {
        return this.componentInstance;
      },
      enumerable: false,
      configurable: true
    });
    return VNode2;
  }()
);
var createEmptyVNode = function(text) {
  if (text === void 0) {
    text = "";
  }
  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node;
};
function createTextVNode(val) {
  return new VNode(void 0, void 0, void 0, String(val));
}
function cloneVNode(vnode) {
  var cloned = new VNode(
    vnode.tag,
    vnode.data,
    // #7975
    // clone children array to avoid mutating original in case of cloning
    // a child.
    vnode.children && vnode.children.slice(),
    vnode.text,
    vnode.elm,
    vnode.context,
    vnode.componentOptions,
    vnode.asyncFactory
  );
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned;
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var uid$2$1 = 0;
var pendingCleanupDeps = [];
var cleanupDeps = function() {
  for (var i = 0; i < pendingCleanupDeps.length; i++) {
    var dep = pendingCleanupDeps[i];
    dep.subs = dep.subs.filter(function(s) {
      return s;
    });
    dep._pending = false;
  }
  pendingCleanupDeps.length = 0;
};
var Dep = (
  /** @class */
  function() {
    function Dep2() {
      this._pending = false;
      this.id = uid$2$1++;
      this.subs = [];
    }
    Dep2.prototype.addSub = function(sub) {
      this.subs.push(sub);
    };
    Dep2.prototype.removeSub = function(sub) {
      this.subs[this.subs.indexOf(sub)] = null;
      if (!this._pending) {
        this._pending = true;
        pendingCleanupDeps.push(this);
      }
    };
    Dep2.prototype.depend = function(info) {
      if (Dep2.target) {
        Dep2.target.addDep(this);
        if (process.env.NODE_ENV !== "production" && info && Dep2.target.onTrack) {
          Dep2.target.onTrack(__assign({ effect: Dep2.target }, info));
        }
      }
    };
    Dep2.prototype.notify = function(info) {
      var subs = this.subs.filter(function(s) {
        return s;
      });
      if (process.env.NODE_ENV !== "production" && !config$1.async) {
        subs.sort(function(a, b) {
          return a.id - b.id;
        });
      }
      for (var i = 0, l = subs.length; i < l; i++) {
        var sub = subs[i];
        if (process.env.NODE_ENV !== "production" && info) {
          sub.onTrigger && sub.onTrigger(__assign({ effect: subs[i] }, info));
        }
        sub.update();
      }
    };
    return Dep2;
  }()
);
Dep.target = null;
var targetStack = [];
function pushTarget(target2) {
  targetStack.push(target2);
  Dep.target = target2;
}
function popTarget() {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}
var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);
var methodsToPatch = [
  "push",
  "pop",
  "shift",
  "unshift",
  "splice",
  "sort",
  "reverse"
];
methodsToPatch.forEach(function(method3) {
  var original = arrayProto[method3];
  def$1(arrayMethods, method3, function mutator() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method3) {
      case "push":
      case "unshift":
        inserted = args;
        break;
      case "splice":
        inserted = args.slice(2);
        break;
    }
    if (inserted)
      ob.observeArray(inserted);
    if (process.env.NODE_ENV !== "production") {
      ob.dep.notify({
        type: "array mutation",
        target: this,
        key: method3
      });
    } else {
      ob.dep.notify();
    }
    return result;
  });
});
var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
var NO_INIITIAL_VALUE = {};
var shouldObserve = true;
function toggleObserving(value) {
  shouldObserve = value;
}
var mockDep = {
  notify: noop,
  depend: noop,
  addSub: noop,
  removeSub: noop
};
var Observer = (
  /** @class */
  function() {
    function Observer2(value, shallow, mock) {
      if (shallow === void 0) {
        shallow = false;
      }
      if (mock === void 0) {
        mock = false;
      }
      this.value = value;
      this.shallow = shallow;
      this.mock = mock;
      this.dep = mock ? mockDep : new Dep();
      this.vmCount = 0;
      def$1(value, "__ob__", this);
      if (isArray$1(value)) {
        if (!mock) {
          if (hasProto) {
            value.__proto__ = arrayMethods;
          } else {
            for (var i = 0, l = arrayKeys.length; i < l; i++) {
              var key = arrayKeys[i];
              def$1(value, key, arrayMethods[key]);
            }
          }
        }
        if (!shallow) {
          this.observeArray(value);
        }
      } else {
        var keys2 = Object.keys(value);
        for (var i = 0; i < keys2.length; i++) {
          var key = keys2[i];
          defineReactive(value, key, NO_INIITIAL_VALUE, void 0, shallow, mock);
        }
      }
    }
    Observer2.prototype.observeArray = function(value) {
      for (var i = 0, l = value.length; i < l; i++) {
        observe(value[i], false, this.mock);
      }
    };
    return Observer2;
  }()
);
function observe(value, shallow, ssrMockReactivity) {
  if (value && hasOwn(value, "__ob__") && value.__ob__ instanceof Observer) {
    return value.__ob__;
  }
  if (shouldObserve && (ssrMockReactivity || !isServerRendering()) && (isArray$1(value) || isPlainObject(value)) && Object.isExtensible(value) && !value.__v_skip && !isRef(value) && !(value instanceof VNode)) {
    return new Observer(value, shallow, ssrMockReactivity);
  }
}
function defineReactive(obj, key, val, customSetter, shallow, mock) {
  var dep = new Dep();
  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return;
  }
  var getter = property && property.get;
  var setter2 = property && property.set;
  if ((!getter || setter2) && (val === NO_INIITIAL_VALUE || arguments.length === 2)) {
    val = obj[key];
  }
  var childOb = !shallow && observe(val, false, mock);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter() {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        if (process.env.NODE_ENV !== "production") {
          dep.depend({
            target: obj,
            type: "get",
            key
          });
        } else {
          dep.depend();
        }
        if (childOb) {
          childOb.dep.depend();
          if (isArray$1(value)) {
            dependArray(value);
          }
        }
      }
      return isRef(value) && !shallow ? value.value : value;
    },
    set: function reactiveSetter(newVal) {
      var value = getter ? getter.call(obj) : val;
      if (!hasChanged(value, newVal)) {
        return;
      }
      if (process.env.NODE_ENV !== "production" && customSetter) {
        customSetter();
      }
      if (setter2) {
        setter2.call(obj, newVal);
      } else if (getter) {
        return;
      } else if (!shallow && isRef(value) && !isRef(newVal)) {
        value.value = newVal;
        return;
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal, false, mock);
      if (process.env.NODE_ENV !== "production") {
        dep.notify({
          type: "set",
          target: obj,
          key,
          newValue: newVal,
          oldValue: value
        });
      } else {
        dep.notify();
      }
    }
  });
  return dep;
}
function set(target2, key, val) {
  if (process.env.NODE_ENV !== "production" && (isUndef(target2) || isPrimitive(target2))) {
    warn("Cannot set reactive property on undefined, null, or primitive value: ".concat(target2));
  }
  if (isReadonly(target2)) {
    process.env.NODE_ENV !== "production" && warn('Set operation on key "'.concat(key, '" failed: target is readonly.'));
    return;
  }
  var ob = target2.__ob__;
  if (isArray$1(target2) && isValidArrayIndex(key)) {
    target2.length = Math.max(target2.length, key);
    target2.splice(key, 1, val);
    if (ob && !ob.shallow && ob.mock) {
      observe(val, false, true);
    }
    return val;
  }
  if (key in target2 && !(key in Object.prototype)) {
    target2[key] = val;
    return val;
  }
  if (target2._isVue || ob && ob.vmCount) {
    process.env.NODE_ENV !== "production" && warn("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option.");
    return val;
  }
  if (!ob) {
    target2[key] = val;
    return val;
  }
  defineReactive(ob.value, key, val, void 0, ob.shallow, ob.mock);
  if (process.env.NODE_ENV !== "production") {
    ob.dep.notify({
      type: "add",
      target: target2,
      key,
      newValue: val,
      oldValue: void 0
    });
  } else {
    ob.dep.notify();
  }
  return val;
}
function del(target2, key) {
  if (process.env.NODE_ENV !== "production" && (isUndef(target2) || isPrimitive(target2))) {
    warn("Cannot delete reactive property on undefined, null, or primitive value: ".concat(target2));
  }
  if (isArray$1(target2) && isValidArrayIndex(key)) {
    target2.splice(key, 1);
    return;
  }
  var ob = target2.__ob__;
  if (target2._isVue || ob && ob.vmCount) {
    process.env.NODE_ENV !== "production" && warn("Avoid deleting properties on a Vue instance or its root $data - just set it to null.");
    return;
  }
  if (isReadonly(target2)) {
    process.env.NODE_ENV !== "production" && warn('Delete operation on key "'.concat(key, '" failed: target is readonly.'));
    return;
  }
  if (!hasOwn(target2, key)) {
    return;
  }
  delete target2[key];
  if (!ob) {
    return;
  }
  if (process.env.NODE_ENV !== "production") {
    ob.dep.notify({
      type: "delete",
      target: target2,
      key
    });
  } else {
    ob.dep.notify();
  }
}
function dependArray(value) {
  for (var e = void 0, i = 0, l = value.length; i < l; i++) {
    e = value[i];
    if (e && e.__ob__) {
      e.__ob__.dep.depend();
    }
    if (isArray$1(e)) {
      dependArray(e);
    }
  }
}
function reactive(target2) {
  makeReactive(target2, false);
  return target2;
}
function shallowReactive(target2) {
  makeReactive(target2, true);
  def$1(target2, "__v_isShallow", true);
  return target2;
}
function makeReactive(target2, shallow) {
  if (!isReadonly(target2)) {
    if (process.env.NODE_ENV !== "production") {
      if (isArray$1(target2)) {
        warn("Avoid using Array as root value for ".concat(shallow ? "shallowReactive()" : "reactive()", " as it cannot be tracked in watch() or watchEffect(). Use ").concat(shallow ? "shallowRef()" : "ref()", " instead. This is a Vue-2-only limitation."));
      }
      var existingOb = target2 && target2.__ob__;
      if (existingOb && existingOb.shallow !== shallow) {
        warn("Target is already a ".concat(existingOb.shallow ? "" : "non-", "shallow reactive object, and cannot be converted to ").concat(shallow ? "" : "non-", "shallow."));
      }
    }
    var ob = observe(
      target2,
      shallow,
      isServerRendering()
      /* ssr mock reactivity */
    );
    if (process.env.NODE_ENV !== "production" && !ob) {
      if (target2 == null || isPrimitive(target2)) {
        warn("value cannot be made reactive: ".concat(String(target2)));
      }
      if (isCollectionType(target2)) {
        warn("Vue 2 does not support reactive collection types such as Map or Set.");
      }
    }
  }
}
function isReactive(value) {
  if (isReadonly(value)) {
    return isReactive(value[
      "__v_raw"
      /* ReactiveFlags.RAW */
    ]);
  }
  return !!(value && value.__ob__);
}
function isShallow(value) {
  return !!(value && value.__v_isShallow);
}
function isReadonly(value) {
  return !!(value && value.__v_isReadonly);
}
function isProxy(value) {
  return isReactive(value) || isReadonly(value);
}
function toRaw(observed) {
  var raw = observed && observed[
    "__v_raw"
    /* ReactiveFlags.RAW */
  ];
  return raw ? toRaw(raw) : observed;
}
function markRaw(value) {
  if (Object.isExtensible(value)) {
    def$1(value, "__v_skip", true);
  }
  return value;
}
function isCollectionType(value) {
  var type2 = toRawType(value);
  return type2 === "Map" || type2 === "WeakMap" || type2 === "Set" || type2 === "WeakSet";
}
var RefFlag = "__v_isRef";
function isRef(r) {
  return !!(r && r.__v_isRef === true);
}
function ref$1(value) {
  return createRef(value, false);
}
function shallowRef(value) {
  return createRef(value, true);
}
function createRef(rawValue, shallow) {
  if (isRef(rawValue)) {
    return rawValue;
  }
  var ref2 = {};
  def$1(ref2, RefFlag, true);
  def$1(ref2, "__v_isShallow", shallow);
  def$1(ref2, "dep", defineReactive(ref2, "value", rawValue, null, shallow, isServerRendering()));
  return ref2;
}
function triggerRef(ref2) {
  if (process.env.NODE_ENV !== "production" && !ref2.dep) {
    warn("received object is not a triggerable ref.");
  }
  if (process.env.NODE_ENV !== "production") {
    ref2.dep && ref2.dep.notify({
      type: "set",
      target: ref2,
      key: "value"
    });
  } else {
    ref2.dep && ref2.dep.notify();
  }
}
function unref(ref2) {
  return isRef(ref2) ? ref2.value : ref2;
}
function proxyRefs(objectWithRefs) {
  if (isReactive(objectWithRefs)) {
    return objectWithRefs;
  }
  var proxy2 = {};
  var keys2 = Object.keys(objectWithRefs);
  for (var i = 0; i < keys2.length; i++) {
    proxyWithRefUnwrap(proxy2, objectWithRefs, keys2[i]);
  }
  return proxy2;
}
function proxyWithRefUnwrap(target2, source, key) {
  Object.defineProperty(target2, key, {
    enumerable: true,
    configurable: true,
    get: function() {
      var val = source[key];
      if (isRef(val)) {
        return val.value;
      } else {
        var ob = val && val.__ob__;
        if (ob)
          ob.dep.depend();
        return val;
      }
    },
    set: function(value) {
      var oldValue = source[key];
      if (isRef(oldValue) && !isRef(value)) {
        oldValue.value = value;
      } else {
        source[key] = value;
      }
    }
  });
}
function customRef(factory) {
  var dep = new Dep();
  var _a = factory(function() {
    if (process.env.NODE_ENV !== "production") {
      dep.depend({
        target: ref2,
        type: "get",
        key: "value"
      });
    } else {
      dep.depend();
    }
  }, function() {
    if (process.env.NODE_ENV !== "production") {
      dep.notify({
        target: ref2,
        type: "set",
        key: "value"
      });
    } else {
      dep.notify();
    }
  }), get = _a.get, set2 = _a.set;
  var ref2 = {
    get value() {
      return get();
    },
    set value(newVal) {
      set2(newVal);
    }
  };
  def$1(ref2, RefFlag, true);
  return ref2;
}
function toRefs(object3) {
  if (process.env.NODE_ENV !== "production" && !isReactive(object3)) {
    warn("toRefs() expects a reactive object but received a plain one.");
  }
  var ret = isArray$1(object3) ? new Array(object3.length) : {};
  for (var key in object3) {
    ret[key] = toRef(object3, key);
  }
  return ret;
}
function toRef(object3, key, defaultValue) {
  var val = object3[key];
  if (isRef(val)) {
    return val;
  }
  var ref2 = {
    get value() {
      var val2 = object3[key];
      return val2 === void 0 ? defaultValue : val2;
    },
    set value(newVal) {
      object3[key] = newVal;
    }
  };
  def$1(ref2, RefFlag, true);
  return ref2;
}
var rawToReadonlyFlag = "__v_rawToReadonly";
var rawToShallowReadonlyFlag = "__v_rawToShallowReadonly";
function readonly(target2) {
  return createReadonly(target2, false);
}
function createReadonly(target2, shallow) {
  if (!isPlainObject(target2)) {
    if (process.env.NODE_ENV !== "production") {
      if (isArray$1(target2)) {
        warn("Vue 2 does not support readonly arrays.");
      } else if (isCollectionType(target2)) {
        warn("Vue 2 does not support readonly collection types such as Map or Set.");
      } else {
        warn("value cannot be made readonly: ".concat(typeof target2));
      }
    }
    return target2;
  }
  if (process.env.NODE_ENV !== "production" && !Object.isExtensible(target2)) {
    warn("Vue 2 does not support creating readonly proxy for non-extensible object.");
  }
  if (isReadonly(target2)) {
    return target2;
  }
  var existingFlag = shallow ? rawToShallowReadonlyFlag : rawToReadonlyFlag;
  var existingProxy = target2[existingFlag];
  if (existingProxy) {
    return existingProxy;
  }
  var proxy2 = Object.create(Object.getPrototypeOf(target2));
  def$1(target2, existingFlag, proxy2);
  def$1(proxy2, "__v_isReadonly", true);
  def$1(proxy2, "__v_raw", target2);
  if (isRef(target2)) {
    def$1(proxy2, RefFlag, true);
  }
  if (shallow || isShallow(target2)) {
    def$1(proxy2, "__v_isShallow", true);
  }
  var keys2 = Object.keys(target2);
  for (var i = 0; i < keys2.length; i++) {
    defineReadonlyProperty(proxy2, target2, keys2[i], shallow);
  }
  return proxy2;
}
function defineReadonlyProperty(proxy2, target2, key, shallow) {
  Object.defineProperty(proxy2, key, {
    enumerable: true,
    configurable: true,
    get: function() {
      var val = target2[key];
      return shallow || !isPlainObject(val) ? val : readonly(val);
    },
    set: function() {
      process.env.NODE_ENV !== "production" && warn('Set operation on key "'.concat(key, '" failed: target is readonly.'));
    }
  });
}
function shallowReadonly(target2) {
  return createReadonly(target2, true);
}
function computed(getterOrOptions, debugOptions) {
  var getter;
  var setter2;
  var onlyGetter = isFunction(getterOrOptions);
  if (onlyGetter) {
    getter = getterOrOptions;
    setter2 = process.env.NODE_ENV !== "production" ? function() {
      warn("Write operation failed: computed value is readonly");
    } : noop;
  } else {
    getter = getterOrOptions.get;
    setter2 = getterOrOptions.set;
  }
  var watcher = isServerRendering() ? null : new Watcher(currentInstance, getter, noop, { lazy: true });
  if (process.env.NODE_ENV !== "production" && watcher && debugOptions) {
    watcher.onTrack = debugOptions.onTrack;
    watcher.onTrigger = debugOptions.onTrigger;
  }
  var ref2 = {
    // some libs rely on the presence effect for checking computed refs
    // from normal refs, but the implementation doesn't matter
    effect: watcher,
    get value() {
      if (watcher) {
        if (watcher.dirty) {
          watcher.evaluate();
        }
        if (Dep.target) {
          if (process.env.NODE_ENV !== "production" && Dep.target.onTrack) {
            Dep.target.onTrack({
              effect: Dep.target,
              target: ref2,
              type: "get",
              key: "value"
            });
          }
          watcher.depend();
        }
        return watcher.value;
      } else {
        return getter();
      }
    },
    set value(newVal) {
      setter2(newVal);
    }
  };
  def$1(ref2, RefFlag, true);
  def$1(ref2, "__v_isReadonly", onlyGetter);
  return ref2;
}
var WATCHER = "watcher";
var WATCHER_CB = "".concat(WATCHER, " callback");
var WATCHER_GETTER = "".concat(WATCHER, " getter");
var WATCHER_CLEANUP = "".concat(WATCHER, " cleanup");
function watchEffect(effect, options) {
  return doWatch(effect, null, options);
}
function watchPostEffect(effect, options) {
  return doWatch(effect, null, process.env.NODE_ENV !== "production" ? __assign(__assign({}, options), { flush: "post" }) : { flush: "post" });
}
function watchSyncEffect(effect, options) {
  return doWatch(effect, null, process.env.NODE_ENV !== "production" ? __assign(__assign({}, options), { flush: "sync" }) : { flush: "sync" });
}
var INITIAL_WATCHER_VALUE = {};
function watch(source, cb, options) {
  if (process.env.NODE_ENV !== "production" && typeof cb !== "function") {
    warn("`watch(fn, options?)` signature has been moved to a separate API. Use `watchEffect(fn, options?)` instead. `watch` now only supports `watch(source, cb, options?) signature.");
  }
  return doWatch(source, cb, options);
}
function doWatch(source, cb, _a) {
  var _b = _a === void 0 ? emptyObject : _a, immediate = _b.immediate, deep = _b.deep, _c = _b.flush, flush = _c === void 0 ? "pre" : _c, onTrack = _b.onTrack, onTrigger = _b.onTrigger;
  if (process.env.NODE_ENV !== "production" && !cb) {
    if (immediate !== void 0) {
      warn('watch() "immediate" option is only respected when using the watch(source, callback, options?) signature.');
    }
    if (deep !== void 0) {
      warn('watch() "deep" option is only respected when using the watch(source, callback, options?) signature.');
    }
  }
  var warnInvalidSource = function(s) {
    warn("Invalid watch source: ".concat(s, ". A watch source can only be a getter/effect ") + "function, a ref, a reactive object, or an array of these types.");
  };
  var instance = currentInstance;
  var call = function(fn, type2, args) {
    if (args === void 0) {
      args = null;
    }
    return invokeWithErrorHandling(fn, null, args, instance, type2);
  };
  var getter;
  var forceTrigger = false;
  var isMultiSource = false;
  if (isRef(source)) {
    getter = function() {
      return source.value;
    };
    forceTrigger = isShallow(source);
  } else if (isReactive(source)) {
    getter = function() {
      source.__ob__.dep.depend();
      return source;
    };
    deep = true;
  } else if (isArray$1(source)) {
    isMultiSource = true;
    forceTrigger = source.some(function(s) {
      return isReactive(s) || isShallow(s);
    });
    getter = function() {
      return source.map(function(s) {
        if (isRef(s)) {
          return s.value;
        } else if (isReactive(s)) {
          return traverse(s);
        } else if (isFunction(s)) {
          return call(s, WATCHER_GETTER);
        } else {
          process.env.NODE_ENV !== "production" && warnInvalidSource(s);
        }
      });
    };
  } else if (isFunction(source)) {
    if (cb) {
      getter = function() {
        return call(source, WATCHER_GETTER);
      };
    } else {
      getter = function() {
        if (instance && instance._isDestroyed) {
          return;
        }
        if (cleanup) {
          cleanup();
        }
        return call(source, WATCHER, [onCleanup]);
      };
    }
  } else {
    getter = noop;
    process.env.NODE_ENV !== "production" && warnInvalidSource(source);
  }
  if (cb && deep) {
    var baseGetter_1 = getter;
    getter = function() {
      return traverse(baseGetter_1());
    };
  }
  var cleanup;
  var onCleanup = function(fn) {
    cleanup = watcher.onStop = function() {
      call(fn, WATCHER_CLEANUP);
    };
  };
  if (isServerRendering()) {
    onCleanup = noop;
    if (!cb) {
      getter();
    } else if (immediate) {
      call(cb, WATCHER_CB, [
        getter(),
        isMultiSource ? [] : void 0,
        onCleanup
      ]);
    }
    return noop;
  }
  var watcher = new Watcher(currentInstance, getter, noop, {
    lazy: true
  });
  watcher.noRecurse = !cb;
  var oldValue = isMultiSource ? [] : INITIAL_WATCHER_VALUE;
  watcher.run = function() {
    if (!watcher.active) {
      return;
    }
    if (cb) {
      var newValue = watcher.get();
      if (deep || forceTrigger || (isMultiSource ? newValue.some(function(v, i) {
        return hasChanged(v, oldValue[i]);
      }) : hasChanged(newValue, oldValue))) {
        if (cleanup) {
          cleanup();
        }
        call(cb, WATCHER_CB, [
          newValue,
          // pass undefined as the old value when it's changed for the first time
          oldValue === INITIAL_WATCHER_VALUE ? void 0 : oldValue,
          onCleanup
        ]);
        oldValue = newValue;
      }
    } else {
      watcher.get();
    }
  };
  if (flush === "sync") {
    watcher.update = watcher.run;
  } else if (flush === "post") {
    watcher.post = true;
    watcher.update = function() {
      return queueWatcher(watcher);
    };
  } else {
    watcher.update = function() {
      if (instance && instance === currentInstance && !instance._isMounted) {
        var buffer = instance._preWatchers || (instance._preWatchers = []);
        if (buffer.indexOf(watcher) < 0)
          buffer.push(watcher);
      } else {
        queueWatcher(watcher);
      }
    };
  }
  if (process.env.NODE_ENV !== "production") {
    watcher.onTrack = onTrack;
    watcher.onTrigger = onTrigger;
  }
  if (cb) {
    if (immediate) {
      watcher.run();
    } else {
      oldValue = watcher.get();
    }
  } else if (flush === "post" && instance) {
    instance.$once("hook:mounted", function() {
      return watcher.get();
    });
  } else {
    watcher.get();
  }
  return function() {
    watcher.teardown();
  };
}
var activeEffectScope;
var EffectScope = (
  /** @class */
  function() {
    function EffectScope2(detached) {
      if (detached === void 0) {
        detached = false;
      }
      this.detached = detached;
      this.active = true;
      this.effects = [];
      this.cleanups = [];
      this.parent = activeEffectScope;
      if (!detached && activeEffectScope) {
        this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;
      }
    }
    EffectScope2.prototype.run = function(fn) {
      if (this.active) {
        var currentEffectScope = activeEffectScope;
        try {
          activeEffectScope = this;
          return fn();
        } finally {
          activeEffectScope = currentEffectScope;
        }
      } else if (process.env.NODE_ENV !== "production") {
        warn("cannot run an inactive effect scope.");
      }
    };
    EffectScope2.prototype.on = function() {
      activeEffectScope = this;
    };
    EffectScope2.prototype.off = function() {
      activeEffectScope = this.parent;
    };
    EffectScope2.prototype.stop = function(fromParent) {
      if (this.active) {
        var i = void 0, l = void 0;
        for (i = 0, l = this.effects.length; i < l; i++) {
          this.effects[i].teardown();
        }
        for (i = 0, l = this.cleanups.length; i < l; i++) {
          this.cleanups[i]();
        }
        if (this.scopes) {
          for (i = 0, l = this.scopes.length; i < l; i++) {
            this.scopes[i].stop(true);
          }
        }
        if (!this.detached && this.parent && !fromParent) {
          var last = this.parent.scopes.pop();
          if (last && last !== this) {
            this.parent.scopes[this.index] = last;
            last.index = this.index;
          }
        }
        this.parent = void 0;
        this.active = false;
      }
    };
    return EffectScope2;
  }()
);
function effectScope(detached) {
  return new EffectScope(detached);
}
function recordEffectScope(effect, scope) {
  if (scope === void 0) {
    scope = activeEffectScope;
  }
  if (scope && scope.active) {
    scope.effects.push(effect);
  }
}
function getCurrentScope() {
  return activeEffectScope;
}
function onScopeDispose(fn) {
  if (activeEffectScope) {
    activeEffectScope.cleanups.push(fn);
  } else if (process.env.NODE_ENV !== "production") {
    warn("onScopeDispose() is called when there is no active effect scope to be associated with.");
  }
}
function provide(key, value) {
  if (!currentInstance) {
    if (process.env.NODE_ENV !== "production") {
      warn("provide() can only be used inside setup().");
    }
  } else {
    resolveProvided(currentInstance)[key] = value;
  }
}
function resolveProvided(vm) {
  var existing = vm._provided;
  var parentProvides = vm.$parent && vm.$parent._provided;
  if (parentProvides === existing) {
    return vm._provided = Object.create(parentProvides);
  } else {
    return existing;
  }
}
function inject(key, defaultValue, treatDefaultAsFactory) {
  if (treatDefaultAsFactory === void 0) {
    treatDefaultAsFactory = false;
  }
  var instance = currentInstance;
  if (instance) {
    var provides = instance.$parent && instance.$parent._provided;
    if (provides && key in provides) {
      return provides[key];
    } else if (arguments.length > 1) {
      return treatDefaultAsFactory && isFunction(defaultValue) ? defaultValue.call(instance) : defaultValue;
    } else if (process.env.NODE_ENV !== "production") {
      warn('injection "'.concat(String(key), '" not found.'));
    }
  } else if (process.env.NODE_ENV !== "production") {
    warn("inject() can only be used inside setup() or functional components.");
  }
}
var normalizeEvent = cached(function(name) {
  var passive = name.charAt(0) === "&";
  name = passive ? name.slice(1) : name;
  var once2 = name.charAt(0) === "~";
  name = once2 ? name.slice(1) : name;
  var capture = name.charAt(0) === "!";
  name = capture ? name.slice(1) : name;
  return {
    name,
    once: once2,
    capture,
    passive
  };
});
function createFnInvoker(fns, vm) {
  function invoker() {
    var fns2 = invoker.fns;
    if (isArray$1(fns2)) {
      var cloned = fns2.slice();
      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments, vm, "v-on handler");
      }
    } else {
      return invokeWithErrorHandling(fns2, null, arguments, vm, "v-on handler");
    }
  }
  invoker.fns = fns;
  return invoker;
}
function updateListeners(on, oldOn, add2, remove2, createOnceHandler2, vm) {
  var name, cur, old, event;
  for (name in on) {
    cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
      process.env.NODE_ENV !== "production" && warn('Invalid handler for event "'.concat(event.name, '": got ') + String(cur), vm);
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }
      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler2(event.name, cur, event.capture);
      }
      add2(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove2(event.name, oldOn[name], event.capture);
    }
  }
}
function mergeVNodeHook(def2, hookKey, hook) {
  if (def2 instanceof VNode) {
    def2 = def2.data.hook || (def2.data.hook = {});
  }
  var invoker;
  var oldHook = def2[hookKey];
  function wrappedHook() {
    hook.apply(this, arguments);
    remove$2(invoker.fns, wrappedHook);
  }
  if (isUndef(oldHook)) {
    invoker = createFnInvoker([wrappedHook]);
  } else {
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }
  invoker.merged = true;
  def2[hookKey] = invoker;
}
function extractPropsFromVNodeData(data, Ctor, tag2) {
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return;
  }
  var res = {};
  var attrs2 = data.attrs, props2 = data.props;
  if (isDef(attrs2) || isDef(props2)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      if (process.env.NODE_ENV !== "production") {
        var keyInLowerCase = key.toLowerCase();
        if (key !== keyInLowerCase && attrs2 && hasOwn(attrs2, keyInLowerCase)) {
          tip('Prop "'.concat(keyInLowerCase, '" is passed to component ') + "".concat(formatComponentName(
            // @ts-expect-error tag is string
            tag2 || Ctor
          ), ", but the declared prop name is") + ' "'.concat(key, '". ') + "Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM " + 'templates. You should probably use "'.concat(altKey, '" instead of "').concat(key, '".'));
        }
      }
      checkProp(res, props2, key, altKey, true) || checkProp(res, attrs2, key, altKey, false);
    }
  }
  return res;
}
function checkProp(res, hash, key, altKey, preserve) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true;
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true;
    }
  }
  return false;
}
function simpleNormalizeChildren(children) {
  for (var i = 0; i < children.length; i++) {
    if (isArray$1(children[i])) {
      return Array.prototype.concat.apply([], children);
    }
  }
  return children;
}
function normalizeChildren(children) {
  return isPrimitive(children) ? [createTextVNode(children)] : isArray$1(children) ? normalizeArrayChildren(children) : void 0;
}
function isTextNode(node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment);
}
function normalizeArrayChildren(children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === "boolean")
      continue;
    lastIndex = res.length - 1;
    last = res[lastIndex];
    if (isArray$1(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, "".concat(nestedIndex || "", "_").concat(i));
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + c[0].text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== "") {
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
          c.key = "__vlist".concat(nestedIndex, "_").concat(i, "__");
        }
        res.push(c);
      }
    }
  }
  return res;
}
function renderList(val, render6) {
  var ret = null, i, l, keys2, key;
  if (isArray$1(val) || typeof val === "string") {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render6(val[i], i);
    }
  } else if (typeof val === "number") {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render6(i + 1, i);
    }
  } else if (isObject$5(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator2 = val[Symbol.iterator]();
      var result = iterator2.next();
      while (!result.done) {
        ret.push(render6(result.value, ret.length));
        result = iterator2.next();
      }
    } else {
      keys2 = Object.keys(val);
      ret = new Array(keys2.length);
      for (i = 0, l = keys2.length; i < l; i++) {
        key = keys2[i];
        ret[i] = render6(val[key], key, i);
      }
    }
  }
  if (!isDef(ret)) {
    ret = [];
  }
  ret._isVList = true;
  return ret;
}
function renderSlot(name, fallbackRender, props2, bindObject) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;
  if (scopedSlotFn) {
    props2 = props2 || {};
    if (bindObject) {
      if (process.env.NODE_ENV !== "production" && !isObject$5(bindObject)) {
        warn("slot v-bind without argument expects an Object", this);
      }
      props2 = extend(extend({}, bindObject), props2);
    }
    nodes = scopedSlotFn(props2) || (isFunction(fallbackRender) ? fallbackRender() : fallbackRender);
  } else {
    nodes = this.$slots[name] || (isFunction(fallbackRender) ? fallbackRender() : fallbackRender);
  }
  var target2 = props2 && props2.slot;
  if (target2) {
    return this.$createElement("template", { slot: target2 }, nodes);
  } else {
    return nodes;
  }
}
function resolveFilter(id2) {
  return resolveAsset(this.$options, "filters", id2, true) || identity;
}
function isKeyNotMatch(expect, actual) {
  if (isArray$1(expect)) {
    return expect.indexOf(actual) === -1;
  } else {
    return expect !== actual;
  }
}
function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
  var mappedKeyCode = config$1.keyCodes[key] || builtInKeyCode;
  if (builtInKeyName && eventKeyName && !config$1.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName);
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode);
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key;
  }
  return eventKeyCode === void 0;
}
function bindObjectProps(data, tag2, value, asProp, isSync) {
  if (value) {
    if (!isObject$5(value)) {
      process.env.NODE_ENV !== "production" && warn("v-bind without argument expects an Object or Array value", this);
    } else {
      if (isArray$1(value)) {
        value = toObject$2(value);
      }
      var hash = void 0;
      var _loop_1 = function(key2) {
        if (key2 === "class" || key2 === "style" || isReservedAttribute(key2)) {
          hash = data;
        } else {
          var type2 = data.attrs && data.attrs.type;
          hash = asProp || config$1.mustUseProp(tag2, type2, key2) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
        }
        var camelizedKey = camelize(key2);
        var hyphenatedKey = hyphenate(key2);
        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key2] = value[key2];
          if (isSync) {
            var on = data.on || (data.on = {});
            on["update:".concat(key2)] = function($event) {
              value[key2] = $event;
            };
          }
        }
      };
      for (var key in value) {
        _loop_1(key);
      }
    }
  }
  return data;
}
function renderStatic(index2, isInFor) {
  var cached2 = this._staticTrees || (this._staticTrees = []);
  var tree = cached2[index2];
  if (tree && !isInFor) {
    return tree;
  }
  tree = cached2[index2] = this.$options.staticRenderFns[index2].call(
    this._renderProxy,
    this._c,
    this
    // for render fns generated for functional component templates
  );
  markStatic(tree, "__static__".concat(index2), false);
  return tree;
}
function markOnce(tree, index2, key) {
  markStatic(tree, "__once__".concat(index2).concat(key ? "_".concat(key) : ""), true);
  return tree;
}
function markStatic(tree, key, isOnce) {
  if (isArray$1(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== "string") {
        markStaticNode(tree[i], "".concat(key, "_").concat(i), isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}
function markStaticNode(node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}
function bindObjectListeners(data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      process.env.NODE_ENV !== "production" && warn("v-on without argument expects an Object value", this);
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data;
}
function resolveScopedSlots(fns, res, hasDynamicKeys, contentHashKey) {
  res = res || { $stable: !hasDynamicKeys };
  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];
    if (isArray$1(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      if (slot.proxy) {
        slot.fn.proxy = true;
      }
      res[slot.key] = slot.fn;
    }
  }
  if (contentHashKey) {
    res.$key = contentHashKey;
  }
  return res;
}
function bindDynamicKeys(baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];
    if (typeof key === "string" && key) {
      baseObj[values[i]] = values[i + 1];
    } else if (process.env.NODE_ENV !== "production" && key !== "" && key !== null) {
      warn("Invalid value for dynamic directive argument (expected string or null): ".concat(key), this);
    }
  }
  return baseObj;
}
function prependModifier(value, symbol2) {
  return typeof value === "string" ? symbol2 + value : value;
}
function installRenderHelpers(target2) {
  target2._o = markOnce;
  target2._n = toNumber$1;
  target2._s = toString$2;
  target2._l = renderList;
  target2._t = renderSlot;
  target2._q = looseEqual;
  target2._i = looseIndexOf;
  target2._m = renderStatic;
  target2._f = resolveFilter;
  target2._k = checkKeyCodes;
  target2._b = bindObjectProps;
  target2._v = createTextVNode;
  target2._e = createEmptyVNode;
  target2._u = resolveScopedSlots;
  target2._g = bindObjectListeners;
  target2._d = bindDynamicKeys;
  target2._p = prependModifier;
}
function resolveSlots(children, context) {
  if (!children || !children.length) {
    return {};
  }
  var slots = {};
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data;
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    if ((child.context === context || child.fnContext === context) && data && data.slot != null) {
      var name_1 = data.slot;
      var slot = slots[name_1] || (slots[name_1] = []);
      if (child.tag === "template") {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  }
  for (var name_2 in slots) {
    if (slots[name_2].every(isWhitespace)) {
      delete slots[name_2];
    }
  }
  return slots;
}
function isWhitespace(node) {
  return node.isComment && !node.asyncFactory || node.text === " ";
}
function isAsyncPlaceholder(node) {
  return node.isComment && node.asyncFactory;
}
function normalizeScopedSlots(ownerVm, scopedSlots, normalSlots, prevScopedSlots) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = scopedSlots ? !!scopedSlots.$stable : !hasNormalSlots;
  var key = scopedSlots && scopedSlots.$key;
  if (!scopedSlots) {
    res = {};
  } else if (scopedSlots._normalized) {
    return scopedSlots._normalized;
  } else if (isStable && prevScopedSlots && prevScopedSlots !== emptyObject && key === prevScopedSlots.$key && !hasNormalSlots && !prevScopedSlots.$hasNormal) {
    return prevScopedSlots;
  } else {
    res = {};
    for (var key_1 in scopedSlots) {
      if (scopedSlots[key_1] && key_1[0] !== "$") {
        res[key_1] = normalizeScopedSlot(ownerVm, normalSlots, key_1, scopedSlots[key_1]);
      }
    }
  }
  for (var key_2 in normalSlots) {
    if (!(key_2 in res)) {
      res[key_2] = proxyNormalSlot(normalSlots, key_2);
    }
  }
  if (scopedSlots && Object.isExtensible(scopedSlots)) {
    scopedSlots._normalized = res;
  }
  def$1(res, "$stable", isStable);
  def$1(res, "$key", key);
  def$1(res, "$hasNormal", hasNormalSlots);
  return res;
}
function normalizeScopedSlot(vm, normalSlots, key, fn) {
  var normalized = function() {
    var cur = currentInstance;
    setCurrentInstance(vm);
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === "object" && !isArray$1(res) ? [res] : normalizeChildren(res);
    var vnode = res && res[0];
    setCurrentInstance(cur);
    return res && (!vnode || res.length === 1 && vnode.isComment && !isAsyncPlaceholder(vnode)) ? void 0 : res;
  };
  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }
  return normalized;
}
function proxyNormalSlot(slots, key) {
  return function() {
    return slots[key];
  };
}
function initSetup(vm) {
  var options = vm.$options;
  var setup = options.setup;
  if (setup) {
    var ctx2 = vm._setupContext = createSetupContext(vm);
    setCurrentInstance(vm);
    pushTarget();
    var setupResult = invokeWithErrorHandling(setup, null, [vm._props || shallowReactive({}), ctx2], vm, "setup");
    popTarget();
    setCurrentInstance();
    if (isFunction(setupResult)) {
      options.render = setupResult;
    } else if (isObject$5(setupResult)) {
      if (process.env.NODE_ENV !== "production" && setupResult instanceof VNode) {
        warn("setup() should not return VNodes directly - return a render function instead.");
      }
      vm._setupState = setupResult;
      if (!setupResult.__sfc) {
        for (var key in setupResult) {
          if (!isReserved(key)) {
            proxyWithRefUnwrap(vm, setupResult, key);
          } else if (process.env.NODE_ENV !== "production") {
            warn("Avoid using variables that start with _ or $ in setup().");
          }
        }
      } else {
        var proxy2 = vm._setupProxy = {};
        for (var key in setupResult) {
          if (key !== "__sfc") {
            proxyWithRefUnwrap(proxy2, setupResult, key);
          }
        }
      }
    } else if (process.env.NODE_ENV !== "production" && setupResult !== void 0) {
      warn("setup() should return an object. Received: ".concat(setupResult === null ? "null" : typeof setupResult));
    }
  }
}
function createSetupContext(vm) {
  var exposeCalled = false;
  return {
    get attrs() {
      if (!vm._attrsProxy) {
        var proxy2 = vm._attrsProxy = {};
        def$1(proxy2, "_v_attr_proxy", true);
        syncSetupProxy(proxy2, vm.$attrs, emptyObject, vm, "$attrs");
      }
      return vm._attrsProxy;
    },
    get listeners() {
      if (!vm._listenersProxy) {
        var proxy2 = vm._listenersProxy = {};
        syncSetupProxy(proxy2, vm.$listeners, emptyObject, vm, "$listeners");
      }
      return vm._listenersProxy;
    },
    get slots() {
      return initSlotsProxy(vm);
    },
    emit: bind$1(vm.$emit, vm),
    expose: function(exposed) {
      if (process.env.NODE_ENV !== "production") {
        if (exposeCalled) {
          warn("expose() should be called only once per setup().", vm);
        }
        exposeCalled = true;
      }
      if (exposed) {
        Object.keys(exposed).forEach(function(key) {
          return proxyWithRefUnwrap(vm, exposed, key);
        });
      }
    }
  };
}
function syncSetupProxy(to, from, prev, instance, type2) {
  var changed = false;
  for (var key in from) {
    if (!(key in to)) {
      changed = true;
      defineProxyAttr(to, key, instance, type2);
    } else if (from[key] !== prev[key]) {
      changed = true;
    }
  }
  for (var key in to) {
    if (!(key in from)) {
      changed = true;
      delete to[key];
    }
  }
  return changed;
}
function defineProxyAttr(proxy2, key, instance, type2) {
  Object.defineProperty(proxy2, key, {
    enumerable: true,
    configurable: true,
    get: function() {
      return instance[type2][key];
    }
  });
}
function initSlotsProxy(vm) {
  if (!vm._slotsProxy) {
    syncSetupSlots(vm._slotsProxy = {}, vm.$scopedSlots);
  }
  return vm._slotsProxy;
}
function syncSetupSlots(to, from) {
  for (var key in from) {
    to[key] = from[key];
  }
  for (var key in to) {
    if (!(key in from)) {
      delete to[key];
    }
  }
}
function useSlots() {
  return getContext().slots;
}
function useAttrs() {
  return getContext().attrs;
}
function useListeners() {
  return getContext().listeners;
}
function getContext() {
  if (process.env.NODE_ENV !== "production" && !currentInstance) {
    warn("useContext() called without active instance.");
  }
  var vm = currentInstance;
  return vm._setupContext || (vm._setupContext = createSetupContext(vm));
}
function mergeDefaults(raw, defaults) {
  var props2 = isArray$1(raw) ? raw.reduce(function(normalized, p) {
    return normalized[p] = {}, normalized;
  }, {}) : raw;
  for (var key in defaults) {
    var opt = props2[key];
    if (opt) {
      if (isArray$1(opt) || isFunction(opt)) {
        props2[key] = { type: opt, default: defaults[key] };
      } else {
        opt.default = defaults[key];
      }
    } else if (opt === null) {
      props2[key] = { default: defaults[key] };
    } else if (process.env.NODE_ENV !== "production") {
      warn('props default key "'.concat(key, '" has no corresponding declaration.'));
    }
  }
  return props2;
}
function initRender(vm) {
  vm._vnode = null;
  vm._staticTrees = null;
  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode;
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = parentVnode ? normalizeScopedSlots(vm.$parent, parentVnode.data.scopedSlots, vm.$slots) : emptyObject;
  vm._c = function(a, b, c, d) {
    return createElement$1(vm, a, b, c, d, false);
  };
  vm.$createElement = function(a, b, c, d) {
    return createElement$1(vm, a, b, c, d, true);
  };
  var parentData = parentVnode && parentVnode.data;
  if (process.env.NODE_ENV !== "production") {
    defineReactive(vm, "$attrs", parentData && parentData.attrs || emptyObject, function() {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive(vm, "$listeners", options._parentListeners || emptyObject, function() {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {
    defineReactive(vm, "$attrs", parentData && parentData.attrs || emptyObject, null, true);
    defineReactive(vm, "$listeners", options._parentListeners || emptyObject, null, true);
  }
}
var currentRenderingInstance = null;
function renderMixin(Vue2) {
  installRenderHelpers(Vue2.prototype);
  Vue2.prototype.$nextTick = function(fn) {
    return nextTick(fn, this);
  };
  Vue2.prototype._render = function() {
    var vm = this;
    var _a = vm.$options, render6 = _a.render, _parentVnode = _a._parentVnode;
    if (_parentVnode && vm._isMounted) {
      vm.$scopedSlots = normalizeScopedSlots(vm.$parent, _parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots);
      if (vm._slotsProxy) {
        syncSetupSlots(vm._slotsProxy, vm.$scopedSlots);
      }
    }
    vm.$vnode = _parentVnode;
    var vnode;
    try {
      setCurrentInstance(vm);
      currentRenderingInstance = vm;
      vnode = render6.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render");
      if (process.env.NODE_ENV !== "production" && vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e2) {
          handleError(e2, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
      setCurrentInstance();
    }
    if (isArray$1(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    }
    if (!(vnode instanceof VNode)) {
      if (process.env.NODE_ENV !== "production" && isArray$1(vnode)) {
        warn("Multiple root nodes returned from render function. Render function should return a single root node.", vm);
      }
      vnode = createEmptyVNode();
    }
    vnode.parent = _parentVnode;
    return vnode;
  };
}
function ensureCtor(comp, base) {
  if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === "Module") {
    comp = comp.default;
  }
  return isObject$5(comp) ? base.extend(comp) : comp;
}
function createAsyncPlaceholder(factory, data, context, children, tag2) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data, context, children, tag: tag2 };
  return node;
}
function resolveAsyncComponent(factory, baseCtor) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp;
  }
  if (isDef(factory.resolved)) {
    return factory.resolved;
  }
  var owner = currentRenderingInstance;
  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    factory.owners.push(owner);
  }
  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp;
  }
  if (owner && !isDef(factory.owners)) {
    var owners_1 = factory.owners = [owner];
    var sync_1 = true;
    var timerLoading_1 = null;
    var timerTimeout_1 = null;
    owner.$on("hook:destroyed", function() {
      return remove$2(owners_1, owner);
    });
    var forceRender_1 = function(renderCompleted) {
      for (var i = 0, l = owners_1.length; i < l; i++) {
        owners_1[i].$forceUpdate();
      }
      if (renderCompleted) {
        owners_1.length = 0;
        if (timerLoading_1 !== null) {
          clearTimeout(timerLoading_1);
          timerLoading_1 = null;
        }
        if (timerTimeout_1 !== null) {
          clearTimeout(timerTimeout_1);
          timerTimeout_1 = null;
        }
      }
    };
    var resolve = once(function(res) {
      factory.resolved = ensureCtor(res, baseCtor);
      if (!sync_1) {
        forceRender_1(true);
      } else {
        owners_1.length = 0;
      }
    });
    var reject_1 = once(function(reason) {
      process.env.NODE_ENV !== "production" && warn("Failed to resolve async component: ".concat(String(factory)) + (reason ? "\nReason: ".concat(reason) : ""));
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender_1(true);
      }
    });
    var res_1 = factory(resolve, reject_1);
    if (isObject$5(res_1)) {
      if (isPromise(res_1)) {
        if (isUndef(factory.resolved)) {
          res_1.then(resolve, reject_1);
        }
      } else if (isPromise(res_1.component)) {
        res_1.component.then(resolve, reject_1);
        if (isDef(res_1.error)) {
          factory.errorComp = ensureCtor(res_1.error, baseCtor);
        }
        if (isDef(res_1.loading)) {
          factory.loadingComp = ensureCtor(res_1.loading, baseCtor);
          if (res_1.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading_1 = setTimeout(function() {
              timerLoading_1 = null;
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender_1(false);
              }
            }, res_1.delay || 200);
          }
        }
        if (isDef(res_1.timeout)) {
          timerTimeout_1 = setTimeout(function() {
            timerTimeout_1 = null;
            if (isUndef(factory.resolved)) {
              reject_1(process.env.NODE_ENV !== "production" ? "timeout (".concat(res_1.timeout, "ms)") : null);
            }
          }, res_1.timeout);
        }
      }
    }
    sync_1 = false;
    return factory.loading ? factory.loadingComp : factory.resolved;
  }
}
function getFirstComponentChild(children) {
  if (isArray$1(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c;
      }
    }
  }
}
var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;
function createElement$1(context, tag2, data, children, normalizationType, alwaysNormalize) {
  if (isArray$1(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = void 0;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag2, data, children, normalizationType);
}
function _createElement(context, tag2, data, children, normalizationType) {
  if (isDef(data) && isDef(data.__ob__)) {
    process.env.NODE_ENV !== "production" && warn("Avoid using observed data object as vnode data: ".concat(JSON.stringify(data), "\n") + "Always create fresh vnode data objects in each render!", context);
    return createEmptyVNode();
  }
  if (isDef(data) && isDef(data.is)) {
    tag2 = data.is;
  }
  if (!tag2) {
    return createEmptyVNode();
  }
  if (process.env.NODE_ENV !== "production" && isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
    warn("Avoid using non-primitive value as key, use string/number value instead.", context);
  }
  if (isArray$1(children) && isFunction(children[0])) {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag2 === "string") {
    var Ctor = void 0;
    ns = context.$vnode && context.$vnode.ns || config$1.getTagNamespace(tag2);
    if (config$1.isReservedTag(tag2)) {
      if (process.env.NODE_ENV !== "production" && isDef(data) && isDef(data.nativeOn) && data.tag !== "component") {
        warn("The .native modifier for v-on is only valid on components but it was used on <".concat(tag2, ">."), context);
      }
      vnode = new VNode(config$1.parsePlatformTagName(tag2), data, children, void 0, void 0, context);
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, "components", tag2))) {
      vnode = createComponent(Ctor, data, context, children, tag2);
    } else {
      vnode = new VNode(tag2, data, children, void 0, void 0, context);
    }
  } else {
    vnode = createComponent(tag2, data, context, children);
  }
  if (isArray$1(vnode)) {
    return vnode;
  } else if (isDef(vnode)) {
    if (isDef(ns))
      applyNS(vnode, ns);
    if (isDef(data))
      registerDeepBindings(data);
    return vnode;
  } else {
    return createEmptyVNode();
  }
}
function applyNS(vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === "foreignObject") {
    ns = void 0;
    force = true;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== "svg")) {
        applyNS(child, ns, force);
      }
    }
  }
}
function registerDeepBindings(data) {
  if (isObject$5(data.style)) {
    traverse(data.style);
  }
  if (isObject$5(data.class)) {
    traverse(data.class);
  }
}
function h(type2, props2, children) {
  if (!currentInstance) {
    process.env.NODE_ENV !== "production" && warn("globally imported h() can only be invoked when there is an active component instance, e.g. synchronously in a component's render or setup function.");
  }
  return createElement$1(currentInstance, type2, props2, children, 2, true);
}
function handleError(err, vm, info) {
  pushTarget();
  try {
    if (vm) {
      var cur = vm;
      while (cur = cur.$parent) {
        var hooks2 = cur.$options.errorCaptured;
        if (hooks2) {
          for (var i = 0; i < hooks2.length; i++) {
            try {
              var capture = hooks2[i].call(cur, err, vm, info) === false;
              if (capture)
                return;
            } catch (e) {
              globalHandleError(e, cur, "errorCaptured hook");
            }
          }
        }
      }
    }
    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}
function invokeWithErrorHandling(handler, context, args, vm, info) {
  var res;
  try {
    res = args ? handler.apply(context, args) : handler.call(context);
    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function(e) {
        return handleError(e, vm, info + " (Promise/async)");
      });
      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }
  return res;
}
function globalHandleError(err, vm, info) {
  if (config$1.errorHandler) {
    try {
      return config$1.errorHandler.call(null, err, vm, info);
    } catch (e) {
      if (e !== err) {
        logError(e, null, "config.errorHandler");
      }
    }
  }
  logError(err, vm, info);
}
function logError(err, vm, info) {
  if (process.env.NODE_ENV !== "production") {
    warn("Error in ".concat(info, ': "').concat(err.toString(), '"'), vm);
  }
  if (inBrowser && typeof console !== "undefined") {
    console.error(err);
  } else {
    throw err;
  }
}
var isUsingMicroTask = false;
var callbacks = [];
var pending = false;
function flushCallbacks() {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;
  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
}
var timerFunc;
if (typeof Promise !== "undefined" && isNative(Promise)) {
  var p_1 = Promise.resolve();
  timerFunc = function() {
    p_1.then(flushCallbacks);
    if (isIOS)
      setTimeout(noop);
  };
  isUsingMicroTask = true;
} else if (!isIE$1 && typeof MutationObserver !== "undefined" && (isNative(MutationObserver) || // PhantomJS and iOS 7.x
MutationObserver.toString() === "[object MutationObserverConstructor]")) {
  var counter_1 = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode_1 = document.createTextNode(String(counter_1));
  observer.observe(textNode_1, {
    characterData: true
  });
  timerFunc = function() {
    counter_1 = (counter_1 + 1) % 2;
    textNode_1.data = String(counter_1);
  };
  isUsingMicroTask = true;
} else if (typeof setImmediate !== "undefined" && isNative(setImmediate)) {
  timerFunc = function() {
    setImmediate(flushCallbacks);
  };
} else {
  timerFunc = function() {
    setTimeout(flushCallbacks, 0);
  };
}
function nextTick(cb, ctx2) {
  var _resolve;
  callbacks.push(function() {
    if (cb) {
      try {
        cb.call(ctx2);
      } catch (e) {
        handleError(e, ctx2, "nextTick");
      }
    } else if (_resolve) {
      _resolve(ctx2);
    }
  });
  if (!pending) {
    pending = true;
    timerFunc();
  }
  if (!cb && typeof Promise !== "undefined") {
    return new Promise(function(resolve) {
      _resolve = resolve;
    });
  }
}
function useCssModule(name) {
  if (name === void 0) {
    name = "$style";
  }
  {
    if (!currentInstance) {
      process.env.NODE_ENV !== "production" && warn("useCssModule must be called inside setup()");
      return emptyObject;
    }
    var mod = currentInstance[name];
    if (!mod) {
      process.env.NODE_ENV !== "production" && warn('Current instance does not have CSS module named "'.concat(name, '".'));
      return emptyObject;
    }
    return mod;
  }
}
function useCssVars(getter) {
  if (!inBrowser && true)
    return;
  var instance = currentInstance;
  if (!instance) {
    process.env.NODE_ENV !== "production" && warn("useCssVars is called without current active component instance.");
    return;
  }
  watchPostEffect(function() {
    var el = instance.$el;
    var vars = getter(instance, instance._setupProxy);
    if (el && el.nodeType === 1) {
      var style2 = el.style;
      for (var key in vars) {
        style2.setProperty("--".concat(key), vars[key]);
      }
    }
  });
}
function defineAsyncComponent(source) {
  if (isFunction(source)) {
    source = { loader: source };
  }
  var loader = source.loader, loadingComponent = source.loadingComponent, errorComponent = source.errorComponent, _a = source.delay, delay = _a === void 0 ? 200 : _a, timeout = source.timeout, _b = source.suspensible, suspensible = _b === void 0 ? false : _b, userOnError = source.onError;
  if (process.env.NODE_ENV !== "production" && suspensible) {
    warn("The suspensiblbe option for async components is not supported in Vue2. It is ignored.");
  }
  var pendingRequest = null;
  var retries = 0;
  var retry = function() {
    retries++;
    pendingRequest = null;
    return load();
  };
  var load = function() {
    var thisRequest;
    return pendingRequest || (thisRequest = pendingRequest = loader().catch(function(err) {
      err = err instanceof Error ? err : new Error(String(err));
      if (userOnError) {
        return new Promise(function(resolve, reject) {
          var userRetry = function() {
            return resolve(retry());
          };
          var userFail = function() {
            return reject(err);
          };
          userOnError(err, userRetry, userFail, retries + 1);
        });
      } else {
        throw err;
      }
    }).then(function(comp) {
      if (thisRequest !== pendingRequest && pendingRequest) {
        return pendingRequest;
      }
      if (process.env.NODE_ENV !== "production" && !comp) {
        warn("Async component loader resolved to undefined. If you are using retry(), make sure to return its return value.");
      }
      if (comp && (comp.__esModule || comp[Symbol.toStringTag] === "Module")) {
        comp = comp.default;
      }
      if (process.env.NODE_ENV !== "production" && comp && !isObject$5(comp) && !isFunction(comp)) {
        throw new Error("Invalid async component load result: ".concat(comp));
      }
      return comp;
    }));
  };
  return function() {
    var component = load();
    return {
      component,
      delay,
      timeout,
      error: errorComponent,
      loading: loadingComponent
    };
  };
}
function createLifeCycle(hookName) {
  return function(fn, target2) {
    if (target2 === void 0) {
      target2 = currentInstance;
    }
    if (!target2) {
      process.env.NODE_ENV !== "production" && warn("".concat(formatName(hookName), " is called when there is no active component instance to be ") + "associated with. Lifecycle injection APIs can only be used during execution of setup().");
      return;
    }
    return injectHook(target2, hookName, fn);
  };
}
function formatName(name) {
  if (name === "beforeDestroy") {
    name = "beforeUnmount";
  } else if (name === "destroyed") {
    name = "unmounted";
  }
  return "on".concat(name[0].toUpperCase() + name.slice(1));
}
function injectHook(instance, hookName, fn) {
  var options = instance.$options;
  options[hookName] = mergeLifecycleHook(options[hookName], fn);
}
var onBeforeMount = createLifeCycle("beforeMount");
var onMounted = createLifeCycle("mounted");
var onBeforeUpdate = createLifeCycle("beforeUpdate");
var onUpdated = createLifeCycle("updated");
var onBeforeUnmount = createLifeCycle("beforeDestroy");
var onUnmounted = createLifeCycle("destroyed");
var onActivated = createLifeCycle("activated");
var onDeactivated = createLifeCycle("deactivated");
var onServerPrefetch = createLifeCycle("serverPrefetch");
var onRenderTracked = createLifeCycle("renderTracked");
var onRenderTriggered = createLifeCycle("renderTriggered");
var injectErrorCapturedHook = createLifeCycle("errorCaptured");
function onErrorCaptured(hook, target2) {
  if (target2 === void 0) {
    target2 = currentInstance;
  }
  injectErrorCapturedHook(hook, target2);
}
var version = "2.7.14";
function defineComponent(options) {
  return options;
}
var seenObjects = new _Set();
function traverse(val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
  return val;
}
function _traverse(val, seen) {
  var i, keys2;
  var isA = isArray$1(val);
  if (!isA && !isObject$5(val) || val.__v_skip || Object.isFrozen(val) || val instanceof VNode) {
    return;
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return;
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--)
      _traverse(val[i], seen);
  } else if (isRef(val)) {
    _traverse(val.value, seen);
  } else {
    keys2 = Object.keys(val);
    i = keys2.length;
    while (i--)
      _traverse(val[keys2[i]], seen);
  }
}
var uid$1$1 = 0;
var Watcher = (
  /** @class */
  function() {
    function Watcher2(vm, expOrFn, cb, options, isRenderWatcher) {
      recordEffectScope(
        this,
        // if the active effect scope is manually created (not a component scope),
        // prioritize it
        activeEffectScope && !activeEffectScope._vm ? activeEffectScope : vm ? vm._scope : void 0
      );
      if ((this.vm = vm) && isRenderWatcher) {
        vm._watcher = this;
      }
      if (options) {
        this.deep = !!options.deep;
        this.user = !!options.user;
        this.lazy = !!options.lazy;
        this.sync = !!options.sync;
        this.before = options.before;
        if (process.env.NODE_ENV !== "production") {
          this.onTrack = options.onTrack;
          this.onTrigger = options.onTrigger;
        }
      } else {
        this.deep = this.user = this.lazy = this.sync = false;
      }
      this.cb = cb;
      this.id = ++uid$1$1;
      this.active = true;
      this.post = false;
      this.dirty = this.lazy;
      this.deps = [];
      this.newDeps = [];
      this.depIds = new _Set();
      this.newDepIds = new _Set();
      this.expression = process.env.NODE_ENV !== "production" ? expOrFn.toString() : "";
      if (isFunction(expOrFn)) {
        this.getter = expOrFn;
      } else {
        this.getter = parsePath(expOrFn);
        if (!this.getter) {
          this.getter = noop;
          process.env.NODE_ENV !== "production" && warn('Failed watching path: "'.concat(expOrFn, '" ') + "Watcher only accepts simple dot-delimited paths. For full control, use a function instead.", vm);
        }
      }
      this.value = this.lazy ? void 0 : this.get();
    }
    Watcher2.prototype.get = function() {
      pushTarget(this);
      var value;
      var vm = this.vm;
      try {
        value = this.getter.call(vm, vm);
      } catch (e) {
        if (this.user) {
          handleError(e, vm, 'getter for watcher "'.concat(this.expression, '"'));
        } else {
          throw e;
        }
      } finally {
        if (this.deep) {
          traverse(value);
        }
        popTarget();
        this.cleanupDeps();
      }
      return value;
    };
    Watcher2.prototype.addDep = function(dep) {
      var id2 = dep.id;
      if (!this.newDepIds.has(id2)) {
        this.newDepIds.add(id2);
        this.newDeps.push(dep);
        if (!this.depIds.has(id2)) {
          dep.addSub(this);
        }
      }
    };
    Watcher2.prototype.cleanupDeps = function() {
      var i = this.deps.length;
      while (i--) {
        var dep = this.deps[i];
        if (!this.newDepIds.has(dep.id)) {
          dep.removeSub(this);
        }
      }
      var tmp = this.depIds;
      this.depIds = this.newDepIds;
      this.newDepIds = tmp;
      this.newDepIds.clear();
      tmp = this.deps;
      this.deps = this.newDeps;
      this.newDeps = tmp;
      this.newDeps.length = 0;
    };
    Watcher2.prototype.update = function() {
      if (this.lazy) {
        this.dirty = true;
      } else if (this.sync) {
        this.run();
      } else {
        queueWatcher(this);
      }
    };
    Watcher2.prototype.run = function() {
      if (this.active) {
        var value = this.get();
        if (value !== this.value || // Deep watchers and watchers on Object/Arrays should fire even
        // when the value is the same, because the value may
        // have mutated.
        isObject$5(value) || this.deep) {
          var oldValue = this.value;
          this.value = value;
          if (this.user) {
            var info = 'callback for watcher "'.concat(this.expression, '"');
            invokeWithErrorHandling(this.cb, this.vm, [value, oldValue], this.vm, info);
          } else {
            this.cb.call(this.vm, value, oldValue);
          }
        }
      }
    };
    Watcher2.prototype.evaluate = function() {
      this.value = this.get();
      this.dirty = false;
    };
    Watcher2.prototype.depend = function() {
      var i = this.deps.length;
      while (i--) {
        this.deps[i].depend();
      }
    };
    Watcher2.prototype.teardown = function() {
      if (this.vm && !this.vm._isBeingDestroyed) {
        remove$2(this.vm._scope.effects, this);
      }
      if (this.active) {
        var i = this.deps.length;
        while (i--) {
          this.deps[i].removeSub(this);
        }
        this.active = false;
        if (this.onStop) {
          this.onStop();
        }
      }
    };
    return Watcher2;
  }()
);
var mark;
var measure;
if (process.env.NODE_ENV !== "production") {
  var perf_1 = inBrowser && window.performance;
  if (perf_1 && // @ts-ignore
  perf_1.mark && // @ts-ignore
  perf_1.measure && // @ts-ignore
  perf_1.clearMarks && // @ts-ignore
  perf_1.clearMeasures) {
    mark = function(tag2) {
      return perf_1.mark(tag2);
    };
    measure = function(name, startTag, endTag) {
      perf_1.measure(name, startTag, endTag);
      perf_1.clearMarks(startTag);
      perf_1.clearMarks(endTag);
    };
  }
}
function initEvents(vm) {
  vm._events = /* @__PURE__ */ Object.create(null);
  vm._hasHookEvent = false;
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}
var target$1;
function add$1(event, fn) {
  target$1.$on(event, fn);
}
function remove$1(event, fn) {
  target$1.$off(event, fn);
}
function createOnceHandler$1(event, fn) {
  var _target = target$1;
  return function onceHandler() {
    var res = fn.apply(null, arguments);
    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  };
}
function updateComponentListeners(vm, listeners, oldListeners) {
  target$1 = vm;
  updateListeners(listeners, oldListeners || {}, add$1, remove$1, createOnceHandler$1, vm);
  target$1 = void 0;
}
function eventsMixin(Vue2) {
  var hookRE = /^hook:/;
  Vue2.prototype.$on = function(event, fn) {
    var vm = this;
    if (isArray$1(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm;
  };
  Vue2.prototype.$once = function(event, fn) {
    var vm = this;
    function on() {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm;
  };
  Vue2.prototype.$off = function(event, fn) {
    var vm = this;
    if (!arguments.length) {
      vm._events = /* @__PURE__ */ Object.create(null);
      return vm;
    }
    if (isArray$1(event)) {
      for (var i_1 = 0, l = event.length; i_1 < l; i_1++) {
        vm.$off(event[i_1], fn);
      }
      return vm;
    }
    var cbs = vm._events[event];
    if (!cbs) {
      return vm;
    }
    if (!fn) {
      vm._events[event] = null;
      return vm;
    }
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break;
      }
    }
    return vm;
  };
  Vue2.prototype.$emit = function(event) {
    var vm = this;
    if (process.env.NODE_ENV !== "production") {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip('Event "'.concat(lowerCaseEvent, '" is emitted in component ') + "".concat(formatComponentName(vm), ' but the handler is registered for "').concat(event, '". ') + "Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. " + 'You should probably use "'.concat(hyphenate(event), '" instead of "').concat(event, '".'));
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = 'event handler for "'.concat(event, '"');
      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }
    return vm;
  };
}
var activeInstance = null;
var isUpdatingChildComponent = false;
function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function() {
    activeInstance = prevActiveInstance;
  };
}
function initLifecycle(vm) {
  var options = vm.$options;
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }
  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;
  vm.$children = [];
  vm.$refs = {};
  vm._provided = parent ? parent._provided : /* @__PURE__ */ Object.create(null);
  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}
function lifecycleMixin(Vue2) {
  Vue2.prototype._update = function(vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode;
    if (!prevVnode) {
      vm.$el = vm.__patch__(
        vm.$el,
        vnode,
        hydrating,
        false
        /* removeOnly */
      );
    } else {
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    restoreActiveInstance();
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    var wrapper = vm;
    while (wrapper && wrapper.$vnode && wrapper.$parent && wrapper.$vnode === wrapper.$parent._vnode) {
      wrapper.$parent.$el = wrapper.$el;
      wrapper = wrapper.$parent;
    }
  };
  Vue2.prototype.$forceUpdate = function() {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };
  Vue2.prototype.$destroy = function() {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return;
    }
    callHook$1(vm, "beforeDestroy");
    vm._isBeingDestroyed = true;
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove$2(parent.$children, vm);
    }
    vm._scope.stop();
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    vm._isDestroyed = true;
    vm.__patch__(vm._vnode, null);
    callHook$1(vm, "destroyed");
    vm.$off();
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}
function mountComponent(vm, el, hydrating) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    if (process.env.NODE_ENV !== "production") {
      if (vm.$options.template && vm.$options.template.charAt(0) !== "#" || vm.$options.el || el) {
        warn("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.", vm);
      } else {
        warn("Failed to mount component: template or render function not defined.", vm);
      }
    }
  }
  callHook$1(vm, "beforeMount");
  var updateComponent;
  if (process.env.NODE_ENV !== "production" && config$1.performance && mark) {
    updateComponent = function() {
      var name = vm._name;
      var id2 = vm._uid;
      var startTag = "vue-perf-start:".concat(id2);
      var endTag = "vue-perf-end:".concat(id2);
      mark(startTag);
      var vnode = vm._render();
      mark(endTag);
      measure("vue ".concat(name, " render"), startTag, endTag);
      mark(startTag);
      vm._update(vnode, hydrating);
      mark(endTag);
      measure("vue ".concat(name, " patch"), startTag, endTag);
    };
  } else {
    updateComponent = function() {
      vm._update(vm._render(), hydrating);
    };
  }
  var watcherOptions = {
    before: function() {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook$1(vm, "beforeUpdate");
      }
    }
  };
  if (process.env.NODE_ENV !== "production") {
    watcherOptions.onTrack = function(e) {
      return callHook$1(vm, "renderTracked", [e]);
    };
    watcherOptions.onTrigger = function(e) {
      return callHook$1(vm, "renderTriggered", [e]);
    };
  }
  new Watcher(
    vm,
    updateComponent,
    noop,
    watcherOptions,
    true
    /* isRenderWatcher */
  );
  hydrating = false;
  var preWatchers = vm._preWatchers;
  if (preWatchers) {
    for (var i = 0; i < preWatchers.length; i++) {
      preWatchers[i].run();
    }
  }
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook$1(vm, "mounted");
  }
  return vm;
}
function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
  if (process.env.NODE_ENV !== "production") {
    isUpdatingChildComponent = true;
  }
  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(newScopedSlots && !newScopedSlots.$stable || oldScopedSlots !== emptyObject && !oldScopedSlots.$stable || newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key || !newScopedSlots && vm.$scopedSlots.$key);
  var needsForceUpdate = !!(renderChildren || // has new static slots
  vm.$options._renderChildren || // has old static slots
  hasDynamicScopedSlot);
  var prevVNode = vm.$vnode;
  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode;
  if (vm._vnode) {
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;
  var attrs2 = parentVnode.data.attrs || emptyObject;
  if (vm._attrsProxy) {
    if (syncSetupProxy(vm._attrsProxy, attrs2, prevVNode.data && prevVNode.data.attrs || emptyObject, vm, "$attrs")) {
      needsForceUpdate = true;
    }
  }
  vm.$attrs = attrs2;
  listeners = listeners || emptyObject;
  var prevListeners = vm.$options._parentListeners;
  if (vm._listenersProxy) {
    syncSetupProxy(vm._listenersProxy, listeners, prevListeners || emptyObject, vm, "$listeners");
  }
  vm.$listeners = vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, prevListeners);
  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props2 = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props;
      props2[key] = validateProp(key, propOptions, propsData, vm);
    }
    toggleObserving(true);
    vm.$options.propsData = propsData;
  }
  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }
  if (process.env.NODE_ENV !== "production") {
    isUpdatingChildComponent = false;
  }
}
function isInInactiveTree(vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive)
      return true;
  }
  return false;
}
function activateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return;
    }
  } else if (vm._directInactive) {
    return;
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook$1(vm, "activated");
  }
}
function deactivateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return;
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook$1(vm, "deactivated");
  }
}
function callHook$1(vm, hook, args, setContext) {
  if (setContext === void 0) {
    setContext = true;
  }
  pushTarget();
  var prev = currentInstance;
  setContext && setCurrentInstance(vm);
  var handlers = vm.$options[hook];
  var info = "".concat(hook, " hook");
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, args || null, vm, info);
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit("hook:" + hook);
  }
  setContext && setCurrentInstance(prev);
  popTarget();
}
var MAX_UPDATE_COUNT = 100;
var queue = [];
var activatedChildren = [];
var has$7 = {};
var circular = {};
var waiting = false;
var flushing = false;
var index$2 = 0;
function resetSchedulerState() {
  index$2 = queue.length = activatedChildren.length = 0;
  has$7 = {};
  if (process.env.NODE_ENV !== "production") {
    circular = {};
  }
  waiting = flushing = false;
}
var currentFlushTimestamp = 0;
var getNow = Date.now;
if (inBrowser && !isIE$1) {
  var performance_1 = window.performance;
  if (performance_1 && typeof performance_1.now === "function" && getNow() > document.createEvent("Event").timeStamp) {
    getNow = function() {
      return performance_1.now();
    };
  }
}
var sortCompareFn = function(a, b) {
  if (a.post) {
    if (!b.post)
      return 1;
  } else if (b.post) {
    return -1;
  }
  return a.id - b.id;
};
function flushSchedulerQueue() {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id2;
  queue.sort(sortCompareFn);
  for (index$2 = 0; index$2 < queue.length; index$2++) {
    watcher = queue[index$2];
    if (watcher.before) {
      watcher.before();
    }
    id2 = watcher.id;
    has$7[id2] = null;
    watcher.run();
    if (process.env.NODE_ENV !== "production" && has$7[id2] != null) {
      circular[id2] = (circular[id2] || 0) + 1;
      if (circular[id2] > MAX_UPDATE_COUNT) {
        warn("You may have an infinite update loop " + (watcher.user ? 'in watcher with expression "'.concat(watcher.expression, '"') : "in a component render function."), watcher.vm);
        break;
      }
    }
  }
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();
  resetSchedulerState();
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);
  cleanupDeps();
  if (devtools && config$1.devtools) {
    devtools.emit("flush");
  }
}
function callUpdatedHooks(queue2) {
  var i = queue2.length;
  while (i--) {
    var watcher = queue2[i];
    var vm = watcher.vm;
    if (vm && vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook$1(vm, "updated");
    }
  }
}
function queueActivatedComponent(vm) {
  vm._inactive = false;
  activatedChildren.push(vm);
}
function callActivatedHooks(queue2) {
  for (var i = 0; i < queue2.length; i++) {
    queue2[i]._inactive = true;
    activateChildComponent(
      queue2[i],
      true
      /* true */
    );
  }
}
function queueWatcher(watcher) {
  var id2 = watcher.id;
  if (has$7[id2] != null) {
    return;
  }
  if (watcher === Dep.target && watcher.noRecurse) {
    return;
  }
  has$7[id2] = true;
  if (!flushing) {
    queue.push(watcher);
  } else {
    var i = queue.length - 1;
    while (i > index$2 && queue[i].id > watcher.id) {
      i--;
    }
    queue.splice(i + 1, 0, watcher);
  }
  if (!waiting) {
    waiting = true;
    if (process.env.NODE_ENV !== "production" && !config$1.async) {
      flushSchedulerQueue();
      return;
    }
    nextTick(flushSchedulerQueue);
  }
}
function initProvide(vm) {
  var provideOption = vm.$options.provide;
  if (provideOption) {
    var provided = isFunction(provideOption) ? provideOption.call(vm) : provideOption;
    if (!isObject$5(provided)) {
      return;
    }
    var source = resolveProvided(vm);
    var keys2 = hasSymbol ? Reflect.ownKeys(provided) : Object.keys(provided);
    for (var i = 0; i < keys2.length; i++) {
      var key = keys2[i];
      Object.defineProperty(source, key, Object.getOwnPropertyDescriptor(provided, key));
    }
  }
}
function initInjections(vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function(key) {
      if (process.env.NODE_ENV !== "production") {
        defineReactive(vm, key, result[key], function() {
          warn("Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. " + 'injection being mutated: "'.concat(key, '"'), vm);
        });
      } else {
        defineReactive(vm, key, result[key]);
      }
    });
    toggleObserving(true);
  }
}
function resolveInject(inject2, vm) {
  if (inject2) {
    var result = /* @__PURE__ */ Object.create(null);
    var keys2 = hasSymbol ? Reflect.ownKeys(inject2) : Object.keys(inject2);
    for (var i = 0; i < keys2.length; i++) {
      var key = keys2[i];
      if (key === "__ob__")
        continue;
      var provideKey = inject2[key].from;
      if (provideKey in vm._provided) {
        result[key] = vm._provided[provideKey];
      } else if ("default" in inject2[key]) {
        var provideDefault = inject2[key].default;
        result[key] = isFunction(provideDefault) ? provideDefault.call(vm) : provideDefault;
      } else if (process.env.NODE_ENV !== "production") {
        warn('Injection "'.concat(key, '" not found'), vm);
      }
    }
    return result;
  }
}
function FunctionalRenderContext(data, props2, children, parent, Ctor) {
  var _this = this;
  var options = Ctor.options;
  var contextVm;
  if (hasOwn(parent, "_uid")) {
    contextVm = Object.create(parent);
    contextVm._original = parent;
  } else {
    contextVm = parent;
    parent = parent._original;
  }
  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;
  this.data = data;
  this.props = props2;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);
  this.slots = function() {
    if (!_this.$slots) {
      normalizeScopedSlots(parent, data.scopedSlots, _this.$slots = resolveSlots(children, parent));
    }
    return _this.$slots;
  };
  Object.defineProperty(this, "scopedSlots", {
    enumerable: true,
    get: function() {
      return normalizeScopedSlots(parent, data.scopedSlots, this.slots());
    }
  });
  if (isCompiled) {
    this.$options = options;
    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(parent, data.scopedSlots, this.$slots);
  }
  if (options._scopeId) {
    this._c = function(a, b, c, d) {
      var vnode = createElement$1(contextVm, a, b, c, d, needNormalization);
      if (vnode && !isArray$1(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }
      return vnode;
    };
  } else {
    this._c = function(a, b, c, d) {
      return createElement$1(contextVm, a, b, c, d, needNormalization);
    };
  }
}
installRenderHelpers(FunctionalRenderContext.prototype);
function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {
  var options = Ctor.options;
  var props2 = {};
  var propOptions = options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props2[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs))
      mergeProps(props2, data.attrs);
    if (isDef(data.props))
      mergeProps(props2, data.props);
  }
  var renderContext = new FunctionalRenderContext(data, props2, children, contextVm, Ctor);
  var vnode = options.render.call(null, renderContext._c, renderContext);
  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext);
  } else if (isArray$1(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);
    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }
    return res;
  }
}
function cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) {
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;
  if (process.env.NODE_ENV !== "production") {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }
  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }
  return clone;
}
function mergeProps(to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}
function getComponentName(options) {
  return options.name || options.__name || options._componentTag;
}
var componentVNodeHooks = {
  init: function(vnode, hydrating) {
    if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {
      var mountedNode = vnode;
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance);
      child.$mount(hydrating ? vnode.elm : void 0, hydrating);
    }
  },
  prepatch: function(oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(
      child,
      options.propsData,
      // updated props
      options.listeners,
      // updated listeners
      vnode,
      // new parent vnode
      options.children
      // new children
    );
  },
  insert: function(vnode) {
    var context = vnode.context, componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook$1(componentInstance, "mounted");
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(
          componentInstance,
          true
          /* direct */
        );
      }
    }
  },
  destroy: function(vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(
          componentInstance,
          true
          /* direct */
        );
      }
    }
  }
};
var hooksToMerge = Object.keys(componentVNodeHooks);
function createComponent(Ctor, data, context, children, tag2) {
  if (isUndef(Ctor)) {
    return;
  }
  var baseCtor = context.$options._base;
  if (isObject$5(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }
  if (typeof Ctor !== "function") {
    if (process.env.NODE_ENV !== "production") {
      warn("Invalid Component definition: ".concat(String(Ctor)), context);
    }
    return;
  }
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
    if (Ctor === void 0) {
      return createAsyncPlaceholder(asyncFactory, data, context, children, tag2);
    }
  }
  data = data || {};
  resolveConstructorOptions(Ctor);
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }
  var propsData = extractPropsFromVNodeData(data, Ctor, tag2);
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children);
  }
  var listeners = data.on;
  data.on = data.nativeOn;
  if (isTrue(Ctor.options.abstract)) {
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }
  installComponentHooks(data);
  var name = getComponentName(Ctor.options) || tag2;
  var vnode = new VNode(
    // @ts-expect-error
    "vue-component-".concat(Ctor.cid).concat(name ? "-".concat(name) : ""),
    data,
    void 0,
    void 0,
    void 0,
    context,
    // @ts-expect-error
    { Ctor, propsData, listeners, tag: tag2, children },
    asyncFactory
  );
  return vnode;
}
function createComponentInstanceForVnode(vnode, parent) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent
  };
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options);
}
function installComponentHooks(data) {
  var hooks2 = data.hook || (data.hook = {});
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks2[key];
    var toMerge = componentVNodeHooks[key];
    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks2[key] = existing ? mergeHook(toMerge, existing) : toMerge;
    }
  }
}
function mergeHook(f1, f2) {
  var merged = function(a, b) {
    f1(a, b);
    f2(a, b);
  };
  merged._merged = true;
  return merged;
}
function transformModel(options, data) {
  var prop = options.model && options.model.prop || "value";
  var event = options.model && options.model.event || "input";
  (data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;
  if (isDef(existing)) {
    if (isArray$1(existing) ? existing.indexOf(callback) === -1 : existing !== callback) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}
var warn = noop;
var tip = noop;
var generateComponentTrace;
var formatComponentName;
if (process.env.NODE_ENV !== "production") {
  var hasConsole_1 = typeof console !== "undefined";
  var classifyRE_1 = /(?:^|[-_])(\w)/g;
  var classify_1 = function(str) {
    return str.replace(classifyRE_1, function(c) {
      return c.toUpperCase();
    }).replace(/[-_]/g, "");
  };
  warn = function(msg, vm) {
    if (vm === void 0) {
      vm = currentInstance;
    }
    var trace = vm ? generateComponentTrace(vm) : "";
    if (config$1.warnHandler) {
      config$1.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole_1 && !config$1.silent) {
      console.error("[Vue warn]: ".concat(msg).concat(trace));
    }
  };
  tip = function(msg, vm) {
    if (hasConsole_1 && !config$1.silent) {
      console.warn("[Vue tip]: ".concat(msg) + (vm ? generateComponentTrace(vm) : ""));
    }
  };
  formatComponentName = function(vm, includeFile) {
    if (vm.$root === vm) {
      return "<Root>";
    }
    var options = isFunction(vm) && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm;
    var name = getComponentName(options);
    var file = options.__file;
    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }
    return (name ? "<".concat(classify_1(name), ">") : "<Anonymous>") + (file && includeFile !== false ? " at ".concat(file) : "");
  };
  var repeat_1 = function(str, n) {
    var res = "";
    while (n) {
      if (n % 2 === 1)
        res += str;
      if (n > 1)
        str += str;
      n >>= 1;
    }
    return res;
  };
  generateComponentTrace = function(vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;
      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];
          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue;
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }
        tree.push(vm);
        vm = vm.$parent;
      }
      return "\n\nfound in\n\n" + tree.map(function(vm2, i) {
        return "".concat(i === 0 ? "---> " : repeat_1(" ", 5 + i * 2)).concat(isArray$1(vm2) ? "".concat(formatComponentName(vm2[0]), "... (").concat(vm2[1], " recursive calls)") : formatComponentName(vm2));
      }).join("\n");
    } else {
      return "\n\n(found in ".concat(formatComponentName(vm), ")");
    }
  };
}
var strats = config$1.optionMergeStrategies;
if (process.env.NODE_ENV !== "production") {
  strats.el = strats.propsData = function(parent, child, vm, key) {
    if (!vm) {
      warn('option "'.concat(key, '" can only be used during instance ') + "creation with the `new` keyword.");
    }
    return defaultStrat(parent, child);
  };
}
function mergeData(to, from, recursive) {
  if (recursive === void 0) {
    recursive = true;
  }
  if (!from)
    return to;
  var key, toVal, fromVal;
  var keys2 = hasSymbol ? Reflect.ownKeys(from) : Object.keys(from);
  for (var i = 0; i < keys2.length; i++) {
    key = keys2[i];
    if (key === "__ob__")
      continue;
    toVal = to[key];
    fromVal = from[key];
    if (!recursive || !hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (toVal !== fromVal && isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }
  return to;
}
function mergeDataOrFn(parentVal, childVal, vm) {
  if (!vm) {
    if (!childVal) {
      return parentVal;
    }
    if (!parentVal) {
      return childVal;
    }
    return function mergedDataFn() {
      return mergeData(isFunction(childVal) ? childVal.call(this, this) : childVal, isFunction(parentVal) ? parentVal.call(this, this) : parentVal);
    };
  } else {
    return function mergedInstanceDataFn() {
      var instanceData = isFunction(childVal) ? childVal.call(vm, vm) : childVal;
      var defaultData = isFunction(parentVal) ? parentVal.call(vm, vm) : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData);
      } else {
        return defaultData;
      }
    };
  }
}
strats.data = function(parentVal, childVal, vm) {
  if (!vm) {
    if (childVal && typeof childVal !== "function") {
      process.env.NODE_ENV !== "production" && warn('The "data" option should be a function that returns a per-instance value in component definitions.', vm);
      return parentVal;
    }
    return mergeDataOrFn(parentVal, childVal);
  }
  return mergeDataOrFn(parentVal, childVal, vm);
};
function mergeLifecycleHook(parentVal, childVal) {
  var res = childVal ? parentVal ? parentVal.concat(childVal) : isArray$1(childVal) ? childVal : [childVal] : parentVal;
  return res ? dedupeHooks(res) : res;
}
function dedupeHooks(hooks2) {
  var res = [];
  for (var i = 0; i < hooks2.length; i++) {
    if (res.indexOf(hooks2[i]) === -1) {
      res.push(hooks2[i]);
    }
  }
  return res;
}
LIFECYCLE_HOOKS.forEach(function(hook) {
  strats[hook] = mergeLifecycleHook;
});
function mergeAssets(parentVal, childVal, vm, key) {
  var res = Object.create(parentVal || null);
  if (childVal) {
    process.env.NODE_ENV !== "production" && assertObjectType(key, childVal, vm);
    return extend(res, childVal);
  } else {
    return res;
  }
}
ASSET_TYPES.forEach(function(type2) {
  strats[type2 + "s"] = mergeAssets;
});
strats.watch = function(parentVal, childVal, vm, key) {
  if (parentVal === nativeWatch)
    parentVal = void 0;
  if (childVal === nativeWatch)
    childVal = void 0;
  if (!childVal)
    return Object.create(parentVal || null);
  if (process.env.NODE_ENV !== "production") {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal)
    return childVal;
  var ret = {};
  extend(ret, parentVal);
  for (var key_1 in childVal) {
    var parent_1 = ret[key_1];
    var child = childVal[key_1];
    if (parent_1 && !isArray$1(parent_1)) {
      parent_1 = [parent_1];
    }
    ret[key_1] = parent_1 ? parent_1.concat(child) : isArray$1(child) ? child : [child];
  }
  return ret;
};
strats.props = strats.methods = strats.inject = strats.computed = function(parentVal, childVal, vm, key) {
  if (childVal && process.env.NODE_ENV !== "production") {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal)
    return childVal;
  var ret = /* @__PURE__ */ Object.create(null);
  extend(ret, parentVal);
  if (childVal)
    extend(ret, childVal);
  return ret;
};
strats.provide = function(parentVal, childVal) {
  if (!parentVal)
    return childVal;
  return function() {
    var ret = /* @__PURE__ */ Object.create(null);
    mergeData(ret, isFunction(parentVal) ? parentVal.call(this) : parentVal);
    if (childVal) {
      mergeData(
        ret,
        isFunction(childVal) ? childVal.call(this) : childVal,
        false
        // non-recursive
      );
    }
    return ret;
  };
};
var defaultStrat = function(parentVal, childVal) {
  return childVal === void 0 ? parentVal : childVal;
};
function checkComponents(options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}
function validateComponentName(name) {
  if (!new RegExp("^[a-zA-Z][\\-\\.0-9_".concat(unicodeRegExp.source, "]*$")).test(name)) {
    warn('Invalid component name: "' + name + '". Component names should conform to valid custom element name in html5 specification.');
  }
  if (isBuiltInTag(name) || config$1.isReservedTag(name)) {
    warn("Do not use built-in or reserved HTML elements as component id: " + name);
  }
}
function normalizeProps(options, vm) {
  var props2 = options.props;
  if (!props2)
    return;
  var res = {};
  var i, val, name;
  if (isArray$1(props2)) {
    i = props2.length;
    while (i--) {
      val = props2[i];
      if (typeof val === "string") {
        name = camelize(val);
        res[name] = { type: null };
      } else if (process.env.NODE_ENV !== "production") {
        warn("props must be strings when using array syntax.");
      }
    }
  } else if (isPlainObject(props2)) {
    for (var key in props2) {
      val = props2[key];
      name = camelize(key);
      res[name] = isPlainObject(val) ? val : { type: val };
    }
  } else if (process.env.NODE_ENV !== "production") {
    warn('Invalid value for option "props": expected an Array or an Object, ' + "but got ".concat(toRawType(props2), "."), vm);
  }
  options.props = res;
}
function normalizeInject(options, vm) {
  var inject2 = options.inject;
  if (!inject2)
    return;
  var normalized = options.inject = {};
  if (isArray$1(inject2)) {
    for (var i = 0; i < inject2.length; i++) {
      normalized[inject2[i]] = { from: inject2[i] };
    }
  } else if (isPlainObject(inject2)) {
    for (var key in inject2) {
      var val = inject2[key];
      normalized[key] = isPlainObject(val) ? extend({ from: key }, val) : { from: val };
    }
  } else if (process.env.NODE_ENV !== "production") {
    warn('Invalid value for option "inject": expected an Array or an Object, ' + "but got ".concat(toRawType(inject2), "."), vm);
  }
}
function normalizeDirectives$1(options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def2 = dirs[key];
      if (isFunction(def2)) {
        dirs[key] = { bind: def2, update: def2 };
      }
    }
  }
}
function assertObjectType(name, value, vm) {
  if (!isPlainObject(value)) {
    warn('Invalid value for option "'.concat(name, '": expected an Object, ') + "but got ".concat(toRawType(value), "."), vm);
  }
}
function mergeOptions(parent, child, vm) {
  if (process.env.NODE_ENV !== "production") {
    checkComponents(child);
  }
  if (isFunction(child)) {
    child = child.options;
  }
  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives$1(child);
  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }
  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField(key2) {
    var strat = strats[key2] || defaultStrat;
    options[key2] = strat(parent[key2], child[key2], vm, key2);
  }
  return options;
}
function resolveAsset(options, type2, id2, warnMissing) {
  if (typeof id2 !== "string") {
    return;
  }
  var assets = options[type2];
  if (hasOwn(assets, id2))
    return assets[id2];
  var camelizedId = camelize(id2);
  if (hasOwn(assets, camelizedId))
    return assets[camelizedId];
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId))
    return assets[PascalCaseId];
  var res = assets[id2] || assets[camelizedId] || assets[PascalCaseId];
  if (process.env.NODE_ENV !== "production" && warnMissing && !res) {
    warn("Failed to resolve " + type2.slice(0, -1) + ": " + id2);
  }
  return res;
}
function validateProp(key, propOptions, propsData, vm) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  var booleanIndex = getTypeIndex(Boolean, prop.type);
  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, "default")) {
      value = false;
    } else if (value === "" || value === hyphenate(key)) {
      var stringIndex = getTypeIndex(String, prop.type);
      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  }
  if (value === void 0) {
    value = getPropDefaultValue(vm, prop, key);
    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }
  if (process.env.NODE_ENV !== "production") {
    assertProp(prop, key, value, vm, absent);
  }
  return value;
}
function getPropDefaultValue(vm, prop, key) {
  if (!hasOwn(prop, "default")) {
    return void 0;
  }
  var def2 = prop.default;
  if (process.env.NODE_ENV !== "production" && isObject$5(def2)) {
    warn('Invalid default value for prop "' + key + '": Props with type Object/Array must use a factory function to return the default value.', vm);
  }
  if (vm && vm.$options.propsData && vm.$options.propsData[key] === void 0 && vm._props[key] !== void 0) {
    return vm._props[key];
  }
  return isFunction(def2) && getType(prop.type) !== "Function" ? def2.call(vm) : def2;
}
function assertProp(prop, name, value, vm, absent) {
  if (prop.required && absent) {
    warn('Missing required prop: "' + name + '"', vm);
    return;
  }
  if (value == null && !prop.required) {
    return;
  }
  var type2 = prop.type;
  var valid = !type2 || type2 === true;
  var expectedTypes = [];
  if (type2) {
    if (!isArray$1(type2)) {
      type2 = [type2];
    }
    for (var i = 0; i < type2.length && !valid; i++) {
      var assertedType = assertType(value, type2[i], vm);
      expectedTypes.push(assertedType.expectedType || "");
      valid = assertedType.valid;
    }
  }
  var haveExpectedTypes = expectedTypes.some(function(t) {
    return t;
  });
  if (!valid && haveExpectedTypes) {
    warn(getInvalidTypeMessage(name, value, expectedTypes), vm);
    return;
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
    }
  }
}
var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol|BigInt)$/;
function assertType(value, type2, vm) {
  var valid;
  var expectedType = getType(type2);
  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase();
    if (!valid && t === "object") {
      valid = value instanceof type2;
    }
  } else if (expectedType === "Object") {
    valid = isPlainObject(value);
  } else if (expectedType === "Array") {
    valid = isArray$1(value);
  } else {
    try {
      valid = value instanceof type2;
    } catch (e) {
      warn('Invalid prop type: "' + String(type2) + '" is not a constructor', vm);
      valid = false;
    }
  }
  return {
    valid,
    expectedType
  };
}
var functionTypeCheckRE = /^\s*function (\w+)/;
function getType(fn) {
  var match = fn && fn.toString().match(functionTypeCheckRE);
  return match ? match[1] : "";
}
function isSameType(a, b) {
  return getType(a) === getType(b);
}
function getTypeIndex(type2, expectedTypes) {
  if (!isArray$1(expectedTypes)) {
    return isSameType(expectedTypes, type2) ? 0 : -1;
  }
  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type2)) {
      return i;
    }
  }
  return -1;
}
function getInvalidTypeMessage(name, value, expectedTypes) {
  var message = 'Invalid prop: type check failed for prop "'.concat(name, '".') + " Expected ".concat(expectedTypes.map(capitalize).join(", "));
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  if (expectedTypes.length === 1 && isExplicable(expectedType) && isExplicable(typeof value) && !isBoolean(expectedType, receivedType)) {
    message += " with value ".concat(styleValue(value, expectedType));
  }
  message += ", got ".concat(receivedType, " ");
  if (isExplicable(receivedType)) {
    message += "with value ".concat(styleValue(value, receivedType), ".");
  }
  return message;
}
function styleValue(value, type2) {
  if (type2 === "String") {
    return '"'.concat(value, '"');
  } else if (type2 === "Number") {
    return "".concat(Number(value));
  } else {
    return "".concat(value);
  }
}
var EXPLICABLE_TYPES = ["string", "number", "boolean"];
function isExplicable(value) {
  return EXPLICABLE_TYPES.some(function(elem) {
    return value.toLowerCase() === elem;
  });
}
function isBoolean() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return args.some(function(elem) {
    return elem.toLowerCase() === "boolean";
  });
}
var initProxy;
if (process.env.NODE_ENV !== "production") {
  var allowedGlobals_1 = makeMap(
    "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,require"
    // for Webpack/Browserify
  );
  var warnNonPresent_1 = function(target2, key) {
    warn('Property or method "'.concat(key, '" is not defined on the instance but ') + "referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://v2.vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.", target2);
  };
  var warnReservedPrefix_1 = function(target2, key) {
    warn('Property "'.concat(key, '" must be accessed with "$data.').concat(key, '" because ') + 'properties starting with "$" or "_" are not proxied in the Vue instance to prevent conflicts with Vue internals. See: https://v2.vuejs.org/v2/api/#data', target2);
  };
  var hasProxy_1 = typeof Proxy !== "undefined" && isNative(Proxy);
  if (hasProxy_1) {
    var isBuiltInModifier_1 = makeMap("stop,prevent,self,ctrl,shift,alt,meta,exact");
    config$1.keyCodes = new Proxy(config$1.keyCodes, {
      set: function(target2, key, value) {
        if (isBuiltInModifier_1(key)) {
          warn("Avoid overwriting built-in modifier in config.keyCodes: .".concat(key));
          return false;
        } else {
          target2[key] = value;
          return true;
        }
      }
    });
  }
  var hasHandler_1 = {
    has: function(target2, key) {
      var has2 = key in target2;
      var isAllowed = allowedGlobals_1(key) || typeof key === "string" && key.charAt(0) === "_" && !(key in target2.$data);
      if (!has2 && !isAllowed) {
        if (key in target2.$data)
          warnReservedPrefix_1(target2, key);
        else
          warnNonPresent_1(target2, key);
      }
      return has2 || !isAllowed;
    }
  };
  var getHandler_1 = {
    get: function(target2, key) {
      if (typeof key === "string" && !(key in target2)) {
        if (key in target2.$data)
          warnReservedPrefix_1(target2, key);
        else
          warnNonPresent_1(target2, key);
      }
      return target2[key];
    }
  };
  initProxy = function initProxy2(vm) {
    if (hasProxy_1) {
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped ? getHandler_1 : hasHandler_1;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}
var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};
function proxy(target2, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return this[sourceKey][key];
  };
  sharedPropertyDefinition.set = function proxySetter(val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target2, key, sharedPropertyDefinition);
}
function initState(vm) {
  var opts = vm.$options;
  if (opts.props)
    initProps$1(vm, opts.props);
  initSetup(vm);
  if (opts.methods)
    initMethods(vm, opts.methods);
  if (opts.data) {
    initData(vm);
  } else {
    var ob = observe(vm._data = {});
    ob && ob.vmCount++;
  }
  if (opts.computed)
    initComputed$1(vm, opts.computed);
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}
function initProps$1(vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props2 = vm._props = shallowReactive({});
  var keys2 = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  if (!isRoot) {
    toggleObserving(false);
  }
  var _loop_1 = function(key2) {
    keys2.push(key2);
    var value = validateProp(key2, propsOptions, propsData, vm);
    if (process.env.NODE_ENV !== "production") {
      var hyphenatedKey = hyphenate(key2);
      if (isReservedAttribute(hyphenatedKey) || config$1.isReservedAttr(hyphenatedKey)) {
        warn('"'.concat(hyphenatedKey, '" is a reserved attribute and cannot be used as component prop.'), vm);
      }
      defineReactive(props2, key2, value, function() {
        if (!isRoot && !isUpdatingChildComponent) {
          warn("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's " + 'value. Prop being mutated: "'.concat(key2, '"'), vm);
        }
      });
    } else {
      defineReactive(props2, key2, value);
    }
    if (!(key2 in vm)) {
      proxy(vm, "_props", key2);
    }
  };
  for (var key in propsOptions) {
    _loop_1(key);
  }
  toggleObserving(true);
}
function initData(vm) {
  var data = vm.$options.data;
  data = vm._data = isFunction(data) ? getData(data, vm) : data || {};
  if (!isPlainObject(data)) {
    data = {};
    process.env.NODE_ENV !== "production" && warn("data functions should return an object:\nhttps://v2.vuejs.org/v2/guide/components.html#data-Must-Be-a-Function", vm);
  }
  var keys2 = Object.keys(data);
  var props2 = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys2.length;
  while (i--) {
    var key = keys2[i];
    if (process.env.NODE_ENV !== "production") {
      if (methods && hasOwn(methods, key)) {
        warn('Method "'.concat(key, '" has already been defined as a data property.'), vm);
      }
    }
    if (props2 && hasOwn(props2, key)) {
      process.env.NODE_ENV !== "production" && warn('The data property "'.concat(key, '" is already declared as a prop. ') + "Use prop default value instead.", vm);
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  var ob = observe(data);
  ob && ob.vmCount++;
}
function getData(data, vm) {
  pushTarget();
  try {
    return data.call(vm, vm);
  } catch (e) {
    handleError(e, vm, "data()");
    return {};
  } finally {
    popTarget();
  }
}
var computedWatcherOptions = { lazy: true };
function initComputed$1(vm, computed2) {
  var watchers = vm._computedWatchers = /* @__PURE__ */ Object.create(null);
  var isSSR = isServerRendering();
  for (var key in computed2) {
    var userDef = computed2[key];
    var getter = isFunction(userDef) ? userDef : userDef.get;
    if (process.env.NODE_ENV !== "production" && getter == null) {
      warn('Getter is missing for computed property "'.concat(key, '".'), vm);
    }
    if (!isSSR) {
      watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);
    }
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (process.env.NODE_ENV !== "production") {
      if (key in vm.$data) {
        warn('The computed property "'.concat(key, '" is already defined in data.'), vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn('The computed property "'.concat(key, '" is already defined as a prop.'), vm);
      } else if (vm.$options.methods && key in vm.$options.methods) {
        warn('The computed property "'.concat(key, '" is already defined as a method.'), vm);
      }
    }
  }
}
function defineComputed(target2, key, userDef) {
  var shouldCache = !isServerRendering();
  if (isFunction(userDef)) {
    sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }
  if (process.env.NODE_ENV !== "production" && sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function() {
      warn('Computed property "'.concat(key, '" was assigned to but it has no setter.'), this);
    };
  }
  Object.defineProperty(target2, key, sharedPropertyDefinition);
}
function createComputedGetter(key) {
  return function computedGetter() {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        if (process.env.NODE_ENV !== "production" && Dep.target.onTrack) {
          Dep.target.onTrack({
            effect: Dep.target,
            target: this,
            type: "get",
            key
          });
        }
        watcher.depend();
      }
      return watcher.value;
    }
  };
}
function createGetterInvoker(fn) {
  return function computedGetter() {
    return fn.call(this, this);
  };
}
function initMethods(vm, methods) {
  var props2 = vm.$options.props;
  for (var key in methods) {
    if (process.env.NODE_ENV !== "production") {
      if (typeof methods[key] !== "function") {
        warn('Method "'.concat(key, '" has type "').concat(typeof methods[key], '" in the component definition. ') + "Did you reference the function correctly?", vm);
      }
      if (props2 && hasOwn(props2, key)) {
        warn('Method "'.concat(key, '" has already been defined as a prop.'), vm);
      }
      if (key in vm && isReserved(key)) {
        warn('Method "'.concat(key, '" conflicts with an existing Vue instance method. ') + "Avoid defining component methods that start with _ or $.");
      }
    }
    vm[key] = typeof methods[key] !== "function" ? noop : bind$1(methods[key], vm);
  }
}
function initWatch(vm, watch2) {
  for (var key in watch2) {
    var handler = watch2[key];
    if (isArray$1(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}
function createWatcher(vm, expOrFn, handler, options) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === "string") {
    handler = vm[handler];
  }
  return vm.$watch(expOrFn, handler, options);
}
function stateMixin(Vue2) {
  var dataDef = {};
  dataDef.get = function() {
    return this._data;
  };
  var propsDef = {};
  propsDef.get = function() {
    return this._props;
  };
  if (process.env.NODE_ENV !== "production") {
    dataDef.set = function() {
      warn("Avoid replacing instance root $data. Use nested data properties instead.", this);
    };
    propsDef.set = function() {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue2.prototype, "$data", dataDef);
  Object.defineProperty(Vue2.prototype, "$props", propsDef);
  Vue2.prototype.$set = set;
  Vue2.prototype.$delete = del;
  Vue2.prototype.$watch = function(expOrFn, cb, options) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options);
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      var info = 'callback for immediate watcher "'.concat(watcher.expression, '"');
      pushTarget();
      invokeWithErrorHandling(cb, vm, [watcher.value], vm, info);
      popTarget();
    }
    return function unwatchFn() {
      watcher.teardown();
    };
  };
}
var uid$4 = 0;
function initMixin$1(Vue2) {
  Vue2.prototype._init = function(options) {
    var vm = this;
    vm._uid = uid$4++;
    var startTag, endTag;
    if (process.env.NODE_ENV !== "production" && config$1.performance && mark) {
      startTag = "vue-perf-start:".concat(vm._uid);
      endTag = "vue-perf-end:".concat(vm._uid);
      mark(startTag);
    }
    vm._isVue = true;
    vm.__v_skip = true;
    vm._scope = new EffectScope(
      true
      /* detached */
    );
    vm._scope._vm = true;
    if (options && options._isComponent) {
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
    }
    if (process.env.NODE_ENV !== "production") {
      initProxy(vm);
    } else {
      vm._renderProxy = vm;
    }
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook$1(
      vm,
      "beforeCreate",
      void 0,
      false
      /* setContext */
    );
    initInjections(vm);
    initState(vm);
    initProvide(vm);
    callHook$1(vm, "created");
    if (process.env.NODE_ENV !== "production" && config$1.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure("vue ".concat(vm._name, " init"), startTag, endTag);
    }
    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}
function initInternalComponent(vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;
  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;
  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}
function resolveConstructorOptions(Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      Ctor.superOptions = superOptions;
      var modifiedOptions = resolveModifiedOptions(Ctor);
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options;
}
function resolveModifiedOptions(Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified)
        modified = {};
      modified[key] = latest[key];
    }
  }
  return modified;
}
function Vue(options) {
  if (process.env.NODE_ENV !== "production" && !(this instanceof Vue)) {
    warn("Vue is a constructor and should be called with the `new` keyword");
  }
  this._init(options);
}
initMixin$1(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);
function initUse(Vue2) {
  Vue2.use = function(plugin2) {
    var installedPlugins = this._installedPlugins || (this._installedPlugins = []);
    if (installedPlugins.indexOf(plugin2) > -1) {
      return this;
    }
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (isFunction(plugin2.install)) {
      plugin2.install.apply(plugin2, args);
    } else if (isFunction(plugin2)) {
      plugin2.apply(null, args);
    }
    installedPlugins.push(plugin2);
    return this;
  };
}
function initMixin(Vue2) {
  Vue2.mixin = function(mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this;
  };
}
function initExtend(Vue2) {
  Vue2.cid = 0;
  var cid = 1;
  Vue2.extend = function(extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId];
    }
    var name = getComponentName(extendOptions) || getComponentName(Super.options);
    if (process.env.NODE_ENV !== "production" && name) {
      validateComponentName(name);
    }
    var Sub = function VueComponent(options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(Super.options, extendOptions);
    Sub["super"] = Super;
    if (Sub.options.props) {
      initProps(Sub);
    }
    if (Sub.options.computed) {
      initComputed(Sub);
    }
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;
    ASSET_TYPES.forEach(function(type2) {
      Sub[type2] = Super[type2];
    });
    if (name) {
      Sub.options.components[name] = Sub;
    }
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);
    cachedCtors[SuperId] = Sub;
    return Sub;
  };
}
function initProps(Comp) {
  var props2 = Comp.options.props;
  for (var key in props2) {
    proxy(Comp.prototype, "_props", key);
  }
}
function initComputed(Comp) {
  var computed2 = Comp.options.computed;
  for (var key in computed2) {
    defineComputed(Comp.prototype, key, computed2[key]);
  }
}
function initAssetRegisters(Vue2) {
  ASSET_TYPES.forEach(function(type2) {
    Vue2[type2] = function(id2, definition) {
      if (!definition) {
        return this.options[type2 + "s"][id2];
      } else {
        if (process.env.NODE_ENV !== "production" && type2 === "component") {
          validateComponentName(id2);
        }
        if (type2 === "component" && isPlainObject(definition)) {
          definition.name = definition.name || id2;
          definition = this.options._base.extend(definition);
        }
        if (type2 === "directive" && isFunction(definition)) {
          definition = { bind: definition, update: definition };
        }
        this.options[type2 + "s"][id2] = definition;
        return definition;
      }
    };
  });
}
function _getComponentName(opts) {
  return opts && (getComponentName(opts.Ctor.options) || opts.tag);
}
function matches(pattern2, name) {
  if (isArray$1(pattern2)) {
    return pattern2.indexOf(name) > -1;
  } else if (typeof pattern2 === "string") {
    return pattern2.split(",").indexOf(name) > -1;
  } else if (isRegExp(pattern2)) {
    return pattern2.test(name);
  }
  return false;
}
function pruneCache(keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache, keys2 = keepAliveInstance.keys, _vnode = keepAliveInstance._vnode;
  for (var key in cache) {
    var entry = cache[key];
    if (entry) {
      var name_1 = entry.name;
      if (name_1 && !filter(name_1)) {
        pruneCacheEntry(cache, key, keys2, _vnode);
      }
    }
  }
}
function pruneCacheEntry(cache, key, keys2, current) {
  var entry = cache[key];
  if (entry && (!current || entry.tag !== current.tag)) {
    entry.componentInstance.$destroy();
  }
  cache[key] = null;
  remove$2(keys2, key);
}
var patternTypes = [String, RegExp, Array];
var KeepAlive = {
  name: "keep-alive",
  abstract: true,
  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },
  methods: {
    cacheVNode: function() {
      var _a = this, cache = _a.cache, keys2 = _a.keys, vnodeToCache = _a.vnodeToCache, keyToCache = _a.keyToCache;
      if (vnodeToCache) {
        var tag2 = vnodeToCache.tag, componentInstance = vnodeToCache.componentInstance, componentOptions = vnodeToCache.componentOptions;
        cache[keyToCache] = {
          name: _getComponentName(componentOptions),
          tag: tag2,
          componentInstance
        };
        keys2.push(keyToCache);
        if (this.max && keys2.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys2[0], keys2, this._vnode);
        }
        this.vnodeToCache = null;
      }
    }
  },
  created: function() {
    this.cache = /* @__PURE__ */ Object.create(null);
    this.keys = [];
  },
  destroyed: function() {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },
  mounted: function() {
    var _this = this;
    this.cacheVNode();
    this.$watch("include", function(val) {
      pruneCache(_this, function(name) {
        return matches(val, name);
      });
    });
    this.$watch("exclude", function(val) {
      pruneCache(_this, function(name) {
        return !matches(val, name);
      });
    });
  },
  updated: function() {
    this.cacheVNode();
  },
  render: function() {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      var name_2 = _getComponentName(componentOptions);
      var _a = this, include = _a.include, exclude = _a.exclude;
      if (
        // not included
        include && (!name_2 || !matches(include, name_2)) || // excluded
        exclude && name_2 && matches(exclude, name_2)
      ) {
        return vnode;
      }
      var _b = this, cache = _b.cache, keys2 = _b.keys;
      var key = vnode.key == null ? (
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        componentOptions.Ctor.cid + (componentOptions.tag ? "::".concat(componentOptions.tag) : "")
      ) : vnode.key;
      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance;
        remove$2(keys2, key);
        keys2.push(key);
      } else {
        this.vnodeToCache = vnode;
        this.keyToCache = key;
      }
      vnode.data.keepAlive = true;
    }
    return vnode || slot && slot[0];
  }
};
var builtInComponents = {
  KeepAlive
};
function initGlobalAPI(Vue2) {
  var configDef = {};
  configDef.get = function() {
    return config$1;
  };
  if (process.env.NODE_ENV !== "production") {
    configDef.set = function() {
      warn("Do not replace the Vue.config object, set individual fields instead.");
    };
  }
  Object.defineProperty(Vue2, "config", configDef);
  Vue2.util = {
    warn,
    extend,
    mergeOptions,
    defineReactive
  };
  Vue2.set = set;
  Vue2.delete = del;
  Vue2.nextTick = nextTick;
  Vue2.observable = function(obj) {
    observe(obj);
    return obj;
  };
  Vue2.options = /* @__PURE__ */ Object.create(null);
  ASSET_TYPES.forEach(function(type2) {
    Vue2.options[type2 + "s"] = /* @__PURE__ */ Object.create(null);
  });
  Vue2.options._base = Vue2;
  extend(Vue2.options.components, builtInComponents);
  initUse(Vue2);
  initMixin(Vue2);
  initExtend(Vue2);
  initAssetRegisters(Vue2);
}
initGlobalAPI(Vue);
Object.defineProperty(Vue.prototype, "$isServer", {
  get: isServerRendering
});
Object.defineProperty(Vue.prototype, "$ssrContext", {
  get: function() {
    return this.$vnode && this.$vnode.ssrContext;
  }
});
Object.defineProperty(Vue, "FunctionalRenderContext", {
  value: FunctionalRenderContext
});
Vue.version = version;
var isReservedAttr = makeMap("style,class");
var acceptValue = makeMap("input,textarea,option,select,progress");
var mustUseProp = function(tag2, type2, attr) {
  return attr === "value" && acceptValue(tag2) && type2 !== "button" || attr === "selected" && tag2 === "option" || attr === "checked" && tag2 === "input" || attr === "muted" && tag2 === "video";
};
var isEnumeratedAttr = makeMap("contenteditable,draggable,spellcheck");
var isValidContentEditableValue = makeMap("events,caret,typing,plaintext-only");
var convertEnumeratedValue = function(key, value) {
  return isFalsyAttrValue(value) || value === "false" ? "false" : (
    // allow arbitrary string value for contenteditable
    key === "contenteditable" && isValidContentEditableValue(value) ? value : "true"
  );
};
var isBooleanAttr = makeMap("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible");
var xlinkNS = "http://www.w3.org/1999/xlink";
var isXlink = function(name) {
  return name.charAt(5) === ":" && name.slice(0, 5) === "xlink";
};
var getXlinkProp = function(name) {
  return isXlink(name) ? name.slice(6, name.length) : "";
};
var isFalsyAttrValue = function(val) {
  return val == null || val === false;
};
function genClassForVnode(vnode) {
  var data = vnode.data;
  var parentNode2 = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode2 = parentNode2.parent)) {
    if (parentNode2 && parentNode2.data) {
      data = mergeClassData(data, parentNode2.data);
    }
  }
  return renderClass(data.staticClass, data.class);
}
function mergeClassData(child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class) ? [child.class, parent.class] : parent.class
  };
}
function renderClass(staticClass, dynamicClass) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass));
  }
  return "";
}
function concat(a, b) {
  return a ? b ? a + " " + b : a : b || "";
}
function stringifyClass(value) {
  if (Array.isArray(value)) {
    return stringifyArray(value);
  }
  if (isObject$5(value)) {
    return stringifyObject(value);
  }
  if (typeof value === "string") {
    return value;
  }
  return "";
}
function stringifyArray(value) {
  var res = "";
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== "") {
      if (res)
        res += " ";
      res += stringified;
    }
  }
  return res;
}
function stringifyObject(value) {
  var res = "";
  for (var key in value) {
    if (value[key]) {
      if (res)
        res += " ";
      res += key;
    }
  }
  return res;
}
var namespaceMap = {
  svg: "http://www.w3.org/2000/svg",
  math: "http://www.w3.org/1998/Math/MathML"
};
var isHTMLTag = makeMap("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot");
var isSVG = makeMap("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view", true);
var isReservedTag = function(tag2) {
  return isHTMLTag(tag2) || isSVG(tag2);
};
function getTagNamespace(tag2) {
  if (isSVG(tag2)) {
    return "svg";
  }
  if (tag2 === "math") {
    return "math";
  }
}
var unknownElementCache = /* @__PURE__ */ Object.create(null);
function isUnknownElement(tag2) {
  if (!inBrowser) {
    return true;
  }
  if (isReservedTag(tag2)) {
    return false;
  }
  tag2 = tag2.toLowerCase();
  if (unknownElementCache[tag2] != null) {
    return unknownElementCache[tag2];
  }
  var el = document.createElement(tag2);
  if (tag2.indexOf("-") > -1) {
    return unknownElementCache[tag2] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
  } else {
    return unknownElementCache[tag2] = /HTMLUnknownElement/.test(el.toString());
  }
}
var isTextInputType = makeMap("text,number,password,search,email,tel,url");
function query(el) {
  if (typeof el === "string") {
    var selected = document.querySelector(el);
    if (!selected) {
      process.env.NODE_ENV !== "production" && warn("Cannot find element: " + el);
      return document.createElement("div");
    }
    return selected;
  } else {
    return el;
  }
}
function createElement(tagName2, vnode) {
  var elm = document.createElement(tagName2);
  if (tagName2 !== "select") {
    return elm;
  }
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== void 0) {
    elm.setAttribute("multiple", "multiple");
  }
  return elm;
}
function createElementNS(namespace, tagName2) {
  return document.createElementNS(namespaceMap[namespace], tagName2);
}
function createTextNode(text) {
  return document.createTextNode(text);
}
function createComment(text) {
  return document.createComment(text);
}
function insertBefore(parentNode2, newNode, referenceNode) {
  parentNode2.insertBefore(newNode, referenceNode);
}
function removeChild(node, child) {
  node.removeChild(child);
}
function appendChild(node, child) {
  node.appendChild(child);
}
function parentNode(node) {
  return node.parentNode;
}
function nextSibling(node) {
  return node.nextSibling;
}
function tagName(node) {
  return node.tagName;
}
function setTextContent(node, text) {
  node.textContent = text;
}
function setStyleScope(node, scopeId) {
  node.setAttribute(scopeId, "");
}
var nodeOps = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  createElement,
  createElementNS,
  createTextNode,
  createComment,
  insertBefore,
  removeChild,
  appendChild,
  parentNode,
  nextSibling,
  tagName,
  setTextContent,
  setStyleScope
});
var ref = {
  create: function(_, vnode) {
    registerRef(vnode);
  },
  update: function(oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function(vnode) {
    registerRef(vnode, true);
  }
};
function registerRef(vnode, isRemoval) {
  var ref2 = vnode.data.ref;
  if (!isDef(ref2))
    return;
  var vm = vnode.context;
  var refValue = vnode.componentInstance || vnode.elm;
  var value = isRemoval ? null : refValue;
  var $refsValue = isRemoval ? void 0 : refValue;
  if (isFunction(ref2)) {
    invokeWithErrorHandling(ref2, vm, [value], vm, "template ref function");
    return;
  }
  var isFor = vnode.data.refInFor;
  var _isString = typeof ref2 === "string" || typeof ref2 === "number";
  var _isRef = isRef(ref2);
  var refs = vm.$refs;
  if (_isString || _isRef) {
    if (isFor) {
      var existing = _isString ? refs[ref2] : ref2.value;
      if (isRemoval) {
        isArray$1(existing) && remove$2(existing, refValue);
      } else {
        if (!isArray$1(existing)) {
          if (_isString) {
            refs[ref2] = [refValue];
            setSetupRef(vm, ref2, refs[ref2]);
          } else {
            ref2.value = [refValue];
          }
        } else if (!existing.includes(refValue)) {
          existing.push(refValue);
        }
      }
    } else if (_isString) {
      if (isRemoval && refs[ref2] !== refValue) {
        return;
      }
      refs[ref2] = $refsValue;
      setSetupRef(vm, ref2, value);
    } else if (_isRef) {
      if (isRemoval && ref2.value !== refValue) {
        return;
      }
      ref2.value = value;
    } else if (process.env.NODE_ENV !== "production") {
      warn("Invalid template ref type: ".concat(typeof ref2));
    }
  }
}
function setSetupRef(_a, key, val) {
  var _setupState = _a._setupState;
  if (_setupState && hasOwn(_setupState, key)) {
    if (isRef(_setupState[key])) {
      _setupState[key].value = val;
    } else {
      _setupState[key] = val;
    }
  }
}
var emptyNode = new VNode("", {}, []);
var hooks = ["create", "activate", "update", "remove", "destroy"];
function sameVnode(a, b) {
  return a.key === b.key && a.asyncFactory === b.asyncFactory && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && isUndef(b.asyncFactory.error));
}
function sameInputType(a, b) {
  if (a.tag !== "input")
    return true;
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
}
function createKeyToOldIdx(children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key))
      map[key] = i;
  }
  return map;
}
function createPatchFunction(backend) {
  var i, j;
  var cbs = {};
  var modules2 = backend.modules, nodeOps2 = backend.nodeOps;
  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules2.length; ++j) {
      if (isDef(modules2[j][hooks[i]])) {
        cbs[hooks[i]].push(modules2[j][hooks[i]]);
      }
    }
  }
  function emptyNodeAt(elm) {
    return new VNode(nodeOps2.tagName(elm).toLowerCase(), {}, [], void 0, elm);
  }
  function createRmCb(childElm, listeners) {
    function remove2() {
      if (--remove2.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove2.listeners = listeners;
    return remove2;
  }
  function removeNode(el) {
    var parent = nodeOps2.parentNode(el);
    if (isDef(parent)) {
      nodeOps2.removeChild(parent, el);
    }
  }
  function isUnknownElement2(vnode, inVPre) {
    return !inVPre && !vnode.ns && !(config$1.ignoredElements.length && config$1.ignoredElements.some(function(ignore) {
      return isRegExp(ignore) ? ignore.test(vnode.tag) : ignore === vnode.tag;
    })) && config$1.isUnknownElement(vnode.tag);
  }
  var creatingElmInVPre = 0;
  function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index2) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      vnode = ownerArray[index2] = cloneVNode(vnode);
    }
    vnode.isRootInsert = !nested;
    if (createComponent2(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return;
    }
    var data = vnode.data;
    var children = vnode.children;
    var tag2 = vnode.tag;
    if (isDef(tag2)) {
      if (process.env.NODE_ENV !== "production") {
        if (data && data.pre) {
          creatingElmInVPre++;
        }
        if (isUnknownElement2(vnode, creatingElmInVPre)) {
          warn("Unknown custom element: <" + tag2 + '> - did you register the component correctly? For recursive components, make sure to provide the "name" option.', vnode.context);
        }
      }
      vnode.elm = vnode.ns ? nodeOps2.createElementNS(vnode.ns, tag2) : nodeOps2.createElement(tag2, vnode);
      setScope(vnode);
      createChildren(vnode, children, insertedVnodeQueue);
      if (isDef(data)) {
        invokeCreateHooks(vnode, insertedVnodeQueue);
      }
      insert(parentElm, vnode.elm, refElm);
      if (process.env.NODE_ENV !== "production" && data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps2.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps2.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }
  function createComponent2(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i2 = vnode.data;
    if (isDef(i2)) {
      var isReactivated = isDef(vnode.componentInstance) && i2.keepAlive;
      if (isDef(i2 = i2.hook) && isDef(i2 = i2.init)) {
        i2(
          vnode,
          false
          /* hydrating */
        );
      }
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true;
      }
    }
  }
  function initComponent(vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      registerRef(vnode);
      insertedVnodeQueue.push(vnode);
    }
  }
  function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i2;
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i2 = innerNode.data) && isDef(i2 = i2.transition)) {
        for (i2 = 0; i2 < cbs.activate.length; ++i2) {
          cbs.activate[i2](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break;
      }
    }
    insert(parentElm, vnode.elm, refElm);
  }
  function insert(parent, elm, ref2) {
    if (isDef(parent)) {
      if (isDef(ref2)) {
        if (nodeOps2.parentNode(ref2) === parent) {
          nodeOps2.insertBefore(parent, elm, ref2);
        }
      } else {
        nodeOps2.appendChild(parent, elm);
      }
    }
  }
  function createChildren(vnode, children, insertedVnodeQueue) {
    if (isArray$1(children)) {
      if (process.env.NODE_ENV !== "production") {
        checkDuplicateKeys(children);
      }
      for (var i_1 = 0; i_1 < children.length; ++i_1) {
        createElm(children[i_1], insertedVnodeQueue, vnode.elm, null, true, children, i_1);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps2.appendChild(vnode.elm, nodeOps2.createTextNode(String(vnode.text)));
    }
  }
  function isPatchable(vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag);
  }
  function invokeCreateHooks(vnode, insertedVnodeQueue) {
    for (var i_2 = 0; i_2 < cbs.create.length; ++i_2) {
      cbs.create[i_2](emptyNode, vnode);
    }
    i = vnode.data.hook;
    if (isDef(i)) {
      if (isDef(i.create))
        i.create(emptyNode, vnode);
      if (isDef(i.insert))
        insertedVnodeQueue.push(vnode);
    }
  }
  function setScope(vnode) {
    var i2;
    if (isDef(i2 = vnode.fnScopeId)) {
      nodeOps2.setStyleScope(vnode.elm, i2);
    } else {
      var ancestor = vnode;
      while (ancestor) {
        if (isDef(i2 = ancestor.context) && isDef(i2 = i2.$options._scopeId)) {
          nodeOps2.setStyleScope(vnode.elm, i2);
        }
        ancestor = ancestor.parent;
      }
    }
    if (isDef(i2 = activeInstance) && i2 !== vnode.context && i2 !== vnode.fnContext && isDef(i2 = i2.$options._scopeId)) {
      nodeOps2.setStyleScope(vnode.elm, i2);
    }
  }
  function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }
  function invokeDestroyHook(vnode) {
    var i2, j2;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i2 = data.hook) && isDef(i2 = i2.destroy))
        i2(vnode);
      for (i2 = 0; i2 < cbs.destroy.length; ++i2)
        cbs.destroy[i2](vnode);
    }
    if (isDef(i2 = vnode.children)) {
      for (j2 = 0; j2 < vnode.children.length; ++j2) {
        invokeDestroyHook(vnode.children[j2]);
      }
    }
  }
  function removeVnodes(vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else {
          removeNode(ch.elm);
        }
      }
    }
  }
  function removeAndInvokeRemoveHook(vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i_3;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        rm.listeners += listeners;
      } else {
        rm = createRmCb(vnode.elm, listeners);
      }
      if (isDef(i_3 = vnode.componentInstance) && isDef(i_3 = i_3._vnode) && isDef(i_3.data)) {
        removeAndInvokeRemoveHook(i_3, rm);
      }
      for (i_3 = 0; i_3 < cbs.remove.length; ++i_3) {
        cbs.remove[i_3](vnode, rm);
      }
      if (isDef(i_3 = vnode.data.hook) && isDef(i_3 = i_3.remove)) {
        i_3(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }
  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;
    var canMove = !removeOnly;
    if (process.env.NODE_ENV !== "production") {
      checkDuplicateKeys(newCh);
    }
    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx];
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) {
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps2.insertBefore(parentElm, oldStartVnode.elm, nodeOps2.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) {
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps2.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx))
          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
        if (isUndef(idxInOld)) {
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];
          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = void 0;
            canMove && nodeOps2.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }
        newStartVnode = newCh[++newStartIdx];
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(oldCh, oldStartIdx, oldEndIdx);
    }
  }
  function checkDuplicateKeys(children) {
    var seenKeys = {};
    for (var i_4 = 0; i_4 < children.length; i_4++) {
      var vnode = children[i_4];
      var key = vnode.key;
      if (isDef(key)) {
        if (seenKeys[key]) {
          warn("Duplicate keys detected: '".concat(key, "'. This may cause an update error."), vnode.context);
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }
  function findIdxInOld(node, oldCh, start, end) {
    for (var i_5 = start; i_5 < end; i_5++) {
      var c = oldCh[i_5];
      if (isDef(c) && sameVnode(node, c))
        return i_5;
    }
  }
  function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index2, removeOnly) {
    if (oldVnode === vnode) {
      return;
    }
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      vnode = ownerArray[index2] = cloneVNode(vnode);
    }
    var elm = vnode.elm = oldVnode.elm;
    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return;
    }
    if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
      vnode.componentInstance = oldVnode.componentInstance;
      return;
    }
    var i2;
    var data = vnode.data;
    if (isDef(data) && isDef(i2 = data.hook) && isDef(i2 = i2.prepatch)) {
      i2(oldVnode, vnode);
    }
    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i2 = 0; i2 < cbs.update.length; ++i2)
        cbs.update[i2](oldVnode, vnode);
      if (isDef(i2 = data.hook) && isDef(i2 = i2.update))
        i2(oldVnode, vnode);
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch)
          updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
      } else if (isDef(ch)) {
        if (process.env.NODE_ENV !== "production") {
          checkDuplicateKeys(ch);
        }
        if (isDef(oldVnode.text))
          nodeOps2.setTextContent(elm, "");
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps2.setTextContent(elm, "");
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps2.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i2 = data.hook) && isDef(i2 = i2.postpatch))
        i2(oldVnode, vnode);
    }
  }
  function invokeInsertHook(vnode, queue2, initial) {
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue2;
    } else {
      for (var i_6 = 0; i_6 < queue2.length; ++i_6) {
        queue2[i_6].data.hook.insert(queue2[i_6]);
      }
    }
  }
  var hydrationBailed = false;
  var isRenderedModule = makeMap("attrs,class,staticClass,staticStyle,key");
  function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
    var i2;
    var tag2 = vnode.tag, data = vnode.data, children = vnode.children;
    inVPre = inVPre || data && data.pre;
    vnode.elm = elm;
    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true;
    }
    if (process.env.NODE_ENV !== "production") {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false;
      }
    }
    if (isDef(data)) {
      if (isDef(i2 = data.hook) && isDef(i2 = i2.init))
        i2(
          vnode,
          true
          /* hydrating */
        );
      if (isDef(i2 = vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        return true;
      }
    }
    if (isDef(tag2)) {
      if (isDef(children)) {
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          if (isDef(i2 = data) && isDef(i2 = i2.domProps) && isDef(i2 = i2.innerHTML)) {
            if (i2 !== elm.innerHTML) {
              if (process.env.NODE_ENV !== "production" && typeof console !== "undefined" && !hydrationBailed) {
                hydrationBailed = true;
                console.warn("Parent: ", elm);
                console.warn("server innerHTML: ", i2);
                console.warn("client innerHTML: ", elm.innerHTML);
              }
              return false;
            }
          } else {
            var childrenMatch = true;
            var childNode = elm.firstChild;
            for (var i_7 = 0; i_7 < children.length; i_7++) {
              if (!childNode || !hydrate(childNode, children[i_7], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break;
              }
              childNode = childNode.nextSibling;
            }
            if (!childrenMatch || childNode) {
              if (process.env.NODE_ENV !== "production" && typeof console !== "undefined" && !hydrationBailed) {
                hydrationBailed = true;
                console.warn("Parent: ", elm);
                console.warn("Mismatching childNodes vs. VNodes: ", elm.childNodes, children);
              }
              return false;
            }
          }
        }
      }
      if (isDef(data)) {
        var fullInvoke = false;
        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break;
          }
        }
        if (!fullInvoke && data["class"]) {
          traverse(data["class"]);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true;
  }
  function assertNodeMatch(node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf("vue-component") === 0 || !isUnknownElement2(vnode, inVPre) && vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3);
    }
  }
  return function patch2(oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode))
        invokeDestroyHook(oldVnode);
      return;
    }
    var isInitialPatch = false;
    var insertedVnodeQueue = [];
    if (isUndef(oldVnode)) {
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode;
            } else if (process.env.NODE_ENV !== "production") {
              warn("The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.");
            }
          }
          oldVnode = emptyNodeAt(oldVnode);
        }
        var oldElm = oldVnode.elm;
        var parentElm = nodeOps2.parentNode(oldElm);
        createElm(
          vnode,
          insertedVnodeQueue,
          // extremely rare edge case: do not insert if old element is in a
          // leaving transition. Only happens when combining transition +
          // keep-alive + HOCs. (#4590)
          oldElm._leaveCb ? null : parentElm,
          nodeOps2.nextSibling(oldElm)
        );
        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);
          while (ancestor) {
            for (var i_8 = 0; i_8 < cbs.destroy.length; ++i_8) {
              cbs.destroy[i_8](ancestor);
            }
            ancestor.elm = vnode.elm;
            if (patchable) {
              for (var i_9 = 0; i_9 < cbs.create.length; ++i_9) {
                cbs.create[i_9](emptyNode, ancestor);
              }
              var insert_1 = ancestor.data.hook.insert;
              if (insert_1.merged) {
                for (var i_10 = 1; i_10 < insert_1.fns.length; i_10++) {
                  insert_1.fns[i_10]();
                }
              }
            } else {
              registerRef(ancestor);
            }
            ancestor = ancestor.parent;
          }
        }
        if (isDef(parentElm)) {
          removeVnodes([oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }
    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm;
  };
}
var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives(vnode) {
    updateDirectives(vnode, emptyNode);
  }
};
function updateDirectives(oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}
function _update(oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives(vnode.data.directives, vnode.context);
  var dirsWithInsert = [];
  var dirsWithPostpatch = [];
  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      callHook(dir, "bind", vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook(dir, "update", vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }
  if (dirsWithInsert.length) {
    var callInsert = function() {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook(dirsWithInsert[i], "inserted", vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode, "insert", callInsert);
    } else {
      callInsert();
    }
  }
  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, "postpatch", function() {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook(dirsWithPostpatch[i], "componentUpdated", vnode, oldVnode);
      }
    });
  }
  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        callHook(oldDirs[key], "unbind", oldVnode, oldVnode, isDestroy);
      }
    }
  }
}
var emptyModifiers = /* @__PURE__ */ Object.create(null);
function normalizeDirectives(dirs, vm) {
  var res = /* @__PURE__ */ Object.create(null);
  if (!dirs) {
    return res;
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    if (vm._setupState && vm._setupState.__sfc) {
      var setupDef = dir.def || resolveAsset(vm, "_setupState", "v-" + dir.name);
      if (typeof setupDef === "function") {
        dir.def = {
          bind: setupDef,
          update: setupDef
        };
      } else {
        dir.def = setupDef;
      }
    }
    dir.def = dir.def || resolveAsset(vm.$options, "directives", dir.name, true);
  }
  return res;
}
function getRawDirName(dir) {
  return dir.rawName || "".concat(dir.name, ".").concat(Object.keys(dir.modifiers || {}).join("."));
}
function callHook(dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, "directive ".concat(dir.name, " ").concat(hook, " hook"));
    }
  }
}
var baseModules = [ref, directives];
function updateAttrs(oldVnode, vnode) {
  var opts = vnode.componentOptions;
  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return;
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return;
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs2 = vnode.data.attrs || {};
  if (isDef(attrs2.__ob__) || isTrue(attrs2._v_attr_proxy)) {
    attrs2 = vnode.data.attrs = extend({}, attrs2);
  }
  for (key in attrs2) {
    cur = attrs2[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur, vnode.data.pre);
    }
  }
  if ((isIE$1 || isEdge) && attrs2.value !== oldAttrs.value) {
    setAttr(elm, "value", attrs2.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs2[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}
function setAttr(el, key, value, isInPre) {
  if (isInPre || el.tagName.indexOf("-") > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      value = key === "allowfullscreen" && el.tagName === "EMBED" ? "true" : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}
function baseSetAttr(el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    if (isIE$1 && !isIE9 && el.tagName === "TEXTAREA" && key === "placeholder" && value !== "" && !el.__ieph) {
      var blocker_1 = function(e) {
        e.stopImmediatePropagation();
        el.removeEventListener("input", blocker_1);
      };
      el.addEventListener("input", blocker_1);
      el.__ieph = true;
    }
    el.setAttribute(key, value);
  }
}
var attrs = {
  create: updateAttrs,
  update: updateAttrs
};
function updateClass(oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (isUndef(data.staticClass) && isUndef(data.class) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData.class))) {
    return;
  }
  var cls = genClassForVnode(vnode);
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }
  if (cls !== el._prevClass) {
    el.setAttribute("class", cls);
    el._prevClass = cls;
  }
}
var klass = {
  create: updateClass,
  update: updateClass
};
var RANGE_TOKEN = "__r";
var CHECKBOX_RADIO_TOKEN = "__c";
function normalizeEvents(on) {
  if (isDef(on[RANGE_TOKEN])) {
    var event_1 = isIE$1 ? "change" : "input";
    on[event_1] = [].concat(on[RANGE_TOKEN], on[event_1] || []);
    delete on[RANGE_TOKEN];
  }
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}
var target;
function createOnceHandler(event, handler, capture) {
  var _target = target;
  return function onceHandler() {
    var res = handler.apply(null, arguments);
    if (res !== null) {
      remove(event, onceHandler, capture, _target);
    }
  };
}
var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);
function add(name, handler, capture, passive) {
  if (useMicrotaskFix) {
    var attachedTimestamp_1 = currentFlushTimestamp;
    var original_1 = handler;
    handler = original_1._wrapper = function(e) {
      if (
        // no bubbling, should always fire.
        // this is just a safety net in case event.timeStamp is unreliable in
        // certain weird environments...
        e.target === e.currentTarget || // event is fired after handler attachment
        e.timeStamp >= attachedTimestamp_1 || // bail for environments that have buggy event.timeStamp implementations
        // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
        // #9681 QtWebEngine event.timeStamp is negative value
        e.timeStamp <= 0 || // #9448 bail if event is fired in another document in a multi-page
        // electron/nw.js app, since event.timeStamp will be using a different
        // starting reference
        e.target.ownerDocument !== document
      ) {
        return original_1.apply(this, arguments);
      }
    };
  }
  target.addEventListener(name, handler, supportsPassive$1 ? { capture, passive } : capture);
}
function remove(name, handler, capture, _target) {
  (_target || target).removeEventListener(
    name,
    //@ts-expect-error
    handler._wrapper || handler,
    capture
  );
}
function updateDOMListeners(oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return;
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target = vnode.elm || oldVnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add, remove, createOnceHandler, vnode.context);
  target = void 0;
}
var events = {
  create: updateDOMListeners,
  update: updateDOMListeners,
  // @ts-expect-error emptyNode has actually data
  destroy: function(vnode) {
    return updateDOMListeners(vnode, emptyNode);
  }
};
var svgContainer;
function updateDOMProps(oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return;
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props2 = vnode.data.domProps || {};
  if (isDef(props2.__ob__) || isTrue(props2._v_attr_proxy)) {
    props2 = vnode.data.domProps = extend({}, props2);
  }
  for (key in oldProps) {
    if (!(key in props2)) {
      elm[key] = "";
    }
  }
  for (key in props2) {
    cur = props2[key];
    if (key === "textContent" || key === "innerHTML") {
      if (vnode.children)
        vnode.children.length = 0;
      if (cur === oldProps[key])
        continue;
      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }
    if (key === "value" && elm.tagName !== "PROGRESS") {
      elm._value = cur;
      var strCur = isUndef(cur) ? "" : String(cur);
      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === "innerHTML" && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      svgContainer = svgContainer || document.createElement("div");
      svgContainer.innerHTML = "<svg>".concat(cur, "</svg>");
      var svg = svgContainer.firstChild;
      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }
      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if (
      // skip the update if old and new VDOM state is the same.
      // `value` is handled separately because the DOM value may be temporarily
      // out of sync with VDOM state due to focus, composition and modifiers.
      // This  #4521 by skipping the unnecessary `checked` update.
      cur !== oldProps[key]
    ) {
      try {
        elm[key] = cur;
      } catch (e) {
      }
    }
  }
}
function shouldUpdateValue(elm, checkVal) {
  return (
    //@ts-expect-error
    !elm.composing && (elm.tagName === "OPTION" || isNotInFocusAndDirty(elm, checkVal) || isDirtyWithModifiers(elm, checkVal))
  );
}
function isNotInFocusAndDirty(elm, checkVal) {
  var notInFocus = true;
  try {
    notInFocus = document.activeElement !== elm;
  } catch (e) {
  }
  return notInFocus && elm.value !== checkVal;
}
function isDirtyWithModifiers(elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers;
  if (isDef(modifiers)) {
    if (modifiers.number) {
      return toNumber$1(value) !== toNumber$1(newVal);
    }
    if (modifiers.trim) {
      return value.trim() !== newVal.trim();
    }
  }
  return value !== newVal;
}
var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};
var parseStyleText = cached(function(cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function(item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res;
});
function normalizeStyleData(data) {
  var style2 = normalizeStyleBinding(data.style);
  return data.staticStyle ? extend(data.staticStyle, style2) : style2;
}
function normalizeStyleBinding(bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject$2(bindingStyle);
  }
  if (typeof bindingStyle === "string") {
    return parseStyleText(bindingStyle);
  }
  return bindingStyle;
}
function getStyle(vnode, checkChild) {
  var res = {};
  var styleData;
  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (childNode && childNode.data && (styleData = normalizeStyleData(childNode.data))) {
        extend(res, styleData);
      }
    }
  }
  if (styleData = normalizeStyleData(vnode.data)) {
    extend(res, styleData);
  }
  var parentNode2 = vnode;
  while (parentNode2 = parentNode2.parent) {
    if (parentNode2.data && (styleData = normalizeStyleData(parentNode2.data))) {
      extend(res, styleData);
    }
  }
  return res;
}
var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function(el, name, val) {
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(hyphenate(name), val.replace(importantRE, ""), "important");
  } else {
    var normalizedName = normalize(name);
    if (Array.isArray(val)) {
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};
var vendorNames = ["Webkit", "Moz", "ms"];
var emptyStyle;
var normalize = cached(function(prop) {
  emptyStyle = emptyStyle || document.createElement("div").style;
  prop = camelize(prop);
  if (prop !== "filter" && prop in emptyStyle) {
    return prop;
  }
  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i = 0; i < vendorNames.length; i++) {
    var name_1 = vendorNames[i] + capName;
    if (name_1 in emptyStyle) {
      return name_1;
    }
  }
});
function updateStyle(oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {
    return;
  }
  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};
  var oldStyle = oldStaticStyle || oldStyleBinding;
  var style2 = normalizeStyleBinding(vnode.data.style) || {};
  vnode.data.normalizedStyle = isDef(style2.__ob__) ? extend({}, style2) : style2;
  var newStyle = getStyle(vnode, true);
  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, "");
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      setProp(el, name, cur == null ? "" : cur);
    }
  }
}
var style = {
  create: updateStyle,
  update: updateStyle
};
var whitespaceRE = /\s+/;
function addClass(el, cls) {
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  if (el.classList) {
    if (cls.indexOf(" ") > -1) {
      cls.split(whitespaceRE).forEach(function(c) {
        return el.classList.add(c);
      });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " ".concat(el.getAttribute("class") || "", " ");
    if (cur.indexOf(" " + cls + " ") < 0) {
      el.setAttribute("class", (cur + cls).trim());
    }
  }
}
function removeClass(el, cls) {
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  if (el.classList) {
    if (cls.indexOf(" ") > -1) {
      cls.split(whitespaceRE).forEach(function(c) {
        return el.classList.remove(c);
      });
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute("class");
    }
  } else {
    var cur = " ".concat(el.getAttribute("class") || "", " ");
    var tar = " " + cls + " ";
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, " ");
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute("class", cur);
    } else {
      el.removeAttribute("class");
    }
  }
}
function resolveTransition(def2) {
  if (!def2) {
    return;
  }
  if (typeof def2 === "object") {
    var res = {};
    if (def2.css !== false) {
      extend(res, autoCssTransition(def2.name || "v"));
    }
    extend(res, def2);
    return res;
  } else if (typeof def2 === "string") {
    return autoCssTransition(def2);
  }
}
var autoCssTransition = cached(function(name) {
  return {
    enterClass: "".concat(name, "-enter"),
    enterToClass: "".concat(name, "-enter-to"),
    enterActiveClass: "".concat(name, "-enter-active"),
    leaveClass: "".concat(name, "-leave"),
    leaveToClass: "".concat(name, "-leave-to"),
    leaveActiveClass: "".concat(name, "-leave-active")
  };
});
var hasTransition = inBrowser && !isIE9;
var TRANSITION = "transition";
var ANIMATION = "animation";
var transitionProp = "transition";
var transitionEndEvent = "transitionend";
var animationProp = "animation";
var animationEndEvent = "animationend";
if (hasTransition) {
  if (window.ontransitionend === void 0 && window.onwebkittransitionend !== void 0) {
    transitionProp = "WebkitTransition";
    transitionEndEvent = "webkitTransitionEnd";
  }
  if (window.onanimationend === void 0 && window.onwebkitanimationend !== void 0) {
    animationProp = "WebkitAnimation";
    animationEndEvent = "webkitAnimationEnd";
  }
}
var raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout : (
  /* istanbul ignore next */
  function(fn) {
    return fn();
  }
);
function nextFrame(fn) {
  raf(function() {
    raf(fn);
  });
}
function addTransitionClass(el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}
function removeTransitionClass(el, cls) {
  if (el._transitionClasses) {
    remove$2(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}
function whenTransitionEnds(el, expectedType, cb) {
  var _a = getTransitionInfo(el, expectedType), type2 = _a.type, timeout = _a.timeout, propCount = _a.propCount;
  if (!type2)
    return cb();
  var event = type2 === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function() {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function(e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function() {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}
var transformRE = /\b(transform|all)(,|$)/;
function getTransitionInfo(el, expectedType) {
  var styles = window.getComputedStyle(el);
  var transitionDelays = (styles[transitionProp + "Delay"] || "").split(", ");
  var transitionDurations = (styles[transitionProp + "Duration"] || "").split(", ");
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + "Delay"] || "").split(", ");
  var animationDurations = (styles[animationProp + "Duration"] || "").split(", ");
  var animationTimeout = getTimeout(animationDelays, animationDurations);
  var type2;
  var timeout = 0;
  var propCount = 0;
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type2 = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type2 = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type2 = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type2 ? type2 === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }
  var hasTransform = type2 === TRANSITION && transformRE.test(styles[transitionProp + "Property"]);
  return {
    type: type2,
    timeout,
    propCount,
    hasTransform
  };
}
function getTimeout(delays, durations) {
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }
  return Math.max.apply(null, durations.map(function(d, i) {
    return toMs(d) + toMs(delays[i]);
  }));
}
function toMs(s) {
  return Number(s.slice(0, -1).replace(",", ".")) * 1e3;
}
function enter(vnode, toggleDisplay) {
  var el = vnode.elm;
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }
  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return;
  }
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return;
  }
  var css = data.css, type2 = data.type, enterClass = data.enterClass, enterToClass = data.enterToClass, enterActiveClass = data.enterActiveClass, appearClass = data.appearClass, appearToClass = data.appearToClass, appearActiveClass = data.appearActiveClass, beforeEnter = data.beforeEnter, enter2 = data.enter, afterEnter = data.afterEnter, enterCancelled = data.enterCancelled, beforeAppear = data.beforeAppear, appear = data.appear, afterAppear = data.afterAppear, appearCancelled = data.appearCancelled, duration = data.duration;
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }
  var isAppear = !context._isMounted || !vnode.isRootInsert;
  if (isAppear && !appear && appear !== "") {
    return;
  }
  var startClass = isAppear && appearClass ? appearClass : enterClass;
  var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
  var toClass = isAppear && appearToClass ? appearToClass : enterToClass;
  var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
  var enterHook = isAppear ? isFunction(appear) ? appear : enter2 : enter2;
  var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
  var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;
  var explicitEnterDuration = toNumber$1(isObject$5(duration) ? duration.enter : duration);
  if (process.env.NODE_ENV !== "production" && explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, "enter", vnode);
  }
  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);
  var cb = el._enterCb = once(function() {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });
  if (!vnode.data.show) {
    mergeVNodeHook(vnode, "insert", function() {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function() {
      removeTransitionClass(el, startClass);
      if (!cb.cancelled) {
        addTransitionClass(el, toClass);
        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type2, cb);
          }
        }
      }
    });
  }
  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }
  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}
function leave(vnode, rm) {
  var el = vnode.elm;
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }
  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data) || el.nodeType !== 1) {
    return rm();
  }
  if (isDef(el._leaveCb)) {
    return;
  }
  var css = data.css, type2 = data.type, leaveClass = data.leaveClass, leaveToClass = data.leaveToClass, leaveActiveClass = data.leaveActiveClass, beforeLeave = data.beforeLeave, leave2 = data.leave, afterLeave2 = data.afterLeave, leaveCancelled = data.leaveCancelled, delayLeave = data.delayLeave, duration = data.duration;
  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave2);
  var explicitLeaveDuration = toNumber$1(isObject$5(duration) ? duration.leave : duration);
  if (process.env.NODE_ENV !== "production" && isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, "leave", vnode);
  }
  var cb = el._leaveCb = once(function() {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave2 && afterLeave2(el);
    }
    el._leaveCb = null;
  });
  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }
  function performLeave() {
    if (cb.cancelled) {
      return;
    }
    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function() {
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);
          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type2, cb);
            }
          }
        }
      });
    }
    leave2 && leave2(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}
function checkDuration(val, name, vnode) {
  if (typeof val !== "number") {
    warn("<transition> explicit ".concat(name, " duration is not a valid number - ") + "got ".concat(JSON.stringify(val), "."), vnode.context);
  } else if (isNaN(val)) {
    warn("<transition> explicit ".concat(name, " duration is NaN - ") + "the duration expression might be incorrect.", vnode.context);
  }
}
function isValidDuration(val) {
  return typeof val === "number" && !isNaN(val);
}
function getHookArgumentsLength(fn) {
  if (isUndef(fn)) {
    return false;
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
  } else {
    return (fn._length || fn.length) > 1;
  }
}
function _enter(_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}
var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function(vnode, rm) {
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};
var platformModules = [attrs, klass, events, domProps, style, transition];
var modules = platformModules.concat(baseModules);
var patch = createPatchFunction({ nodeOps, modules });
if (isIE9) {
  document.addEventListener("selectionchange", function() {
    var el = document.activeElement;
    if (el && el.vmodel) {
      trigger(el, "input");
    }
  });
}
var directive = {
  inserted: function(el, binding, vnode, oldVnode) {
    if (vnode.tag === "select") {
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, "postpatch", function() {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }
      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === "textarea" || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        el.addEventListener("compositionstart", onCompositionStart);
        el.addEventListener("compositionend", onCompositionEnd);
        el.addEventListener("change", onCompositionEnd);
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },
  componentUpdated: function(el, binding, vnode) {
    if (vnode.tag === "select") {
      setSelected(el, binding, vnode.context);
      var prevOptions_1 = el._vOptions;
      var curOptions_1 = el._vOptions = [].map.call(el.options, getValue);
      if (curOptions_1.some(function(o, i) {
        return !looseEqual(o, prevOptions_1[i]);
      })) {
        var needReset = el.multiple ? binding.value.some(function(v) {
          return hasNoMatchingOption(v, curOptions_1);
        }) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions_1);
        if (needReset) {
          trigger(el, "change");
        }
      }
    }
  }
};
function setSelected(el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  if (isIE$1 || isEdge) {
    setTimeout(function() {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}
function actuallySetSelected(el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
    process.env.NODE_ENV !== "production" && warn('<select multiple v-model="'.concat(binding.expression, '"> ') + "expects an Array value for its binding, but got ".concat(Object.prototype.toString.call(value).slice(8, -1)), vm);
    return;
  }
  var selected, option2;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option2 = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option2)) > -1;
      if (option2.selected !== selected) {
        option2.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option2), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return;
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}
function hasNoMatchingOption(value, options) {
  return options.every(function(o) {
    return !looseEqual(o, value);
  });
}
function getValue(option2) {
  return "_value" in option2 ? option2._value : option2.value;
}
function onCompositionStart(e) {
  e.target.composing = true;
}
function onCompositionEnd(e) {
  if (!e.target.composing)
    return;
  e.target.composing = false;
  trigger(e.target, "input");
}
function trigger(el, type2) {
  var e = document.createEvent("HTMLEvents");
  e.initEvent(type2, true, true);
  el.dispatchEvent(e);
}
function locateNode(vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
}
var show = {
  bind: function(el, _a, vnode) {
    var value = _a.value;
    vnode = locateNode(vnode);
    var transition2 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay = el.style.display === "none" ? "" : el.style.display;
    if (value && transition2) {
      vnode.data.show = true;
      enter(vnode, function() {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : "none";
    }
  },
  update: function(el, _a, vnode) {
    var value = _a.value, oldValue = _a.oldValue;
    if (!value === !oldValue)
      return;
    vnode = locateNode(vnode);
    var transition2 = vnode.data && vnode.data.transition;
    if (transition2) {
      vnode.data.show = true;
      if (value) {
        enter(vnode, function() {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function() {
          el.style.display = "none";
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : "none";
    }
  },
  unbind: function(el, binding, vnode, oldVnode, isDestroy) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};
var platformDirectives = {
  model: directive,
  show
};
var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};
function getRealChild(vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children));
  } else {
    return vnode;
  }
}
function extractTransitionData(comp) {
  var data = {};
  var options = comp.$options;
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  var listeners = options._parentListeners;
  for (var key in listeners) {
    data[camelize(key)] = listeners[key];
  }
  return data;
}
function placeholder(h2, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h2("keep-alive", {
      props: rawChild.componentOptions.propsData
    });
  }
}
function hasParentTransition(vnode) {
  while (vnode = vnode.parent) {
    if (vnode.data.transition) {
      return true;
    }
  }
}
function isSameChild(child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag;
}
var isNotTextNode = function(c) {
  return c.tag || isAsyncPlaceholder(c);
};
var isVShowDirective = function(d) {
  return d.name === "show";
};
var Transition = {
  name: "transition",
  props: transitionProps,
  abstract: true,
  render: function(h2) {
    var _this = this;
    var children = this.$slots.default;
    if (!children) {
      return;
    }
    children = children.filter(isNotTextNode);
    if (!children.length) {
      return;
    }
    if (process.env.NODE_ENV !== "production" && children.length > 1) {
      warn("<transition> can only be used on a single element. Use <transition-group> for lists.", this.$parent);
    }
    var mode = this.mode;
    if (process.env.NODE_ENV !== "production" && mode && mode !== "in-out" && mode !== "out-in") {
      warn("invalid <transition> mode: " + mode, this.$parent);
    }
    var rawChild = children[0];
    if (hasParentTransition(this.$vnode)) {
      return rawChild;
    }
    var child = getRealChild(rawChild);
    if (!child) {
      return rawChild;
    }
    if (this._leaving) {
      return placeholder(h2, rawChild);
    }
    var id2 = "__transition-".concat(this._uid, "-");
    child.key = child.key == null ? child.isComment ? id2 + "comment" : id2 + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id2) === 0 ? child.key : id2 + child.key : child.key;
    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild);
    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }
    if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) && // #6687 component root is a comment node
    !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {
      var oldData = oldChild.data.transition = extend({}, data);
      if (mode === "out-in") {
        this._leaving = true;
        mergeVNodeHook(oldData, "afterLeave", function() {
          _this._leaving = false;
          _this.$forceUpdate();
        });
        return placeholder(h2, rawChild);
      } else if (mode === "in-out") {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild;
        }
        var delayedLeave_1;
        var performLeave = function() {
          delayedLeave_1();
        };
        mergeVNodeHook(data, "afterEnter", performLeave);
        mergeVNodeHook(data, "enterCancelled", performLeave);
        mergeVNodeHook(oldData, "delayLeave", function(leave2) {
          delayedLeave_1 = leave2;
        });
      }
    }
    return rawChild;
  }
};
var props$1 = extend({
  tag: String,
  moveClass: String
}, transitionProps);
delete props$1.mode;
var TransitionGroup = {
  props: props$1,
  beforeMount: function() {
    var _this = this;
    var update2 = this._update;
    this._update = function(vnode, hydrating) {
      var restoreActiveInstance = setActiveInstance(_this);
      _this.__patch__(
        _this._vnode,
        _this.kept,
        false,
        // hydrating
        true
        // removeOnly (!important, avoids unnecessary moves)
      );
      _this._vnode = _this.kept;
      restoreActiveInstance();
      update2.call(_this, vnode, hydrating);
    };
  },
  render: function(h2) {
    var tag2 = this.tag || this.$vnode.data.tag || "span";
    var map = /* @__PURE__ */ Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);
    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf("__vlist") !== 0) {
          children.push(c);
          map[c.key] = c;
          (c.data || (c.data = {})).transition = transitionData;
        } else if (process.env.NODE_ENV !== "production") {
          var opts = c.componentOptions;
          var name_1 = opts ? getComponentName(opts.Ctor.options) || opts.tag || "" : c.tag;
          warn("<transition-group> children must be keyed: <".concat(name_1, ">"));
        }
      }
    }
    if (prevChildren) {
      var kept = [];
      var removed = [];
      for (var i = 0; i < prevChildren.length; i++) {
        var c = prevChildren[i];
        c.data.transition = transitionData;
        c.data.pos = c.elm.getBoundingClientRect();
        if (map[c.key]) {
          kept.push(c);
        } else {
          removed.push(c);
        }
      }
      this.kept = h2(tag2, null, kept);
      this.removed = removed;
    }
    return h2(tag2, null, children);
  },
  updated: function() {
    var children = this.prevChildren;
    var moveClass = this.moveClass || (this.name || "v") + "-move";
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return;
    }
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);
    this._reflow = document.body.offsetHeight;
    children.forEach(function(c) {
      if (c.data.moved) {
        var el_1 = c.elm;
        var s = el_1.style;
        addTransitionClass(el_1, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = "";
        el_1.addEventListener(transitionEndEvent, el_1._moveCb = function cb(e) {
          if (e && e.target !== el_1) {
            return;
          }
          if (!e || /transform$/.test(e.propertyName)) {
            el_1.removeEventListener(transitionEndEvent, cb);
            el_1._moveCb = null;
            removeTransitionClass(el_1, moveClass);
          }
        });
      }
    });
  },
  methods: {
    hasMove: function(el, moveClass) {
      if (!hasTransition) {
        return false;
      }
      if (this._hasMove) {
        return this._hasMove;
      }
      var clone = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach(function(cls) {
          removeClass(clone, cls);
        });
      }
      addClass(clone, moveClass);
      clone.style.display = "none";
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return this._hasMove = info.hasTransform;
    }
  }
};
function callPendingCbs(c) {
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}
function recordPosition(c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}
function applyTranslation(c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(".concat(dx, "px,").concat(dy, "px)");
    s.transitionDuration = "0s";
  }
}
var platformComponents = {
  Transition,
  TransitionGroup
};
Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement;
extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents);
Vue.prototype.__patch__ = inBrowser ? patch : noop;
Vue.prototype.$mount = function(el, hydrating) {
  el = el && inBrowser ? query(el) : void 0;
  return mountComponent(this, el, hydrating);
};
if (inBrowser) {
  setTimeout(function() {
    if (config$1.devtools) {
      if (devtools) {
        devtools.emit("init", Vue);
      } else if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test") {
        console[console.info ? "info" : "log"]("Download the Vue Devtools extension for a better development experience:\nhttps://github.com/vuejs/vue-devtools");
      }
    }
    if (process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test" && config$1.productionTip !== false && typeof console !== "undefined") {
      console[console.info ? "info" : "log"]("You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html");
    }
  }, 0);
}
const vue_runtime_esm = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  EffectScope,
  computed,
  customRef,
  default: Vue,
  defineAsyncComponent,
  defineComponent,
  del,
  effectScope,
  getCurrentInstance,
  getCurrentScope,
  h,
  inject,
  isProxy,
  isReactive,
  isReadonly,
  isRef,
  isShallow,
  markRaw,
  mergeDefaults,
  nextTick,
  onActivated,
  onBeforeMount,
  onBeforeUnmount,
  onBeforeUpdate,
  onDeactivated,
  onErrorCaptured,
  onMounted,
  onRenderTracked,
  onRenderTriggered,
  onScopeDispose,
  onServerPrefetch,
  onUnmounted,
  onUpdated,
  provide,
  proxyRefs,
  reactive,
  readonly,
  ref: ref$1,
  set,
  shallowReactive,
  shallowReadonly,
  shallowRef,
  toRaw,
  toRef,
  toRefs,
  triggerRef,
  unref,
  useAttrs,
  useCssModule,
  useCssVars,
  useListeners,
  useSlots,
  version,
  watch,
  watchEffect,
  watchPostEffect,
  watchSyncEffect
}, Symbol.toStringTag, { value: "Module" }));
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
function getAugmentedNamespace(n) {
  if (n.__esModule)
    return n;
  var f2 = n.default;
  if (typeof f2 == "function") {
    var a = function a2() {
      if (this instanceof a2) {
        return Reflect.construct(f2, arguments, this.constructor);
      }
      return f2.apply(this, arguments);
    };
    a.prototype = f2.prototype;
  } else
    a = {};
  Object.defineProperty(a, "__esModule", { value: true });
  Object.keys(n).forEach(function(k) {
    var d = Object.getOwnPropertyDescriptor(n, k);
    Object.defineProperty(a, k, d.get ? d : {
      enumerable: true,
      get: function() {
        return n[k];
      }
    });
  });
  return a;
}
var elementUi_common = { exports: {} };
var dateUtil = {};
var date$1 = { exports: {} };
var hasRequiredDate;
function requireDate() {
  if (hasRequiredDate)
    return date$1.exports;
  hasRequiredDate = 1;
  (function(module) {
    (function(main) {
      var fecha = {};
      var token = /d{1,4}|M{1,4}|yy(?:yy)?|S{1,3}|Do|ZZ|([HhMsDm])\1?|[aA]|"[^"]*"|'[^']*'/g;
      var twoDigits = "\\d\\d?";
      var threeDigits = "\\d{3}";
      var fourDigits = "\\d{4}";
      var word = "[^\\s]+";
      var literal = /\[([^]*?)\]/gm;
      var noop2 = function noop3() {
      };
      function regexEscape(str) {
        return str.replace(/[|\\{()[^$+*?.-]/g, "\\$&");
      }
      function shorten(arr, sLen) {
        var newArr = [];
        for (var i = 0, len = arr.length; i < len; i++) {
          newArr.push(arr[i].substr(0, sLen));
        }
        return newArr;
      }
      function monthUpdate(arrName) {
        return function(d, v, i18n) {
          var index2 = i18n[arrName].indexOf(v.charAt(0).toUpperCase() + v.substr(1).toLowerCase());
          if (~index2) {
            d.month = index2;
          }
        };
      }
      function pad(val, len) {
        val = String(val);
        len = len || 2;
        while (val.length < len) {
          val = "0" + val;
        }
        return val;
      }
      var dayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
      var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
      var monthNamesShort = shorten(monthNames, 3);
      var dayNamesShort = shorten(dayNames, 3);
      fecha.i18n = {
        dayNamesShort,
        dayNames,
        monthNamesShort,
        monthNames,
        amPm: ["am", "pm"],
        DoFn: function DoFn(D) {
          return D + ["th", "st", "nd", "rd"][D % 10 > 3 ? 0 : (D - D % 10 !== 10) * D % 10];
        }
      };
      var formatFlags = {
        D: function D(dateObj) {
          return dateObj.getDay();
        },
        DD: function DD(dateObj) {
          return pad(dateObj.getDay());
        },
        Do: function Do(dateObj, i18n) {
          return i18n.DoFn(dateObj.getDate());
        },
        d: function d(dateObj) {
          return dateObj.getDate();
        },
        dd: function dd(dateObj) {
          return pad(dateObj.getDate());
        },
        ddd: function ddd(dateObj, i18n) {
          return i18n.dayNamesShort[dateObj.getDay()];
        },
        dddd: function dddd(dateObj, i18n) {
          return i18n.dayNames[dateObj.getDay()];
        },
        M: function M(dateObj) {
          return dateObj.getMonth() + 1;
        },
        MM: function MM(dateObj) {
          return pad(dateObj.getMonth() + 1);
        },
        MMM: function MMM(dateObj, i18n) {
          return i18n.monthNamesShort[dateObj.getMonth()];
        },
        MMMM: function MMMM(dateObj, i18n) {
          return i18n.monthNames[dateObj.getMonth()];
        },
        yy: function yy(dateObj) {
          return pad(String(dateObj.getFullYear()), 4).substr(2);
        },
        yyyy: function yyyy(dateObj) {
          return pad(dateObj.getFullYear(), 4);
        },
        h: function h2(dateObj) {
          return dateObj.getHours() % 12 || 12;
        },
        hh: function hh(dateObj) {
          return pad(dateObj.getHours() % 12 || 12);
        },
        H: function H(dateObj) {
          return dateObj.getHours();
        },
        HH: function HH(dateObj) {
          return pad(dateObj.getHours());
        },
        m: function m(dateObj) {
          return dateObj.getMinutes();
        },
        mm: function mm(dateObj) {
          return pad(dateObj.getMinutes());
        },
        s: function s(dateObj) {
          return dateObj.getSeconds();
        },
        ss: function ss(dateObj) {
          return pad(dateObj.getSeconds());
        },
        S: function S(dateObj) {
          return Math.round(dateObj.getMilliseconds() / 100);
        },
        SS: function SS(dateObj) {
          return pad(Math.round(dateObj.getMilliseconds() / 10), 2);
        },
        SSS: function SSS(dateObj) {
          return pad(dateObj.getMilliseconds(), 3);
        },
        a: function a(dateObj, i18n) {
          return dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1];
        },
        A: function A(dateObj, i18n) {
          return dateObj.getHours() < 12 ? i18n.amPm[0].toUpperCase() : i18n.amPm[1].toUpperCase();
        },
        ZZ: function ZZ(dateObj) {
          var o = dateObj.getTimezoneOffset();
          return (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4);
        }
      };
      var parseFlags = {
        d: [twoDigits, function(d, v) {
          d.day = v;
        }],
        Do: [twoDigits + word, function(d, v) {
          d.day = parseInt(v, 10);
        }],
        M: [twoDigits, function(d, v) {
          d.month = v - 1;
        }],
        yy: [twoDigits, function(d, v) {
          var da = /* @__PURE__ */ new Date(), cent = +("" + da.getFullYear()).substr(0, 2);
          d.year = "" + (v > 68 ? cent - 1 : cent) + v;
        }],
        h: [twoDigits, function(d, v) {
          d.hour = v;
        }],
        m: [twoDigits, function(d, v) {
          d.minute = v;
        }],
        s: [twoDigits, function(d, v) {
          d.second = v;
        }],
        yyyy: [fourDigits, function(d, v) {
          d.year = v;
        }],
        S: ["\\d", function(d, v) {
          d.millisecond = v * 100;
        }],
        SS: ["\\d{2}", function(d, v) {
          d.millisecond = v * 10;
        }],
        SSS: [threeDigits, function(d, v) {
          d.millisecond = v;
        }],
        D: [twoDigits, noop2],
        ddd: [word, noop2],
        MMM: [word, monthUpdate("monthNamesShort")],
        MMMM: [word, monthUpdate("monthNames")],
        a: [word, function(d, v, i18n) {
          var val = v.toLowerCase();
          if (val === i18n.amPm[0]) {
            d.isPm = false;
          } else if (val === i18n.amPm[1]) {
            d.isPm = true;
          }
        }],
        ZZ: ["[^\\s]*?[\\+\\-]\\d\\d:?\\d\\d|[^\\s]*?Z", function(d, v) {
          var parts = (v + "").match(/([+-]|\d\d)/gi), minutes;
          if (parts) {
            minutes = +(parts[1] * 60) + parseInt(parts[2], 10);
            d.timezoneOffset = parts[0] === "+" ? minutes : -minutes;
          }
        }]
      };
      parseFlags.dd = parseFlags.d;
      parseFlags.dddd = parseFlags.ddd;
      parseFlags.DD = parseFlags.D;
      parseFlags.mm = parseFlags.m;
      parseFlags.hh = parseFlags.H = parseFlags.HH = parseFlags.h;
      parseFlags.MM = parseFlags.M;
      parseFlags.ss = parseFlags.s;
      parseFlags.A = parseFlags.a;
      fecha.masks = {
        default: "ddd MMM dd yyyy HH:mm:ss",
        shortDate: "M/D/yy",
        mediumDate: "MMM d, yyyy",
        longDate: "MMMM d, yyyy",
        fullDate: "dddd, MMMM d, yyyy",
        shortTime: "HH:mm",
        mediumTime: "HH:mm:ss",
        longTime: "HH:mm:ss.SSS"
      };
      fecha.format = function(dateObj, mask, i18nSettings) {
        var i18n = i18nSettings || fecha.i18n;
        if (typeof dateObj === "number") {
          dateObj = new Date(dateObj);
        }
        if (Object.prototype.toString.call(dateObj) !== "[object Date]" || isNaN(dateObj.getTime())) {
          throw new Error("Invalid Date in fecha.format");
        }
        mask = fecha.masks[mask] || mask || fecha.masks["default"];
        var literals = [];
        mask = mask.replace(literal, function($0, $1) {
          literals.push($1);
          return "@@@";
        });
        mask = mask.replace(token, function($0) {
          return $0 in formatFlags ? formatFlags[$0](dateObj, i18n) : $0.slice(1, $0.length - 1);
        });
        return mask.replace(/@@@/g, function() {
          return literals.shift();
        });
      };
      fecha.parse = function(dateStr, format2, i18nSettings) {
        var i18n = i18nSettings || fecha.i18n;
        if (typeof format2 !== "string") {
          throw new Error("Invalid format in fecha.parse");
        }
        format2 = fecha.masks[format2] || format2;
        if (dateStr.length > 1e3) {
          return null;
        }
        var dateInfo = {};
        var parseInfo = [];
        var literals = [];
        format2 = format2.replace(literal, function($0, $1) {
          literals.push($1);
          return "@@@";
        });
        var newFormat = regexEscape(format2).replace(token, function($0) {
          if (parseFlags[$0]) {
            var info = parseFlags[$0];
            parseInfo.push(info[1]);
            return "(" + info[0] + ")";
          }
          return $0;
        });
        newFormat = newFormat.replace(/@@@/g, function() {
          return literals.shift();
        });
        var matches2 = dateStr.match(new RegExp(newFormat, "i"));
        if (!matches2) {
          return null;
        }
        for (var i = 1; i < matches2.length; i++) {
          parseInfo[i - 1](dateInfo, matches2[i], i18n);
        }
        var today = /* @__PURE__ */ new Date();
        if (dateInfo.isPm === true && dateInfo.hour != null && +dateInfo.hour !== 12) {
          dateInfo.hour = +dateInfo.hour + 12;
        } else if (dateInfo.isPm === false && +dateInfo.hour === 12) {
          dateInfo.hour = 0;
        }
        var date3;
        if (dateInfo.timezoneOffset != null) {
          dateInfo.minute = +(dateInfo.minute || 0) - +dateInfo.timezoneOffset;
          date3 = new Date(Date.UTC(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1, dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0));
        } else {
          date3 = new Date(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1, dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0);
        }
        return date3;
      };
      if (module.exports) {
        module.exports = fecha;
      } else {
        main.fecha = fecha;
      }
    })(void 0);
  })(date$1);
  return date$1.exports;
}
var locale$1 = {};
var zhCN = {};
var hasRequiredZhCN;
function requireZhCN() {
  if (hasRequiredZhCN)
    return zhCN;
  hasRequiredZhCN = 1;
  zhCN.__esModule = true;
  zhCN.default = {
    el: {
      colorpicker: {
        confirm: "确定",
        clear: "清空"
      },
      datepicker: {
        now: "此刻",
        today: "今天",
        cancel: "取消",
        clear: "清空",
        confirm: "确定",
        selectDate: "选择日期",
        selectTime: "选择时间",
        startDate: "开始日期",
        startTime: "开始时间",
        endDate: "结束日期",
        endTime: "结束时间",
        prevYear: "前一年",
        nextYear: "后一年",
        prevMonth: "上个月",
        nextMonth: "下个月",
        year: "年",
        month1: "1 月",
        month2: "2 月",
        month3: "3 月",
        month4: "4 月",
        month5: "5 月",
        month6: "6 月",
        month7: "7 月",
        month8: "8 月",
        month9: "9 月",
        month10: "10 月",
        month11: "11 月",
        month12: "12 月",
        // week: '周次',
        weeks: {
          sun: "日",
          mon: "一",
          tue: "二",
          wed: "三",
          thu: "四",
          fri: "五",
          sat: "六"
        },
        months: {
          jan: "一月",
          feb: "二月",
          mar: "三月",
          apr: "四月",
          may: "五月",
          jun: "六月",
          jul: "七月",
          aug: "八月",
          sep: "九月",
          oct: "十月",
          nov: "十一月",
          dec: "十二月"
        }
      },
      select: {
        loading: "加载中",
        noMatch: "无匹配数据",
        noData: "无数据",
        placeholder: "请选择"
      },
      cascader: {
        noMatch: "无匹配数据",
        loading: "加载中",
        placeholder: "请选择",
        noData: "暂无数据"
      },
      pagination: {
        goto: "前往",
        pagesize: "条/页",
        total: "共 {total} 条",
        pageClassifier: "页"
      },
      messagebox: {
        title: "提示",
        confirm: "确定",
        cancel: "取消",
        error: "输入的数据不合法!"
      },
      upload: {
        deleteTip: "按 delete 键可删除",
        delete: "删除",
        preview: "查看图片",
        continue: "继续上传"
      },
      table: {
        emptyText: "暂无数据",
        confirmFilter: "筛选",
        resetFilter: "重置",
        clearFilter: "全部",
        sumText: "合计"
      },
      tree: {
        emptyText: "暂无数据"
      },
      transfer: {
        noMatch: "无匹配数据",
        noData: "无数据",
        titles: ["列表 1", "列表 2"],
        filterPlaceholder: "请输入搜索内容",
        noCheckedFormat: "共 {total} 项",
        hasCheckedFormat: "已选 {checked}/{total} 项"
      },
      image: {
        error: "加载失败"
      },
      pageHeader: {
        title: "返回"
      },
      popconfirm: {
        confirmButtonText: "确定",
        cancelButtonText: "取消"
      },
      empty: {
        description: "暂无数据"
      }
    }
  };
  return zhCN;
}
const require$$6$1 = /* @__PURE__ */ getAugmentedNamespace(vue_runtime_esm);
var cjs;
var hasRequiredCjs;
function requireCjs() {
  if (hasRequiredCjs)
    return cjs;
  hasRequiredCjs = 1;
  var isMergeableObject = function isMergeableObject2(value) {
    return isNonNullObject(value) && !isSpecial(value);
  };
  function isNonNullObject(value) {
    return !!value && typeof value === "object";
  }
  function isSpecial(value) {
    var stringValue = Object.prototype.toString.call(value);
    return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
  }
  var canUseSymbol = typeof Symbol === "function" && Symbol.for;
  var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
  function isReactElement(value) {
    return value.$$typeof === REACT_ELEMENT_TYPE;
  }
  function emptyTarget(val) {
    return Array.isArray(val) ? [] : {};
  }
  function cloneIfNecessary(value, optionsArgument) {
    var clone = optionsArgument && optionsArgument.clone === true;
    return clone && isMergeableObject(value) ? deepmerge(emptyTarget(value), value, optionsArgument) : value;
  }
  function defaultArrayMerge(target2, source, optionsArgument) {
    var destination = target2.slice();
    source.forEach(function(e, i) {
      if (typeof destination[i] === "undefined") {
        destination[i] = cloneIfNecessary(e, optionsArgument);
      } else if (isMergeableObject(e)) {
        destination[i] = deepmerge(target2[i], e, optionsArgument);
      } else if (target2.indexOf(e) === -1) {
        destination.push(cloneIfNecessary(e, optionsArgument));
      }
    });
    return destination;
  }
  function mergeObject(target2, source, optionsArgument) {
    var destination = {};
    if (isMergeableObject(target2)) {
      Object.keys(target2).forEach(function(key) {
        destination[key] = cloneIfNecessary(target2[key], optionsArgument);
      });
    }
    Object.keys(source).forEach(function(key) {
      if (!isMergeableObject(source[key]) || !target2[key]) {
        destination[key] = cloneIfNecessary(source[key], optionsArgument);
      } else {
        destination[key] = deepmerge(target2[key], source[key], optionsArgument);
      }
    });
    return destination;
  }
  function deepmerge(target2, source, optionsArgument) {
    var sourceIsArray = Array.isArray(source);
    var targetIsArray = Array.isArray(target2);
    var options = optionsArgument || { arrayMerge: defaultArrayMerge };
    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
    if (!sourceAndTargetTypesMatch) {
      return cloneIfNecessary(source, optionsArgument);
    } else if (sourceIsArray) {
      var arrayMerge = options.arrayMerge || defaultArrayMerge;
      return arrayMerge(target2, source, optionsArgument);
    } else {
      return mergeObject(target2, source, optionsArgument);
    }
  }
  deepmerge.all = function deepmergeAll(array3, optionsArgument) {
    if (!Array.isArray(array3) || array3.length < 2) {
      throw new Error("first argument should be an array with at least two elements");
    }
    return array3.reduce(function(prev, next) {
      return deepmerge(prev, next, optionsArgument);
    });
  };
  var deepmerge_1 = deepmerge;
  cjs = deepmerge_1;
  return cjs;
}
var format$1 = {};
var util = {};
var types$1 = {};
var hasRequiredTypes;
function requireTypes() {
  if (hasRequiredTypes)
    return types$1;
  hasRequiredTypes = 1;
  types$1.__esModule = true;
  types$1.isDefined = types$1.isUndefined = types$1.isFunction = void 0;
  var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
  } : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };
  types$1.isString = isString;
  types$1.isObject = isObject2;
  types$1.isHtmlElement = isHtmlElement;
  var _vue = require$$6$1;
  var _vue2 = _interopRequireDefault2(_vue);
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function isString(obj) {
    return Object.prototype.toString.call(obj) === "[object String]";
  }
  function isObject2(obj) {
    return Object.prototype.toString.call(obj) === "[object Object]";
  }
  function isHtmlElement(node) {
    return node && node.nodeType === Node.ELEMENT_NODE;
  }
  var isFunction2 = function isFunction3(functionToCheck) {
    var getType3 = {};
    return functionToCheck && getType3.toString.call(functionToCheck) === "[object Function]";
  };
  if (typeof /./ !== "function" && (typeof Int8Array === "undefined" ? "undefined" : _typeof2(Int8Array)) !== "object" && (_vue2.default.prototype.$isServer || typeof document.childNodes !== "function")) {
    types$1.isFunction = isFunction2 = function isFunction3(obj) {
      return typeof obj === "function" || false;
    };
  }
  types$1.isFunction = isFunction2;
  types$1.isUndefined = function isUndefined(val) {
    return val === void 0;
  };
  types$1.isDefined = function isDefined(val) {
    return val !== void 0 && val !== null;
  };
  return types$1;
}
var hasRequiredUtil;
function requireUtil() {
  if (hasRequiredUtil)
    return util;
  hasRequiredUtil = 1;
  util.__esModule = true;
  util.isMac = util.isEmpty = util.isEqual = util.arrayEquals = util.looseEqual = util.capitalize = util.kebabCase = util.autoprefixer = util.isFirefox = util.isEdge = util.isIE = util.coerceTruthyValueToArray = util.arrayFind = util.arrayFindIndex = util.escapeRegexpString = util.valueEquals = util.generateId = util.getValueByPath = void 0;
  var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
  } : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };
  util.noop = noop2;
  util.hasOwn = hasOwn2;
  util.toObject = toObject2;
  util.getPropByPath = getPropByPath;
  util.rafThrottle = rafThrottle;
  util.objToArray = objToArray;
  var _vue = require$$6$1;
  var _vue2 = _interopRequireDefault2(_vue);
  var _types = requireTypes();
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var hasOwnProperty2 = Object.prototype.hasOwnProperty;
  function noop2() {
  }
  function hasOwn2(obj, key) {
    return hasOwnProperty2.call(obj, key);
  }
  function extend2(to, _from) {
    for (var key in _from) {
      to[key] = _from[key];
    }
    return to;
  }
  function toObject2(arr) {
    var res = {};
    for (var i = 0; i < arr.length; i++) {
      if (arr[i]) {
        extend2(res, arr[i]);
      }
    }
    return res;
  }
  util.getValueByPath = function getValueByPath(object3, prop) {
    prop = prop || "";
    var paths = prop.split(".");
    var current = object3;
    var result = null;
    for (var i = 0, j = paths.length; i < j; i++) {
      var path = paths[i];
      if (!current)
        break;
      if (i === j - 1) {
        result = current[path];
        break;
      }
      current = current[path];
    }
    return result;
  };
  function getPropByPath(obj, path, strict) {
    var tempObj = obj;
    path = path.replace(/\[(\w+)\]/g, ".$1");
    path = path.replace(/^\./, "");
    var keyArr = path.split(".");
    var i = 0;
    for (var len = keyArr.length; i < len - 1; ++i) {
      if (!tempObj && !strict)
        break;
      var key = keyArr[i];
      if (key in tempObj) {
        tempObj = tempObj[key];
      } else {
        if (strict) {
          throw new Error("please transfer a valid prop path to form item!");
        }
        break;
      }
    }
    return {
      o: tempObj,
      k: keyArr[i],
      v: tempObj ? tempObj[keyArr[i]] : null
    };
  }
  util.generateId = function generateId() {
    return Math.floor(Math.random() * 1e4);
  };
  util.valueEquals = function valueEquals(a, b) {
    if (a === b)
      return true;
    if (!(a instanceof Array))
      return false;
    if (!(b instanceof Array))
      return false;
    if (a.length !== b.length)
      return false;
    for (var i = 0; i !== a.length; ++i) {
      if (a[i] !== b[i])
        return false;
    }
    return true;
  };
  util.escapeRegexpString = function escapeRegexpString() {
    var value = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    return String(value).replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
  };
  var arrayFindIndex = util.arrayFindIndex = function arrayFindIndex2(arr, pred) {
    for (var i = 0; i !== arr.length; ++i) {
      if (pred(arr[i])) {
        return i;
      }
    }
    return -1;
  };
  util.arrayFind = function arrayFind(arr, pred) {
    var idx = arrayFindIndex(arr, pred);
    return idx !== -1 ? arr[idx] : void 0;
  };
  util.coerceTruthyValueToArray = function coerceTruthyValueToArray(val) {
    if (Array.isArray(val)) {
      return val;
    } else if (val) {
      return [val];
    } else {
      return [];
    }
  };
  util.isIE = function isIE2() {
    return !_vue2.default.prototype.$isServer && !isNaN(Number(document.documentMode));
  };
  util.isEdge = function isEdge2() {
    return !_vue2.default.prototype.$isServer && navigator.userAgent.indexOf("Edge") > -1;
  };
  util.isFirefox = function isFirefox() {
    return !_vue2.default.prototype.$isServer && !!window.navigator.userAgent.match(/firefox/i);
  };
  util.autoprefixer = function autoprefixer(style2) {
    if ((typeof style2 === "undefined" ? "undefined" : _typeof2(style2)) !== "object")
      return style2;
    var rules2 = ["transform", "transition", "animation"];
    var prefixes = ["ms-", "webkit-"];
    rules2.forEach(function(rule) {
      var value = style2[rule];
      if (rule && value) {
        prefixes.forEach(function(prefix) {
          style2[prefix + rule] = value;
        });
      }
    });
    return style2;
  };
  util.kebabCase = function kebabCase(str) {
    var hyphenateRE2 = /([^-])([A-Z])/g;
    return str.replace(hyphenateRE2, "$1-$2").replace(hyphenateRE2, "$1-$2").toLowerCase();
  };
  util.capitalize = function capitalize2(str) {
    if (!(0, _types.isString)(str))
      return str;
    return str.charAt(0).toUpperCase() + str.slice(1);
  };
  var looseEqual2 = util.looseEqual = function looseEqual3(a, b) {
    var isObjectA = (0, _types.isObject)(a);
    var isObjectB = (0, _types.isObject)(b);
    if (isObjectA && isObjectB) {
      return JSON.stringify(a) === JSON.stringify(b);
    } else if (!isObjectA && !isObjectB) {
      return String(a) === String(b);
    } else {
      return false;
    }
  };
  var arrayEquals = util.arrayEquals = function arrayEquals2(arrayA, arrayB) {
    arrayA = arrayA || [];
    arrayB = arrayB || [];
    if (arrayA.length !== arrayB.length) {
      return false;
    }
    for (var i = 0; i < arrayA.length; i++) {
      if (!looseEqual2(arrayA[i], arrayB[i])) {
        return false;
      }
    }
    return true;
  };
  util.isEqual = function isEqual(value1, value2) {
    if (Array.isArray(value1) && Array.isArray(value2)) {
      return arrayEquals(value1, value2);
    }
    return looseEqual2(value1, value2);
  };
  var isEmpty = util.isEmpty = function isEmpty2(val) {
    if (val == null)
      return true;
    if (typeof val === "boolean")
      return false;
    if (typeof val === "number")
      return !val;
    if (val instanceof Error)
      return val.message === "";
    switch (Object.prototype.toString.call(val)) {
      case "[object String]":
      case "[object Array]":
        return !val.length;
      case "[object File]":
      case "[object Map]":
      case "[object Set]": {
        return !val.size;
      }
      case "[object Object]": {
        return !Object.keys(val).length;
      }
    }
    return false;
  };
  function rafThrottle(fn) {
    var locked = false;
    return function() {
      var _this = this;
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if (locked)
        return;
      locked = true;
      window.requestAnimationFrame(function(_) {
        fn.apply(_this, args);
        locked = false;
      });
    };
  }
  function objToArray(obj) {
    if (Array.isArray(obj)) {
      return obj;
    }
    return isEmpty(obj) ? [] : [obj];
  }
  util.isMac = function isMac() {
    return !_vue2.default.prototype.$isServer && /macintosh|mac os x/i.test(navigator.userAgent);
  };
  return util;
}
var hasRequiredFormat;
function requireFormat() {
  if (hasRequiredFormat)
    return format$1;
  hasRequiredFormat = 1;
  format$1.__esModule = true;
  var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
  } : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };
  format$1.default = function(Vue2) {
    function template(string2) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      if (args.length === 1 && _typeof2(args[0]) === "object") {
        args = args[0];
      }
      if (!args || !args.hasOwnProperty) {
        args = {};
      }
      return string2.replace(RE_NARGS, function(match, prefix, i, index2) {
        var result = void 0;
        if (string2[index2 - 1] === "{" && string2[index2 + match.length] === "}") {
          return i;
        } else {
          result = (0, _util.hasOwn)(args, i) ? args[i] : null;
          if (result === null || result === void 0) {
            return "";
          }
          return result;
        }
      });
    }
    return template;
  };
  var _util = requireUtil();
  var RE_NARGS = /(%|)\{([0-9a-zA-Z_]+)\}/g;
  return format$1;
}
var hasRequiredLocale$1;
function requireLocale$1() {
  if (hasRequiredLocale$1)
    return locale$1;
  hasRequiredLocale$1 = 1;
  locale$1.__esModule = true;
  locale$1.i18n = locale$1.use = locale$1.t = void 0;
  var _zhCN = requireZhCN();
  var _zhCN2 = _interopRequireDefault2(_zhCN);
  var _vue = require$$6$1;
  var _vue2 = _interopRequireDefault2(_vue);
  var _deepmerge = requireCjs();
  var _deepmerge2 = _interopRequireDefault2(_deepmerge);
  var _format = requireFormat();
  var _format2 = _interopRequireDefault2(_format);
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var format2 = (0, _format2.default)(_vue2.default);
  var lang = _zhCN2.default;
  var merged = false;
  var i18nHandler = function i18nHandler2() {
    var vuei18n = Object.getPrototypeOf(this || _vue2.default).$t;
    if (typeof vuei18n === "function" && !!_vue2.default.locale) {
      if (!merged) {
        merged = true;
        _vue2.default.locale(_vue2.default.config.lang, (0, _deepmerge2.default)(lang, _vue2.default.locale(_vue2.default.config.lang) || {}, { clone: true }));
      }
      return vuei18n.apply(this, arguments);
    }
  };
  var t = locale$1.t = function t2(path, options) {
    var value = i18nHandler.apply(this, arguments);
    if (value !== null && value !== void 0)
      return value;
    var array3 = path.split(".");
    var current = lang;
    for (var i = 0, j = array3.length; i < j; i++) {
      var property = array3[i];
      value = current[property];
      if (i === j - 1)
        return format2(value, options);
      if (!value)
        return "";
      current = value;
    }
    return "";
  };
  var use = locale$1.use = function use2(l) {
    lang = l || lang;
  };
  var i18n = locale$1.i18n = function i18n2(fn) {
    i18nHandler = fn || i18nHandler;
  };
  locale$1.default = { use, t, i18n };
  return locale$1;
}
var hasRequiredDateUtil;
function requireDateUtil() {
  if (hasRequiredDateUtil)
    return dateUtil;
  hasRequiredDateUtil = 1;
  dateUtil.__esModule = true;
  dateUtil.validateRangeInOneMonth = dateUtil.extractTimeFormat = dateUtil.extractDateFormat = dateUtil.nextYear = dateUtil.prevYear = dateUtil.nextMonth = dateUtil.prevMonth = dateUtil.changeYearMonthAndClampDate = dateUtil.timeWithinRange = dateUtil.limitTimeRange = dateUtil.clearMilliseconds = dateUtil.clearTime = dateUtil.modifyWithTimeString = dateUtil.modifyTime = dateUtil.modifyDate = dateUtil.range = dateUtil.getRangeMinutes = dateUtil.getMonthDays = dateUtil.getPrevMonthLastDays = dateUtil.getRangeHours = dateUtil.getWeekNumber = dateUtil.getStartDateOfMonth = dateUtil.nextDate = dateUtil.prevDate = dateUtil.getFirstDayOfMonth = dateUtil.getDayCountOfYear = dateUtil.getDayCountOfMonth = dateUtil.parseDate = dateUtil.formatDate = dateUtil.isDateObject = dateUtil.isDate = dateUtil.toDate = dateUtil.getI18nSettings = void 0;
  var _date = requireDate();
  var _date2 = _interopRequireDefault2(_date);
  var _locale = requireLocale$1();
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var weeks = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
  var months = ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"];
  var newArray = function newArray2(start, end) {
    var result = [];
    for (var i = start; i <= end; i++) {
      result.push(i);
    }
    return result;
  };
  var getI18nSettings = dateUtil.getI18nSettings = function getI18nSettings2() {
    return {
      dayNamesShort: weeks.map(function(week) {
        return (0, _locale.t)("el.datepicker.weeks." + week);
      }),
      dayNames: weeks.map(function(week) {
        return (0, _locale.t)("el.datepicker.weeks." + week);
      }),
      monthNamesShort: months.map(function(month) {
        return (0, _locale.t)("el.datepicker.months." + month);
      }),
      monthNames: months.map(function(month, index2) {
        return (0, _locale.t)("el.datepicker.month" + (index2 + 1));
      }),
      amPm: ["am", "pm"]
    };
  };
  var toDate = dateUtil.toDate = function toDate2(date3) {
    return isDate(date3) ? new Date(date3) : null;
  };
  var isDate = dateUtil.isDate = function isDate2(date3) {
    if (date3 === null || date3 === void 0)
      return false;
    if (isNaN(new Date(date3).getTime()))
      return false;
    if (Array.isArray(date3))
      return false;
    return true;
  };
  dateUtil.isDateObject = function isDateObject(val) {
    return val instanceof Date;
  };
  dateUtil.formatDate = function formatDate(date3, format2) {
    date3 = toDate(date3);
    if (!date3)
      return "";
    return _date2.default.format(date3, format2 || "yyyy-MM-dd", getI18nSettings());
  };
  var parseDate = dateUtil.parseDate = function parseDate2(string2, format2) {
    return _date2.default.parse(string2, format2 || "yyyy-MM-dd", getI18nSettings());
  };
  var getDayCountOfMonth = dateUtil.getDayCountOfMonth = function getDayCountOfMonth2(year, month) {
    if (isNaN(+month))
      return 31;
    return new Date(year, +month + 1, 0).getDate();
  };
  dateUtil.getDayCountOfYear = function getDayCountOfYear(year) {
    var isLeapYear = year % 400 === 0 || year % 100 !== 0 && year % 4 === 0;
    return isLeapYear ? 366 : 365;
  };
  dateUtil.getFirstDayOfMonth = function getFirstDayOfMonth(date3) {
    var temp = new Date(date3.getTime());
    temp.setDate(1);
    return temp.getDay();
  };
  var prevDate = dateUtil.prevDate = function prevDate2(date3) {
    var amount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    return new Date(date3.getFullYear(), date3.getMonth(), date3.getDate() - amount);
  };
  dateUtil.nextDate = function nextDate(date3) {
    var amount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    return new Date(date3.getFullYear(), date3.getMonth(), date3.getDate() + amount);
  };
  dateUtil.getStartDateOfMonth = function getStartDateOfMonth(year, month) {
    var result = new Date(year, month, 1);
    var day = result.getDay();
    if (day === 0) {
      return prevDate(result, 7);
    } else {
      return prevDate(result, day);
    }
  };
  dateUtil.getWeekNumber = function getWeekNumber(src) {
    if (!isDate(src))
      return null;
    var date3 = new Date(src.getTime());
    date3.setHours(0, 0, 0, 0);
    date3.setDate(date3.getDate() + 3 - (date3.getDay() + 6) % 7);
    var week1 = new Date(date3.getFullYear(), 0, 4);
    return 1 + Math.round(((date3.getTime() - week1.getTime()) / 864e5 - 3 + (week1.getDay() + 6) % 7) / 7);
  };
  dateUtil.getRangeHours = function getRangeHours(ranges) {
    var hours = [];
    var disabledHours = [];
    (ranges || []).forEach(function(range3) {
      var value = range3.map(function(date3) {
        return date3.getHours();
      });
      disabledHours = disabledHours.concat(newArray(value[0], value[1]));
    });
    if (disabledHours.length) {
      for (var i = 0; i < 24; i++) {
        hours[i] = disabledHours.indexOf(i) === -1;
      }
    } else {
      for (var _i = 0; _i < 24; _i++) {
        hours[_i] = false;
      }
    }
    return hours;
  };
  dateUtil.getPrevMonthLastDays = function getPrevMonthLastDays(date3, amount) {
    if (amount <= 0)
      return [];
    var temp = new Date(date3.getTime());
    temp.setDate(0);
    var lastDay = temp.getDate();
    return range2(amount).map(function(_, index2) {
      return lastDay - (amount - index2 - 1);
    });
  };
  dateUtil.getMonthDays = function getMonthDays(date3) {
    var temp = new Date(date3.getFullYear(), date3.getMonth() + 1, 0);
    var days = temp.getDate();
    return range2(days).map(function(_, index2) {
      return index2 + 1;
    });
  };
  function setRangeData(arr, start, end, value) {
    for (var i = start; i < end; i++) {
      arr[i] = value;
    }
  }
  dateUtil.getRangeMinutes = function getRangeMinutes(ranges, hour) {
    var minutes = new Array(60);
    if (ranges.length > 0) {
      ranges.forEach(function(range3) {
        var start = range3[0];
        var end = range3[1];
        var startHour = start.getHours();
        var startMinute = start.getMinutes();
        var endHour = end.getHours();
        var endMinute = end.getMinutes();
        if (startHour === hour && endHour !== hour) {
          setRangeData(minutes, startMinute, 60, true);
        } else if (startHour === hour && endHour === hour) {
          setRangeData(minutes, startMinute, endMinute + 1, true);
        } else if (startHour !== hour && endHour === hour) {
          setRangeData(minutes, 0, endMinute + 1, true);
        } else if (startHour < hour && endHour > hour) {
          setRangeData(minutes, 0, 60, true);
        }
      });
    } else {
      setRangeData(minutes, 0, 60, true);
    }
    return minutes;
  };
  var range2 = dateUtil.range = function range3(n) {
    return Array.apply(null, { length: n }).map(function(_, n2) {
      return n2;
    });
  };
  var modifyDate = dateUtil.modifyDate = function modifyDate2(date3, y, m, d) {
    return new Date(y, m, d, date3.getHours(), date3.getMinutes(), date3.getSeconds(), date3.getMilliseconds());
  };
  var modifyTime = dateUtil.modifyTime = function modifyTime2(date3, h2, m, s) {
    return new Date(date3.getFullYear(), date3.getMonth(), date3.getDate(), h2, m, s, date3.getMilliseconds());
  };
  dateUtil.modifyWithTimeString = function modifyWithTimeString(date3, time) {
    if (date3 == null || !time) {
      return date3;
    }
    time = parseDate(time, "HH:mm:ss");
    return modifyTime(date3, time.getHours(), time.getMinutes(), time.getSeconds());
  };
  dateUtil.clearTime = function clearTime(date3) {
    return new Date(date3.getFullYear(), date3.getMonth(), date3.getDate());
  };
  dateUtil.clearMilliseconds = function clearMilliseconds(date3) {
    return new Date(date3.getFullYear(), date3.getMonth(), date3.getDate(), date3.getHours(), date3.getMinutes(), date3.getSeconds(), 0);
  };
  var limitTimeRange = dateUtil.limitTimeRange = function limitTimeRange2(date3, ranges) {
    var format2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "HH:mm:ss";
    if (ranges.length === 0)
      return date3;
    var normalizeDate = function normalizeDate2(date4) {
      return _date2.default.parse(_date2.default.format(date4, format2), format2);
    };
    var ndate = normalizeDate(date3);
    var nranges = ranges.map(function(range3) {
      return range3.map(normalizeDate);
    });
    if (nranges.some(function(nrange) {
      return ndate >= nrange[0] && ndate <= nrange[1];
    }))
      return date3;
    var minDate = nranges[0][0];
    var maxDate = nranges[0][0];
    nranges.forEach(function(nrange) {
      minDate = new Date(Math.min(nrange[0], minDate));
      maxDate = new Date(Math.max(nrange[1], minDate));
    });
    var ret = ndate < minDate ? minDate : maxDate;
    return modifyDate(ret, date3.getFullYear(), date3.getMonth(), date3.getDate());
  };
  dateUtil.timeWithinRange = function timeWithinRange(date3, selectableRange, format2) {
    var limitedDate = limitTimeRange(date3, selectableRange, format2);
    return limitedDate.getTime() === date3.getTime();
  };
  var changeYearMonthAndClampDate = dateUtil.changeYearMonthAndClampDate = function changeYearMonthAndClampDate2(date3, year, month) {
    var monthDate = Math.min(date3.getDate(), getDayCountOfMonth(year, month));
    return modifyDate(date3, year, month, monthDate);
  };
  dateUtil.prevMonth = function prevMonth(date3) {
    var year = date3.getFullYear();
    var month = date3.getMonth();
    return month === 0 ? changeYearMonthAndClampDate(date3, year - 1, 11) : changeYearMonthAndClampDate(date3, year, month - 1);
  };
  dateUtil.nextMonth = function nextMonth(date3) {
    var year = date3.getFullYear();
    var month = date3.getMonth();
    return month === 11 ? changeYearMonthAndClampDate(date3, year + 1, 0) : changeYearMonthAndClampDate(date3, year, month + 1);
  };
  dateUtil.prevYear = function prevYear(date3) {
    var amount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    var year = date3.getFullYear();
    var month = date3.getMonth();
    return changeYearMonthAndClampDate(date3, year - amount, month);
  };
  dateUtil.nextYear = function nextYear(date3) {
    var amount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    var year = date3.getFullYear();
    var month = date3.getMonth();
    return changeYearMonthAndClampDate(date3, year + amount, month);
  };
  dateUtil.extractDateFormat = function extractDateFormat(format2) {
    return format2.replace(/\W?m{1,2}|\W?ZZ/g, "").replace(/\W?h{1,2}|\W?s{1,3}|\W?a/gi, "").trim();
  };
  dateUtil.extractTimeFormat = function extractTimeFormat(format2) {
    return format2.replace(/\W?D{1,2}|\W?Do|\W?d{1,4}|\W?M{1,4}|\W?y{2,4}/g, "").trim();
  };
  dateUtil.validateRangeInOneMonth = function validateRangeInOneMonth(start, end) {
    return start.getMonth() === end.getMonth() && start.getFullYear() === end.getFullYear();
  };
  return dateUtil;
}
var dom = {};
var hasRequiredDom;
function requireDom() {
  if (hasRequiredDom)
    return dom;
  hasRequiredDom = 1;
  dom.__esModule = true;
  dom.isInContainer = dom.getScrollContainer = dom.isScroll = dom.getStyle = dom.once = dom.off = dom.on = void 0;
  var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
  } : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };
  dom.hasClass = hasClass;
  dom.addClass = addClass2;
  dom.removeClass = removeClass2;
  dom.setStyle = setStyle;
  var _vue = require$$6$1;
  var _vue2 = _interopRequireDefault2(_vue);
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var isServer = _vue2.default.prototype.$isServer;
  var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
  var MOZ_HACK_REGEXP = /^moz([A-Z])/;
  var ieVersion = isServer ? 0 : Number(document.documentMode);
  var trim = function trim2(string2) {
    return (string2 || "").replace(/^[\s\uFEFF]+|[\s\uFEFF]+$/g, "");
  };
  var camelCase = function camelCase2(name) {
    return name.replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {
      return offset ? letter.toUpperCase() : letter;
    }).replace(MOZ_HACK_REGEXP, "Moz$1");
  };
  var on = dom.on = function() {
    if (!isServer && document.addEventListener) {
      return function(element, event, handler) {
        if (element && event && handler) {
          element.addEventListener(event, handler, false);
        }
      };
    } else {
      return function(element, event, handler) {
        if (element && event && handler) {
          element.attachEvent("on" + event, handler);
        }
      };
    }
  }();
  var off = dom.off = function() {
    if (!isServer && document.removeEventListener) {
      return function(element, event, handler) {
        if (element && event) {
          element.removeEventListener(event, handler, false);
        }
      };
    } else {
      return function(element, event, handler) {
        if (element && event) {
          element.detachEvent("on" + event, handler);
        }
      };
    }
  }();
  dom.once = function once2(el, event, fn) {
    var listener = function listener2() {
      if (fn) {
        fn.apply(this, arguments);
      }
      off(el, event, listener2);
    };
    on(el, event, listener);
  };
  function hasClass(el, cls) {
    if (!el || !cls)
      return false;
    if (cls.indexOf(" ") !== -1)
      throw new Error("className should not contain space.");
    if (el.classList) {
      return el.classList.contains(cls);
    } else {
      return (" " + el.className + " ").indexOf(" " + cls + " ") > -1;
    }
  }
  function addClass2(el, cls) {
    if (!el)
      return;
    var curClass = el.className;
    var classes = (cls || "").split(" ");
    for (var i = 0, j = classes.length; i < j; i++) {
      var clsName = classes[i];
      if (!clsName)
        continue;
      if (el.classList) {
        el.classList.add(clsName);
      } else if (!hasClass(el, clsName)) {
        curClass += " " + clsName;
      }
    }
    if (!el.classList) {
      el.setAttribute("class", curClass);
    }
  }
  function removeClass2(el, cls) {
    if (!el || !cls)
      return;
    var classes = cls.split(" ");
    var curClass = " " + el.className + " ";
    for (var i = 0, j = classes.length; i < j; i++) {
      var clsName = classes[i];
      if (!clsName)
        continue;
      if (el.classList) {
        el.classList.remove(clsName);
      } else if (hasClass(el, clsName)) {
        curClass = curClass.replace(" " + clsName + " ", " ");
      }
    }
    if (!el.classList) {
      el.setAttribute("class", trim(curClass));
    }
  }
  var getStyle2 = dom.getStyle = ieVersion < 9 ? function(element, styleName) {
    if (isServer)
      return;
    if (!element || !styleName)
      return null;
    styleName = camelCase(styleName);
    if (styleName === "float") {
      styleName = "styleFloat";
    }
    try {
      switch (styleName) {
        case "opacity":
          try {
            return element.filters.item("alpha").opacity / 100;
          } catch (e) {
            return 1;
          }
        default:
          return element.style[styleName] || element.currentStyle ? element.currentStyle[styleName] : null;
      }
    } catch (e) {
      return element.style[styleName];
    }
  } : function(element, styleName) {
    if (isServer)
      return;
    if (!element || !styleName)
      return null;
    styleName = camelCase(styleName);
    if (styleName === "float") {
      styleName = "cssFloat";
    }
    try {
      var computed2 = document.defaultView.getComputedStyle(element, "");
      return element.style[styleName] || computed2 ? computed2[styleName] : null;
    } catch (e) {
      return element.style[styleName];
    }
  };
  function setStyle(element, styleName, value) {
    if (!element || !styleName)
      return;
    if ((typeof styleName === "undefined" ? "undefined" : _typeof2(styleName)) === "object") {
      for (var prop in styleName) {
        if (styleName.hasOwnProperty(prop)) {
          setStyle(element, prop, styleName[prop]);
        }
      }
    } else {
      styleName = camelCase(styleName);
      if (styleName === "opacity" && ieVersion < 9) {
        element.style.filter = isNaN(value) ? "" : "alpha(opacity=" + value * 100 + ")";
      } else {
        element.style[styleName] = value;
      }
    }
  }
  var isScroll = dom.isScroll = function isScroll2(el, vertical) {
    if (isServer)
      return;
    var determinedDirection = vertical !== null && vertical !== void 0;
    var overflow = determinedDirection ? vertical ? getStyle2(el, "overflow-y") : getStyle2(el, "overflow-x") : getStyle2(el, "overflow");
    return overflow.match(/(scroll|auto|overlay)/);
  };
  dom.getScrollContainer = function getScrollContainer(el, vertical) {
    if (isServer)
      return;
    var parent = el;
    while (parent) {
      if ([window, document, document.documentElement].includes(parent)) {
        return window;
      }
      if (isScroll(parent, vertical)) {
        return parent;
      }
      parent = parent.parentNode;
    }
    return parent;
  };
  dom.isInContainer = function isInContainer(el, container) {
    if (isServer || !el || !container)
      return false;
    var elRect = el.getBoundingClientRect();
    var containerRect = void 0;
    if ([window, document, document.documentElement, null, void 0].includes(container)) {
      containerRect = {
        top: 0,
        right: window.innerWidth,
        bottom: window.innerHeight,
        left: 0
      };
    } else {
      containerRect = container.getBoundingClientRect();
    }
    return elRect.top < containerRect.bottom && elRect.bottom > containerRect.top && elRect.right > containerRect.left && elRect.left < containerRect.right;
  };
  return dom;
}
var emitter = {};
var hasRequiredEmitter;
function requireEmitter() {
  if (hasRequiredEmitter)
    return emitter;
  hasRequiredEmitter = 1;
  emitter.__esModule = true;
  function _broadcast(componentName, eventName, params) {
    this.$children.forEach(function(child) {
      var name = child.$options.componentName;
      if (name === componentName) {
        child.$emit.apply(child, [eventName].concat(params));
      } else {
        _broadcast.apply(child, [componentName, eventName].concat([params]));
      }
    });
  }
  emitter.default = {
    methods: {
      dispatch: function dispatch(componentName, eventName, params) {
        var parent = this.$parent || this.$root;
        var name = parent.$options.componentName;
        while (parent && (!name || name !== componentName)) {
          parent = parent.$parent;
          if (parent) {
            name = parent.$options.componentName;
          }
        }
        if (parent) {
          parent.$emit.apply(parent, [eventName].concat(params));
        }
      },
      broadcast: function broadcast(componentName, eventName, params) {
        _broadcast.call(this, componentName, eventName, params);
      }
    }
  };
  return emitter;
}
var locale = {};
var hasRequiredLocale;
function requireLocale() {
  if (hasRequiredLocale)
    return locale;
  hasRequiredLocale = 1;
  locale.__esModule = true;
  var _locale = requireLocale$1();
  locale.default = {
    methods: {
      t: function t() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return _locale.t.apply(this, args);
      }
    }
  };
  return locale;
}
var vuePopper = {};
var popup = {};
var merge = {};
var hasRequiredMerge;
function requireMerge() {
  if (hasRequiredMerge)
    return merge;
  hasRequiredMerge = 1;
  merge.__esModule = true;
  merge.default = function(target2) {
    for (var i = 1, j = arguments.length; i < j; i++) {
      var source = arguments[i] || {};
      for (var prop in source) {
        if (source.hasOwnProperty(prop)) {
          var value = source[prop];
          if (value !== void 0) {
            target2[prop] = value;
          }
        }
      }
    }
    return target2;
  };
  return merge;
}
var popupManager = {};
var hasRequiredPopupManager;
function requirePopupManager() {
  if (hasRequiredPopupManager)
    return popupManager;
  hasRequiredPopupManager = 1;
  popupManager.__esModule = true;
  var _vue = require$$6$1;
  var _vue2 = _interopRequireDefault2(_vue);
  var _dom = requireDom();
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var hasModal = false;
  var hasInitZIndex = false;
  var zIndex = void 0;
  var getModal = function getModal2() {
    if (_vue2.default.prototype.$isServer)
      return;
    var modalDom = PopupManager.modalDom;
    if (modalDom) {
      hasModal = true;
    } else {
      hasModal = false;
      modalDom = document.createElement("div");
      PopupManager.modalDom = modalDom;
      modalDom.addEventListener("touchmove", function(event) {
        event.preventDefault();
        event.stopPropagation();
      });
      modalDom.addEventListener("click", function() {
        PopupManager.doOnModalClick && PopupManager.doOnModalClick();
      });
    }
    return modalDom;
  };
  var instances = {};
  var PopupManager = {
    modalFade: true,
    getInstance: function getInstance(id2) {
      return instances[id2];
    },
    register: function register2(id2, instance) {
      if (id2 && instance) {
        instances[id2] = instance;
      }
    },
    deregister: function deregister(id2) {
      if (id2) {
        instances[id2] = null;
        delete instances[id2];
      }
    },
    nextZIndex: function nextZIndex() {
      return PopupManager.zIndex++;
    },
    modalStack: [],
    doOnModalClick: function doOnModalClick() {
      var topItem = PopupManager.modalStack[PopupManager.modalStack.length - 1];
      if (!topItem)
        return;
      var instance = PopupManager.getInstance(topItem.id);
      if (instance && instance.closeOnClickModal) {
        instance.close();
      }
    },
    openModal: function openModal(id2, zIndex2, dom2, modalClass, modalFade) {
      if (_vue2.default.prototype.$isServer)
        return;
      if (!id2 || zIndex2 === void 0)
        return;
      this.modalFade = modalFade;
      var modalStack = this.modalStack;
      for (var i = 0, j = modalStack.length; i < j; i++) {
        var item = modalStack[i];
        if (item.id === id2) {
          return;
        }
      }
      var modalDom = getModal();
      (0, _dom.addClass)(modalDom, "v-modal");
      if (this.modalFade && !hasModal) {
        (0, _dom.addClass)(modalDom, "v-modal-enter");
      }
      if (modalClass) {
        var classArr = modalClass.trim().split(/\s+/);
        classArr.forEach(function(item2) {
          return (0, _dom.addClass)(modalDom, item2);
        });
      }
      setTimeout(function() {
        (0, _dom.removeClass)(modalDom, "v-modal-enter");
      }, 200);
      if (dom2 && dom2.parentNode && dom2.parentNode.nodeType !== 11) {
        dom2.parentNode.appendChild(modalDom);
      } else {
        document.body.appendChild(modalDom);
      }
      if (zIndex2) {
        modalDom.style.zIndex = zIndex2;
      }
      modalDom.tabIndex = 0;
      modalDom.style.display = "";
      this.modalStack.push({ id: id2, zIndex: zIndex2, modalClass });
    },
    closeModal: function closeModal(id2) {
      var modalStack = this.modalStack;
      var modalDom = getModal();
      if (modalStack.length > 0) {
        var topItem = modalStack[modalStack.length - 1];
        if (topItem.id === id2) {
          if (topItem.modalClass) {
            var classArr = topItem.modalClass.trim().split(/\s+/);
            classArr.forEach(function(item) {
              return (0, _dom.removeClass)(modalDom, item);
            });
          }
          modalStack.pop();
          if (modalStack.length > 0) {
            modalDom.style.zIndex = modalStack[modalStack.length - 1].zIndex;
          }
        } else {
          for (var i = modalStack.length - 1; i >= 0; i--) {
            if (modalStack[i].id === id2) {
              modalStack.splice(i, 1);
              break;
            }
          }
        }
      }
      if (modalStack.length === 0) {
        if (this.modalFade) {
          (0, _dom.addClass)(modalDom, "v-modal-leave");
        }
        setTimeout(function() {
          if (modalStack.length === 0) {
            if (modalDom.parentNode)
              modalDom.parentNode.removeChild(modalDom);
            modalDom.style.display = "none";
            PopupManager.modalDom = void 0;
          }
          (0, _dom.removeClass)(modalDom, "v-modal-leave");
        }, 200);
      }
    }
  };
  Object.defineProperty(PopupManager, "zIndex", {
    configurable: true,
    get: function get() {
      if (!hasInitZIndex) {
        zIndex = zIndex || (_vue2.default.prototype.$ELEMENT || {}).zIndex || 2e3;
        hasInitZIndex = true;
      }
      return zIndex;
    },
    set: function set2(value) {
      zIndex = value;
    }
  });
  var getTopPopup = function getTopPopup2() {
    if (_vue2.default.prototype.$isServer)
      return;
    if (PopupManager.modalStack.length > 0) {
      var topPopup = PopupManager.modalStack[PopupManager.modalStack.length - 1];
      if (!topPopup)
        return;
      var instance = PopupManager.getInstance(topPopup.id);
      return instance;
    }
  };
  if (!_vue2.default.prototype.$isServer) {
    window.addEventListener("keydown", function(event) {
      if (event.keyCode === 27) {
        var topPopup = getTopPopup();
        if (topPopup && topPopup.closeOnPressEscape) {
          topPopup.handleClose ? topPopup.handleClose() : topPopup.handleAction ? topPopup.handleAction("cancel") : topPopup.close();
        }
      }
    });
  }
  popupManager.default = PopupManager;
  return popupManager;
}
var scrollbarWidth = {};
var hasRequiredScrollbarWidth;
function requireScrollbarWidth() {
  if (hasRequiredScrollbarWidth)
    return scrollbarWidth;
  hasRequiredScrollbarWidth = 1;
  scrollbarWidth.__esModule = true;
  scrollbarWidth.default = function() {
    if (_vue2.default.prototype.$isServer)
      return 0;
    if (scrollBarWidth !== void 0)
      return scrollBarWidth;
    var outer = document.createElement("div");
    outer.className = "el-scrollbar__wrap";
    outer.style.visibility = "hidden";
    outer.style.width = "100px";
    outer.style.position = "absolute";
    outer.style.top = "-9999px";
    document.body.appendChild(outer);
    var widthNoScroll = outer.offsetWidth;
    outer.style.overflow = "scroll";
    var inner = document.createElement("div");
    inner.style.width = "100%";
    outer.appendChild(inner);
    var widthWithScroll = inner.offsetWidth;
    outer.parentNode.removeChild(outer);
    scrollBarWidth = widthNoScroll - widthWithScroll;
    return scrollBarWidth;
  };
  var _vue = require$$6$1;
  var _vue2 = _interopRequireDefault2(_vue);
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var scrollBarWidth = void 0;
  return scrollbarWidth;
}
var hasRequiredPopup;
function requirePopup() {
  if (hasRequiredPopup)
    return popup;
  hasRequiredPopup = 1;
  popup.__esModule = true;
  popup.PopupManager = void 0;
  var _vue = require$$6$1;
  var _vue2 = _interopRequireDefault2(_vue);
  var _merge = requireMerge();
  var _merge2 = _interopRequireDefault2(_merge);
  var _popupManager = requirePopupManager();
  var _popupManager2 = _interopRequireDefault2(_popupManager);
  var _scrollbarWidth = requireScrollbarWidth();
  var _scrollbarWidth2 = _interopRequireDefault2(_scrollbarWidth);
  var _dom = requireDom();
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var idSeed = 1;
  var scrollBarWidth = void 0;
  popup.default = {
    props: {
      visible: {
        type: Boolean,
        default: false
      },
      openDelay: {},
      closeDelay: {},
      zIndex: {},
      modal: {
        type: Boolean,
        default: false
      },
      modalFade: {
        type: Boolean,
        default: true
      },
      modalClass: {},
      modalAppendToBody: {
        type: Boolean,
        default: false
      },
      lockScroll: {
        type: Boolean,
        default: true
      },
      closeOnPressEscape: {
        type: Boolean,
        default: false
      },
      closeOnClickModal: {
        type: Boolean,
        default: false
      }
    },
    beforeMount: function beforeMount() {
      this._popupId = "popup-" + idSeed++;
      _popupManager2.default.register(this._popupId, this);
    },
    beforeDestroy: function beforeDestroy2() {
      _popupManager2.default.deregister(this._popupId);
      _popupManager2.default.closeModal(this._popupId);
      this.restoreBodyStyle();
    },
    data: function data() {
      return {
        opened: false,
        bodyPaddingRight: null,
        computedBodyPaddingRight: 0,
        withoutHiddenClass: true,
        rendered: false
      };
    },
    watch: {
      visible: function visible(val) {
        var _this = this;
        if (val) {
          if (this._opening)
            return;
          if (!this.rendered) {
            this.rendered = true;
            _vue2.default.nextTick(function() {
              _this.open();
            });
          } else {
            this.open();
          }
        } else {
          this.close();
        }
      }
    },
    methods: {
      open: function open(options) {
        var _this2 = this;
        if (!this.rendered) {
          this.rendered = true;
        }
        var props2 = (0, _merge2.default)({}, this.$props || this, options);
        if (this._closeTimer) {
          clearTimeout(this._closeTimer);
          this._closeTimer = null;
        }
        clearTimeout(this._openTimer);
        var openDelay = Number(props2.openDelay);
        if (openDelay > 0) {
          this._openTimer = setTimeout(function() {
            _this2._openTimer = null;
            _this2.doOpen(props2);
          }, openDelay);
        } else {
          this.doOpen(props2);
        }
      },
      doOpen: function doOpen(props2) {
        if (this.$isServer)
          return;
        if (this.willOpen && !this.willOpen())
          return;
        if (this.opened)
          return;
        this._opening = true;
        var dom2 = this.$el;
        var modal = props2.modal;
        var zIndex = props2.zIndex;
        if (zIndex) {
          _popupManager2.default.zIndex = zIndex;
        }
        if (modal) {
          if (this._closing) {
            _popupManager2.default.closeModal(this._popupId);
            this._closing = false;
          }
          _popupManager2.default.openModal(this._popupId, _popupManager2.default.nextZIndex(), this.modalAppendToBody ? void 0 : dom2, props2.modalClass, props2.modalFade);
          if (props2.lockScroll) {
            this.withoutHiddenClass = !(0, _dom.hasClass)(document.body, "el-popup-parent--hidden");
            if (this.withoutHiddenClass) {
              this.bodyPaddingRight = document.body.style.paddingRight;
              this.computedBodyPaddingRight = parseInt((0, _dom.getStyle)(document.body, "paddingRight"), 10);
            }
            scrollBarWidth = (0, _scrollbarWidth2.default)();
            var bodyHasOverflow = document.documentElement.clientHeight < document.body.scrollHeight;
            var bodyOverflowY = (0, _dom.getStyle)(document.body, "overflowY");
            if (scrollBarWidth > 0 && (bodyHasOverflow || bodyOverflowY === "scroll") && this.withoutHiddenClass) {
              document.body.style.paddingRight = this.computedBodyPaddingRight + scrollBarWidth + "px";
            }
            (0, _dom.addClass)(document.body, "el-popup-parent--hidden");
          }
        }
        if (getComputedStyle(dom2).position === "static") {
          dom2.style.position = "absolute";
        }
        dom2.style.zIndex = _popupManager2.default.nextZIndex();
        this.opened = true;
        this.onOpen && this.onOpen();
        this.doAfterOpen();
      },
      doAfterOpen: function doAfterOpen() {
        this._opening = false;
      },
      close: function close() {
        var _this3 = this;
        if (this.willClose && !this.willClose())
          return;
        if (this._openTimer !== null) {
          clearTimeout(this._openTimer);
          this._openTimer = null;
        }
        clearTimeout(this._closeTimer);
        var closeDelay = Number(this.closeDelay);
        if (closeDelay > 0) {
          this._closeTimer = setTimeout(function() {
            _this3._closeTimer = null;
            _this3.doClose();
          }, closeDelay);
        } else {
          this.doClose();
        }
      },
      doClose: function doClose() {
        this._closing = true;
        this.onClose && this.onClose();
        if (this.lockScroll) {
          setTimeout(this.restoreBodyStyle, 200);
        }
        this.opened = false;
        this.doAfterClose();
      },
      doAfterClose: function doAfterClose() {
        _popupManager2.default.closeModal(this._popupId);
        this._closing = false;
      },
      restoreBodyStyle: function restoreBodyStyle() {
        if (this.modal && this.withoutHiddenClass) {
          document.body.style.paddingRight = this.bodyPaddingRight;
          (0, _dom.removeClass)(document.body, "el-popup-parent--hidden");
        }
        this.withoutHiddenClass = true;
      }
    }
  };
  popup.PopupManager = _popupManager2.default;
  return popup;
}
var popper = { exports: {} };
popper.exports;
var hasRequiredPopper;
function requirePopper() {
  if (hasRequiredPopper)
    return popper.exports;
  hasRequiredPopper = 1;
  (function(module) {
    var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
      return typeof obj;
    } : function(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    (function(root2, factory) {
      if (_typeof2(module) === "object" && module.exports) {
        module.exports = factory();
      } else {
        root2.Popper = factory();
      }
    })(void 0, function() {
      var root2 = window;
      var DEFAULTS = {
        // placement of the popper
        placement: "bottom",
        gpuAcceleration: true,
        // shift popper from its origin by the given amount of pixels (can be negative)
        offset: 0,
        // the element which will act as boundary of the popper
        boundariesElement: "viewport",
        // amount of pixel used to define a minimum distance between the boundaries and the popper
        boundariesPadding: 5,
        // popper will try to prevent overflow following this order,
        // by default, then, it could overflow on the left and on top of the boundariesElement
        preventOverflowOrder: ["left", "right", "top", "bottom"],
        // the behavior used by flip to change the placement of the popper
        flipBehavior: "flip",
        arrowElement: "[x-arrow]",
        arrowOffset: 0,
        // list of functions used to modify the offsets before they are applied to the popper
        modifiers: ["shift", "offset", "preventOverflow", "keepTogether", "arrow", "flip", "applyStyle"],
        modifiersIgnored: [],
        forceAbsolute: false
      };
      function Popper(reference, popper2, options) {
        this._reference = reference.jquery ? reference[0] : reference;
        this.state = {};
        var isNotDefined = typeof popper2 === "undefined" || popper2 === null;
        var isConfig = popper2 && Object.prototype.toString.call(popper2) === "[object Object]";
        if (isNotDefined || isConfig) {
          this._popper = this.parse(isConfig ? popper2 : {});
        } else {
          this._popper = popper2.jquery ? popper2[0] : popper2;
        }
        this._options = Object.assign({}, DEFAULTS, options);
        this._options.modifiers = this._options.modifiers.map((function(modifier) {
          if (this._options.modifiersIgnored.indexOf(modifier) !== -1)
            return;
          if (modifier === "applyStyle") {
            this._popper.setAttribute("x-placement", this._options.placement);
          }
          return this.modifiers[modifier] || modifier;
        }).bind(this));
        this.state.position = this._getPosition(this._popper, this._reference);
        setStyle(this._popper, { position: this.state.position, top: 0 });
        this.update();
        this._setupEventListeners();
        return this;
      }
      Popper.prototype.destroy = function() {
        this._popper.removeAttribute("x-placement");
        this._popper.style.left = "";
        this._popper.style.position = "";
        this._popper.style.top = "";
        this._popper.style[getSupportedPropertyName("transform")] = "";
        this._removeEventListeners();
        if (this._options.removeOnDestroy) {
          this._popper.remove();
        }
        return this;
      };
      Popper.prototype.update = function() {
        var data = { instance: this, styles: {} };
        data.placement = this._options.placement;
        data._originalPlacement = this._options.placement;
        data.offsets = this._getOffsets(this._popper, this._reference, data.placement);
        data.boundaries = this._getBoundaries(data, this._options.boundariesPadding, this._options.boundariesElement);
        data = this.runModifiers(data, this._options.modifiers);
        if (typeof this.state.updateCallback === "function") {
          this.state.updateCallback(data);
        }
      };
      Popper.prototype.onCreate = function(callback) {
        callback(this);
        return this;
      };
      Popper.prototype.onUpdate = function(callback) {
        this.state.updateCallback = callback;
        return this;
      };
      Popper.prototype.parse = function(config2) {
        var defaultConfig = {
          tagName: "div",
          classNames: ["popper"],
          attributes: [],
          parent: root2.document.body,
          content: "",
          contentType: "text",
          arrowTagName: "div",
          arrowClassNames: ["popper__arrow"],
          arrowAttributes: ["x-arrow"]
        };
        config2 = Object.assign({}, defaultConfig, config2);
        var d = root2.document;
        var popper2 = d.createElement(config2.tagName);
        addClassNames(popper2, config2.classNames);
        addAttributes(popper2, config2.attributes);
        if (config2.contentType === "node") {
          popper2.appendChild(config2.content.jquery ? config2.content[0] : config2.content);
        } else if (config2.contentType === "html") {
          popper2.innerHTML = config2.content;
        } else {
          popper2.textContent = config2.content;
        }
        if (config2.arrowTagName) {
          var arrow = d.createElement(config2.arrowTagName);
          addClassNames(arrow, config2.arrowClassNames);
          addAttributes(arrow, config2.arrowAttributes);
          popper2.appendChild(arrow);
        }
        var parent = config2.parent.jquery ? config2.parent[0] : config2.parent;
        if (typeof parent === "string") {
          parent = d.querySelectorAll(config2.parent);
          if (parent.length > 1) {
            console.warn("WARNING: the given `parent` query(" + config2.parent + ") matched more than one element, the first one will be used");
          }
          if (parent.length === 0) {
            throw "ERROR: the given `parent` doesn't exists!";
          }
          parent = parent[0];
        }
        if (parent.length > 1 && parent instanceof Element === false) {
          console.warn("WARNING: you have passed as parent a list of elements, the first one will be used");
          parent = parent[0];
        }
        parent.appendChild(popper2);
        return popper2;
        function addClassNames(element, classNames) {
          classNames.forEach(function(className) {
            element.classList.add(className);
          });
        }
        function addAttributes(element, attributes) {
          attributes.forEach(function(attribute) {
            element.setAttribute(attribute.split(":")[0], attribute.split(":")[1] || "");
          });
        }
      };
      Popper.prototype._getPosition = function(popper2, reference) {
        getOffsetParent(reference);
        if (this._options.forceAbsolute) {
          return "absolute";
        }
        var isParentFixed = isFixed(reference);
        return isParentFixed ? "fixed" : "absolute";
      };
      Popper.prototype._getOffsets = function(popper2, reference, placement) {
        placement = placement.split("-")[0];
        var popperOffsets = {};
        popperOffsets.position = this.state.position;
        var isParentFixed = popperOffsets.position === "fixed";
        var referenceOffsets = getOffsetRectRelativeToCustomParent(reference, getOffsetParent(popper2), isParentFixed);
        var popperRect = getOuterSizes(popper2);
        if (["right", "left"].indexOf(placement) !== -1) {
          popperOffsets.top = referenceOffsets.top + referenceOffsets.height / 2 - popperRect.height / 2;
          if (placement === "left") {
            popperOffsets.left = referenceOffsets.left - popperRect.width;
          } else {
            popperOffsets.left = referenceOffsets.right;
          }
        } else {
          popperOffsets.left = referenceOffsets.left + referenceOffsets.width / 2 - popperRect.width / 2;
          if (placement === "top") {
            popperOffsets.top = referenceOffsets.top - popperRect.height;
          } else {
            popperOffsets.top = referenceOffsets.bottom;
          }
        }
        popperOffsets.width = popperRect.width;
        popperOffsets.height = popperRect.height;
        return {
          popper: popperOffsets,
          reference: referenceOffsets
        };
      };
      Popper.prototype._setupEventListeners = function() {
        this.state.updateBound = this.update.bind(this);
        root2.addEventListener("resize", this.state.updateBound);
        if (this._options.boundariesElement !== "window") {
          var target2 = getScrollParent(this._reference);
          if (target2 === root2.document.body || target2 === root2.document.documentElement) {
            target2 = root2;
          }
          target2.addEventListener("scroll", this.state.updateBound);
          this.state.scrollTarget = target2;
        }
      };
      Popper.prototype._removeEventListeners = function() {
        root2.removeEventListener("resize", this.state.updateBound);
        if (this._options.boundariesElement !== "window" && this.state.scrollTarget) {
          this.state.scrollTarget.removeEventListener("scroll", this.state.updateBound);
          this.state.scrollTarget = null;
        }
        this.state.updateBound = null;
      };
      Popper.prototype._getBoundaries = function(data, padding, boundariesElement) {
        var boundaries = {};
        var width, height;
        if (boundariesElement === "window") {
          var body = root2.document.body, html = root2.document.documentElement;
          height = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);
          width = Math.max(body.scrollWidth, body.offsetWidth, html.clientWidth, html.scrollWidth, html.offsetWidth);
          boundaries = {
            top: 0,
            right: width,
            bottom: height,
            left: 0
          };
        } else if (boundariesElement === "viewport") {
          var offsetParent = getOffsetParent(this._popper);
          var scrollParent = getScrollParent(this._popper);
          var offsetParentRect = getOffsetRect(offsetParent);
          var getScrollTopValue = function getScrollTopValue2(element) {
            return element == document.body ? Math.max(document.documentElement.scrollTop, document.body.scrollTop) : element.scrollTop;
          };
          var getScrollLeftValue = function getScrollLeftValue2(element) {
            return element == document.body ? Math.max(document.documentElement.scrollLeft, document.body.scrollLeft) : element.scrollLeft;
          };
          var scrollTop = data.offsets.popper.position === "fixed" ? 0 : getScrollTopValue(scrollParent);
          var scrollLeft = data.offsets.popper.position === "fixed" ? 0 : getScrollLeftValue(scrollParent);
          boundaries = {
            top: 0 - (offsetParentRect.top - scrollTop),
            right: root2.document.documentElement.clientWidth - (offsetParentRect.left - scrollLeft),
            bottom: root2.document.documentElement.clientHeight - (offsetParentRect.top - scrollTop),
            left: 0 - (offsetParentRect.left - scrollLeft)
          };
        } else {
          if (getOffsetParent(this._popper) === boundariesElement) {
            boundaries = {
              top: 0,
              left: 0,
              right: boundariesElement.clientWidth,
              bottom: boundariesElement.clientHeight
            };
          } else {
            boundaries = getOffsetRect(boundariesElement);
          }
        }
        boundaries.left += padding;
        boundaries.right -= padding;
        boundaries.top = boundaries.top + padding;
        boundaries.bottom = boundaries.bottom - padding;
        return boundaries;
      };
      Popper.prototype.runModifiers = function(data, modifiers, ends) {
        var modifiersToRun = modifiers.slice();
        if (ends !== void 0) {
          modifiersToRun = this._options.modifiers.slice(0, getArrayKeyIndex(this._options.modifiers, ends));
        }
        modifiersToRun.forEach((function(modifier) {
          if (isFunction2(modifier)) {
            data = modifier.call(this, data);
          }
        }).bind(this));
        return data;
      };
      Popper.prototype.isModifierRequired = function(requesting, requested) {
        var index2 = getArrayKeyIndex(this._options.modifiers, requesting);
        return !!this._options.modifiers.slice(0, index2).filter(function(modifier) {
          return modifier === requested;
        }).length;
      };
      Popper.prototype.modifiers = {};
      Popper.prototype.modifiers.applyStyle = function(data) {
        var styles = {
          position: data.offsets.popper.position
        };
        var left = Math.round(data.offsets.popper.left);
        var top = Math.round(data.offsets.popper.top);
        var prefixedProperty;
        if (this._options.gpuAcceleration && (prefixedProperty = getSupportedPropertyName("transform"))) {
          styles[prefixedProperty] = "translate3d(" + left + "px, " + top + "px, 0)";
          styles.top = 0;
          styles.left = 0;
        } else {
          styles.left = left;
          styles.top = top;
        }
        Object.assign(styles, data.styles);
        setStyle(this._popper, styles);
        this._popper.setAttribute("x-placement", data.placement);
        if (this.isModifierRequired(this.modifiers.applyStyle, this.modifiers.arrow) && data.offsets.arrow) {
          setStyle(data.arrowElement, data.offsets.arrow);
        }
        return data;
      };
      Popper.prototype.modifiers.shift = function(data) {
        var placement = data.placement;
        var basePlacement = placement.split("-")[0];
        var shiftVariation = placement.split("-")[1];
        if (shiftVariation) {
          var reference = data.offsets.reference;
          var popper2 = getPopperClientRect(data.offsets.popper);
          var shiftOffsets = {
            y: {
              start: { top: reference.top },
              end: { top: reference.top + reference.height - popper2.height }
            },
            x: {
              start: { left: reference.left },
              end: { left: reference.left + reference.width - popper2.width }
            }
          };
          var axis = ["bottom", "top"].indexOf(basePlacement) !== -1 ? "x" : "y";
          data.offsets.popper = Object.assign(popper2, shiftOffsets[axis][shiftVariation]);
        }
        return data;
      };
      Popper.prototype.modifiers.preventOverflow = function(data) {
        var order = this._options.preventOverflowOrder;
        var popper2 = getPopperClientRect(data.offsets.popper);
        var check = {
          left: function left() {
            var left2 = popper2.left;
            if (popper2.left < data.boundaries.left) {
              left2 = Math.max(popper2.left, data.boundaries.left);
            }
            return { left: left2 };
          },
          right: function right() {
            var left = popper2.left;
            if (popper2.right > data.boundaries.right) {
              left = Math.min(popper2.left, data.boundaries.right - popper2.width);
            }
            return { left };
          },
          top: function top() {
            var top2 = popper2.top;
            if (popper2.top < data.boundaries.top) {
              top2 = Math.max(popper2.top, data.boundaries.top);
            }
            return { top: top2 };
          },
          bottom: function bottom() {
            var top = popper2.top;
            if (popper2.bottom > data.boundaries.bottom) {
              top = Math.min(popper2.top, data.boundaries.bottom - popper2.height);
            }
            return { top };
          }
        };
        order.forEach(function(direction) {
          data.offsets.popper = Object.assign(popper2, check[direction]());
        });
        return data;
      };
      Popper.prototype.modifiers.keepTogether = function(data) {
        var popper2 = getPopperClientRect(data.offsets.popper);
        var reference = data.offsets.reference;
        var f2 = Math.floor;
        if (popper2.right < f2(reference.left)) {
          data.offsets.popper.left = f2(reference.left) - popper2.width;
        }
        if (popper2.left > f2(reference.right)) {
          data.offsets.popper.left = f2(reference.right);
        }
        if (popper2.bottom < f2(reference.top)) {
          data.offsets.popper.top = f2(reference.top) - popper2.height;
        }
        if (popper2.top > f2(reference.bottom)) {
          data.offsets.popper.top = f2(reference.bottom);
        }
        return data;
      };
      Popper.prototype.modifiers.flip = function(data) {
        if (!this.isModifierRequired(this.modifiers.flip, this.modifiers.preventOverflow)) {
          console.warn("WARNING: preventOverflow modifier is required by flip modifier in order to work, be sure to include it before flip!");
          return data;
        }
        if (data.flipped && data.placement === data._originalPlacement) {
          return data;
        }
        var placement = data.placement.split("-")[0];
        var placementOpposite = getOppositePlacement(placement);
        var variation = data.placement.split("-")[1] || "";
        var flipOrder = [];
        if (this._options.flipBehavior === "flip") {
          flipOrder = [placement, placementOpposite];
        } else {
          flipOrder = this._options.flipBehavior;
        }
        flipOrder.forEach((function(step2, index2) {
          if (placement !== step2 || flipOrder.length === index2 + 1) {
            return;
          }
          placement = data.placement.split("-")[0];
          placementOpposite = getOppositePlacement(placement);
          var popperOffsets = getPopperClientRect(data.offsets.popper);
          var a = ["right", "bottom"].indexOf(placement) !== -1;
          if (a && Math.floor(data.offsets.reference[placement]) > Math.floor(popperOffsets[placementOpposite]) || !a && Math.floor(data.offsets.reference[placement]) < Math.floor(popperOffsets[placementOpposite])) {
            data.flipped = true;
            data.placement = flipOrder[index2 + 1];
            if (variation) {
              data.placement += "-" + variation;
            }
            data.offsets.popper = this._getOffsets(this._popper, this._reference, data.placement).popper;
            data = this.runModifiers(data, this._options.modifiers, this._flip);
          }
        }).bind(this));
        return data;
      };
      Popper.prototype.modifiers.offset = function(data) {
        var offset = this._options.offset;
        var popper2 = data.offsets.popper;
        if (data.placement.indexOf("left") !== -1) {
          popper2.top -= offset;
        } else if (data.placement.indexOf("right") !== -1) {
          popper2.top += offset;
        } else if (data.placement.indexOf("top") !== -1) {
          popper2.left -= offset;
        } else if (data.placement.indexOf("bottom") !== -1) {
          popper2.left += offset;
        }
        return data;
      };
      Popper.prototype.modifiers.arrow = function(data) {
        var arrow = this._options.arrowElement;
        var arrowOffset = this._options.arrowOffset;
        if (typeof arrow === "string") {
          arrow = this._popper.querySelector(arrow);
        }
        if (!arrow) {
          return data;
        }
        if (!this._popper.contains(arrow)) {
          console.warn("WARNING: `arrowElement` must be child of its popper element!");
          return data;
        }
        if (!this.isModifierRequired(this.modifiers.arrow, this.modifiers.keepTogether)) {
          console.warn("WARNING: keepTogether modifier is required by arrow modifier in order to work, be sure to include it before arrow!");
          return data;
        }
        var arrowStyle = {};
        var placement = data.placement.split("-")[0];
        var popper2 = getPopperClientRect(data.offsets.popper);
        var reference = data.offsets.reference;
        var isVertical = ["left", "right"].indexOf(placement) !== -1;
        var len = isVertical ? "height" : "width";
        var side = isVertical ? "top" : "left";
        var altSide = isVertical ? "left" : "top";
        var opSide = isVertical ? "bottom" : "right";
        var arrowSize = getOuterSizes(arrow)[len];
        if (reference[opSide] - arrowSize < popper2[side]) {
          data.offsets.popper[side] -= popper2[side] - (reference[opSide] - arrowSize);
        }
        if (reference[side] + arrowSize > popper2[opSide]) {
          data.offsets.popper[side] += reference[side] + arrowSize - popper2[opSide];
        }
        var center = reference[side] + (arrowOffset || reference[len] / 2 - arrowSize / 2);
        var sideValue = center - popper2[side];
        sideValue = Math.max(Math.min(popper2[len] - arrowSize - 8, sideValue), 8);
        arrowStyle[side] = sideValue;
        arrowStyle[altSide] = "";
        data.offsets.arrow = arrowStyle;
        data.arrowElement = arrow;
        return data;
      };
      function getOuterSizes(element) {
        var _display = element.style.display, _visibility = element.style.visibility;
        element.style.display = "block";
        element.style.visibility = "hidden";
        element.offsetWidth;
        var styles = root2.getComputedStyle(element);
        var x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);
        var y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);
        var result = { width: element.offsetWidth + y, height: element.offsetHeight + x };
        element.style.display = _display;
        element.style.visibility = _visibility;
        return result;
      }
      function getOppositePlacement(placement) {
        var hash = { left: "right", right: "left", bottom: "top", top: "bottom" };
        return placement.replace(/left|right|bottom|top/g, function(matched) {
          return hash[matched];
        });
      }
      function getPopperClientRect(popperOffsets) {
        var offsets = Object.assign({}, popperOffsets);
        offsets.right = offsets.left + offsets.width;
        offsets.bottom = offsets.top + offsets.height;
        return offsets;
      }
      function getArrayKeyIndex(arr, keyToFind) {
        var i = 0, key;
        for (key in arr) {
          if (arr[key] === keyToFind) {
            return i;
          }
          i++;
        }
        return null;
      }
      function getStyleComputedProperty(element, property) {
        var css = root2.getComputedStyle(element, null);
        return css[property];
      }
      function getOffsetParent(element) {
        var offsetParent = element.offsetParent;
        return offsetParent === root2.document.body || !offsetParent ? root2.document.documentElement : offsetParent;
      }
      function getScrollParent(element) {
        var parent = element.parentNode;
        if (!parent) {
          return element;
        }
        if (parent === root2.document) {
          if (root2.document.body.scrollTop || root2.document.body.scrollLeft) {
            return root2.document.body;
          } else {
            return root2.document.documentElement;
          }
        }
        if (["scroll", "auto"].indexOf(getStyleComputedProperty(parent, "overflow")) !== -1 || ["scroll", "auto"].indexOf(getStyleComputedProperty(parent, "overflow-x")) !== -1 || ["scroll", "auto"].indexOf(getStyleComputedProperty(parent, "overflow-y")) !== -1) {
          return parent;
        }
        return getScrollParent(element.parentNode);
      }
      function isFixed(element) {
        if (element === root2.document.body) {
          return false;
        }
        if (getStyleComputedProperty(element, "position") === "fixed") {
          return true;
        }
        return element.parentNode ? isFixed(element.parentNode) : element;
      }
      function setStyle(element, styles) {
        function is_numeric(n) {
          return n !== "" && !isNaN(parseFloat(n)) && isFinite(n);
        }
        Object.keys(styles).forEach(function(prop) {
          var unit = "";
          if (["width", "height", "top", "right", "bottom", "left"].indexOf(prop) !== -1 && is_numeric(styles[prop])) {
            unit = "px";
          }
          element.style[prop] = styles[prop] + unit;
        });
      }
      function isFunction2(functionToCheck) {
        var getType3 = {};
        return functionToCheck && getType3.toString.call(functionToCheck) === "[object Function]";
      }
      function getOffsetRect(element) {
        var elementRect = {
          width: element.offsetWidth,
          height: element.offsetHeight,
          left: element.offsetLeft,
          top: element.offsetTop
        };
        elementRect.right = elementRect.left + elementRect.width;
        elementRect.bottom = elementRect.top + elementRect.height;
        return elementRect;
      }
      function getBoundingClientRect(element) {
        var rect = element.getBoundingClientRect();
        var isIE2 = navigator.userAgent.indexOf("MSIE") != -1;
        var rectTop = isIE2 && element.tagName === "HTML" ? -element.scrollTop : rect.top;
        return {
          left: rect.left,
          top: rectTop,
          right: rect.right,
          bottom: rect.bottom,
          width: rect.right - rect.left,
          height: rect.bottom - rectTop
        };
      }
      function getOffsetRectRelativeToCustomParent(element, parent, fixed) {
        var elementRect = getBoundingClientRect(element);
        var parentRect = getBoundingClientRect(parent);
        if (fixed) {
          var scrollParent = getScrollParent(parent);
          parentRect.top += scrollParent.scrollTop;
          parentRect.bottom += scrollParent.scrollTop;
          parentRect.left += scrollParent.scrollLeft;
          parentRect.right += scrollParent.scrollLeft;
        }
        var rect = {
          top: elementRect.top - parentRect.top,
          left: elementRect.left - parentRect.left,
          bottom: elementRect.top - parentRect.top + elementRect.height,
          right: elementRect.left - parentRect.left + elementRect.width,
          width: elementRect.width,
          height: elementRect.height
        };
        return rect;
      }
      function getSupportedPropertyName(property) {
        var prefixes = ["", "ms", "webkit", "moz", "o"];
        for (var i = 0; i < prefixes.length; i++) {
          var toCheck = prefixes[i] ? prefixes[i] + property.charAt(0).toUpperCase() + property.slice(1) : property;
          if (typeof root2.document.body.style[toCheck] !== "undefined") {
            return toCheck;
          }
        }
        return null;
      }
      if (!Object.assign) {
        Object.defineProperty(Object, "assign", {
          enumerable: false,
          configurable: true,
          writable: true,
          value: function value(target2) {
            if (target2 === void 0 || target2 === null) {
              throw new TypeError("Cannot convert first argument to object");
            }
            var to = Object(target2);
            for (var i = 1; i < arguments.length; i++) {
              var nextSource = arguments[i];
              if (nextSource === void 0 || nextSource === null) {
                continue;
              }
              nextSource = Object(nextSource);
              var keysArray = Object.keys(nextSource);
              for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
                var nextKey = keysArray[nextIndex];
                var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
                if (desc !== void 0 && desc.enumerable) {
                  to[nextKey] = nextSource[nextKey];
                }
              }
            }
            return to;
          }
        });
      }
      return Popper;
    });
  })(popper);
  return popper.exports;
}
var hasRequiredVuePopper;
function requireVuePopper() {
  if (hasRequiredVuePopper)
    return vuePopper;
  hasRequiredVuePopper = 1;
  vuePopper.__esModule = true;
  var _vue = require$$6$1;
  var _vue2 = _interopRequireDefault2(_vue);
  var _popup = requirePopup();
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var PopperJS = _vue2.default.prototype.$isServer ? function() {
  } : requirePopper();
  var stop = function stop2(e) {
    return e.stopPropagation();
  };
  vuePopper.default = {
    props: {
      transformOrigin: {
        type: [Boolean, String],
        default: true
      },
      placement: {
        type: String,
        default: "bottom"
      },
      boundariesPadding: {
        type: Number,
        default: 5
      },
      reference: {},
      popper: {},
      offset: {
        default: 0
      },
      value: Boolean,
      visibleArrow: Boolean,
      arrowOffset: {
        type: Number,
        default: 35
      },
      appendToBody: {
        type: Boolean,
        default: true
      },
      popperOptions: {
        type: Object,
        default: function _default2() {
          return {
            gpuAcceleration: false
          };
        }
      }
    },
    data: function data() {
      return {
        showPopper: false,
        currentPlacement: ""
      };
    },
    watch: {
      value: {
        immediate: true,
        handler: function handler(val) {
          this.showPopper = val;
          this.$emit("input", val);
        }
      },
      showPopper: function showPopper(val) {
        if (this.disabled)
          return;
        val ? this.updatePopper() : this.destroyPopper();
        this.$emit("input", val);
      }
    },
    methods: {
      createPopper: function createPopper() {
        var _this = this;
        if (this.$isServer)
          return;
        this.currentPlacement = this.currentPlacement || this.placement;
        if (!/^(top|bottom|left|right)(-start|-end)?$/g.test(this.currentPlacement)) {
          return;
        }
        var options = this.popperOptions;
        var popper2 = this.popperElm = this.popperElm || this.popper || this.$refs.popper;
        var reference = this.referenceElm = this.referenceElm || this.reference || this.$refs.reference;
        if (!reference && this.$slots.reference && this.$slots.reference[0]) {
          reference = this.referenceElm = this.$slots.reference[0].elm;
        }
        if (!popper2 || !reference)
          return;
        if (this.visibleArrow)
          this.appendArrow(popper2);
        if (this.appendToBody)
          document.body.appendChild(this.popperElm);
        if (this.popperJS && this.popperJS.destroy) {
          this.popperJS.destroy();
        }
        options.placement = this.currentPlacement;
        options.offset = this.offset;
        options.arrowOffset = this.arrowOffset;
        this.popperJS = new PopperJS(reference, popper2, options);
        this.popperJS.onCreate(function(_) {
          _this.$emit("created", _this);
          _this.resetTransformOrigin();
          _this.$nextTick(_this.updatePopper);
        });
        if (typeof options.onUpdate === "function") {
          this.popperJS.onUpdate(options.onUpdate);
        }
        this.popperJS._popper.style.zIndex = _popup.PopupManager.nextZIndex();
        this.popperElm.addEventListener("click", stop);
      },
      updatePopper: function updatePopper() {
        var popperJS = this.popperJS;
        if (popperJS) {
          popperJS.update();
          if (popperJS._popper) {
            popperJS._popper.style.zIndex = _popup.PopupManager.nextZIndex();
          }
        } else {
          this.createPopper();
        }
      },
      doDestroy: function doDestroy(forceDestroy) {
        if (!this.popperJS || this.showPopper && !forceDestroy)
          return;
        this.popperJS.destroy();
        this.popperJS = null;
      },
      destroyPopper: function destroyPopper() {
        if (this.popperJS) {
          this.resetTransformOrigin();
        }
      },
      resetTransformOrigin: function resetTransformOrigin() {
        if (!this.transformOrigin)
          return;
        var placementMap = {
          top: "bottom",
          bottom: "top",
          left: "right",
          right: "left"
        };
        var placement = this.popperJS._popper.getAttribute("x-placement").split("-")[0];
        var origin = placementMap[placement];
        this.popperJS._popper.style.transformOrigin = typeof this.transformOrigin === "string" ? this.transformOrigin : ["top", "bottom"].indexOf(placement) > -1 ? "center " + origin : origin + " center";
      },
      appendArrow: function appendArrow(element) {
        var hash = void 0;
        if (this.appended) {
          return;
        }
        this.appended = true;
        for (var item in element.attributes) {
          if (/^_v-/.test(element.attributes[item].name)) {
            hash = element.attributes[item].name;
            break;
          }
        }
        var arrow = document.createElement("div");
        if (hash) {
          arrow.setAttribute(hash, "");
        }
        arrow.setAttribute("x-arrow", "");
        arrow.className = "popper__arrow";
        element.appendChild(arrow);
      }
    },
    beforeDestroy: function beforeDestroy2() {
      this.doDestroy(true);
      if (this.popperElm && this.popperElm.parentNode === document.body) {
        this.popperElm.removeEventListener("click", stop);
        document.body.removeChild(this.popperElm);
      }
    },
    // call destroy in keep-alive mode
    deactivated: function deactivated() {
      this.$options.beforeDestroy[0].call(this);
    }
  };
  return vuePopper;
}
var input = { exports: {} };
var migrating = {};
var hasRequiredMigrating;
function requireMigrating() {
  if (hasRequiredMigrating)
    return migrating;
  hasRequiredMigrating = 1;
  migrating.__esModule = true;
  var _util = requireUtil();
  migrating.default = {
    mounted: function mounted2() {
      if (process.env.NODE_ENV === "production")
        return;
      if (!this.$vnode)
        return;
      var _getMigratingConfig = this.getMigratingConfig(), _getMigratingConfig$p = _getMigratingConfig.props, props2 = _getMigratingConfig$p === void 0 ? {} : _getMigratingConfig$p, _getMigratingConfig$e = _getMigratingConfig.events, events2 = _getMigratingConfig$e === void 0 ? {} : _getMigratingConfig$e;
      var _$vnode = this.$vnode, data = _$vnode.data, componentOptions = _$vnode.componentOptions;
      var definedProps = data.attrs || {};
      var definedEvents = componentOptions.listeners || {};
      for (var propName in definedProps) {
        propName = (0, _util.kebabCase)(propName);
        if (props2[propName]) {
          console.warn("[Element Migrating][" + this.$options.name + "][Attribute]: " + props2[propName]);
        }
      }
      for (var eventName in definedEvents) {
        eventName = (0, _util.kebabCase)(eventName);
        if (events2[eventName]) {
          console.warn("[Element Migrating][" + this.$options.name + "][Event]: " + events2[eventName]);
        }
      }
    },
    methods: {
      getMigratingConfig: function getMigratingConfig() {
        return {
          props: {},
          events: {}
        };
      }
    }
  };
  return migrating;
}
var shared$2 = {};
var hasRequiredShared;
function requireShared() {
  if (hasRequiredShared)
    return shared$2;
  hasRequiredShared = 1;
  shared$2.__esModule = true;
  shared$2.isDef = isDef2;
  shared$2.isKorean = isKorean;
  function isDef2(val) {
    return val !== void 0 && val !== null;
  }
  function isKorean(text) {
    var reg = /([(\uAC00-\uD7AF)|(\u3130-\u318F)])+/gi;
    return reg.test(text);
  }
  return shared$2;
}
var hasRequiredInput;
function requireInput() {
  if (hasRequiredInput)
    return input.exports;
  hasRequiredInput = 1;
  (function(module) {
    module.exports = /******/
    function(modules2) {
      var installedModules = {};
      function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
          return installedModules[moduleId].exports;
        }
        var module2 = installedModules[moduleId] = {
          /******/
          i: moduleId,
          /******/
          l: false,
          /******/
          exports: {}
          /******/
        };
        modules2[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
        module2.l = true;
        return module2.exports;
      }
      __webpack_require__.m = modules2;
      __webpack_require__.c = installedModules;
      __webpack_require__.d = function(exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
          Object.defineProperty(exports, name, { enumerable: true, get: getter });
        }
      };
      __webpack_require__.r = function(exports) {
        if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
          Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
        }
        Object.defineProperty(exports, "__esModule", { value: true });
      };
      __webpack_require__.t = function(value, mode) {
        if (mode & 1)
          value = __webpack_require__(value);
        if (mode & 8)
          return value;
        if (mode & 4 && typeof value === "object" && value && value.__esModule)
          return value;
        var ns = /* @__PURE__ */ Object.create(null);
        __webpack_require__.r(ns);
        Object.defineProperty(ns, "default", { enumerable: true, value });
        if (mode & 2 && typeof value != "string")
          for (var key in value)
            __webpack_require__.d(ns, key, (function(key2) {
              return value[key2];
            }).bind(null, key));
        return ns;
      };
      __webpack_require__.n = function(module2) {
        var getter = module2 && module2.__esModule ? (
          /******/
          function getDefault() {
            return module2["default"];
          }
        ) : (
          /******/
          function getModuleExports() {
            return module2;
          }
        );
        __webpack_require__.d(getter, "a", getter);
        return getter;
      };
      __webpack_require__.o = function(object3, property) {
        return Object.prototype.hasOwnProperty.call(object3, property);
      };
      __webpack_require__.p = "/dist/";
      return __webpack_require__(__webpack_require__.s = 75);
    }({
      /***/
      0: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.d(__webpack_exports__, "a", function() {
            return normalizeComponent2;
          });
          function normalizeComponent2(scriptExports, render6, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
            var options = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
            if (render6) {
              options.render = render6;
              options.staticRenderFns = staticRenderFns;
              options._compiled = true;
            }
            if (functionalTemplate) {
              options.functional = true;
            }
            if (scopeId) {
              options._scopeId = "data-v-" + scopeId;
            }
            var hook;
            if (moduleIdentifier) {
              hook = function(context) {
                context = context || // cached call
                this.$vnode && this.$vnode.ssrContext || // stateful
                this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
                if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
                  context = __VUE_SSR_CONTEXT__;
                }
                if (injectStyles) {
                  injectStyles.call(this, context);
                }
                if (context && context._registeredComponents) {
                  context._registeredComponents.add(moduleIdentifier);
                }
              };
              options._ssrRegister = hook;
            } else if (injectStyles) {
              hook = shadowMode ? function() {
                injectStyles.call(this, this.$root.$options.shadowRoot);
              } : injectStyles;
            }
            if (hook) {
              if (options.functional) {
                options._injectStyles = hook;
                var originalRender = options.render;
                options.render = function renderWithStyleInjection(h2, context) {
                  hook.call(context);
                  return originalRender(h2, context);
                };
              } else {
                var existing = options.beforeCreate;
                options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
              }
            }
            return {
              exports: scriptExports,
              options
            };
          }
        }
      ),
      /***/
      11: (
        /***/
        function(module2, exports) {
          module2.exports = requireMigrating();
        }
      ),
      /***/
      21: (
        /***/
        function(module2, exports) {
          module2.exports = requireShared();
        }
      ),
      /***/
      4: (
        /***/
        function(module2, exports) {
          module2.exports = requireEmitter();
        }
      ),
      /***/
      75: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.r(__webpack_exports__);
          var render6 = function() {
            var _vm = this;
            var _h = _vm.$createElement;
            var _c = _vm._self._c || _h;
            return _c(
              "div",
              {
                class: [
                  _vm.type === "textarea" ? "el-textarea" : "el-input",
                  _vm.inputSize ? "el-input--" + _vm.inputSize : "",
                  {
                    "is-disabled": _vm.inputDisabled,
                    "is-exceed": _vm.inputExceed,
                    "el-input-group": _vm.$slots.prepend || _vm.$slots.append,
                    "el-input-group--append": _vm.$slots.append,
                    "el-input-group--prepend": _vm.$slots.prepend,
                    "el-input--prefix": _vm.$slots.prefix || _vm.prefixIcon,
                    "el-input--suffix": _vm.$slots.suffix || _vm.suffixIcon || _vm.clearable || _vm.showPassword
                  }
                ],
                on: {
                  mouseenter: function($event) {
                    _vm.hovering = true;
                  },
                  mouseleave: function($event) {
                    _vm.hovering = false;
                  }
                }
              },
              [
                _vm.type !== "textarea" ? [
                  _vm.$slots.prepend ? _c(
                    "div",
                    { staticClass: "el-input-group__prepend" },
                    [_vm._t("prepend")],
                    2
                  ) : _vm._e(),
                  _vm.type !== "textarea" ? _c(
                    "input",
                    _vm._b(
                      {
                        ref: "input",
                        staticClass: "el-input__inner",
                        attrs: {
                          tabindex: _vm.tabindex,
                          type: _vm.showPassword ? _vm.passwordVisible ? "text" : "password" : _vm.type,
                          disabled: _vm.inputDisabled,
                          readonly: _vm.readonly,
                          autocomplete: _vm.autoComplete || _vm.autocomplete,
                          "aria-label": _vm.label
                        },
                        on: {
                          compositionstart: _vm.handleCompositionStart,
                          compositionupdate: _vm.handleCompositionUpdate,
                          compositionend: _vm.handleCompositionEnd,
                          input: _vm.handleInput,
                          focus: _vm.handleFocus,
                          blur: _vm.handleBlur,
                          change: _vm.handleChange
                        }
                      },
                      "input",
                      _vm.$attrs,
                      false
                    )
                  ) : _vm._e(),
                  _vm.$slots.prefix || _vm.prefixIcon ? _c(
                    "span",
                    { staticClass: "el-input__prefix" },
                    [
                      _vm._t("prefix"),
                      _vm.prefixIcon ? _c("i", {
                        staticClass: "el-input__icon",
                        class: _vm.prefixIcon
                      }) : _vm._e()
                    ],
                    2
                  ) : _vm._e(),
                  _vm.getSuffixVisible() ? _c("span", { staticClass: "el-input__suffix" }, [
                    _c(
                      "span",
                      { staticClass: "el-input__suffix-inner" },
                      [
                        !_vm.showClear || !_vm.showPwdVisible || !_vm.isWordLimitVisible ? [
                          _vm._t("suffix"),
                          _vm.suffixIcon ? _c("i", {
                            staticClass: "el-input__icon",
                            class: _vm.suffixIcon
                          }) : _vm._e()
                        ] : _vm._e(),
                        _vm.showClear ? _c("i", {
                          staticClass: "el-input__icon el-icon-circle-close el-input__clear",
                          on: {
                            mousedown: function($event) {
                              $event.preventDefault();
                            },
                            click: _vm.clear
                          }
                        }) : _vm._e(),
                        _vm.showPwdVisible ? _c("i", {
                          staticClass: "el-input__icon el-icon-view el-input__clear",
                          on: { click: _vm.handlePasswordVisible }
                        }) : _vm._e(),
                        _vm.isWordLimitVisible ? _c("span", { staticClass: "el-input__count" }, [
                          _c(
                            "span",
                            { staticClass: "el-input__count-inner" },
                            [
                              _vm._v(
                                "\n            " + _vm._s(_vm.textLength) + "/" + _vm._s(_vm.upperLimit) + "\n          "
                              )
                            ]
                          )
                        ]) : _vm._e()
                      ],
                      2
                    ),
                    _vm.validateState ? _c("i", {
                      staticClass: "el-input__icon",
                      class: ["el-input__validateIcon", _vm.validateIcon]
                    }) : _vm._e()
                  ]) : _vm._e(),
                  _vm.$slots.append ? _c(
                    "div",
                    { staticClass: "el-input-group__append" },
                    [_vm._t("append")],
                    2
                  ) : _vm._e()
                ] : _c(
                  "textarea",
                  _vm._b(
                    {
                      ref: "textarea",
                      staticClass: "el-textarea__inner",
                      style: _vm.textareaStyle,
                      attrs: {
                        tabindex: _vm.tabindex,
                        disabled: _vm.inputDisabled,
                        readonly: _vm.readonly,
                        autocomplete: _vm.autoComplete || _vm.autocomplete,
                        "aria-label": _vm.label
                      },
                      on: {
                        compositionstart: _vm.handleCompositionStart,
                        compositionupdate: _vm.handleCompositionUpdate,
                        compositionend: _vm.handleCompositionEnd,
                        input: _vm.handleInput,
                        focus: _vm.handleFocus,
                        blur: _vm.handleBlur,
                        change: _vm.handleChange
                      }
                    },
                    "textarea",
                    _vm.$attrs,
                    false
                  )
                ),
                _vm.isWordLimitVisible && _vm.type === "textarea" ? _c("span", { staticClass: "el-input__count" }, [
                  _vm._v(_vm._s(_vm.textLength) + "/" + _vm._s(_vm.upperLimit))
                ]) : _vm._e()
              ],
              2
            );
          };
          var staticRenderFns = [];
          render6._withStripped = true;
          var emitter_ = __webpack_require__(4);
          var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
          var migrating_ = __webpack_require__(11);
          var migrating_default = /* @__PURE__ */ __webpack_require__.n(migrating_);
          var hiddenTextarea = void 0;
          var HIDDEN_STYLE = "\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n";
          var CONTEXT_STYLE = ["letter-spacing", "line-height", "padding-top", "padding-bottom", "font-family", "font-weight", "font-size", "text-rendering", "text-transform", "width", "text-indent", "padding-left", "padding-right", "border-width", "box-sizing"];
          function calculateNodeStyling(targetElement) {
            var style2 = window.getComputedStyle(targetElement);
            var boxSizing = style2.getPropertyValue("box-sizing");
            var paddingSize = parseFloat(style2.getPropertyValue("padding-bottom")) + parseFloat(style2.getPropertyValue("padding-top"));
            var borderSize = parseFloat(style2.getPropertyValue("border-bottom-width")) + parseFloat(style2.getPropertyValue("border-top-width"));
            var contextStyle = CONTEXT_STYLE.map(function(name) {
              return name + ":" + style2.getPropertyValue(name);
            }).join(";");
            return { contextStyle, paddingSize, borderSize, boxSizing };
          }
          function calcTextareaHeight(targetElement) {
            var minRows = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
            var maxRows = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!hiddenTextarea) {
              hiddenTextarea = document.createElement("textarea");
              document.body.appendChild(hiddenTextarea);
            }
            var _calculateNodeStyling = calculateNodeStyling(targetElement), paddingSize = _calculateNodeStyling.paddingSize, borderSize = _calculateNodeStyling.borderSize, boxSizing = _calculateNodeStyling.boxSizing, contextStyle = _calculateNodeStyling.contextStyle;
            hiddenTextarea.setAttribute("style", contextStyle + ";" + HIDDEN_STYLE);
            hiddenTextarea.value = targetElement.value || targetElement.placeholder || "";
            var height = hiddenTextarea.scrollHeight;
            var result = {};
            if (boxSizing === "border-box") {
              height = height + borderSize;
            } else if (boxSizing === "content-box") {
              height = height - paddingSize;
            }
            hiddenTextarea.value = "";
            var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
            if (minRows !== null) {
              var minHeight = singleRowHeight * minRows;
              if (boxSizing === "border-box") {
                minHeight = minHeight + paddingSize + borderSize;
              }
              height = Math.max(minHeight, height);
              result.minHeight = minHeight + "px";
            }
            if (maxRows !== null) {
              var maxHeight = singleRowHeight * maxRows;
              if (boxSizing === "border-box") {
                maxHeight = maxHeight + paddingSize + borderSize;
              }
              height = Math.min(maxHeight, height);
            }
            result.height = height + "px";
            hiddenTextarea.parentNode && hiddenTextarea.parentNode.removeChild(hiddenTextarea);
            hiddenTextarea = null;
            return result;
          }
          var merge_ = __webpack_require__(9);
          var merge_default = /* @__PURE__ */ __webpack_require__.n(merge_);
          var shared_ = __webpack_require__(21);
          var inputvue_type_script_lang_js_ = {
            name: "ElInput",
            componentName: "ElInput",
            mixins: [emitter_default.a, migrating_default.a],
            inheritAttrs: false,
            inject: {
              elForm: {
                default: ""
              },
              elFormItem: {
                default: ""
              }
            },
            data: function data() {
              return {
                textareaCalcStyle: {},
                hovering: false,
                focused: false,
                isComposing: false,
                passwordVisible: false
              };
            },
            props: {
              value: [String, Number],
              size: String,
              resize: String,
              form: String,
              disabled: Boolean,
              readonly: Boolean,
              type: {
                type: String,
                default: "text"
              },
              autosize: {
                type: [Boolean, Object],
                default: false
              },
              autocomplete: {
                type: String,
                default: "off"
              },
              /** @Deprecated in next major version */
              autoComplete: {
                type: String,
                validator: function validator(val) {
                  return true;
                }
              },
              validateEvent: {
                type: Boolean,
                default: true
              },
              suffixIcon: String,
              prefixIcon: String,
              label: String,
              clearable: {
                type: Boolean,
                default: false
              },
              showPassword: {
                type: Boolean,
                default: false
              },
              showWordLimit: {
                type: Boolean,
                default: false
              },
              tabindex: String
            },
            computed: {
              _elFormItemSize: function _elFormItemSize() {
                return (this.elFormItem || {}).elFormItemSize;
              },
              validateState: function validateState() {
                return this.elFormItem ? this.elFormItem.validateState : "";
              },
              needStatusIcon: function needStatusIcon() {
                return this.elForm ? this.elForm.statusIcon : false;
              },
              validateIcon: function validateIcon() {
                return {
                  validating: "el-icon-loading",
                  success: "el-icon-circle-check",
                  error: "el-icon-circle-close"
                }[this.validateState];
              },
              textareaStyle: function textareaStyle() {
                return merge_default()({}, this.textareaCalcStyle, { resize: this.resize });
              },
              inputSize: function inputSize() {
                return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
              },
              inputDisabled: function inputDisabled() {
                return this.disabled || (this.elForm || {}).disabled;
              },
              nativeInputValue: function nativeInputValue() {
                return this.value === null || this.value === void 0 ? "" : String(this.value);
              },
              showClear: function showClear() {
                return this.clearable && !this.inputDisabled && !this.readonly && this.nativeInputValue && (this.focused || this.hovering);
              },
              showPwdVisible: function showPwdVisible() {
                return this.showPassword && !this.inputDisabled && !this.readonly && (!!this.nativeInputValue || this.focused);
              },
              isWordLimitVisible: function isWordLimitVisible() {
                return this.showWordLimit && this.$attrs.maxlength && (this.type === "text" || this.type === "textarea") && !this.inputDisabled && !this.readonly && !this.showPassword;
              },
              upperLimit: function upperLimit() {
                return this.$attrs.maxlength;
              },
              textLength: function textLength() {
                if (typeof this.value === "number") {
                  return String(this.value).length;
                }
                return (this.value || "").length;
              },
              inputExceed: function inputExceed() {
                return this.isWordLimitVisible && this.textLength > this.upperLimit;
              }
            },
            watch: {
              value: function value(val) {
                this.$nextTick(this.resizeTextarea);
                if (this.validateEvent) {
                  this.dispatch("ElFormItem", "el.form.change", [val]);
                }
              },
              // native input value is set explicitly
              // do not use v-model / :value in template
              // see: https://github.com/ElemeFE/element/issues/14521
              nativeInputValue: function nativeInputValue() {
                this.setNativeInputValue();
              },
              // when change between <input> and <textarea>,
              // update DOM dependent value and styles
              // https://github.com/ElemeFE/element/issues/14857
              type: function type2() {
                var _this = this;
                this.$nextTick(function() {
                  _this.setNativeInputValue();
                  _this.resizeTextarea();
                  _this.updateIconOffset();
                });
              }
            },
            methods: {
              focus: function focus2() {
                this.getInput().focus();
              },
              blur: function blur() {
                this.getInput().blur();
              },
              getMigratingConfig: function getMigratingConfig() {
                return {
                  props: {
                    "icon": "icon is removed, use suffix-icon / prefix-icon instead.",
                    "on-icon-click": "on-icon-click is removed."
                  },
                  events: {
                    "click": "click is removed."
                  }
                };
              },
              handleBlur: function handleBlur(event) {
                this.focused = false;
                this.$emit("blur", event);
                if (this.validateEvent) {
                  this.dispatch("ElFormItem", "el.form.blur", [this.value]);
                }
              },
              select: function select2() {
                this.getInput().select();
              },
              resizeTextarea: function resizeTextarea() {
                if (this.$isServer)
                  return;
                var autosize = this.autosize, type2 = this.type;
                if (type2 !== "textarea")
                  return;
                if (!autosize) {
                  this.textareaCalcStyle = {
                    minHeight: calcTextareaHeight(this.$refs.textarea).minHeight
                  };
                  return;
                }
                var minRows = autosize.minRows;
                var maxRows = autosize.maxRows;
                this.textareaCalcStyle = calcTextareaHeight(this.$refs.textarea, minRows, maxRows);
              },
              setNativeInputValue: function setNativeInputValue() {
                var input3 = this.getInput();
                if (!input3)
                  return;
                if (input3.value === this.nativeInputValue)
                  return;
                input3.value = this.nativeInputValue;
              },
              handleFocus: function handleFocus(event) {
                this.focused = true;
                this.$emit("focus", event);
              },
              handleCompositionStart: function handleCompositionStart(event) {
                this.$emit("compositionstart", event);
                this.isComposing = true;
              },
              handleCompositionUpdate: function handleCompositionUpdate(event) {
                this.$emit("compositionupdate", event);
                var text = event.target.value;
                var lastCharacter = text[text.length - 1] || "";
                this.isComposing = !Object(shared_["isKorean"])(lastCharacter);
              },
              handleCompositionEnd: function handleCompositionEnd(event) {
                this.$emit("compositionend", event);
                if (this.isComposing) {
                  this.isComposing = false;
                  this.handleInput(event);
                }
              },
              handleInput: function handleInput(event) {
                if (this.isComposing)
                  return;
                if (event.target.value === this.nativeInputValue)
                  return;
                this.$emit("input", event.target.value);
                this.$nextTick(this.setNativeInputValue);
              },
              handleChange: function handleChange(event) {
                this.$emit("change", event.target.value);
              },
              calcIconOffset: function calcIconOffset(place) {
                var elList = [].slice.call(this.$el.querySelectorAll(".el-input__" + place) || []);
                if (!elList.length)
                  return;
                var el = null;
                for (var i = 0; i < elList.length; i++) {
                  if (elList[i].parentNode === this.$el) {
                    el = elList[i];
                    break;
                  }
                }
                if (!el)
                  return;
                var pendantMap = {
                  suffix: "append",
                  prefix: "prepend"
                };
                var pendant = pendantMap[place];
                if (this.$slots[pendant]) {
                  el.style.transform = "translateX(" + (place === "suffix" ? "-" : "") + this.$el.querySelector(".el-input-group__" + pendant).offsetWidth + "px)";
                } else {
                  el.removeAttribute("style");
                }
              },
              updateIconOffset: function updateIconOffset() {
                this.calcIconOffset("prefix");
                this.calcIconOffset("suffix");
              },
              clear: function clear() {
                this.$emit("input", "");
                this.$emit("change", "");
                this.$emit("clear");
              },
              handlePasswordVisible: function handlePasswordVisible() {
                var _this2 = this;
                this.passwordVisible = !this.passwordVisible;
                this.$nextTick(function() {
                  _this2.focus();
                });
              },
              getInput: function getInput() {
                return this.$refs.input || this.$refs.textarea;
              },
              getSuffixVisible: function getSuffixVisible() {
                return this.$slots.suffix || this.suffixIcon || this.showClear || this.showPassword || this.isWordLimitVisible || this.validateState && this.needStatusIcon;
              }
            },
            created: function created() {
              this.$on("inputSelect", this.select);
            },
            mounted: function mounted2() {
              this.setNativeInputValue();
              this.resizeTextarea();
              this.updateIconOffset();
            },
            updated: function updated() {
              this.$nextTick(this.updateIconOffset);
            }
          };
          var src_inputvue_type_script_lang_js_ = inputvue_type_script_lang_js_;
          var componentNormalizer = __webpack_require__(0);
          var component = Object(componentNormalizer[
            "a"
            /* default */
          ])(
            src_inputvue_type_script_lang_js_,
            render6,
            staticRenderFns,
            false,
            null,
            null,
            null
          );
          component.options.__file = "packages/input/src/input.vue";
          var input2 = component.exports;
          input2.install = function(Vue2) {
            Vue2.component(input2.name, input2);
          };
          __webpack_exports__["default"] = input2;
        }
      ),
      /***/
      9: (
        /***/
        function(module2, exports) {
          module2.exports = requireMerge();
        }
      )
      /******/
    });
  })(input);
  return input.exports;
}
var clickoutside = {};
var hasRequiredClickoutside;
function requireClickoutside() {
  if (hasRequiredClickoutside)
    return clickoutside;
  hasRequiredClickoutside = 1;
  clickoutside.__esModule = true;
  var _vue = require$$6$1;
  var _vue2 = _interopRequireDefault2(_vue);
  var _dom = requireDom();
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var nodeList = [];
  var ctx2 = "@@clickoutsideContext";
  var startClick = void 0;
  var seed = 0;
  !_vue2.default.prototype.$isServer && (0, _dom.on)(document, "mousedown", function(e) {
    return startClick = e;
  });
  !_vue2.default.prototype.$isServer && (0, _dom.on)(document, "mouseup", function(e) {
    nodeList.forEach(function(node) {
      return node[ctx2].documentHandler(e, startClick);
    });
  });
  function createDocumentHandler(el, binding, vnode) {
    return function() {
      var mouseup = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var mousedown = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (!vnode || !vnode.context || !mouseup.target || !mousedown.target || el.contains(mouseup.target) || el.contains(mousedown.target) || el === mouseup.target || vnode.context.popperElm && (vnode.context.popperElm.contains(mouseup.target) || vnode.context.popperElm.contains(mousedown.target)))
        return;
      if (binding.expression && el[ctx2].methodName && vnode.context[el[ctx2].methodName]) {
        vnode.context[el[ctx2].methodName]();
      } else {
        el[ctx2].bindingFn && el[ctx2].bindingFn();
      }
    };
  }
  clickoutside.default = {
    bind: function bind2(el, binding, vnode) {
      nodeList.push(el);
      var id2 = seed++;
      el[ctx2] = {
        id: id2,
        documentHandler: createDocumentHandler(el, binding, vnode),
        methodName: binding.expression,
        bindingFn: binding.value
      };
    },
    update: function update2(el, binding, vnode) {
      el[ctx2].documentHandler = createDocumentHandler(el, binding, vnode);
      el[ctx2].methodName = binding.expression;
      el[ctx2].bindingFn = binding.value;
    },
    unbind: function unbind2(el) {
      var len = nodeList.length;
      for (var i = 0; i < len; i++) {
        if (nodeList[i][ctx2].id === el[ctx2].id) {
          nodeList.splice(i, 1);
          break;
        }
      }
      delete el[ctx2];
    }
  };
  return clickoutside;
}
var button = { exports: {} };
var hasRequiredButton;
function requireButton() {
  if (hasRequiredButton)
    return button.exports;
  hasRequiredButton = 1;
  (function(module) {
    module.exports = /******/
    function(modules2) {
      var installedModules = {};
      function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
          return installedModules[moduleId].exports;
        }
        var module2 = installedModules[moduleId] = {
          /******/
          i: moduleId,
          /******/
          l: false,
          /******/
          exports: {}
          /******/
        };
        modules2[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
        module2.l = true;
        return module2.exports;
      }
      __webpack_require__.m = modules2;
      __webpack_require__.c = installedModules;
      __webpack_require__.d = function(exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
          Object.defineProperty(exports, name, { enumerable: true, get: getter });
        }
      };
      __webpack_require__.r = function(exports) {
        if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
          Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
        }
        Object.defineProperty(exports, "__esModule", { value: true });
      };
      __webpack_require__.t = function(value, mode) {
        if (mode & 1)
          value = __webpack_require__(value);
        if (mode & 8)
          return value;
        if (mode & 4 && typeof value === "object" && value && value.__esModule)
          return value;
        var ns = /* @__PURE__ */ Object.create(null);
        __webpack_require__.r(ns);
        Object.defineProperty(ns, "default", { enumerable: true, value });
        if (mode & 2 && typeof value != "string")
          for (var key in value)
            __webpack_require__.d(ns, key, (function(key2) {
              return value[key2];
            }).bind(null, key));
        return ns;
      };
      __webpack_require__.n = function(module2) {
        var getter = module2 && module2.__esModule ? (
          /******/
          function getDefault() {
            return module2["default"];
          }
        ) : (
          /******/
          function getModuleExports() {
            return module2;
          }
        );
        __webpack_require__.d(getter, "a", getter);
        return getter;
      };
      __webpack_require__.o = function(object3, property) {
        return Object.prototype.hasOwnProperty.call(object3, property);
      };
      __webpack_require__.p = "/dist/";
      return __webpack_require__(__webpack_require__.s = 96);
    }({
      /***/
      0: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.d(__webpack_exports__, "a", function() {
            return normalizeComponent2;
          });
          function normalizeComponent2(scriptExports, render6, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
            var options = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
            if (render6) {
              options.render = render6;
              options.staticRenderFns = staticRenderFns;
              options._compiled = true;
            }
            if (functionalTemplate) {
              options.functional = true;
            }
            if (scopeId) {
              options._scopeId = "data-v-" + scopeId;
            }
            var hook;
            if (moduleIdentifier) {
              hook = function(context) {
                context = context || // cached call
                this.$vnode && this.$vnode.ssrContext || // stateful
                this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
                if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
                  context = __VUE_SSR_CONTEXT__;
                }
                if (injectStyles) {
                  injectStyles.call(this, context);
                }
                if (context && context._registeredComponents) {
                  context._registeredComponents.add(moduleIdentifier);
                }
              };
              options._ssrRegister = hook;
            } else if (injectStyles) {
              hook = shadowMode ? function() {
                injectStyles.call(this, this.$root.$options.shadowRoot);
              } : injectStyles;
            }
            if (hook) {
              if (options.functional) {
                options._injectStyles = hook;
                var originalRender = options.render;
                options.render = function renderWithStyleInjection(h2, context) {
                  hook.call(context);
                  return originalRender(h2, context);
                };
              } else {
                var existing = options.beforeCreate;
                options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
              }
            }
            return {
              exports: scriptExports,
              options
            };
          }
        }
      ),
      /***/
      96: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.r(__webpack_exports__);
          var render6 = function() {
            var _vm = this;
            var _h = _vm.$createElement;
            var _c = _vm._self._c || _h;
            return _c(
              "button",
              {
                staticClass: "el-button",
                class: [
                  _vm.type ? "el-button--" + _vm.type : "",
                  _vm.buttonSize ? "el-button--" + _vm.buttonSize : "",
                  {
                    "is-disabled": _vm.buttonDisabled,
                    "is-loading": _vm.loading,
                    "is-plain": _vm.plain,
                    "is-round": _vm.round,
                    "is-circle": _vm.circle
                  }
                ],
                attrs: {
                  disabled: _vm.buttonDisabled || _vm.loading,
                  autofocus: _vm.autofocus,
                  type: _vm.nativeType
                },
                on: { click: _vm.handleClick }
              },
              [
                _vm.loading ? _c("i", { staticClass: "el-icon-loading" }) : _vm._e(),
                _vm.icon && !_vm.loading ? _c("i", { class: _vm.icon }) : _vm._e(),
                _vm.$slots.default ? _c("span", [_vm._t("default")], 2) : _vm._e()
              ]
            );
          };
          var staticRenderFns = [];
          render6._withStripped = true;
          var buttonvue_type_script_lang_js_ = {
            name: "ElButton",
            inject: {
              elForm: {
                default: ""
              },
              elFormItem: {
                default: ""
              }
            },
            props: {
              type: {
                type: String,
                default: "default"
              },
              size: String,
              icon: {
                type: String,
                default: ""
              },
              nativeType: {
                type: String,
                default: "button"
              },
              loading: Boolean,
              disabled: Boolean,
              plain: Boolean,
              autofocus: Boolean,
              round: Boolean,
              circle: Boolean
            },
            computed: {
              _elFormItemSize: function _elFormItemSize() {
                return (this.elFormItem || {}).elFormItemSize;
              },
              buttonSize: function buttonSize() {
                return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
              },
              buttonDisabled: function buttonDisabled() {
                return this.$options.propsData.hasOwnProperty("disabled") ? this.disabled : (this.elForm || {}).disabled;
              }
            },
            methods: {
              handleClick: function handleClick(evt) {
                this.$emit("click", evt);
              }
            }
          };
          var src_buttonvue_type_script_lang_js_ = buttonvue_type_script_lang_js_;
          var componentNormalizer = __webpack_require__(0);
          var component = Object(componentNormalizer[
            "a"
            /* default */
          ])(
            src_buttonvue_type_script_lang_js_,
            render6,
            staticRenderFns,
            false,
            null,
            null,
            null
          );
          component.options.__file = "packages/button/src/button.vue";
          var src_button = component.exports;
          src_button.install = function(Vue2) {
            Vue2.component(src_button.name, src_button);
          };
          __webpack_exports__["default"] = src_button;
        }
      )
      /******/
    });
  })(button);
  return button.exports;
}
var checkbox = { exports: {} };
var hasRequiredCheckbox;
function requireCheckbox() {
  if (hasRequiredCheckbox)
    return checkbox.exports;
  hasRequiredCheckbox = 1;
  (function(module) {
    module.exports = /******/
    function(modules2) {
      var installedModules = {};
      function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
          return installedModules[moduleId].exports;
        }
        var module2 = installedModules[moduleId] = {
          /******/
          i: moduleId,
          /******/
          l: false,
          /******/
          exports: {}
          /******/
        };
        modules2[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
        module2.l = true;
        return module2.exports;
      }
      __webpack_require__.m = modules2;
      __webpack_require__.c = installedModules;
      __webpack_require__.d = function(exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
          Object.defineProperty(exports, name, { enumerable: true, get: getter });
        }
      };
      __webpack_require__.r = function(exports) {
        if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
          Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
        }
        Object.defineProperty(exports, "__esModule", { value: true });
      };
      __webpack_require__.t = function(value, mode) {
        if (mode & 1)
          value = __webpack_require__(value);
        if (mode & 8)
          return value;
        if (mode & 4 && typeof value === "object" && value && value.__esModule)
          return value;
        var ns = /* @__PURE__ */ Object.create(null);
        __webpack_require__.r(ns);
        Object.defineProperty(ns, "default", { enumerable: true, value });
        if (mode & 2 && typeof value != "string")
          for (var key in value)
            __webpack_require__.d(ns, key, (function(key2) {
              return value[key2];
            }).bind(null, key));
        return ns;
      };
      __webpack_require__.n = function(module2) {
        var getter = module2 && module2.__esModule ? (
          /******/
          function getDefault() {
            return module2["default"];
          }
        ) : (
          /******/
          function getModuleExports() {
            return module2;
          }
        );
        __webpack_require__.d(getter, "a", getter);
        return getter;
      };
      __webpack_require__.o = function(object3, property) {
        return Object.prototype.hasOwnProperty.call(object3, property);
      };
      __webpack_require__.p = "/dist/";
      return __webpack_require__(__webpack_require__.s = 91);
    }({
      /***/
      0: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.d(__webpack_exports__, "a", function() {
            return normalizeComponent2;
          });
          function normalizeComponent2(scriptExports, render6, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
            var options = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
            if (render6) {
              options.render = render6;
              options.staticRenderFns = staticRenderFns;
              options._compiled = true;
            }
            if (functionalTemplate) {
              options.functional = true;
            }
            if (scopeId) {
              options._scopeId = "data-v-" + scopeId;
            }
            var hook;
            if (moduleIdentifier) {
              hook = function(context) {
                context = context || // cached call
                this.$vnode && this.$vnode.ssrContext || // stateful
                this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
                if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
                  context = __VUE_SSR_CONTEXT__;
                }
                if (injectStyles) {
                  injectStyles.call(this, context);
                }
                if (context && context._registeredComponents) {
                  context._registeredComponents.add(moduleIdentifier);
                }
              };
              options._ssrRegister = hook;
            } else if (injectStyles) {
              hook = shadowMode ? function() {
                injectStyles.call(this, this.$root.$options.shadowRoot);
              } : injectStyles;
            }
            if (hook) {
              if (options.functional) {
                options._injectStyles = hook;
                var originalRender = options.render;
                options.render = function renderWithStyleInjection(h2, context) {
                  hook.call(context);
                  return originalRender(h2, context);
                };
              } else {
                var existing = options.beforeCreate;
                options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
              }
            }
            return {
              exports: scriptExports,
              options
            };
          }
        }
      ),
      /***/
      4: (
        /***/
        function(module2, exports) {
          module2.exports = requireEmitter();
        }
      ),
      /***/
      91: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.r(__webpack_exports__);
          var render6 = function() {
            var _vm = this;
            var _h = _vm.$createElement;
            var _c = _vm._self._c || _h;
            return _c(
              "label",
              {
                staticClass: "el-checkbox",
                class: [
                  _vm.border && _vm.checkboxSize ? "el-checkbox--" + _vm.checkboxSize : "",
                  { "is-disabled": _vm.isDisabled },
                  { "is-bordered": _vm.border },
                  { "is-checked": _vm.isChecked }
                ],
                attrs: { id: _vm.id }
              },
              [
                _c(
                  "span",
                  {
                    staticClass: "el-checkbox__input",
                    class: {
                      "is-disabled": _vm.isDisabled,
                      "is-checked": _vm.isChecked,
                      "is-indeterminate": _vm.indeterminate,
                      "is-focus": _vm.focus
                    },
                    attrs: {
                      tabindex: _vm.indeterminate ? 0 : false,
                      role: _vm.indeterminate ? "checkbox" : false,
                      "aria-checked": _vm.indeterminate ? "mixed" : false
                    }
                  },
                  [
                    _c("span", { staticClass: "el-checkbox__inner" }),
                    _vm.trueLabel || _vm.falseLabel ? _c("input", {
                      directives: [
                        {
                          name: "model",
                          rawName: "v-model",
                          value: _vm.model,
                          expression: "model"
                        }
                      ],
                      staticClass: "el-checkbox__original",
                      attrs: {
                        type: "checkbox",
                        "aria-hidden": _vm.indeterminate ? "true" : "false",
                        name: _vm.name,
                        disabled: _vm.isDisabled,
                        "true-value": _vm.trueLabel,
                        "false-value": _vm.falseLabel
                      },
                      domProps: {
                        checked: Array.isArray(_vm.model) ? _vm._i(_vm.model, null) > -1 : _vm._q(_vm.model, _vm.trueLabel)
                      },
                      on: {
                        change: [
                          function($event) {
                            var $$a = _vm.model, $$el = $event.target, $$c = $$el.checked ? _vm.trueLabel : _vm.falseLabel;
                            if (Array.isArray($$a)) {
                              var $$v = null, $$i = _vm._i($$a, $$v);
                              if ($$el.checked) {
                                $$i < 0 && (_vm.model = $$a.concat([$$v]));
                              } else {
                                $$i > -1 && (_vm.model = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));
                              }
                            } else {
                              _vm.model = $$c;
                            }
                          },
                          _vm.handleChange
                        ],
                        focus: function($event) {
                          _vm.focus = true;
                        },
                        blur: function($event) {
                          _vm.focus = false;
                        }
                      }
                    }) : _c("input", {
                      directives: [
                        {
                          name: "model",
                          rawName: "v-model",
                          value: _vm.model,
                          expression: "model"
                        }
                      ],
                      staticClass: "el-checkbox__original",
                      attrs: {
                        type: "checkbox",
                        "aria-hidden": _vm.indeterminate ? "true" : "false",
                        disabled: _vm.isDisabled,
                        name: _vm.name
                      },
                      domProps: {
                        value: _vm.label,
                        checked: Array.isArray(_vm.model) ? _vm._i(_vm.model, _vm.label) > -1 : _vm.model
                      },
                      on: {
                        change: [
                          function($event) {
                            var $$a = _vm.model, $$el = $event.target, $$c = $$el.checked ? true : false;
                            if (Array.isArray($$a)) {
                              var $$v = _vm.label, $$i = _vm._i($$a, $$v);
                              if ($$el.checked) {
                                $$i < 0 && (_vm.model = $$a.concat([$$v]));
                              } else {
                                $$i > -1 && (_vm.model = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));
                              }
                            } else {
                              _vm.model = $$c;
                            }
                          },
                          _vm.handleChange
                        ],
                        focus: function($event) {
                          _vm.focus = true;
                        },
                        blur: function($event) {
                          _vm.focus = false;
                        }
                      }
                    })
                  ]
                ),
                _vm.$slots.default || _vm.label ? _c(
                  "span",
                  { staticClass: "el-checkbox__label" },
                  [
                    _vm._t("default"),
                    !_vm.$slots.default ? [_vm._v(_vm._s(_vm.label))] : _vm._e()
                  ],
                  2
                ) : _vm._e()
              ]
            );
          };
          var staticRenderFns = [];
          render6._withStripped = true;
          var emitter_ = __webpack_require__(4);
          var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
          var checkboxvue_type_script_lang_js_ = {
            name: "ElCheckbox",
            mixins: [emitter_default.a],
            inject: {
              elForm: {
                default: ""
              },
              elFormItem: {
                default: ""
              }
            },
            componentName: "ElCheckbox",
            data: function data() {
              return {
                selfModel: false,
                focus: false,
                isLimitExceeded: false
              };
            },
            computed: {
              model: {
                get: function get() {
                  return this.isGroup ? this.store : this.value !== void 0 ? this.value : this.selfModel;
                },
                set: function set2(val) {
                  if (this.isGroup) {
                    this.isLimitExceeded = false;
                    this._checkboxGroup.min !== void 0 && val.length < this._checkboxGroup.min && (this.isLimitExceeded = true);
                    this._checkboxGroup.max !== void 0 && val.length > this._checkboxGroup.max && (this.isLimitExceeded = true);
                    this.isLimitExceeded === false && this.dispatch("ElCheckboxGroup", "input", [val]);
                  } else {
                    this.$emit("input", val);
                    this.selfModel = val;
                  }
                }
              },
              isChecked: function isChecked() {
                if ({}.toString.call(this.model) === "[object Boolean]") {
                  return this.model;
                } else if (Array.isArray(this.model)) {
                  return this.model.indexOf(this.label) > -1;
                } else if (this.model !== null && this.model !== void 0) {
                  return this.model === this.trueLabel;
                }
              },
              isGroup: function isGroup() {
                var parent = this.$parent;
                while (parent) {
                  if (parent.$options.componentName !== "ElCheckboxGroup") {
                    parent = parent.$parent;
                  } else {
                    this._checkboxGroup = parent;
                    return true;
                  }
                }
                return false;
              },
              store: function store2() {
                return this._checkboxGroup ? this._checkboxGroup.value : this.value;
              },
              /* used to make the isDisabled judgment under max/min props */
              isLimitDisabled: function isLimitDisabled() {
                var _checkboxGroup = this._checkboxGroup, max2 = _checkboxGroup.max, min2 = _checkboxGroup.min;
                return !!(max2 || min2) && this.model.length >= max2 && !this.isChecked || this.model.length <= min2 && this.isChecked;
              },
              isDisabled: function isDisabled() {
                return this.isGroup ? this._checkboxGroup.disabled || this.disabled || (this.elForm || {}).disabled || this.isLimitDisabled : this.disabled || (this.elForm || {}).disabled;
              },
              _elFormItemSize: function _elFormItemSize() {
                return (this.elFormItem || {}).elFormItemSize;
              },
              checkboxSize: function checkboxSize() {
                var temCheckboxSize = this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
                return this.isGroup ? this._checkboxGroup.checkboxGroupSize || temCheckboxSize : temCheckboxSize;
              }
            },
            props: {
              value: {},
              label: {},
              indeterminate: Boolean,
              disabled: Boolean,
              checked: Boolean,
              name: String,
              trueLabel: [String, Number],
              falseLabel: [String, Number],
              id: String,
              /* 当indeterminate为真时，为controls提供相关连的checkbox的id，表明元素间的控制关系*/
              controls: String,
              /* 当indeterminate为真时，为controls提供相关连的checkbox的id，表明元素间的控制关系*/
              border: Boolean,
              size: String
            },
            methods: {
              addToStore: function addToStore() {
                if (Array.isArray(this.model) && this.model.indexOf(this.label) === -1) {
                  this.model.push(this.label);
                } else {
                  this.model = this.trueLabel || true;
                }
              },
              handleChange: function handleChange(ev) {
                var _this = this;
                if (this.isLimitExceeded)
                  return;
                var value = void 0;
                if (ev.target.checked) {
                  value = this.trueLabel === void 0 ? true : this.trueLabel;
                } else {
                  value = this.falseLabel === void 0 ? false : this.falseLabel;
                }
                this.$emit("change", value, ev);
                this.$nextTick(function() {
                  if (_this.isGroup) {
                    _this.dispatch("ElCheckboxGroup", "change", [_this._checkboxGroup.value]);
                  }
                });
              }
            },
            created: function created() {
              this.checked && this.addToStore();
            },
            mounted: function mounted2() {
              if (this.indeterminate) {
                this.$el.setAttribute("aria-controls", this.controls);
              }
            },
            watch: {
              value: function value(_value) {
                this.dispatch("ElFormItem", "el.form.change", _value);
              }
            }
          };
          var src_checkboxvue_type_script_lang_js_ = checkboxvue_type_script_lang_js_;
          var componentNormalizer = __webpack_require__(0);
          var component = Object(componentNormalizer[
            "a"
            /* default */
          ])(
            src_checkboxvue_type_script_lang_js_,
            render6,
            staticRenderFns,
            false,
            null,
            null,
            null
          );
          component.options.__file = "packages/checkbox/src/checkbox.vue";
          var src_checkbox = component.exports;
          src_checkbox.install = function(Vue2) {
            Vue2.component(src_checkbox.name, src_checkbox);
          };
          __webpack_exports__["default"] = src_checkbox;
        }
      )
      /******/
    });
  })(checkbox);
  return checkbox.exports;
}
var resizeEvent = {};
var MapShim = function() {
  if (typeof Map !== "undefined") {
    return Map;
  }
  function getIndex(arr, key) {
    var result = -1;
    arr.some(function(entry, index2) {
      if (entry[0] === key) {
        result = index2;
        return true;
      }
      return false;
    });
    return result;
  }
  return (
    /** @class */
    function() {
      function class_1() {
        this.__entries__ = [];
      }
      Object.defineProperty(class_1.prototype, "size", {
        /**
         * @returns {boolean}
         */
        get: function() {
          return this.__entries__.length;
        },
        enumerable: true,
        configurable: true
      });
      class_1.prototype.get = function(key) {
        var index2 = getIndex(this.__entries__, key);
        var entry = this.__entries__[index2];
        return entry && entry[1];
      };
      class_1.prototype.set = function(key, value) {
        var index2 = getIndex(this.__entries__, key);
        if (~index2) {
          this.__entries__[index2][1] = value;
        } else {
          this.__entries__.push([key, value]);
        }
      };
      class_1.prototype.delete = function(key) {
        var entries = this.__entries__;
        var index2 = getIndex(entries, key);
        if (~index2) {
          entries.splice(index2, 1);
        }
      };
      class_1.prototype.has = function(key) {
        return !!~getIndex(this.__entries__, key);
      };
      class_1.prototype.clear = function() {
        this.__entries__.splice(0);
      };
      class_1.prototype.forEach = function(callback, ctx2) {
        if (ctx2 === void 0) {
          ctx2 = null;
        }
        for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
          var entry = _a[_i];
          callback.call(ctx2, entry[1], entry[0]);
        }
      };
      return class_1;
    }()
  );
}();
var isBrowser = typeof window !== "undefined" && typeof document !== "undefined" && window.document === document;
var global$1$1 = function() {
  if (typeof global !== "undefined" && global.Math === Math) {
    return global;
  }
  if (typeof self !== "undefined" && self.Math === Math) {
    return self;
  }
  if (typeof window !== "undefined" && window.Math === Math) {
    return window;
  }
  return Function("return this")();
}();
var requestAnimationFrame$1 = function() {
  if (typeof requestAnimationFrame === "function") {
    return requestAnimationFrame.bind(global$1$1);
  }
  return function(callback) {
    return setTimeout(function() {
      return callback(Date.now());
    }, 1e3 / 60);
  };
}();
var trailingTimeout = 2;
function throttle$2(callback, delay) {
  var leadingCall = false, trailingCall = false, lastCallTime = 0;
  function resolvePending() {
    if (leadingCall) {
      leadingCall = false;
      callback();
    }
    if (trailingCall) {
      proxy2();
    }
  }
  function timeoutCallback() {
    requestAnimationFrame$1(resolvePending);
  }
  function proxy2() {
    var timeStamp = Date.now();
    if (leadingCall) {
      if (timeStamp - lastCallTime < trailingTimeout) {
        return;
      }
      trailingCall = true;
    } else {
      leadingCall = true;
      trailingCall = false;
      setTimeout(timeoutCallback, delay);
    }
    lastCallTime = timeStamp;
  }
  return proxy2;
}
var REFRESH_DELAY = 20;
var transitionKeys = ["top", "right", "bottom", "left", "width", "height", "size", "weight"];
var mutationObserverSupported = typeof MutationObserver !== "undefined";
var ResizeObserverController = (
  /** @class */
  function() {
    function ResizeObserverController2() {
      this.connected_ = false;
      this.mutationEventsAdded_ = false;
      this.mutationsObserver_ = null;
      this.observers_ = [];
      this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
      this.refresh = throttle$2(this.refresh.bind(this), REFRESH_DELAY);
    }
    ResizeObserverController2.prototype.addObserver = function(observer) {
      if (!~this.observers_.indexOf(observer)) {
        this.observers_.push(observer);
      }
      if (!this.connected_) {
        this.connect_();
      }
    };
    ResizeObserverController2.prototype.removeObserver = function(observer) {
      var observers2 = this.observers_;
      var index2 = observers2.indexOf(observer);
      if (~index2) {
        observers2.splice(index2, 1);
      }
      if (!observers2.length && this.connected_) {
        this.disconnect_();
      }
    };
    ResizeObserverController2.prototype.refresh = function() {
      var changesDetected = this.updateObservers_();
      if (changesDetected) {
        this.refresh();
      }
    };
    ResizeObserverController2.prototype.updateObservers_ = function() {
      var activeObservers = this.observers_.filter(function(observer) {
        return observer.gatherActive(), observer.hasActive();
      });
      activeObservers.forEach(function(observer) {
        return observer.broadcastActive();
      });
      return activeObservers.length > 0;
    };
    ResizeObserverController2.prototype.connect_ = function() {
      if (!isBrowser || this.connected_) {
        return;
      }
      document.addEventListener("transitionend", this.onTransitionEnd_);
      window.addEventListener("resize", this.refresh);
      if (mutationObserverSupported) {
        this.mutationsObserver_ = new MutationObserver(this.refresh);
        this.mutationsObserver_.observe(document, {
          attributes: true,
          childList: true,
          characterData: true,
          subtree: true
        });
      } else {
        document.addEventListener("DOMSubtreeModified", this.refresh);
        this.mutationEventsAdded_ = true;
      }
      this.connected_ = true;
    };
    ResizeObserverController2.prototype.disconnect_ = function() {
      if (!isBrowser || !this.connected_) {
        return;
      }
      document.removeEventListener("transitionend", this.onTransitionEnd_);
      window.removeEventListener("resize", this.refresh);
      if (this.mutationsObserver_) {
        this.mutationsObserver_.disconnect();
      }
      if (this.mutationEventsAdded_) {
        document.removeEventListener("DOMSubtreeModified", this.refresh);
      }
      this.mutationsObserver_ = null;
      this.mutationEventsAdded_ = false;
      this.connected_ = false;
    };
    ResizeObserverController2.prototype.onTransitionEnd_ = function(_a) {
      var _b = _a.propertyName, propertyName = _b === void 0 ? "" : _b;
      var isReflowProperty = transitionKeys.some(function(key) {
        return !!~propertyName.indexOf(key);
      });
      if (isReflowProperty) {
        this.refresh();
      }
    };
    ResizeObserverController2.getInstance = function() {
      if (!this.instance_) {
        this.instance_ = new ResizeObserverController2();
      }
      return this.instance_;
    };
    ResizeObserverController2.instance_ = null;
    return ResizeObserverController2;
  }()
);
var defineConfigurable = function(target2, props2) {
  for (var _i = 0, _a = Object.keys(props2); _i < _a.length; _i++) {
    var key = _a[_i];
    Object.defineProperty(target2, key, {
      value: props2[key],
      enumerable: false,
      writable: false,
      configurable: true
    });
  }
  return target2;
};
var getWindowOf = function(target2) {
  var ownerGlobal = target2 && target2.ownerDocument && target2.ownerDocument.defaultView;
  return ownerGlobal || global$1$1;
};
var emptyRect = createRectInit(0, 0, 0, 0);
function toFloat(value) {
  return parseFloat(value) || 0;
}
function getBordersSize(styles) {
  var positions = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    positions[_i - 1] = arguments[_i];
  }
  return positions.reduce(function(size, position) {
    var value = styles["border-" + position + "-width"];
    return size + toFloat(value);
  }, 0);
}
function getPaddings(styles) {
  var positions = ["top", "right", "bottom", "left"];
  var paddings = {};
  for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
    var position = positions_1[_i];
    var value = styles["padding-" + position];
    paddings[position] = toFloat(value);
  }
  return paddings;
}
function getSVGContentRect(target2) {
  var bbox = target2.getBBox();
  return createRectInit(0, 0, bbox.width, bbox.height);
}
function getHTMLElementContentRect(target2) {
  var clientWidth = target2.clientWidth, clientHeight = target2.clientHeight;
  if (!clientWidth && !clientHeight) {
    return emptyRect;
  }
  var styles = getWindowOf(target2).getComputedStyle(target2);
  var paddings = getPaddings(styles);
  var horizPad = paddings.left + paddings.right;
  var vertPad = paddings.top + paddings.bottom;
  var width = toFloat(styles.width), height = toFloat(styles.height);
  if (styles.boxSizing === "border-box") {
    if (Math.round(width + horizPad) !== clientWidth) {
      width -= getBordersSize(styles, "left", "right") + horizPad;
    }
    if (Math.round(height + vertPad) !== clientHeight) {
      height -= getBordersSize(styles, "top", "bottom") + vertPad;
    }
  }
  if (!isDocumentElement(target2)) {
    var vertScrollbar = Math.round(width + horizPad) - clientWidth;
    var horizScrollbar = Math.round(height + vertPad) - clientHeight;
    if (Math.abs(vertScrollbar) !== 1) {
      width -= vertScrollbar;
    }
    if (Math.abs(horizScrollbar) !== 1) {
      height -= horizScrollbar;
    }
  }
  return createRectInit(paddings.left, paddings.top, width, height);
}
var isSVGGraphicsElement = function() {
  if (typeof SVGGraphicsElement !== "undefined") {
    return function(target2) {
      return target2 instanceof getWindowOf(target2).SVGGraphicsElement;
    };
  }
  return function(target2) {
    return target2 instanceof getWindowOf(target2).SVGElement && typeof target2.getBBox === "function";
  };
}();
function isDocumentElement(target2) {
  return target2 === getWindowOf(target2).document.documentElement;
}
function getContentRect(target2) {
  if (!isBrowser) {
    return emptyRect;
  }
  if (isSVGGraphicsElement(target2)) {
    return getSVGContentRect(target2);
  }
  return getHTMLElementContentRect(target2);
}
function createReadOnlyRect(_a) {
  var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
  var Constr = typeof DOMRectReadOnly !== "undefined" ? DOMRectReadOnly : Object;
  var rect = Object.create(Constr.prototype);
  defineConfigurable(rect, {
    x,
    y,
    width,
    height,
    top: y,
    right: x + width,
    bottom: height + y,
    left: x
  });
  return rect;
}
function createRectInit(x, y, width, height) {
  return { x, y, width, height };
}
var ResizeObservation = (
  /** @class */
  function() {
    function ResizeObservation2(target2) {
      this.broadcastWidth = 0;
      this.broadcastHeight = 0;
      this.contentRect_ = createRectInit(0, 0, 0, 0);
      this.target = target2;
    }
    ResizeObservation2.prototype.isActive = function() {
      var rect = getContentRect(this.target);
      this.contentRect_ = rect;
      return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
    };
    ResizeObservation2.prototype.broadcastRect = function() {
      var rect = this.contentRect_;
      this.broadcastWidth = rect.width;
      this.broadcastHeight = rect.height;
      return rect;
    };
    return ResizeObservation2;
  }()
);
var ResizeObserverEntry = (
  /** @class */
  function() {
    function ResizeObserverEntry2(target2, rectInit) {
      var contentRect = createReadOnlyRect(rectInit);
      defineConfigurable(this, { target: target2, contentRect });
    }
    return ResizeObserverEntry2;
  }()
);
var ResizeObserverSPI = (
  /** @class */
  function() {
    function ResizeObserverSPI2(callback, controller, callbackCtx) {
      this.activeObservations_ = [];
      this.observations_ = new MapShim();
      if (typeof callback !== "function") {
        throw new TypeError("The callback provided as parameter 1 is not a function.");
      }
      this.callback_ = callback;
      this.controller_ = controller;
      this.callbackCtx_ = callbackCtx;
    }
    ResizeObserverSPI2.prototype.observe = function(target2) {
      if (!arguments.length) {
        throw new TypeError("1 argument required, but only 0 present.");
      }
      if (typeof Element === "undefined" || !(Element instanceof Object)) {
        return;
      }
      if (!(target2 instanceof getWindowOf(target2).Element)) {
        throw new TypeError('parameter 1 is not of type "Element".');
      }
      var observations = this.observations_;
      if (observations.has(target2)) {
        return;
      }
      observations.set(target2, new ResizeObservation(target2));
      this.controller_.addObserver(this);
      this.controller_.refresh();
    };
    ResizeObserverSPI2.prototype.unobserve = function(target2) {
      if (!arguments.length) {
        throw new TypeError("1 argument required, but only 0 present.");
      }
      if (typeof Element === "undefined" || !(Element instanceof Object)) {
        return;
      }
      if (!(target2 instanceof getWindowOf(target2).Element)) {
        throw new TypeError('parameter 1 is not of type "Element".');
      }
      var observations = this.observations_;
      if (!observations.has(target2)) {
        return;
      }
      observations.delete(target2);
      if (!observations.size) {
        this.controller_.removeObserver(this);
      }
    };
    ResizeObserverSPI2.prototype.disconnect = function() {
      this.clearActive();
      this.observations_.clear();
      this.controller_.removeObserver(this);
    };
    ResizeObserverSPI2.prototype.gatherActive = function() {
      var _this = this;
      this.clearActive();
      this.observations_.forEach(function(observation) {
        if (observation.isActive()) {
          _this.activeObservations_.push(observation);
        }
      });
    };
    ResizeObserverSPI2.prototype.broadcastActive = function() {
      if (!this.hasActive()) {
        return;
      }
      var ctx2 = this.callbackCtx_;
      var entries = this.activeObservations_.map(function(observation) {
        return new ResizeObserverEntry(observation.target, observation.broadcastRect());
      });
      this.callback_.call(ctx2, entries, ctx2);
      this.clearActive();
    };
    ResizeObserverSPI2.prototype.clearActive = function() {
      this.activeObservations_.splice(0);
    };
    ResizeObserverSPI2.prototype.hasActive = function() {
      return this.activeObservations_.length > 0;
    };
    return ResizeObserverSPI2;
  }()
);
var observers = typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : new MapShim();
var ResizeObserver$2 = (
  /** @class */
  function() {
    function ResizeObserver2(callback) {
      if (!(this instanceof ResizeObserver2)) {
        throw new TypeError("Cannot call a class as a function.");
      }
      if (!arguments.length) {
        throw new TypeError("1 argument required, but only 0 present.");
      }
      var controller = ResizeObserverController.getInstance();
      var observer = new ResizeObserverSPI(callback, controller, this);
      observers.set(this, observer);
    }
    return ResizeObserver2;
  }()
);
[
  "observe",
  "unobserve",
  "disconnect"
].forEach(function(method3) {
  ResizeObserver$2.prototype[method3] = function() {
    var _a;
    return (_a = observers.get(this))[method3].apply(_a, arguments);
  };
});
var index$1 = function() {
  if (typeof global$1$1.ResizeObserver !== "undefined") {
    return global$1$1.ResizeObserver;
  }
  return ResizeObserver$2;
}();
const ResizeObserver_es = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: index$1
}, Symbol.toStringTag, { value: "Module" }));
const require$$0$d = /* @__PURE__ */ getAugmentedNamespace(ResizeObserver_es);
var throttle$1;
var hasRequiredThrottle;
function requireThrottle() {
  if (hasRequiredThrottle)
    return throttle$1;
  hasRequiredThrottle = 1;
  throttle$1 = function(delay, noTrailing, callback, debounceMode) {
    var timeoutID;
    var lastExec = 0;
    if (typeof noTrailing !== "boolean") {
      debounceMode = callback;
      callback = noTrailing;
      noTrailing = void 0;
    }
    function wrapper() {
      var self2 = this;
      var elapsed = Number(/* @__PURE__ */ new Date()) - lastExec;
      var args = arguments;
      function exec() {
        lastExec = Number(/* @__PURE__ */ new Date());
        callback.apply(self2, args);
      }
      function clear() {
        timeoutID = void 0;
      }
      if (debounceMode && !timeoutID) {
        exec();
      }
      if (timeoutID) {
        clearTimeout(timeoutID);
      }
      if (debounceMode === void 0 && elapsed > delay) {
        exec();
      } else if (noTrailing !== true) {
        timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === void 0 ? delay - elapsed : delay);
      }
    }
    return wrapper;
  };
  return throttle$1;
}
var debounce$2;
var hasRequiredDebounce;
function requireDebounce() {
  if (hasRequiredDebounce)
    return debounce$2;
  hasRequiredDebounce = 1;
  var throttle2 = requireThrottle();
  debounce$2 = function(delay, atBegin, callback) {
    return callback === void 0 ? throttle2(delay, atBegin, false) : throttle2(delay, callback, atBegin !== false);
  };
  return debounce$2;
}
var throttleDebounce;
var hasRequiredThrottleDebounce;
function requireThrottleDebounce() {
  if (hasRequiredThrottleDebounce)
    return throttleDebounce;
  hasRequiredThrottleDebounce = 1;
  var throttle2 = requireThrottle();
  var debounce2 = requireDebounce();
  throttleDebounce = {
    throttle: throttle2,
    debounce: debounce2
  };
  return throttleDebounce;
}
var hasRequiredResizeEvent;
function requireResizeEvent() {
  if (hasRequiredResizeEvent)
    return resizeEvent;
  hasRequiredResizeEvent = 1;
  resizeEvent.__esModule = true;
  resizeEvent.removeResizeListener = resizeEvent.addResizeListener = void 0;
  var _resizeObserverPolyfill = require$$0$d;
  var _resizeObserverPolyfill2 = _interopRequireDefault2(_resizeObserverPolyfill);
  var _throttleDebounce = requireThrottleDebounce();
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var isServer = typeof window === "undefined";
  var resizeHandler = function resizeHandler2(entries) {
    for (var _iterator3 = entries, _isArray2 = Array.isArray(_iterator3), _i = 0, _iterator3 = _isArray2 ? _iterator3 : _iterator3[Symbol.iterator](); ; ) {
      var _ref;
      if (_isArray2) {
        if (_i >= _iterator3.length)
          break;
        _ref = _iterator3[_i++];
      } else {
        _i = _iterator3.next();
        if (_i.done)
          break;
        _ref = _i.value;
      }
      var entry = _ref;
      var listeners = entry.target.__resizeListeners__ || [];
      if (listeners.length) {
        listeners.forEach(function(fn) {
          fn();
        });
      }
    }
  };
  resizeEvent.addResizeListener = function addResizeListener(element, fn) {
    if (isServer)
      return;
    if (!element.__resizeListeners__) {
      element.__resizeListeners__ = [];
      element.__ro__ = new _resizeObserverPolyfill2.default((0, _throttleDebounce.debounce)(16, resizeHandler));
      element.__ro__.observe(element);
    }
    element.__resizeListeners__.push(fn);
  };
  resizeEvent.removeResizeListener = function removeResizeListener(element, fn) {
    if (!element || !element.__resizeListeners__)
      return;
    element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);
    if (!element.__resizeListeners__.length) {
      element.__ro__.disconnect();
    }
  };
  return resizeEvent;
}
var scrollbar = { exports: {} };
var hasRequiredScrollbar;
function requireScrollbar() {
  if (hasRequiredScrollbar)
    return scrollbar.exports;
  hasRequiredScrollbar = 1;
  (function(module) {
    module.exports = /******/
    function(modules2) {
      var installedModules = {};
      function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
          return installedModules[moduleId].exports;
        }
        var module2 = installedModules[moduleId] = {
          /******/
          i: moduleId,
          /******/
          l: false,
          /******/
          exports: {}
          /******/
        };
        modules2[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
        module2.l = true;
        return module2.exports;
      }
      __webpack_require__.m = modules2;
      __webpack_require__.c = installedModules;
      __webpack_require__.d = function(exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
          Object.defineProperty(exports, name, { enumerable: true, get: getter });
        }
      };
      __webpack_require__.r = function(exports) {
        if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
          Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
        }
        Object.defineProperty(exports, "__esModule", { value: true });
      };
      __webpack_require__.t = function(value, mode) {
        if (mode & 1)
          value = __webpack_require__(value);
        if (mode & 8)
          return value;
        if (mode & 4 && typeof value === "object" && value && value.__esModule)
          return value;
        var ns = /* @__PURE__ */ Object.create(null);
        __webpack_require__.r(ns);
        Object.defineProperty(ns, "default", { enumerable: true, value });
        if (mode & 2 && typeof value != "string")
          for (var key in value)
            __webpack_require__.d(ns, key, (function(key2) {
              return value[key2];
            }).bind(null, key));
        return ns;
      };
      __webpack_require__.n = function(module2) {
        var getter = module2 && module2.__esModule ? (
          /******/
          function getDefault() {
            return module2["default"];
          }
        ) : (
          /******/
          function getModuleExports() {
            return module2;
          }
        );
        __webpack_require__.d(getter, "a", getter);
        return getter;
      };
      __webpack_require__.o = function(object3, property) {
        return Object.prototype.hasOwnProperty.call(object3, property);
      };
      __webpack_require__.p = "/dist/";
      return __webpack_require__(__webpack_require__.s = 133);
    }({
      /***/
      133: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.r(__webpack_exports__);
          var resize_event_ = __webpack_require__(16);
          var scrollbar_width_ = __webpack_require__(39);
          var scrollbar_width_default = /* @__PURE__ */ __webpack_require__.n(scrollbar_width_);
          var util_ = __webpack_require__(3);
          var dom_ = __webpack_require__(2);
          var BAR_MAP = {
            vertical: {
              offset: "offsetHeight",
              scroll: "scrollTop",
              scrollSize: "scrollHeight",
              size: "height",
              key: "vertical",
              axis: "Y",
              client: "clientY",
              direction: "top"
            },
            horizontal: {
              offset: "offsetWidth",
              scroll: "scrollLeft",
              scrollSize: "scrollWidth",
              size: "width",
              key: "horizontal",
              axis: "X",
              client: "clientX",
              direction: "left"
            }
          };
          function renderThumbStyle(_ref) {
            var move = _ref.move, size = _ref.size, bar = _ref.bar;
            var style2 = {};
            var translate = "translate" + bar.axis + "(" + move + "%)";
            style2[bar.size] = size;
            style2.transform = translate;
            style2.msTransform = translate;
            style2.webkitTransform = translate;
            return style2;
          }
          var src_bar = {
            name: "Bar",
            props: {
              vertical: Boolean,
              size: String,
              move: Number
            },
            computed: {
              bar: function bar() {
                return BAR_MAP[this.vertical ? "vertical" : "horizontal"];
              },
              wrap: function wrap2() {
                return this.$parent.wrap;
              }
            },
            render: function render6(h2) {
              var size = this.size, move = this.move, bar = this.bar;
              return h2(
                "div",
                {
                  "class": ["el-scrollbar__bar", "is-" + bar.key],
                  on: {
                    "mousedown": this.clickTrackHandler
                  }
                },
                [h2("div", {
                  ref: "thumb",
                  "class": "el-scrollbar__thumb",
                  on: {
                    "mousedown": this.clickThumbHandler
                  },
                  style: renderThumbStyle({ size, move, bar })
                })]
              );
            },
            methods: {
              clickThumbHandler: function clickThumbHandler(e) {
                if (e.ctrlKey || e.button === 2) {
                  return;
                }
                this.startDrag(e);
                this[this.bar.axis] = e.currentTarget[this.bar.offset] - (e[this.bar.client] - e.currentTarget.getBoundingClientRect()[this.bar.direction]);
              },
              clickTrackHandler: function clickTrackHandler(e) {
                var offset = Math.abs(e.target.getBoundingClientRect()[this.bar.direction] - e[this.bar.client]);
                var thumbHalf = this.$refs.thumb[this.bar.offset] / 2;
                var thumbPositionPercentage = (offset - thumbHalf) * 100 / this.$el[this.bar.offset];
                this.wrap[this.bar.scroll] = thumbPositionPercentage * this.wrap[this.bar.scrollSize] / 100;
              },
              startDrag: function startDrag(e) {
                e.stopImmediatePropagation();
                this.cursorDown = true;
                Object(dom_["on"])(document, "mousemove", this.mouseMoveDocumentHandler);
                Object(dom_["on"])(document, "mouseup", this.mouseUpDocumentHandler);
                document.onselectstart = function() {
                  return false;
                };
              },
              mouseMoveDocumentHandler: function mouseMoveDocumentHandler(e) {
                if (this.cursorDown === false)
                  return;
                var prevPage = this[this.bar.axis];
                if (!prevPage)
                  return;
                var offset = (this.$el.getBoundingClientRect()[this.bar.direction] - e[this.bar.client]) * -1;
                var thumbClickPosition = this.$refs.thumb[this.bar.offset] - prevPage;
                var thumbPositionPercentage = (offset - thumbClickPosition) * 100 / this.$el[this.bar.offset];
                this.wrap[this.bar.scroll] = thumbPositionPercentage * this.wrap[this.bar.scrollSize] / 100;
              },
              mouseUpDocumentHandler: function mouseUpDocumentHandler(e) {
                this.cursorDown = false;
                this[this.bar.axis] = 0;
                Object(dom_["off"])(document, "mousemove", this.mouseMoveDocumentHandler);
                document.onselectstart = null;
              }
            },
            destroyed: function destroyed() {
              Object(dom_["off"])(document, "mouseup", this.mouseUpDocumentHandler);
            }
          };
          var main = {
            name: "ElScrollbar",
            components: { Bar: src_bar },
            props: {
              native: Boolean,
              wrapStyle: {},
              wrapClass: {},
              viewClass: {},
              viewStyle: {},
              noresize: Boolean,
              // 如果 container 尺寸不会发生变化，最好设置它可以优化性能
              tag: {
                type: String,
                default: "div"
              }
            },
            data: function data() {
              return {
                sizeWidth: "0",
                sizeHeight: "0",
                moveX: 0,
                moveY: 0
              };
            },
            computed: {
              wrap: function wrap2() {
                return this.$refs.wrap;
              }
            },
            render: function render6(h2) {
              var gutter = scrollbar_width_default()();
              var style2 = this.wrapStyle;
              if (gutter) {
                var gutterWith = "-" + gutter + "px";
                var gutterStyle = "margin-bottom: " + gutterWith + "; margin-right: " + gutterWith + ";";
                if (Array.isArray(this.wrapStyle)) {
                  style2 = Object(util_["toObject"])(this.wrapStyle);
                  style2.marginRight = style2.marginBottom = gutterWith;
                } else if (typeof this.wrapStyle === "string") {
                  style2 += gutterStyle;
                } else {
                  style2 = gutterStyle;
                }
              }
              var view = h2(this.tag, {
                class: ["el-scrollbar__view", this.viewClass],
                style: this.viewStyle,
                ref: "resize"
              }, this.$slots.default);
              var wrap2 = h2(
                "div",
                {
                  ref: "wrap",
                  style: style2,
                  on: {
                    "scroll": this.handleScroll
                  },
                  "class": [this.wrapClass, "el-scrollbar__wrap", gutter ? "" : "el-scrollbar__wrap--hidden-default"]
                },
                [[view]]
              );
              var nodes = void 0;
              if (!this.native) {
                nodes = [wrap2, h2(src_bar, {
                  attrs: {
                    move: this.moveX,
                    size: this.sizeWidth
                  }
                }), h2(src_bar, {
                  attrs: {
                    vertical: true,
                    move: this.moveY,
                    size: this.sizeHeight
                  }
                })];
              } else {
                nodes = [h2(
                  "div",
                  {
                    ref: "wrap",
                    "class": [this.wrapClass, "el-scrollbar__wrap"],
                    style: style2
                  },
                  [[view]]
                )];
              }
              return h2("div", { class: "el-scrollbar" }, nodes);
            },
            methods: {
              handleScroll: function handleScroll() {
                var wrap2 = this.wrap;
                this.moveY = wrap2.scrollTop * 100 / wrap2.clientHeight;
                this.moveX = wrap2.scrollLeft * 100 / wrap2.clientWidth;
              },
              update: function update2() {
                var heightPercentage = void 0, widthPercentage = void 0;
                var wrap2 = this.wrap;
                if (!wrap2)
                  return;
                heightPercentage = wrap2.clientHeight * 100 / wrap2.scrollHeight;
                widthPercentage = wrap2.clientWidth * 100 / wrap2.scrollWidth;
                this.sizeHeight = heightPercentage < 100 ? heightPercentage + "%" : "";
                this.sizeWidth = widthPercentage < 100 ? widthPercentage + "%" : "";
              }
            },
            mounted: function mounted2() {
              if (this.native)
                return;
              this.$nextTick(this.update);
              !this.noresize && Object(resize_event_["addResizeListener"])(this.$refs.resize, this.update);
            },
            beforeDestroy: function beforeDestroy2() {
              if (this.native)
                return;
              !this.noresize && Object(resize_event_["removeResizeListener"])(this.$refs.resize, this.update);
            }
          };
          main.install = function(Vue2) {
            Vue2.component(main.name, main);
          };
          __webpack_exports__["default"] = main;
        }
      ),
      /***/
      16: (
        /***/
        function(module2, exports) {
          module2.exports = requireResizeEvent();
        }
      ),
      /***/
      2: (
        /***/
        function(module2, exports) {
          module2.exports = requireDom();
        }
      ),
      /***/
      3: (
        /***/
        function(module2, exports) {
          module2.exports = requireUtil();
        }
      ),
      /***/
      39: (
        /***/
        function(module2, exports) {
          module2.exports = requireScrollbarWidth();
        }
      )
      /******/
    });
  })(scrollbar);
  return scrollbar.exports;
}
var collapseTransition = {};
var hasRequiredCollapseTransition;
function requireCollapseTransition() {
  if (hasRequiredCollapseTransition)
    return collapseTransition;
  hasRequiredCollapseTransition = 1;
  collapseTransition.__esModule = true;
  var _dom = requireDom();
  function _classCallCheck2(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var Transition2 = function() {
    function Transition3() {
      _classCallCheck2(this, Transition3);
    }
    Transition3.prototype.beforeEnter = function beforeEnter(el) {
      (0, _dom.addClass)(el, "collapse-transition");
      if (!el.dataset)
        el.dataset = {};
      el.dataset.oldPaddingTop = el.style.paddingTop;
      el.dataset.oldPaddingBottom = el.style.paddingBottom;
      el.style.height = "0";
      el.style.paddingTop = 0;
      el.style.paddingBottom = 0;
    };
    Transition3.prototype.enter = function enter2(el) {
      el.dataset.oldOverflow = el.style.overflow;
      if (el.scrollHeight !== 0) {
        el.style.height = el.scrollHeight + "px";
        el.style.paddingTop = el.dataset.oldPaddingTop;
        el.style.paddingBottom = el.dataset.oldPaddingBottom;
      } else {
        el.style.height = "";
        el.style.paddingTop = el.dataset.oldPaddingTop;
        el.style.paddingBottom = el.dataset.oldPaddingBottom;
      }
      el.style.overflow = "hidden";
    };
    Transition3.prototype.afterEnter = function afterEnter(el) {
      (0, _dom.removeClass)(el, "collapse-transition");
      el.style.height = "";
      el.style.overflow = el.dataset.oldOverflow;
    };
    Transition3.prototype.beforeLeave = function beforeLeave(el) {
      if (!el.dataset)
        el.dataset = {};
      el.dataset.oldPaddingTop = el.style.paddingTop;
      el.dataset.oldPaddingBottom = el.style.paddingBottom;
      el.dataset.oldOverflow = el.style.overflow;
      el.style.height = el.scrollHeight + "px";
      el.style.overflow = "hidden";
    };
    Transition3.prototype.leave = function leave2(el) {
      if (el.scrollHeight !== 0) {
        (0, _dom.addClass)(el, "collapse-transition");
        el.style.height = 0;
        el.style.paddingTop = 0;
        el.style.paddingBottom = 0;
      }
    };
    Transition3.prototype.afterLeave = function afterLeave2(el) {
      (0, _dom.removeClass)(el, "collapse-transition");
      el.style.height = "";
      el.style.overflow = el.dataset.oldOverflow;
      el.style.paddingTop = el.dataset.oldPaddingTop;
      el.style.paddingBottom = el.dataset.oldPaddingBottom;
    };
    return Transition3;
  }();
  collapseTransition.default = {
    name: "ElCollapseTransition",
    functional: true,
    render: function render6(h2, _ref) {
      var children = _ref.children;
      var data = {
        on: new Transition2()
      };
      return h2("transition", data, children);
    }
  };
  return collapseTransition;
}
var vdom = {};
var hasRequiredVdom;
function requireVdom() {
  if (hasRequiredVdom)
    return vdom;
  hasRequiredVdom = 1;
  vdom.__esModule = true;
  var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
  } : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };
  vdom.isVNode = isVNode;
  var _util = requireUtil();
  function isVNode(node) {
    return node !== null && (typeof node === "undefined" ? "undefined" : _typeof2(node)) === "object" && (0, _util.hasOwn)(node, "componentOptions");
  }
  return vdom;
}
var focus = {};
var hasRequiredFocus;
function requireFocus() {
  if (hasRequiredFocus)
    return focus;
  hasRequiredFocus = 1;
  focus.__esModule = true;
  focus.default = function(ref2) {
    return {
      methods: {
        focus: function focus2() {
          this.$refs[ref2].focus();
        }
      }
    };
  };
  return focus;
}
var babelHelperVueJsxMergeProps;
var hasRequiredBabelHelperVueJsxMergeProps;
function requireBabelHelperVueJsxMergeProps() {
  if (hasRequiredBabelHelperVueJsxMergeProps)
    return babelHelperVueJsxMergeProps;
  hasRequiredBabelHelperVueJsxMergeProps = 1;
  var nestRE = /^(attrs|props|on|nativeOn|class|style|hook)$/;
  babelHelperVueJsxMergeProps = function mergeJSXProps(objs) {
    return objs.reduce(function(a, b) {
      var aa, bb, key, nestedKey, temp;
      for (key in b) {
        aa = a[key];
        bb = b[key];
        if (aa && nestRE.test(key)) {
          if (key === "class") {
            if (typeof aa === "string") {
              temp = aa;
              a[key] = aa = {};
              aa[temp] = true;
            }
            if (typeof bb === "string") {
              temp = bb;
              b[key] = bb = {};
              bb[temp] = true;
            }
          }
          if (key === "on" || key === "nativeOn" || key === "hook") {
            for (nestedKey in bb) {
              aa[nestedKey] = mergeFn(aa[nestedKey], bb[nestedKey]);
            }
          } else if (Array.isArray(aa)) {
            a[key] = aa.concat(bb);
          } else if (Array.isArray(bb)) {
            a[key] = [aa].concat(bb);
          } else {
            for (nestedKey in bb) {
              aa[nestedKey] = bb[nestedKey];
            }
          }
        } else {
          a[key] = b[key];
        }
      }
      return a;
    }, {});
  };
  function mergeFn(a, b) {
    return function() {
      a && a.apply(this, arguments);
      b && b.apply(this, arguments);
    };
  }
  return babelHelperVueJsxMergeProps;
}
var tooltip = { exports: {} };
var hasRequiredTooltip;
function requireTooltip() {
  if (hasRequiredTooltip)
    return tooltip.exports;
  hasRequiredTooltip = 1;
  (function(module) {
    module.exports = /******/
    function(modules2) {
      var installedModules = {};
      function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
          return installedModules[moduleId].exports;
        }
        var module2 = installedModules[moduleId] = {
          /******/
          i: moduleId,
          /******/
          l: false,
          /******/
          exports: {}
          /******/
        };
        modules2[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
        module2.l = true;
        return module2.exports;
      }
      __webpack_require__.m = modules2;
      __webpack_require__.c = installedModules;
      __webpack_require__.d = function(exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
          Object.defineProperty(exports, name, { enumerable: true, get: getter });
        }
      };
      __webpack_require__.r = function(exports) {
        if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
          Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
        }
        Object.defineProperty(exports, "__esModule", { value: true });
      };
      __webpack_require__.t = function(value, mode) {
        if (mode & 1)
          value = __webpack_require__(value);
        if (mode & 8)
          return value;
        if (mode & 4 && typeof value === "object" && value && value.__esModule)
          return value;
        var ns = /* @__PURE__ */ Object.create(null);
        __webpack_require__.r(ns);
        Object.defineProperty(ns, "default", { enumerable: true, value });
        if (mode & 2 && typeof value != "string")
          for (var key in value)
            __webpack_require__.d(ns, key, (function(key2) {
              return value[key2];
            }).bind(null, key));
        return ns;
      };
      __webpack_require__.n = function(module2) {
        var getter = module2 && module2.__esModule ? (
          /******/
          function getDefault() {
            return module2["default"];
          }
        ) : (
          /******/
          function getModuleExports() {
            return module2;
          }
        );
        __webpack_require__.d(getter, "a", getter);
        return getter;
      };
      __webpack_require__.o = function(object3, property) {
        return Object.prototype.hasOwnProperty.call(object3, property);
      };
      __webpack_require__.p = "/dist/";
      return __webpack_require__(__webpack_require__.s = 138);
    }({
      /***/
      138: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.r(__webpack_exports__);
          var vue_popper_ = __webpack_require__(5);
          var vue_popper_default = /* @__PURE__ */ __webpack_require__.n(vue_popper_);
          var debounce_ = __webpack_require__(19);
          var debounce_default = /* @__PURE__ */ __webpack_require__.n(debounce_);
          var dom_ = __webpack_require__(2);
          var util_ = __webpack_require__(3);
          var external_vue_ = __webpack_require__(7);
          var external_vue_default = /* @__PURE__ */ __webpack_require__.n(external_vue_);
          var main = {
            name: "ElTooltip",
            mixins: [vue_popper_default.a],
            props: {
              openDelay: {
                type: Number,
                default: 0
              },
              disabled: Boolean,
              manual: Boolean,
              effect: {
                type: String,
                default: "dark"
              },
              arrowOffset: {
                type: Number,
                default: 0
              },
              popperClass: String,
              content: String,
              visibleArrow: {
                default: true
              },
              transition: {
                type: String,
                default: "el-fade-in-linear"
              },
              popperOptions: {
                default: function _default2() {
                  return {
                    boundariesPadding: 10,
                    gpuAcceleration: false
                  };
                }
              },
              enterable: {
                type: Boolean,
                default: true
              },
              hideAfter: {
                type: Number,
                default: 0
              },
              tabindex: {
                type: Number,
                default: 0
              }
            },
            data: function data() {
              return {
                tooltipId: "el-tooltip-" + Object(util_["generateId"])(),
                timeoutPending: null,
                focusing: false
              };
            },
            beforeCreate: function beforeCreate() {
              var _this = this;
              if (this.$isServer)
                return;
              this.popperVM = new external_vue_default.a({
                data: { node: "" },
                render: function render6(h2) {
                  return this.node;
                }
              }).$mount();
              this.debounceClose = debounce_default()(200, function() {
                return _this.handleClosePopper();
              });
            },
            render: function render6(h2) {
              var _this2 = this;
              if (this.popperVM) {
                this.popperVM.node = h2(
                  "transition",
                  {
                    attrs: {
                      name: this.transition
                    },
                    on: {
                      "afterLeave": this.doDestroy
                    }
                  },
                  [h2(
                    "div",
                    {
                      on: {
                        "mouseleave": function mouseleave() {
                          _this2.setExpectedState(false);
                          _this2.debounceClose();
                        },
                        "mouseenter": function mouseenter() {
                          _this2.setExpectedState(true);
                        }
                      },
                      ref: "popper",
                      attrs: {
                        role: "tooltip",
                        id: this.tooltipId,
                        "aria-hidden": this.disabled || !this.showPopper ? "true" : "false"
                      },
                      directives: [{
                        name: "show",
                        value: !this.disabled && this.showPopper
                      }],
                      "class": ["el-tooltip__popper", "is-" + this.effect, this.popperClass]
                    },
                    [this.$slots.content || this.content]
                  )]
                );
              }
              var firstElement = this.getFirstElement();
              if (!firstElement)
                return null;
              var data = firstElement.data = firstElement.data || {};
              data.staticClass = this.addTooltipClass(data.staticClass);
              return firstElement;
            },
            mounted: function mounted2() {
              var _this3 = this;
              this.referenceElm = this.$el;
              if (this.$el.nodeType === 1) {
                this.$el.setAttribute("aria-describedby", this.tooltipId);
                this.$el.setAttribute("tabindex", this.tabindex);
                Object(dom_["on"])(this.referenceElm, "mouseenter", this.show);
                Object(dom_["on"])(this.referenceElm, "mouseleave", this.hide);
                Object(dom_["on"])(this.referenceElm, "focus", function() {
                  if (!_this3.$slots.default || !_this3.$slots.default.length) {
                    _this3.handleFocus();
                    return;
                  }
                  var instance = _this3.$slots.default[0].componentInstance;
                  if (instance && instance.focus) {
                    instance.focus();
                  } else {
                    _this3.handleFocus();
                  }
                });
                Object(dom_["on"])(this.referenceElm, "blur", this.handleBlur);
                Object(dom_["on"])(this.referenceElm, "click", this.removeFocusing);
              }
              if (this.value && this.popperVM) {
                this.popperVM.$nextTick(function() {
                  if (_this3.value) {
                    _this3.updatePopper();
                  }
                });
              }
            },
            watch: {
              focusing: function focusing(val) {
                if (val) {
                  Object(dom_["addClass"])(this.referenceElm, "focusing");
                } else {
                  Object(dom_["removeClass"])(this.referenceElm, "focusing");
                }
              }
            },
            methods: {
              show: function show2() {
                this.setExpectedState(true);
                this.handleShowPopper();
              },
              hide: function hide2() {
                this.setExpectedState(false);
                this.debounceClose();
              },
              handleFocus: function handleFocus() {
                this.focusing = true;
                this.show();
              },
              handleBlur: function handleBlur() {
                this.focusing = false;
                this.hide();
              },
              removeFocusing: function removeFocusing() {
                this.focusing = false;
              },
              addTooltipClass: function addTooltipClass(prev) {
                if (!prev) {
                  return "el-tooltip";
                } else {
                  return "el-tooltip " + prev.replace("el-tooltip", "");
                }
              },
              handleShowPopper: function handleShowPopper() {
                var _this4 = this;
                if (!this.expectedState || this.manual)
                  return;
                clearTimeout(this.timeout);
                this.timeout = setTimeout(function() {
                  _this4.showPopper = true;
                }, this.openDelay);
                if (this.hideAfter > 0) {
                  this.timeoutPending = setTimeout(function() {
                    _this4.showPopper = false;
                  }, this.hideAfter);
                }
              },
              handleClosePopper: function handleClosePopper() {
                if (this.enterable && this.expectedState || this.manual)
                  return;
                clearTimeout(this.timeout);
                if (this.timeoutPending) {
                  clearTimeout(this.timeoutPending);
                }
                this.showPopper = false;
                if (this.disabled) {
                  this.doDestroy();
                }
              },
              setExpectedState: function setExpectedState(expectedState) {
                if (expectedState === false) {
                  clearTimeout(this.timeoutPending);
                }
                this.expectedState = expectedState;
              },
              getFirstElement: function getFirstElement() {
                var slots = this.$slots.default;
                if (!Array.isArray(slots))
                  return null;
                var element = null;
                for (var index2 = 0; index2 < slots.length; index2++) {
                  if (slots[index2] && slots[index2].tag) {
                    element = slots[index2];
                    break;
                  }
                }
                return element;
              }
            },
            beforeDestroy: function beforeDestroy2() {
              this.popperVM && this.popperVM.$destroy();
            },
            destroyed: function destroyed() {
              var reference = this.referenceElm;
              if (reference.nodeType === 1) {
                Object(dom_["off"])(reference, "mouseenter", this.show);
                Object(dom_["off"])(reference, "mouseleave", this.hide);
                Object(dom_["off"])(reference, "focus", this.handleFocus);
                Object(dom_["off"])(reference, "blur", this.handleBlur);
                Object(dom_["off"])(reference, "click", this.removeFocusing);
              }
            }
          };
          main.install = function(Vue2) {
            Vue2.component(main.name, main);
          };
          __webpack_exports__["default"] = main;
        }
      ),
      /***/
      19: (
        /***/
        function(module2, exports) {
          module2.exports = requireDebounce();
        }
      ),
      /***/
      2: (
        /***/
        function(module2, exports) {
          module2.exports = requireDom();
        }
      ),
      /***/
      3: (
        /***/
        function(module2, exports) {
          module2.exports = requireUtil();
        }
      ),
      /***/
      5: (
        /***/
        function(module2, exports) {
          module2.exports = requireVuePopper();
        }
      ),
      /***/
      7: (
        /***/
        function(module2, exports) {
          module2.exports = require$$6$1;
        }
      )
      /******/
    });
  })(tooltip);
  return tooltip.exports;
}
var scrollIntoView = {};
var hasRequiredScrollIntoView;
function requireScrollIntoView() {
  if (hasRequiredScrollIntoView)
    return scrollIntoView;
  hasRequiredScrollIntoView = 1;
  scrollIntoView.__esModule = true;
  scrollIntoView.default = scrollIntoView$1;
  var _vue = require$$6$1;
  var _vue2 = _interopRequireDefault2(_vue);
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  function scrollIntoView$1(container, selected) {
    if (_vue2.default.prototype.$isServer)
      return;
    if (!selected) {
      container.scrollTop = 0;
      return;
    }
    var offsetParents = [];
    var pointer = selected.offsetParent;
    while (pointer && container !== pointer && container.contains(pointer)) {
      offsetParents.push(pointer);
      pointer = pointer.offsetParent;
    }
    var top = selected.offsetTop + offsetParents.reduce(function(prev, curr) {
      return prev + curr.offsetTop;
    }, 0);
    var bottom = top + selected.offsetHeight;
    var viewRectTop = container.scrollTop;
    var viewRectBottom = viewRectTop + container.clientHeight;
    if (top < viewRectTop) {
      container.scrollTop = top;
    } else if (bottom > viewRectBottom) {
      container.scrollTop = bottom - container.clientHeight;
    }
  }
  return scrollIntoView;
}
var lodash = { exports: {} };
lodash.exports;
var hasRequiredLodash;
function requireLodash() {
  if (hasRequiredLodash)
    return lodash.exports;
  hasRequiredLodash = 1;
  (function(module, exports) {
    var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
      return typeof obj;
    } : function(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    /**
    * @license
    * Lodash <https://lodash.com/>
    * Copyright JS Foundation and other contributors <https://js.foundation/>
    * Released under MIT license <https://lodash.com/license>
    * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
    * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
    */
    (function() {
      var undefined$1;
      var VERSION = "4.17.10";
      var LARGE_ARRAY_SIZE = 200;
      var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT2 = "Expected a function";
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var MAX_MEMOIZE_SIZE = 500;
      var PLACEHOLDER = "__lodash_placeholder__";
      var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
      var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
      var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
      var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
      var HOT_COUNT = 800, HOT_SPAN = 16;
      var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
      var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN2 = 0 / 0;
      var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
      var wrapFlags = [["ary", WRAP_ARY_FLAG], ["bind", WRAP_BIND_FLAG], ["bindKey", WRAP_BIND_KEY_FLAG], ["curry", WRAP_CURRY_FLAG], ["curryRight", WRAP_CURRY_RIGHT_FLAG], ["flip", WRAP_FLIP_FLAG], ["partial", WRAP_PARTIAL_FLAG], ["partialRight", WRAP_PARTIAL_RIGHT_FLAG], ["rearg", WRAP_REARG_FLAG]];
      var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag2 = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
      var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
      var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
      var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
      var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
      var reTrim2 = /^\s+|\s+$/g, reTrimStart = /^\s+/, reTrimEnd = /\s+$/;
      var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
      var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
      var reEscapeChar = /\\(\\)?/g;
      var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
      var reFlags = /\w*$/;
      var reIsBadHex2 = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary2 = /^0b[01]+$/i;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsOctal2 = /^0o[0-7]+$/i;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
      var reNoMatch = /($^)/;
      var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
      var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
      var rsApos = "['’]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
      var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
      var reApos = RegExp(rsApos, "g");
      var reComboMark = RegExp(rsCombo, "g");
      var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
      var reUnicodeWord = RegExp([rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")", rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")", rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower, rsUpper + "+" + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join("|"), "g");
      var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
      var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
      var contextProps = ["Array", "Buffer", "DataView", "Date", "Error", "Float32Array", "Float64Array", "Function", "Int8Array", "Int16Array", "Int32Array", "Map", "Math", "Object", "Promise", "RegExp", "Set", "String", "Symbol", "TypeError", "Uint8Array", "Uint8ClampedArray", "Uint16Array", "Uint32Array", "WeakMap", "_", "clearTimeout", "isFinite", "parseInt", "setTimeout"];
      var templateCounter = -1;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var cloneableTags = {};
      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag2] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
      var deburredLetters = {
        // Latin-1 Supplement block.
        À: "A",
        Á: "A",
        Â: "A",
        Ã: "A",
        Ä: "A",
        Å: "A",
        à: "a",
        á: "a",
        â: "a",
        ã: "a",
        ä: "a",
        å: "a",
        Ç: "C",
        ç: "c",
        Ð: "D",
        ð: "d",
        È: "E",
        É: "E",
        Ê: "E",
        Ë: "E",
        è: "e",
        é: "e",
        ê: "e",
        ë: "e",
        Ì: "I",
        Í: "I",
        Î: "I",
        Ï: "I",
        ì: "i",
        í: "i",
        î: "i",
        ï: "i",
        Ñ: "N",
        ñ: "n",
        Ò: "O",
        Ó: "O",
        Ô: "O",
        Õ: "O",
        Ö: "O",
        Ø: "O",
        ò: "o",
        ó: "o",
        ô: "o",
        õ: "o",
        ö: "o",
        ø: "o",
        Ù: "U",
        Ú: "U",
        Û: "U",
        Ü: "U",
        ù: "u",
        ú: "u",
        û: "u",
        ü: "u",
        Ý: "Y",
        ý: "y",
        ÿ: "y",
        Æ: "Ae",
        æ: "ae",
        Þ: "Th",
        þ: "th",
        ß: "ss",
        // Latin Extended-A block.
        Ā: "A",
        Ă: "A",
        Ą: "A",
        ā: "a",
        ă: "a",
        ą: "a",
        Ć: "C",
        Ĉ: "C",
        Ċ: "C",
        Č: "C",
        ć: "c",
        ĉ: "c",
        ċ: "c",
        č: "c",
        Ď: "D",
        Đ: "D",
        ď: "d",
        đ: "d",
        Ē: "E",
        Ĕ: "E",
        Ė: "E",
        Ę: "E",
        Ě: "E",
        ē: "e",
        ĕ: "e",
        ė: "e",
        ę: "e",
        ě: "e",
        Ĝ: "G",
        Ğ: "G",
        Ġ: "G",
        Ģ: "G",
        ĝ: "g",
        ğ: "g",
        ġ: "g",
        ģ: "g",
        Ĥ: "H",
        Ħ: "H",
        ĥ: "h",
        ħ: "h",
        Ĩ: "I",
        Ī: "I",
        Ĭ: "I",
        Į: "I",
        İ: "I",
        ĩ: "i",
        ī: "i",
        ĭ: "i",
        į: "i",
        ı: "i",
        Ĵ: "J",
        ĵ: "j",
        Ķ: "K",
        ķ: "k",
        ĸ: "k",
        Ĺ: "L",
        Ļ: "L",
        Ľ: "L",
        Ŀ: "L",
        Ł: "L",
        ĺ: "l",
        ļ: "l",
        ľ: "l",
        ŀ: "l",
        ł: "l",
        Ń: "N",
        Ņ: "N",
        Ň: "N",
        Ŋ: "N",
        ń: "n",
        ņ: "n",
        ň: "n",
        ŋ: "n",
        Ō: "O",
        Ŏ: "O",
        Ő: "O",
        ō: "o",
        ŏ: "o",
        ő: "o",
        Ŕ: "R",
        Ŗ: "R",
        Ř: "R",
        ŕ: "r",
        ŗ: "r",
        ř: "r",
        Ś: "S",
        Ŝ: "S",
        Ş: "S",
        Š: "S",
        ś: "s",
        ŝ: "s",
        ş: "s",
        š: "s",
        Ţ: "T",
        Ť: "T",
        Ŧ: "T",
        ţ: "t",
        ť: "t",
        ŧ: "t",
        Ũ: "U",
        Ū: "U",
        Ŭ: "U",
        Ů: "U",
        Ű: "U",
        Ų: "U",
        ũ: "u",
        ū: "u",
        ŭ: "u",
        ů: "u",
        ű: "u",
        ų: "u",
        Ŵ: "W",
        ŵ: "w",
        Ŷ: "Y",
        ŷ: "y",
        Ÿ: "Y",
        Ź: "Z",
        Ż: "Z",
        Ž: "Z",
        ź: "z",
        ż: "z",
        ž: "z",
        Ĳ: "IJ",
        ĳ: "ij",
        Œ: "Oe",
        œ: "oe",
        ŉ: "'n",
        ſ: "s"
      };
      var htmlEscapes = { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#39;" };
      var htmlUnescapes = { "&amp;": "&", "&lt;": "<", "&gt;": ">", "&quot;": '"', "&#39;": "'" };
      var stringEscapes = { "\\": "\\", "'": "'", "\n": "n", "\r": "r", "\u2028": "u2028", "\u2029": "u2029" };
      var freeParseFloat = parseFloat, freeParseInt2 = parseInt;
      var freeGlobal2 = (typeof commonjsGlobal === "undefined" ? "undefined" : _typeof2(commonjsGlobal)) === "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
      var freeSelf2 = (typeof self === "undefined" ? "undefined" : _typeof2(self)) === "object" && self && self.Object === Object && self;
      var root2 = freeGlobal2 || freeSelf2 || Function("return this")();
      var freeExports = _typeof2(exports) === "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && _typeof2(module) === "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal2.process;
      var nodeUtil = function() {
        try {
          var types2 = freeModule && freeModule.require && freeModule.require("util").types;
          if (types2) {
            return types2;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function arrayAggregator(array3, setter2, iteratee, accumulator) {
        var index2 = -1, length = array3 == null ? 0 : array3.length;
        while (++index2 < length) {
          var value = array3[index2];
          setter2(accumulator, value, iteratee(value), array3);
        }
        return accumulator;
      }
      function arrayEach(array3, iteratee) {
        var index2 = -1, length = array3 == null ? 0 : array3.length;
        while (++index2 < length) {
          if (iteratee(array3[index2], index2, array3) === false) {
            break;
          }
        }
        return array3;
      }
      function arrayEachRight(array3, iteratee) {
        var length = array3 == null ? 0 : array3.length;
        while (length--) {
          if (iteratee(array3[length], length, array3) === false) {
            break;
          }
        }
        return array3;
      }
      function arrayEvery(array3, predicate) {
        var index2 = -1, length = array3 == null ? 0 : array3.length;
        while (++index2 < length) {
          if (!predicate(array3[index2], index2, array3)) {
            return false;
          }
        }
        return true;
      }
      function arrayFilter(array3, predicate) {
        var index2 = -1, length = array3 == null ? 0 : array3.length, resIndex = 0, result = [];
        while (++index2 < length) {
          var value = array3[index2];
          if (predicate(value, index2, array3)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayIncludes(array3, value) {
        var length = array3 == null ? 0 : array3.length;
        return !!length && baseIndexOf(array3, value, 0) > -1;
      }
      function arrayIncludesWith(array3, value, comparator) {
        var index2 = -1, length = array3 == null ? 0 : array3.length;
        while (++index2 < length) {
          if (comparator(value, array3[index2])) {
            return true;
          }
        }
        return false;
      }
      function arrayMap(array3, iteratee) {
        var index2 = -1, length = array3 == null ? 0 : array3.length, result = Array(length);
        while (++index2 < length) {
          result[index2] = iteratee(array3[index2], index2, array3);
        }
        return result;
      }
      function arrayPush(array3, values) {
        var index2 = -1, length = values.length, offset = array3.length;
        while (++index2 < length) {
          array3[offset + index2] = values[index2];
        }
        return array3;
      }
      function arrayReduce(array3, iteratee, accumulator, initAccum) {
        var index2 = -1, length = array3 == null ? 0 : array3.length;
        if (initAccum && length) {
          accumulator = array3[++index2];
        }
        while (++index2 < length) {
          accumulator = iteratee(accumulator, array3[index2], index2, array3);
        }
        return accumulator;
      }
      function arrayReduceRight(array3, iteratee, accumulator, initAccum) {
        var length = array3 == null ? 0 : array3.length;
        if (initAccum && length) {
          accumulator = array3[--length];
        }
        while (length--) {
          accumulator = iteratee(accumulator, array3[length], length, array3);
        }
        return accumulator;
      }
      function arraySome(array3, predicate) {
        var index2 = -1, length = array3 == null ? 0 : array3.length;
        while (++index2 < length) {
          if (predicate(array3[index2], index2, array3)) {
            return true;
          }
        }
        return false;
      }
      var asciiSize = baseProperty("length");
      function asciiToArray(string2) {
        return string2.split("");
      }
      function asciiWords(string2) {
        return string2.match(reAsciiWord) || [];
      }
      function baseFindKey(collection, predicate, eachFunc) {
        var result;
        eachFunc(collection, function(value, key, collection2) {
          if (predicate(value, key, collection2)) {
            result = key;
            return false;
          }
        });
        return result;
      }
      function baseFindIndex(array3, predicate, fromIndex, fromRight) {
        var length = array3.length, index2 = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index2-- : ++index2 < length) {
          if (predicate(array3[index2], index2, array3)) {
            return index2;
          }
        }
        return -1;
      }
      function baseIndexOf(array3, value, fromIndex) {
        return value === value ? strictIndexOf(array3, value, fromIndex) : baseFindIndex(array3, baseIsNaN, fromIndex);
      }
      function baseIndexOfWith(array3, value, fromIndex, comparator) {
        var index2 = fromIndex - 1, length = array3.length;
        while (++index2 < length) {
          if (comparator(array3[index2], value)) {
            return index2;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function baseMean(array3, iteratee) {
        var length = array3 == null ? 0 : array3.length;
        return length ? baseSum(array3, iteratee) / length : NAN2;
      }
      function baseProperty(key) {
        return function(object3) {
          return object3 == null ? undefined$1 : object3[key];
        };
      }
      function basePropertyOf(object3) {
        return function(key) {
          return object3 == null ? undefined$1 : object3[key];
        };
      }
      function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection, function(value, index2, collection2) {
          accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index2, collection2);
        });
        return accumulator;
      }
      function baseSortBy(array3, comparer) {
        var length = array3.length;
        array3.sort(comparer);
        while (length--) {
          array3[length] = array3[length].value;
        }
        return array3;
      }
      function baseSum(array3, iteratee) {
        var result, index2 = -1, length = array3.length;
        while (++index2 < length) {
          var current = iteratee(array3[index2]);
          if (current !== undefined$1) {
            result = result === undefined$1 ? current : result + current;
          }
        }
        return result;
      }
      function baseTimes(n, iteratee) {
        var index2 = -1, result = Array(n);
        while (++index2 < n) {
          result[index2] = iteratee(index2);
        }
        return result;
      }
      function baseToPairs(object3, props2) {
        return arrayMap(props2, function(key) {
          return [key, object3[key]];
        });
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function baseValues(object3, props2) {
        return arrayMap(props2, function(key) {
          return object3[key];
        });
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function charsStartIndex(strSymbols, chrSymbols) {
        var index2 = -1, length = strSymbols.length;
        while (++index2 < length && baseIndexOf(chrSymbols, strSymbols[index2], 0) > -1) {
        }
        return index2;
      }
      function charsEndIndex(strSymbols, chrSymbols) {
        var index2 = strSymbols.length;
        while (index2-- && baseIndexOf(chrSymbols, strSymbols[index2], 0) > -1) {
        }
        return index2;
      }
      function countHolders(array3, placeholder2) {
        var length = array3.length, result = 0;
        while (length--) {
          if (array3[length] === placeholder2) {
            ++result;
          }
        }
        return result;
      }
      var deburrLetter = basePropertyOf(deburredLetters);
      var escapeHtmlChar = basePropertyOf(htmlEscapes);
      function escapeStringChar(chr) {
        return "\\" + stringEscapes[chr];
      }
      function getValue2(object3, key) {
        return object3 == null ? undefined$1 : object3[key];
      }
      function hasUnicode(string2) {
        return reHasUnicode.test(string2);
      }
      function hasUnicodeWord(string2) {
        return reHasUnicodeWord.test(string2);
      }
      function iteratorToArray(iterator2) {
        var data, result = [];
        while (!(data = iterator2.next()).done) {
          result.push(data.value);
        }
        return result;
      }
      function mapToArray(map) {
        var index2 = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index2] = [key, value];
        });
        return result;
      }
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      function replaceHolders(array3, placeholder2) {
        var index2 = -1, length = array3.length, resIndex = 0, result = [];
        while (++index2 < length) {
          var value = array3[index2];
          if (value === placeholder2 || value === PLACEHOLDER) {
            array3[index2] = PLACEHOLDER;
            result[resIndex++] = index2;
          }
        }
        return result;
      }
      function safeGet(object3, key) {
        return key == "__proto__" ? undefined$1 : object3[key];
      }
      function setToArray(set2) {
        var index2 = -1, result = Array(set2.size);
        set2.forEach(function(value) {
          result[++index2] = value;
        });
        return result;
      }
      function setToPairs(set2) {
        var index2 = -1, result = Array(set2.size);
        set2.forEach(function(value) {
          result[++index2] = [value, value];
        });
        return result;
      }
      function strictIndexOf(array3, value, fromIndex) {
        var index2 = fromIndex - 1, length = array3.length;
        while (++index2 < length) {
          if (array3[index2] === value) {
            return index2;
          }
        }
        return -1;
      }
      function strictLastIndexOf(array3, value, fromIndex) {
        var index2 = fromIndex + 1;
        while (index2--) {
          if (array3[index2] === value) {
            return index2;
          }
        }
        return index2;
      }
      function stringSize(string2) {
        return hasUnicode(string2) ? unicodeSize(string2) : asciiSize(string2);
      }
      function stringToArray(string2) {
        return hasUnicode(string2) ? unicodeToArray(string2) : asciiToArray(string2);
      }
      var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
      function unicodeSize(string2) {
        var result = reUnicode.lastIndex = 0;
        while (reUnicode.test(string2)) {
          ++result;
        }
        return result;
      }
      function unicodeToArray(string2) {
        return string2.match(reUnicode) || [];
      }
      function unicodeWords(string2) {
        return string2.match(reUnicodeWord) || [];
      }
      var runInContext = function runInContext2(context) {
        context = context == null ? root2 : _.defaults(root2.Object(), context, _.pick(root2, contextProps));
        var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
        var arrayProto2 = Array2.prototype, funcProto = Function2.prototype, objectProto2 = Object2.prototype;
        var coreJsData = context["__core-js_shared__"];
        var funcToString = funcProto.toString;
        var hasOwnProperty2 = objectProto2.hasOwnProperty;
        var idCounter = 0;
        var maskSrcKey = function() {
          var uid2 = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
          return uid2 ? "Symbol(src)_1." + uid2 : "";
        }();
        var nativeObjectToString = objectProto2.toString;
        var objectCtorString = funcToString.call(Object2);
        var oldDash = root2._;
        var reIsNative = RegExp2("^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
        var Buffer = moduleExports ? context.Buffer : undefined$1, _Symbol = context.Symbol, Uint8Array = context.Uint8Array, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable2 = objectProto2.propertyIsEnumerable, splice = arrayProto2.splice, spreadableSymbol = _Symbol ? _Symbol.isConcatSpreadable : undefined$1, symIterator = _Symbol ? _Symbol.iterator : undefined$1, symToStringTag = _Symbol ? _Symbol.toStringTag : undefined$1;
        var defineProperty4 = function() {
          try {
            var func = getNative(Object2, "defineProperty");
            func({}, "", {});
            return func;
          } catch (e) {
          }
        }();
        var ctxClearTimeout = context.clearTimeout !== root2.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root2.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root2.setTimeout && context.setTimeout;
        var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1, nativeIsFinite = context.isFinite, nativeJoin = arrayProto2.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax2 = Math2.max, nativeMin2 = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto2.reverse;
        var DataView = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
        var metaMap = WeakMap2 && new WeakMap2();
        var realNames = {};
        var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
        var symbolProto = _Symbol ? _Symbol.prototype : undefined$1, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1, symbolToString = symbolProto ? symbolProto.toString : undefined$1;
        function lodash2(value) {
          if (isObjectLike2(value) && !isArray3(value) && !(value instanceof LazyWrapper)) {
            if (value instanceof LodashWrapper) {
              return value;
            }
            if (hasOwnProperty2.call(value, "__wrapped__")) {
              return wrapperClone(value);
            }
          }
          return new LodashWrapper(value);
        }
        var baseCreate = function() {
          function object3() {
          }
          return function(proto) {
            if (!isObject2(proto)) {
              return {};
            }
            if (objectCreate) {
              return objectCreate(proto);
            }
            object3.prototype = proto;
            var result2 = new object3();
            object3.prototype = undefined$1;
            return result2;
          };
        }();
        function baseLodash() {
        }
        function LodashWrapper(value, chainAll) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__chain__ = !!chainAll;
          this.__index__ = 0;
          this.__values__ = undefined$1;
        }
        lodash2.templateSettings = {
          /**
          * Used to detect `data` property values to be HTML-escaped.
          *
          * @memberOf _.templateSettings
          * @type {RegExp}
          */
          escape: reEscape,
          /**
          * Used to detect code to be evaluated.
          *
          * @memberOf _.templateSettings
          * @type {RegExp}
          */
          evaluate: reEvaluate,
          /**
          * Used to detect `data` property values to inject.
          *
          * @memberOf _.templateSettings
          * @type {RegExp}
          */
          interpolate: reInterpolate,
          /**
          * Used to reference the data object in the template text.
          *
          * @memberOf _.templateSettings
          * @type {string}
          */
          variable: "",
          /**
          * Used to import variables into the compiled template.
          *
          * @memberOf _.templateSettings
          * @type {Object}
          */
          imports: {
            /**
            * A reference to the `lodash` function.
            *
            * @memberOf _.templateSettings.imports
            * @type {Function}
            */
            _: lodash2
          }
        };
        lodash2.prototype = baseLodash.prototype;
        lodash2.prototype.constructor = lodash2;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        function LazyWrapper(value) {
          this.__wrapped__ = value;
          this.__actions__ = [];
          this.__dir__ = 1;
          this.__filtered__ = false;
          this.__iteratees__ = [];
          this.__takeCount__ = MAX_ARRAY_LENGTH;
          this.__views__ = [];
        }
        function lazyClone() {
          var result2 = new LazyWrapper(this.__wrapped__);
          result2.__actions__ = copyArray(this.__actions__);
          result2.__dir__ = this.__dir__;
          result2.__filtered__ = this.__filtered__;
          result2.__iteratees__ = copyArray(this.__iteratees__);
          result2.__takeCount__ = this.__takeCount__;
          result2.__views__ = copyArray(this.__views__);
          return result2;
        }
        function lazyReverse() {
          if (this.__filtered__) {
            var result2 = new LazyWrapper(this);
            result2.__dir__ = -1;
            result2.__filtered__ = true;
          } else {
            result2 = this.clone();
            result2.__dir__ *= -1;
          }
          return result2;
        }
        function lazyValue() {
          var array3 = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray3(array3), isRight = dir < 0, arrLength = isArr ? array3.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index2 = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin2(length, this.__takeCount__);
          if (!isArr || !isRight && arrLength == length && takeCount == length) {
            return baseWrapperValue(array3, this.__actions__);
          }
          var result2 = [];
          outer:
            while (length-- && resIndex < takeCount) {
              index2 += dir;
              var iterIndex = -1, value = array3[index2];
              while (++iterIndex < iterLength) {
                var data = iteratees[iterIndex], iteratee2 = data.iteratee, type2 = data.type, computed2 = iteratee2(value);
                if (type2 == LAZY_MAP_FLAG) {
                  value = computed2;
                } else if (!computed2) {
                  if (type2 == LAZY_FILTER_FLAG) {
                    continue outer;
                  } else {
                    break outer;
                  }
                }
              }
              result2[resIndex++] = value;
            }
          return result2;
        }
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        function Hash(entries) {
          var index2 = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index2 < length) {
            var entry = entries[index2];
            this.set(entry[0], entry[1]);
          }
        }
        function hashClear() {
          this.__data__ = nativeCreate ? nativeCreate(null) : {};
          this.size = 0;
        }
        function hashDelete(key) {
          var result2 = this.has(key) && delete this.__data__[key];
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function hashGet(key) {
          var data = this.__data__;
          if (nativeCreate) {
            var result2 = data[key];
            return result2 === HASH_UNDEFINED ? undefined$1 : result2;
          }
          return hasOwnProperty2.call(data, key) ? data[key] : undefined$1;
        }
        function hashHas(key) {
          var data = this.__data__;
          return nativeCreate ? data[key] !== undefined$1 : hasOwnProperty2.call(data, key);
        }
        function hashSet(key, value) {
          var data = this.__data__;
          this.size += this.has(key) ? 0 : 1;
          data[key] = nativeCreate && value === undefined$1 ? HASH_UNDEFINED : value;
          return this;
        }
        Hash.prototype.clear = hashClear;
        Hash.prototype["delete"] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        function ListCache(entries) {
          var index2 = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index2 < length) {
            var entry = entries[index2];
            this.set(entry[0], entry[1]);
          }
        }
        function listCacheClear() {
          this.__data__ = [];
          this.size = 0;
        }
        function listCacheDelete(key) {
          var data = this.__data__, index2 = assocIndexOf(data, key);
          if (index2 < 0) {
            return false;
          }
          var lastIndex = data.length - 1;
          if (index2 == lastIndex) {
            data.pop();
          } else {
            splice.call(data, index2, 1);
          }
          --this.size;
          return true;
        }
        function listCacheGet(key) {
          var data = this.__data__, index2 = assocIndexOf(data, key);
          return index2 < 0 ? undefined$1 : data[index2][1];
        }
        function listCacheHas(key) {
          return assocIndexOf(this.__data__, key) > -1;
        }
        function listCacheSet(key, value) {
          var data = this.__data__, index2 = assocIndexOf(data, key);
          if (index2 < 0) {
            ++this.size;
            data.push([key, value]);
          } else {
            data[index2][1] = value;
          }
          return this;
        }
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype["delete"] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        function MapCache(entries) {
          var index2 = -1, length = entries == null ? 0 : entries.length;
          this.clear();
          while (++index2 < length) {
            var entry = entries[index2];
            this.set(entry[0], entry[1]);
          }
        }
        function mapCacheClear() {
          this.size = 0;
          this.__data__ = { hash: new Hash(), map: new (Map2 || ListCache)(), string: new Hash() };
        }
        function mapCacheDelete(key) {
          var result2 = getMapData(this, key)["delete"](key);
          this.size -= result2 ? 1 : 0;
          return result2;
        }
        function mapCacheGet(key) {
          return getMapData(this, key).get(key);
        }
        function mapCacheHas(key) {
          return getMapData(this, key).has(key);
        }
        function mapCacheSet(key, value) {
          var data = getMapData(this, key), size2 = data.size;
          data.set(key, value);
          this.size += data.size == size2 ? 0 : 1;
          return this;
        }
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype["delete"] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        function SetCache(values2) {
          var index2 = -1, length = values2 == null ? 0 : values2.length;
          this.__data__ = new MapCache();
          while (++index2 < length) {
            this.add(values2[index2]);
          }
        }
        function setCacheAdd(value) {
          this.__data__.set(value, HASH_UNDEFINED);
          return this;
        }
        function setCacheHas(value) {
          return this.__data__.has(value);
        }
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        function Stack(entries) {
          var data = this.__data__ = new ListCache(entries);
          this.size = data.size;
        }
        function stackClear() {
          this.__data__ = new ListCache();
          this.size = 0;
        }
        function stackDelete(key) {
          var data = this.__data__, result2 = data["delete"](key);
          this.size = data.size;
          return result2;
        }
        function stackGet(key) {
          return this.__data__.get(key);
        }
        function stackHas(key) {
          return this.__data__.has(key);
        }
        function stackSet(key, value) {
          var data = this.__data__;
          if (data instanceof ListCache) {
            var pairs = data.__data__;
            if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
              pairs.push([key, value]);
              this.size = ++data.size;
              return this;
            }
            data = this.__data__ = new MapCache(pairs);
          }
          data.set(key, value);
          this.size = data.size;
          return this;
        }
        Stack.prototype.clear = stackClear;
        Stack.prototype["delete"] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        function arrayLikeKeys(value, inherited) {
          var isArr = isArray3(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
          for (var key in value) {
            if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
            (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
            isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
            isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
            isIndex(key, length)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function arraySample(array3) {
          var length = array3.length;
          return length ? array3[baseRandom(0, length - 1)] : undefined$1;
        }
        function arraySampleSize(array3, n) {
          return shuffleSelf(copyArray(array3), baseClamp(n, 0, array3.length));
        }
        function arrayShuffle(array3) {
          return shuffleSelf(copyArray(array3));
        }
        function assignMergeValue(object3, key, value) {
          if (value !== undefined$1 && !eq(object3[key], value) || value === undefined$1 && !(key in object3)) {
            baseAssignValue(object3, key, value);
          }
        }
        function assignValue(object3, key, value) {
          var objValue = object3[key];
          if (!(hasOwnProperty2.call(object3, key) && eq(objValue, value)) || value === undefined$1 && !(key in object3)) {
            baseAssignValue(object3, key, value);
          }
        }
        function assocIndexOf(array3, key) {
          var length = array3.length;
          while (length--) {
            if (eq(array3[length][0], key)) {
              return length;
            }
          }
          return -1;
        }
        function baseAggregator(collection, setter2, iteratee2, accumulator) {
          baseEach(collection, function(value, key, collection2) {
            setter2(accumulator, value, iteratee2(value), collection2);
          });
          return accumulator;
        }
        function baseAssign(object3, source) {
          return object3 && copyObject(source, keys2(source), object3);
        }
        function baseAssignIn(object3, source) {
          return object3 && copyObject(source, keysIn(source), object3);
        }
        function baseAssignValue(object3, key, value) {
          if (key == "__proto__" && defineProperty4) {
            defineProperty4(object3, key, { configurable: true, enumerable: true, value, writable: true });
          } else {
            object3[key] = value;
          }
        }
        function baseAt(object3, paths) {
          var index2 = -1, length = paths.length, result2 = Array2(length), skip = object3 == null;
          while (++index2 < length) {
            result2[index2] = skip ? undefined$1 : get(object3, paths[index2]);
          }
          return result2;
        }
        function baseClamp(number3, lower, upper) {
          if (number3 === number3) {
            if (upper !== undefined$1) {
              number3 = number3 <= upper ? number3 : upper;
            }
            if (lower !== undefined$1) {
              number3 = number3 >= lower ? number3 : lower;
            }
          }
          return number3;
        }
        function baseClone(value, bitmask, customizer, key, object3, stack) {
          var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
          if (customizer) {
            result2 = object3 ? customizer(value, key, object3, stack) : customizer(value);
          }
          if (result2 !== undefined$1) {
            return result2;
          }
          if (!isObject2(value)) {
            return value;
          }
          var isArr = isArray3(value);
          if (isArr) {
            result2 = initCloneArray(value);
            if (!isDeep) {
              return copyArray(value, result2);
            }
          } else {
            var tag2 = getTag(value), isFunc = tag2 == funcTag || tag2 == genTag;
            if (isBuffer(value)) {
              return cloneBuffer(value, isDeep);
            }
            if (tag2 == objectTag || tag2 == argsTag || isFunc && !object3) {
              result2 = isFlat || isFunc ? {} : initCloneObject(value);
              if (!isDeep) {
                return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
              }
            } else {
              if (!cloneableTags[tag2]) {
                return object3 ? value : {};
              }
              result2 = initCloneByTag(value, tag2, isDeep);
            }
          }
          stack || (stack = new Stack());
          var stacked = stack.get(value);
          if (stacked) {
            return stacked;
          }
          stack.set(value, result2);
          if (isSet(value)) {
            value.forEach(function(subValue) {
              result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
            return result2;
          }
          if (isMap(value)) {
            value.forEach(function(subValue, key2) {
              result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
            return result2;
          }
          var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys2;
          var props2 = isArr ? undefined$1 : keysFunc(value);
          arrayEach(props2 || value, function(subValue, key2) {
            if (props2) {
              key2 = subValue;
              subValue = value[key2];
            }
            assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
          return result2;
        }
        function baseConforms(source) {
          var props2 = keys2(source);
          return function(object3) {
            return baseConformsTo(object3, source, props2);
          };
        }
        function baseConformsTo(object3, source, props2) {
          var length = props2.length;
          if (object3 == null) {
            return !length;
          }
          object3 = Object2(object3);
          while (length--) {
            var key = props2[length], predicate = source[key], value = object3[key];
            if (value === undefined$1 && !(key in object3) || !predicate(value)) {
              return false;
            }
          }
          return true;
        }
        function baseDelay(func, wait, args) {
          if (typeof func !== "function") {
            throw new TypeError2(FUNC_ERROR_TEXT2);
          }
          return setTimeout2(function() {
            func.apply(undefined$1, args);
          }, wait);
        }
        function baseDifference(array3, values2, iteratee2, comparator) {
          var index2 = -1, includes2 = arrayIncludes, isCommon = true, length = array3.length, result2 = [], valuesLength = values2.length;
          if (!length) {
            return result2;
          }
          if (iteratee2) {
            values2 = arrayMap(values2, baseUnary(iteratee2));
          }
          if (comparator) {
            includes2 = arrayIncludesWith;
            isCommon = false;
          } else if (values2.length >= LARGE_ARRAY_SIZE) {
            includes2 = cacheHas;
            isCommon = false;
            values2 = new SetCache(values2);
          }
          outer:
            while (++index2 < length) {
              var value = array3[index2], computed2 = iteratee2 == null ? value : iteratee2(value);
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed2 === computed2) {
                var valuesIndex = valuesLength;
                while (valuesIndex--) {
                  if (values2[valuesIndex] === computed2) {
                    continue outer;
                  }
                }
                result2.push(value);
              } else if (!includes2(values2, computed2, comparator)) {
                result2.push(value);
              }
            }
          return result2;
        }
        var baseEach = createBaseEach(baseForOwn);
        var baseEachRight = createBaseEach(baseForOwnRight, true);
        function baseEvery(collection, predicate) {
          var result2 = true;
          baseEach(collection, function(value, index2, collection2) {
            result2 = !!predicate(value, index2, collection2);
            return result2;
          });
          return result2;
        }
        function baseExtremum(array3, iteratee2, comparator) {
          var index2 = -1, length = array3.length;
          while (++index2 < length) {
            var value = array3[index2], current = iteratee2(value);
            if (current != null && (computed2 === undefined$1 ? current === current && !isSymbol2(current) : comparator(current, computed2))) {
              var computed2 = current, result2 = value;
            }
          }
          return result2;
        }
        function baseFill(array3, value, start, end) {
          var length = array3.length;
          start = toInteger2(start);
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end === undefined$1 || end > length ? length : toInteger2(end);
          if (end < 0) {
            end += length;
          }
          end = start > end ? 0 : toLength2(end);
          while (start < end) {
            array3[start++] = value;
          }
          return array3;
        }
        function baseFilter(collection, predicate) {
          var result2 = [];
          baseEach(collection, function(value, index2, collection2) {
            if (predicate(value, index2, collection2)) {
              result2.push(value);
            }
          });
          return result2;
        }
        function baseFlatten(array3, depth, predicate, isStrict, result2) {
          var index2 = -1, length = array3.length;
          predicate || (predicate = isFlattenable);
          result2 || (result2 = []);
          while (++index2 < length) {
            var value = array3[index2];
            if (depth > 0 && predicate(value)) {
              if (depth > 1) {
                baseFlatten(value, depth - 1, predicate, isStrict, result2);
              } else {
                arrayPush(result2, value);
              }
            } else if (!isStrict) {
              result2[result2.length] = value;
            }
          }
          return result2;
        }
        var baseFor = createBaseFor();
        var baseForRight = createBaseFor(true);
        function baseForOwn(object3, iteratee2) {
          return object3 && baseFor(object3, iteratee2, keys2);
        }
        function baseForOwnRight(object3, iteratee2) {
          return object3 && baseForRight(object3, iteratee2, keys2);
        }
        function baseFunctions(object3, props2) {
          return arrayFilter(props2, function(key) {
            return isFunction2(object3[key]);
          });
        }
        function baseGet(object3, path) {
          path = castPath(path, object3);
          var index2 = 0, length = path.length;
          while (object3 != null && index2 < length) {
            object3 = object3[toKey(path[index2++])];
          }
          return index2 && index2 == length ? object3 : undefined$1;
        }
        function baseGetAllKeys(object3, keysFunc, symbolsFunc) {
          var result2 = keysFunc(object3);
          return isArray3(object3) ? result2 : arrayPush(result2, symbolsFunc(object3));
        }
        function baseGetTag(value) {
          if (value == null) {
            return value === undefined$1 ? undefinedTag : nullTag;
          }
          return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString2(value);
        }
        function baseGt(value, other) {
          return value > other;
        }
        function baseHas(object3, key) {
          return object3 != null && hasOwnProperty2.call(object3, key);
        }
        function baseHasIn(object3, key) {
          return object3 != null && key in Object2(object3);
        }
        function baseInRange(number3, start, end) {
          return number3 >= nativeMin2(start, end) && number3 < nativeMax2(start, end);
        }
        function baseIntersection(arrays, iteratee2, comparator) {
          var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
          while (othIndex--) {
            var array3 = arrays[othIndex];
            if (othIndex && iteratee2) {
              array3 = arrayMap(array3, baseUnary(iteratee2));
            }
            maxLength = nativeMin2(array3.length, maxLength);
            caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array3.length >= 120) ? new SetCache(othIndex && array3) : undefined$1;
          }
          array3 = arrays[0];
          var index2 = -1, seen = caches[0];
          outer:
            while (++index2 < length && result2.length < maxLength) {
              var value = array3[index2], computed2 = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (!(seen ? cacheHas(seen, computed2) : includes2(result2, computed2, comparator))) {
                othIndex = othLength;
                while (--othIndex) {
                  var cache = caches[othIndex];
                  if (!(cache ? cacheHas(cache, computed2) : includes2(arrays[othIndex], computed2, comparator))) {
                    continue outer;
                  }
                }
                if (seen) {
                  seen.push(computed2);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseInverter(object3, setter2, iteratee2, accumulator) {
          baseForOwn(object3, function(value, key, object4) {
            setter2(accumulator, iteratee2(value), key, object4);
          });
          return accumulator;
        }
        function baseInvoke(object3, path, args) {
          path = castPath(path, object3);
          object3 = parent(object3, path);
          var func = object3 == null ? object3 : object3[toKey(last(path))];
          return func == null ? undefined$1 : apply(func, object3, args);
        }
        function baseIsArguments(value) {
          return isObjectLike2(value) && baseGetTag(value) == argsTag;
        }
        function baseIsArrayBuffer(value) {
          return isObjectLike2(value) && baseGetTag(value) == arrayBufferTag;
        }
        function baseIsDate(value) {
          return isObjectLike2(value) && baseGetTag(value) == dateTag;
        }
        function baseIsEqual(value, other, bitmask, customizer, stack) {
          if (value === other) {
            return true;
          }
          if (value == null || other == null || !isObjectLike2(value) && !isObjectLike2(other)) {
            return value !== value && other !== other;
          }
          return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        function baseIsEqualDeep(object3, other, bitmask, customizer, equalFunc, stack) {
          var objIsArr = isArray3(object3), othIsArr = isArray3(other), objTag = objIsArr ? arrayTag : getTag(object3), othTag = othIsArr ? arrayTag : getTag(other);
          objTag = objTag == argsTag ? objectTag : objTag;
          othTag = othTag == argsTag ? objectTag : othTag;
          var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
          if (isSameTag && isBuffer(object3)) {
            if (!isBuffer(other)) {
              return false;
            }
            objIsArr = true;
            objIsObj = false;
          }
          if (isSameTag && !objIsObj) {
            stack || (stack = new Stack());
            return objIsArr || isTypedArray(object3) ? equalArrays(object3, other, bitmask, customizer, equalFunc, stack) : equalByTag(object3, other, objTag, bitmask, customizer, equalFunc, stack);
          }
          if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
            var objIsWrapped = objIsObj && hasOwnProperty2.call(object3, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
            if (objIsWrapped || othIsWrapped) {
              var objUnwrapped = objIsWrapped ? object3.value() : object3, othUnwrapped = othIsWrapped ? other.value() : other;
              stack || (stack = new Stack());
              return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
            }
          }
          if (!isSameTag) {
            return false;
          }
          stack || (stack = new Stack());
          return equalObjects(object3, other, bitmask, customizer, equalFunc, stack);
        }
        function baseIsMap(value) {
          return isObjectLike2(value) && getTag(value) == mapTag;
        }
        function baseIsMatch(object3, source, matchData, customizer) {
          var index2 = matchData.length, length = index2, noCustomizer = !customizer;
          if (object3 == null) {
            return !length;
          }
          object3 = Object2(object3);
          while (index2--) {
            var data = matchData[index2];
            if (noCustomizer && data[2] ? data[1] !== object3[data[0]] : !(data[0] in object3)) {
              return false;
            }
          }
          while (++index2 < length) {
            data = matchData[index2];
            var key = data[0], objValue = object3[key], srcValue = data[1];
            if (noCustomizer && data[2]) {
              if (objValue === undefined$1 && !(key in object3)) {
                return false;
              }
            } else {
              var stack = new Stack();
              if (customizer) {
                var result2 = customizer(objValue, srcValue, key, object3, source, stack);
              }
              if (!(result2 === undefined$1 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                return false;
              }
            }
          }
          return true;
        }
        function baseIsNative(value) {
          if (!isObject2(value) || isMasked(value)) {
            return false;
          }
          var pattern2 = isFunction2(value) ? reIsNative : reIsHostCtor;
          return pattern2.test(toSource(value));
        }
        function baseIsRegExp(value) {
          return isObjectLike2(value) && baseGetTag(value) == regexpTag;
        }
        function baseIsSet(value) {
          return isObjectLike2(value) && getTag(value) == setTag;
        }
        function baseIsTypedArray(value) {
          return isObjectLike2(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        function baseIteratee(value) {
          if (typeof value === "function") {
            return value;
          }
          if (value == null) {
            return identity2;
          }
          if ((typeof value === "undefined" ? "undefined" : _typeof2(value)) === "object") {
            return isArray3(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
          }
          return property(value);
        }
        function baseKeys(object3) {
          if (!isPrototype(object3)) {
            return nativeKeys(object3);
          }
          var result2 = [];
          for (var key in Object2(object3)) {
            if (hasOwnProperty2.call(object3, key) && key != "constructor") {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseKeysIn(object3) {
          if (!isObject2(object3)) {
            return nativeKeysIn(object3);
          }
          var isProto = isPrototype(object3), result2 = [];
          for (var key in object3) {
            if (!(key == "constructor" && (isProto || !hasOwnProperty2.call(object3, key)))) {
              result2.push(key);
            }
          }
          return result2;
        }
        function baseLt(value, other) {
          return value < other;
        }
        function baseMap(collection, iteratee2) {
          var index2 = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value, key, collection2) {
            result2[++index2] = iteratee2(value, key, collection2);
          });
          return result2;
        }
        function baseMatches(source) {
          var matchData = getMatchData(source);
          if (matchData.length == 1 && matchData[0][2]) {
            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
          }
          return function(object3) {
            return object3 === source || baseIsMatch(object3, source, matchData);
          };
        }
        function baseMatchesProperty(path, srcValue) {
          if (isKey(path) && isStrictComparable(srcValue)) {
            return matchesStrictComparable(toKey(path), srcValue);
          }
          return function(object3) {
            var objValue = get(object3, path);
            return objValue === undefined$1 && objValue === srcValue ? hasIn(object3, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
          };
        }
        function baseMerge(object3, source, srcIndex, customizer, stack) {
          if (object3 === source) {
            return;
          }
          baseFor(source, function(srcValue, key) {
            if (isObject2(srcValue)) {
              stack || (stack = new Stack());
              baseMergeDeep(object3, source, key, srcIndex, baseMerge, customizer, stack);
            } else {
              var newValue = customizer ? customizer(safeGet(object3, key), srcValue, key + "", object3, source, stack) : undefined$1;
              if (newValue === undefined$1) {
                newValue = srcValue;
              }
              assignMergeValue(object3, key, newValue);
            }
          }, keysIn);
        }
        function baseMergeDeep(object3, source, key, srcIndex, mergeFunc, customizer, stack) {
          var objValue = safeGet(object3, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
          if (stacked) {
            assignMergeValue(object3, key, stacked);
            return;
          }
          var newValue = customizer ? customizer(objValue, srcValue, key + "", object3, source, stack) : undefined$1;
          var isCommon = newValue === undefined$1;
          if (isCommon) {
            var isArr = isArray3(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
            newValue = srcValue;
            if (isArr || isBuff || isTyped) {
              if (isArray3(objValue)) {
                newValue = objValue;
              } else if (isArrayLikeObject(objValue)) {
                newValue = copyArray(objValue);
              } else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
              } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
              } else {
                newValue = [];
              }
            } else if (isPlainObject2(srcValue) || isArguments(srcValue)) {
              newValue = objValue;
              if (isArguments(objValue)) {
                newValue = toPlainObject(objValue);
              } else if (!isObject2(objValue) || srcIndex && isFunction2(objValue)) {
                newValue = initCloneObject(srcValue);
              }
            } else {
              isCommon = false;
            }
          }
          if (isCommon) {
            stack.set(srcValue, newValue);
            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
            stack["delete"](srcValue);
          }
          assignMergeValue(object3, key, newValue);
        }
        function baseNth(array3, n) {
          var length = array3.length;
          if (!length) {
            return;
          }
          n += n < 0 ? length : 0;
          return isIndex(n, length) ? array3[n] : undefined$1;
        }
        function baseOrderBy(collection, iteratees, orders) {
          var index2 = -1;
          iteratees = arrayMap(iteratees.length ? iteratees : [identity2], baseUnary(getIteratee()));
          var result2 = baseMap(collection, function(value, key, collection2) {
            var criteria = arrayMap(iteratees, function(iteratee2) {
              return iteratee2(value);
            });
            return { criteria, index: ++index2, value };
          });
          return baseSortBy(result2, function(object3, other) {
            return compareMultiple(object3, other, orders);
          });
        }
        function basePick(object3, paths) {
          return basePickBy(object3, paths, function(value, path) {
            return hasIn(object3, path);
          });
        }
        function basePickBy(object3, paths, predicate) {
          var index2 = -1, length = paths.length, result2 = {};
          while (++index2 < length) {
            var path = paths[index2], value = baseGet(object3, path);
            if (predicate(value, path)) {
              baseSet(result2, castPath(path, object3), value);
            }
          }
          return result2;
        }
        function basePropertyDeep(path) {
          return function(object3) {
            return baseGet(object3, path);
          };
        }
        function basePullAll(array3, values2, iteratee2, comparator) {
          var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index2 = -1, length = values2.length, seen = array3;
          if (array3 === values2) {
            values2 = copyArray(values2);
          }
          if (iteratee2) {
            seen = arrayMap(array3, baseUnary(iteratee2));
          }
          while (++index2 < length) {
            var fromIndex = 0, value = values2[index2], computed2 = iteratee2 ? iteratee2(value) : value;
            while ((fromIndex = indexOf2(seen, computed2, fromIndex, comparator)) > -1) {
              if (seen !== array3) {
                splice.call(seen, fromIndex, 1);
              }
              splice.call(array3, fromIndex, 1);
            }
          }
          return array3;
        }
        function basePullAt(array3, indexes) {
          var length = array3 ? indexes.length : 0, lastIndex = length - 1;
          while (length--) {
            var index2 = indexes[length];
            if (length == lastIndex || index2 !== previous) {
              var previous = index2;
              if (isIndex(index2)) {
                splice.call(array3, index2, 1);
              } else {
                baseUnset(array3, index2);
              }
            }
          }
          return array3;
        }
        function baseRandom(lower, upper) {
          return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        function baseRange(start, end, step2, fromRight) {
          var index2 = -1, length = nativeMax2(nativeCeil((end - start) / (step2 || 1)), 0), result2 = Array2(length);
          while (length--) {
            result2[fromRight ? length : ++index2] = start;
            start += step2;
          }
          return result2;
        }
        function baseRepeat(string2, n) {
          var result2 = "";
          if (!string2 || n < 1 || n > MAX_SAFE_INTEGER) {
            return result2;
          }
          do {
            if (n % 2) {
              result2 += string2;
            }
            n = nativeFloor(n / 2);
            if (n) {
              string2 += string2;
            }
          } while (n);
          return result2;
        }
        function baseRest(func, start) {
          return setToString(overRest(func, start, identity2), func + "");
        }
        function baseSample(collection) {
          return arraySample(values(collection));
        }
        function baseSampleSize(collection, n) {
          var array3 = values(collection);
          return shuffleSelf(array3, baseClamp(n, 0, array3.length));
        }
        function baseSet(object3, path, value, customizer) {
          if (!isObject2(object3)) {
            return object3;
          }
          path = castPath(path, object3);
          var index2 = -1, length = path.length, lastIndex = length - 1, nested = object3;
          while (nested != null && ++index2 < length) {
            var key = toKey(path[index2]), newValue = value;
            if (index2 != lastIndex) {
              var objValue = nested[key];
              newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
              if (newValue === undefined$1) {
                newValue = isObject2(objValue) ? objValue : isIndex(path[index2 + 1]) ? [] : {};
              }
            }
            assignValue(nested, key, newValue);
            nested = nested[key];
          }
          return object3;
        }
        var baseSetData = !metaMap ? identity2 : function(func, data) {
          metaMap.set(func, data);
          return func;
        };
        var baseSetToString = !defineProperty4 ? identity2 : function(func, string2) {
          return defineProperty4(func, "toString", { configurable: true, enumerable: false, value: constant(string2), writable: true });
        };
        function baseShuffle(collection) {
          return shuffleSelf(values(collection));
        }
        function baseSlice(array3, start, end) {
          var index2 = -1, length = array3.length;
          if (start < 0) {
            start = -start > length ? 0 : length + start;
          }
          end = end > length ? length : end;
          if (end < 0) {
            end += length;
          }
          length = start > end ? 0 : end - start >>> 0;
          start >>>= 0;
          var result2 = Array2(length);
          while (++index2 < length) {
            result2[index2] = array3[index2 + start];
          }
          return result2;
        }
        function baseSome(collection, predicate) {
          var result2;
          baseEach(collection, function(value, index2, collection2) {
            result2 = predicate(value, index2, collection2);
            return !result2;
          });
          return !!result2;
        }
        function baseSortedIndex(array3, value, retHighest) {
          var low = 0, high = array3 == null ? low : array3.length;
          if (typeof value === "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
            while (low < high) {
              var mid = low + high >>> 1, computed2 = array3[mid];
              if (computed2 !== null && !isSymbol2(computed2) && (retHighest ? computed2 <= value : computed2 < value)) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return high;
          }
          return baseSortedIndexBy(array3, value, identity2, retHighest);
        }
        function baseSortedIndexBy(array3, value, iteratee2, retHighest) {
          value = iteratee2(value);
          var low = 0, high = array3 == null ? 0 : array3.length, valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol2(value), valIsUndefined = value === undefined$1;
          while (low < high) {
            var mid = nativeFloor((low + high) / 2), computed2 = iteratee2(array3[mid]), othIsDefined = computed2 !== undefined$1, othIsNull = computed2 === null, othIsReflexive = computed2 === computed2, othIsSymbol = isSymbol2(computed2);
            if (valIsNaN) {
              var setLow = retHighest || othIsReflexive;
            } else if (valIsUndefined) {
              setLow = othIsReflexive && (retHighest || othIsDefined);
            } else if (valIsNull) {
              setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
            } else if (valIsSymbol) {
              setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
            } else if (othIsNull || othIsSymbol) {
              setLow = false;
            } else {
              setLow = retHighest ? computed2 <= value : computed2 < value;
            }
            if (setLow) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return nativeMin2(high, MAX_ARRAY_INDEX);
        }
        function baseSortedUniq(array3, iteratee2) {
          var index2 = -1, length = array3.length, resIndex = 0, result2 = [];
          while (++index2 < length) {
            var value = array3[index2], computed2 = iteratee2 ? iteratee2(value) : value;
            if (!index2 || !eq(computed2, seen)) {
              var seen = computed2;
              result2[resIndex++] = value === 0 ? 0 : value;
            }
          }
          return result2;
        }
        function baseToNumber(value) {
          if (typeof value === "number") {
            return value;
          }
          if (isSymbol2(value)) {
            return NAN2;
          }
          return +value;
        }
        function baseToString(value) {
          if (typeof value === "string") {
            return value;
          }
          if (isArray3(value)) {
            return arrayMap(value, baseToString) + "";
          }
          if (isSymbol2(value)) {
            return symbolToString ? symbolToString.call(value) : "";
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function baseUniq(array3, iteratee2, comparator) {
          var index2 = -1, includes2 = arrayIncludes, length = array3.length, isCommon = true, result2 = [], seen = result2;
          if (comparator) {
            isCommon = false;
            includes2 = arrayIncludesWith;
          } else if (length >= LARGE_ARRAY_SIZE) {
            var set3 = iteratee2 ? null : createSet(array3);
            if (set3) {
              return setToArray(set3);
            }
            isCommon = false;
            includes2 = cacheHas;
            seen = new SetCache();
          } else {
            seen = iteratee2 ? [] : result2;
          }
          outer:
            while (++index2 < length) {
              var value = array3[index2], computed2 = iteratee2 ? iteratee2(value) : value;
              value = comparator || value !== 0 ? value : 0;
              if (isCommon && computed2 === computed2) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed2) {
                    continue outer;
                  }
                }
                if (iteratee2) {
                  seen.push(computed2);
                }
                result2.push(value);
              } else if (!includes2(seen, computed2, comparator)) {
                if (seen !== result2) {
                  seen.push(computed2);
                }
                result2.push(value);
              }
            }
          return result2;
        }
        function baseUnset(object3, path) {
          path = castPath(path, object3);
          object3 = parent(object3, path);
          return object3 == null || delete object3[toKey(last(path))];
        }
        function baseUpdate(object3, path, updater, customizer) {
          return baseSet(object3, path, updater(baseGet(object3, path)), customizer);
        }
        function baseWhile(array3, predicate, isDrop, fromRight) {
          var length = array3.length, index2 = fromRight ? length : -1;
          while ((fromRight ? index2-- : ++index2 < length) && predicate(array3[index2], index2, array3)) {
          }
          return isDrop ? baseSlice(array3, fromRight ? 0 : index2, fromRight ? index2 + 1 : length) : baseSlice(array3, fromRight ? index2 + 1 : 0, fromRight ? length : index2);
        }
        function baseWrapperValue(value, actions) {
          var result2 = value;
          if (result2 instanceof LazyWrapper) {
            result2 = result2.value();
          }
          return arrayReduce(actions, function(result3, action) {
            return action.func.apply(action.thisArg, arrayPush([result3], action.args));
          }, result2);
        }
        function baseXor(arrays, iteratee2, comparator) {
          var length = arrays.length;
          if (length < 2) {
            return length ? baseUniq(arrays[0]) : [];
          }
          var index2 = -1, result2 = Array2(length);
          while (++index2 < length) {
            var array3 = arrays[index2], othIndex = -1;
            while (++othIndex < length) {
              if (othIndex != index2) {
                result2[index2] = baseDifference(result2[index2] || array3, arrays[othIndex], iteratee2, comparator);
              }
            }
          }
          return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
        }
        function baseZipObject(props2, values2, assignFunc) {
          var index2 = -1, length = props2.length, valsLength = values2.length, result2 = {};
          while (++index2 < length) {
            var value = index2 < valsLength ? values2[index2] : undefined$1;
            assignFunc(result2, props2[index2], value);
          }
          return result2;
        }
        function castArrayLikeObject(value) {
          return isArrayLikeObject(value) ? value : [];
        }
        function castFunction(value) {
          return typeof value === "function" ? value : identity2;
        }
        function castPath(value, object3) {
          if (isArray3(value)) {
            return value;
          }
          return isKey(value, object3) ? [value] : stringToPath(toString2(value));
        }
        var castRest = baseRest;
        function castSlice(array3, start, end) {
          var length = array3.length;
          end = end === undefined$1 ? length : end;
          return !start && end >= length ? array3 : baseSlice(array3, start, end);
        }
        var clearTimeout2 = ctxClearTimeout || function(id2) {
          return root2.clearTimeout(id2);
        };
        function cloneBuffer(buffer, isDeep) {
          if (isDeep) {
            return buffer.slice();
          }
          var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
          buffer.copy(result2);
          return result2;
        }
        function cloneArrayBuffer(arrayBuffer) {
          var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
          new Uint8Array(result2).set(new Uint8Array(arrayBuffer));
          return result2;
        }
        function cloneDataView(dataView, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
          return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        function cloneRegExp(regexp3) {
          var result2 = new regexp3.constructor(regexp3.source, reFlags.exec(regexp3));
          result2.lastIndex = regexp3.lastIndex;
          return result2;
        }
        function cloneSymbol(symbol2) {
          return symbolValueOf ? Object2(symbolValueOf.call(symbol2)) : {};
        }
        function cloneTypedArray(typedArray, isDeep) {
          var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
          return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        function compareAscending(value, other) {
          if (value !== other) {
            var valIsDefined = value !== undefined$1, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol2(value);
            var othIsDefined = other !== undefined$1, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol2(other);
            if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
              return 1;
            }
            if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
              return -1;
            }
          }
          return 0;
        }
        function compareMultiple(object3, other, orders) {
          var index2 = -1, objCriteria = object3.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
          while (++index2 < length) {
            var result2 = compareAscending(objCriteria[index2], othCriteria[index2]);
            if (result2) {
              if (index2 >= ordersLength) {
                return result2;
              }
              var order = orders[index2];
              return result2 * (order == "desc" ? -1 : 1);
            }
          }
          return object3.index - other.index;
        }
        function composeArgs(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax2(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
          while (++leftIndex < leftLength) {
            result2[leftIndex] = partials[leftIndex];
          }
          while (++argsIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[holders[argsIndex]] = args[argsIndex];
            }
          }
          while (rangeLength--) {
            result2[leftIndex++] = args[argsIndex++];
          }
          return result2;
        }
        function composeArgsRight(args, partials, holders, isCurried) {
          var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax2(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
          while (++argsIndex < rangeLength) {
            result2[argsIndex] = args[argsIndex];
          }
          var offset = argsIndex;
          while (++rightIndex < rightLength) {
            result2[offset + rightIndex] = partials[rightIndex];
          }
          while (++holdersIndex < holdersLength) {
            if (isUncurried || argsIndex < argsLength) {
              result2[offset + holders[holdersIndex]] = args[argsIndex++];
            }
          }
          return result2;
        }
        function copyArray(source, array3) {
          var index2 = -1, length = source.length;
          array3 || (array3 = Array2(length));
          while (++index2 < length) {
            array3[index2] = source[index2];
          }
          return array3;
        }
        function copyObject(source, props2, object3, customizer) {
          var isNew = !object3;
          object3 || (object3 = {});
          var index2 = -1, length = props2.length;
          while (++index2 < length) {
            var key = props2[index2];
            var newValue = customizer ? customizer(object3[key], source[key], key, object3, source) : undefined$1;
            if (newValue === undefined$1) {
              newValue = source[key];
            }
            if (isNew) {
              baseAssignValue(object3, key, newValue);
            } else {
              assignValue(object3, key, newValue);
            }
          }
          return object3;
        }
        function copySymbols(source, object3) {
          return copyObject(source, getSymbols(source), object3);
        }
        function copySymbolsIn(source, object3) {
          return copyObject(source, getSymbolsIn(source), object3);
        }
        function createAggregator(setter2, initializer) {
          return function(collection, iteratee2) {
            var func = isArray3(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
            return func(collection, setter2, getIteratee(iteratee2, 2), accumulator);
          };
        }
        function createAssigner(assigner) {
          return baseRest(function(object3, sources) {
            var index2 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined$1, guard = length > 2 ? sources[2] : undefined$1;
            customizer = assigner.length > 3 && typeof customizer === "function" ? (length--, customizer) : undefined$1;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              customizer = length < 3 ? undefined$1 : customizer;
              length = 1;
            }
            object3 = Object2(object3);
            while (++index2 < length) {
              var source = sources[index2];
              if (source) {
                assigner(object3, source, index2, customizer);
              }
            }
            return object3;
          });
        }
        function createBaseEach(eachFunc, fromRight) {
          return function(collection, iteratee2) {
            if (collection == null) {
              return collection;
            }
            if (!isArrayLike(collection)) {
              return eachFunc(collection, iteratee2);
            }
            var length = collection.length, index2 = fromRight ? length : -1, iterable = Object2(collection);
            while (fromRight ? index2-- : ++index2 < length) {
              if (iteratee2(iterable[index2], index2, iterable) === false) {
                break;
              }
            }
            return collection;
          };
        }
        function createBaseFor(fromRight) {
          return function(object3, iteratee2, keysFunc) {
            var index2 = -1, iterable = Object2(object3), props2 = keysFunc(object3), length = props2.length;
            while (length--) {
              var key = props2[fromRight ? length : ++index2];
              if (iteratee2(iterable[key], key, iterable) === false) {
                break;
              }
            }
            return object3;
          };
        }
        function createBind(func, bitmask, thisArg) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var fn = this && this !== root2 && this instanceof wrapper ? Ctor : func;
            return fn.apply(isBind ? thisArg : this, arguments);
          }
          return wrapper;
        }
        function createCaseFirst(methodName) {
          return function(string2) {
            string2 = toString2(string2);
            var strSymbols = hasUnicode(string2) ? stringToArray(string2) : undefined$1;
            var chr = strSymbols ? strSymbols[0] : string2.charAt(0);
            var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string2.slice(1);
            return chr[methodName]() + trailing;
          };
        }
        function createCompounder(callback) {
          return function(string2) {
            return arrayReduce(words(deburr(string2).replace(reApos, "")), callback, "");
          };
        }
        function createCtor(Ctor) {
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return new Ctor();
              case 1:
                return new Ctor(args[0]);
              case 2:
                return new Ctor(args[0], args[1]);
              case 3:
                return new Ctor(args[0], args[1], args[2]);
              case 4:
                return new Ctor(args[0], args[1], args[2], args[3]);
              case 5:
                return new Ctor(args[0], args[1], args[2], args[3], args[4]);
              case 6:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
              case 7:
                return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
            }
            var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
            return isObject2(result2) ? result2 : thisBinding;
          };
        }
        function createCurry(func, bitmask, arity) {
          var Ctor = createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index2 = length, placeholder2 = getHolder(wrapper);
            while (index2--) {
              args[index2] = arguments[index2];
            }
            var holders = length < 3 && args[0] !== placeholder2 && args[length - 1] !== placeholder2 ? [] : replaceHolders(args, placeholder2);
            length -= holders.length;
            if (length < arity) {
              return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined$1, args, holders, undefined$1, undefined$1, arity - length);
            }
            var fn = this && this !== root2 && this instanceof wrapper ? Ctor : func;
            return apply(fn, this, args);
          }
          return wrapper;
        }
        function createFind(findIndexFunc) {
          return function(collection, predicate, fromIndex) {
            var iterable = Object2(collection);
            if (!isArrayLike(collection)) {
              var iteratee2 = getIteratee(predicate, 3);
              collection = keys2(collection);
              predicate = function predicate2(key) {
                return iteratee2(iterable[key], key, iterable);
              };
            }
            var index2 = findIndexFunc(collection, predicate, fromIndex);
            return index2 > -1 ? iterable[iteratee2 ? collection[index2] : index2] : undefined$1;
          };
        }
        function createFlow(fromRight) {
          return flatRest(function(funcs) {
            var length = funcs.length, index2 = length, prereq = LodashWrapper.prototype.thru;
            if (fromRight) {
              funcs.reverse();
            }
            while (index2--) {
              var func = funcs[index2];
              if (typeof func !== "function") {
                throw new TypeError2(FUNC_ERROR_TEXT2);
              }
              if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                var wrapper = new LodashWrapper([], true);
              }
            }
            index2 = wrapper ? index2 : length;
            while (++index2 < length) {
              func = funcs[index2];
              var funcName = getFuncName(func), data = funcName == "wrapper" ? getData2(func) : undefined$1;
              if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
              } else {
                wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
              }
            }
            return function() {
              var args = arguments, value = args[0];
              if (wrapper && args.length == 1 && isArray3(value)) {
                return wrapper.plant(value).value();
              }
              var index3 = 0, result2 = length ? funcs[index3].apply(this, args) : value;
              while (++index3 < length) {
                result2 = funcs[index3].call(this, result2);
              }
              return result2;
            };
          });
        }
        function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
          var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined$1 : createCtor(func);
          function wrapper() {
            var length = arguments.length, args = Array2(length), index2 = length;
            while (index2--) {
              args[index2] = arguments[index2];
            }
            if (isCurried) {
              var placeholder2 = getHolder(wrapper), holdersCount = countHolders(args, placeholder2);
            }
            if (partials) {
              args = composeArgs(args, partials, holders, isCurried);
            }
            if (partialsRight) {
              args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
            }
            length -= holdersCount;
            if (isCurried && length < arity) {
              var newHolders = replaceHolders(args, placeholder2);
              return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary2, arity - length);
            }
            var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
            length = args.length;
            if (argPos) {
              args = reorder(args, argPos);
            } else if (isFlip && length > 1) {
              args.reverse();
            }
            if (isAry && ary2 < length) {
              args.length = ary2;
            }
            if (this && this !== root2 && this instanceof wrapper) {
              fn = Ctor || createCtor(fn);
            }
            return fn.apply(thisBinding, args);
          }
          return wrapper;
        }
        function createInverter(setter2, toIteratee) {
          return function(object3, iteratee2) {
            return baseInverter(object3, setter2, toIteratee(iteratee2), {});
          };
        }
        function createMathOperation(operator, defaultValue) {
          return function(value, other) {
            var result2;
            if (value === undefined$1 && other === undefined$1) {
              return defaultValue;
            }
            if (value !== undefined$1) {
              result2 = value;
            }
            if (other !== undefined$1) {
              if (result2 === undefined$1) {
                return other;
              }
              if (typeof value === "string" || typeof other === "string") {
                value = baseToString(value);
                other = baseToString(other);
              } else {
                value = baseToNumber(value);
                other = baseToNumber(other);
              }
              result2 = operator(value, other);
            }
            return result2;
          };
        }
        function createOver(arrayFunc) {
          return flatRest(function(iteratees) {
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            return baseRest(function(args) {
              var thisArg = this;
              return arrayFunc(iteratees, function(iteratee2) {
                return apply(iteratee2, thisArg, args);
              });
            });
          });
        }
        function createPadding(length, chars) {
          chars = chars === undefined$1 ? " " : baseToString(chars);
          var charsLength = chars.length;
          if (charsLength < 2) {
            return charsLength ? baseRepeat(chars, length) : chars;
          }
          var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
          return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
        }
        function createPartial(func, bitmask, thisArg, partials) {
          var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
          function wrapper() {
            var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root2 && this instanceof wrapper ? Ctor : func;
            while (++leftIndex < leftLength) {
              args[leftIndex] = partials[leftIndex];
            }
            while (argsLength--) {
              args[leftIndex++] = arguments[++argsIndex];
            }
            return apply(fn, isBind ? thisArg : this, args);
          }
          return wrapper;
        }
        function createRange(fromRight) {
          return function(start, end, step2) {
            if (step2 && typeof step2 !== "number" && isIterateeCall(start, end, step2)) {
              end = step2 = undefined$1;
            }
            start = toFinite(start);
            if (end === undefined$1) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            step2 = step2 === undefined$1 ? start < end ? 1 : -1 : toFinite(step2);
            return baseRange(start, end, step2, fromRight);
          };
        }
        function createRelationalOperation(operator) {
          return function(value, other) {
            if (!(typeof value === "string" && typeof other === "string")) {
              value = toNumber2(value);
              other = toNumber2(other);
            }
            return operator(value, other);
          };
        }
        function createRecurry(func, bitmask, wrapFunc, placeholder2, thisArg, partials, holders, argPos, ary2, arity) {
          var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined$1, newHoldersRight = isCurry ? undefined$1 : holders, newPartials = isCurry ? partials : undefined$1, newPartialsRight = isCurry ? undefined$1 : partials;
          bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
          bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
          if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
          }
          var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary2, arity];
          var result2 = wrapFunc.apply(undefined$1, newData);
          if (isLaziable(func)) {
            setData(result2, newData);
          }
          result2.placeholder = placeholder2;
          return setWrapToString(result2, func, bitmask);
        }
        function createRound(methodName) {
          var func = Math2[methodName];
          return function(number3, precision) {
            number3 = toNumber2(number3);
            precision = precision == null ? 0 : nativeMin2(toInteger2(precision), 292);
            if (precision) {
              var pair = (toString2(number3) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
              pair = (toString2(value) + "e").split("e");
              return +(pair[0] + "e" + (+pair[1] - precision));
            }
            return func(number3);
          };
        }
        var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop2 : function(values2) {
          return new Set2(values2);
        };
        function createToPairs(keysFunc) {
          return function(object3) {
            var tag2 = getTag(object3);
            if (tag2 == mapTag) {
              return mapToArray(object3);
            }
            if (tag2 == setTag) {
              return setToPairs(object3);
            }
            return baseToPairs(object3, keysFunc(object3));
          };
        }
        function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
          var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
          if (!isBindKey && typeof func !== "function") {
            throw new TypeError2(FUNC_ERROR_TEXT2);
          }
          var length = partials ? partials.length : 0;
          if (!length) {
            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
            partials = holders = undefined$1;
          }
          ary2 = ary2 === undefined$1 ? ary2 : nativeMax2(toInteger2(ary2), 0);
          arity = arity === undefined$1 ? arity : toInteger2(arity);
          length -= holders ? holders.length : 0;
          if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
            var partialsRight = partials, holdersRight = holders;
            partials = holders = undefined$1;
          }
          var data = isBindKey ? undefined$1 : getData2(func);
          var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity];
          if (data) {
            mergeData2(newData, data);
          }
          func = newData[0];
          bitmask = newData[1];
          thisArg = newData[2];
          partials = newData[3];
          holders = newData[4];
          arity = newData[9] = newData[9] === undefined$1 ? isBindKey ? 0 : func.length : nativeMax2(newData[9] - length, 0);
          if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
          }
          if (!bitmask || bitmask == WRAP_BIND_FLAG) {
            var result2 = createBind(func, bitmask, thisArg);
          } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
            result2 = createCurry(func, bitmask, arity);
          } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
            result2 = createPartial(func, bitmask, thisArg, partials);
          } else {
            result2 = createHybrid.apply(undefined$1, newData);
          }
          var setter2 = data ? baseSetData : setData;
          return setWrapToString(setter2(result2, newData), func, bitmask);
        }
        function customDefaultsAssignIn(objValue, srcValue, key, object3) {
          if (objValue === undefined$1 || eq(objValue, objectProto2[key]) && !hasOwnProperty2.call(object3, key)) {
            return srcValue;
          }
          return objValue;
        }
        function customDefaultsMerge(objValue, srcValue, key, object3, source, stack) {
          if (isObject2(objValue) && isObject2(srcValue)) {
            stack.set(srcValue, objValue);
            baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
            stack["delete"](srcValue);
          }
          return objValue;
        }
        function customOmitClone(value) {
          return isPlainObject2(value) ? undefined$1 : value;
        }
        function equalArrays(array3, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array3.length, othLength = other.length;
          if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
            return false;
          }
          var stacked = stack.get(array3);
          if (stacked && stack.get(other)) {
            return stacked == other;
          }
          var index2 = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined$1;
          stack.set(array3, other);
          stack.set(other, array3);
          while (++index2 < arrLength) {
            var arrValue = array3[index2], othValue = other[index2];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, arrValue, index2, other, array3, stack) : customizer(arrValue, othValue, index2, array3, other, stack);
            }
            if (compared !== undefined$1) {
              if (compared) {
                continue;
              }
              result2 = false;
              break;
            }
            if (seen) {
              if (!arraySome(other, function(othValue2, othIndex) {
                if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
                result2 = false;
                break;
              }
            } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              result2 = false;
              break;
            }
          }
          stack["delete"](array3);
          stack["delete"](other);
          return result2;
        }
        function equalByTag(object3, other, tag2, bitmask, customizer, equalFunc, stack) {
          switch (tag2) {
            case dataViewTag:
              if (object3.byteLength != other.byteLength || object3.byteOffset != other.byteOffset) {
                return false;
              }
              object3 = object3.buffer;
              other = other.buffer;
            case arrayBufferTag:
              if (object3.byteLength != other.byteLength || !equalFunc(new Uint8Array(object3), new Uint8Array(other))) {
                return false;
              }
              return true;
            case boolTag:
            case dateTag:
            case numberTag:
              return eq(+object3, +other);
            case errorTag:
              return object3.name == other.name && object3.message == other.message;
            case regexpTag:
            case stringTag:
              return object3 == other + "";
            case mapTag:
              var convert = mapToArray;
            case setTag:
              var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
              convert || (convert = setToArray);
              if (object3.size != other.size && !isPartial) {
                return false;
              }
              var stacked = stack.get(object3);
              if (stacked) {
                return stacked == other;
              }
              bitmask |= COMPARE_UNORDERED_FLAG;
              stack.set(object3, other);
              var result2 = equalArrays(convert(object3), convert(other), bitmask, customizer, equalFunc, stack);
              stack["delete"](object3);
              return result2;
            case symbolTag2:
              if (symbolValueOf) {
                return symbolValueOf.call(object3) == symbolValueOf.call(other);
              }
          }
          return false;
        }
        function equalObjects(object3, other, bitmask, customizer, equalFunc, stack) {
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object3), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
          if (objLength != othLength && !isPartial) {
            return false;
          }
          var index2 = objLength;
          while (index2--) {
            var key = objProps[index2];
            if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
              return false;
            }
          }
          var stacked = stack.get(object3);
          if (stacked && stack.get(other)) {
            return stacked == other;
          }
          var result2 = true;
          stack.set(object3, other);
          stack.set(other, object3);
          var skipCtor = isPartial;
          while (++index2 < objLength) {
            key = objProps[index2];
            var objValue = object3[key], othValue = other[key];
            if (customizer) {
              var compared = isPartial ? customizer(othValue, objValue, key, other, object3, stack) : customizer(objValue, othValue, key, object3, other, stack);
            }
            if (!(compared === undefined$1 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
              result2 = false;
              break;
            }
            skipCtor || (skipCtor = key == "constructor");
          }
          if (result2 && !skipCtor) {
            var objCtor = object3.constructor, othCtor = other.constructor;
            if (objCtor != othCtor && "constructor" in object3 && "constructor" in other && !(typeof objCtor === "function" && objCtor instanceof objCtor && typeof othCtor === "function" && othCtor instanceof othCtor)) {
              result2 = false;
            }
          }
          stack["delete"](object3);
          stack["delete"](other);
          return result2;
        }
        function flatRest(func) {
          return setToString(overRest(func, undefined$1, flatten), func + "");
        }
        function getAllKeys(object3) {
          return baseGetAllKeys(object3, keys2, getSymbols);
        }
        function getAllKeysIn(object3) {
          return baseGetAllKeys(object3, keysIn, getSymbolsIn);
        }
        var getData2 = !metaMap ? noop2 : function(func) {
          return metaMap.get(func);
        };
        function getFuncName(func) {
          var result2 = func.name + "", array3 = realNames[result2], length = hasOwnProperty2.call(realNames, result2) ? array3.length : 0;
          while (length--) {
            var data = array3[length], otherFunc = data.func;
            if (otherFunc == null || otherFunc == func) {
              return data.name;
            }
          }
          return result2;
        }
        function getHolder(func) {
          var object3 = hasOwnProperty2.call(lodash2, "placeholder") ? lodash2 : func;
          return object3.placeholder;
        }
        function getIteratee() {
          var result2 = lodash2.iteratee || iteratee;
          result2 = result2 === iteratee ? baseIteratee : result2;
          return arguments.length ? result2(arguments[0], arguments[1]) : result2;
        }
        function getMapData(map2, key) {
          var data = map2.__data__;
          return isKeyable(key) ? data[typeof key === "string" ? "string" : "hash"] : data.map;
        }
        function getMatchData(object3) {
          var result2 = keys2(object3), length = result2.length;
          while (length--) {
            var key = result2[length], value = object3[key];
            result2[length] = [key, value, isStrictComparable(value)];
          }
          return result2;
        }
        function getNative(object3, key) {
          var value = getValue2(object3, key);
          return baseIsNative(value) ? value : undefined$1;
        }
        function getRawTag(value) {
          var isOwn = hasOwnProperty2.call(value, symToStringTag), tag2 = value[symToStringTag];
          try {
            value[symToStringTag] = undefined$1;
            var unmasked = true;
          } catch (e) {
          }
          var result2 = nativeObjectToString.call(value);
          if (unmasked) {
            if (isOwn) {
              value[symToStringTag] = tag2;
            } else {
              delete value[symToStringTag];
            }
          }
          return result2;
        }
        var getSymbols = !nativeGetSymbols ? stubArray : function(object3) {
          if (object3 == null) {
            return [];
          }
          object3 = Object2(object3);
          return arrayFilter(nativeGetSymbols(object3), function(symbol2) {
            return propertyIsEnumerable2.call(object3, symbol2);
          });
        };
        var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object3) {
          var result2 = [];
          while (object3) {
            arrayPush(result2, getSymbols(object3));
            object3 = getPrototype(object3);
          }
          return result2;
        };
        var getTag = baseGetTag;
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
          getTag = function getTag2(value) {
            var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined$1, ctorString = Ctor ? toSource(Ctor) : "";
            if (ctorString) {
              switch (ctorString) {
                case dataViewCtorString:
                  return dataViewTag;
                case mapCtorString:
                  return mapTag;
                case promiseCtorString:
                  return promiseTag;
                case setCtorString:
                  return setTag;
                case weakMapCtorString:
                  return weakMapTag;
              }
            }
            return result2;
          };
        }
        function getView(start, end, transforms) {
          var index2 = -1, length = transforms.length;
          while (++index2 < length) {
            var data = transforms[index2], size2 = data.size;
            switch (data.type) {
              case "drop":
                start += size2;
                break;
              case "dropRight":
                end -= size2;
                break;
              case "take":
                end = nativeMin2(end, start + size2);
                break;
              case "takeRight":
                start = nativeMax2(start, end - size2);
                break;
            }
          }
          return { start, end };
        }
        function getWrapDetails(source) {
          var match = source.match(reWrapDetails);
          return match ? match[1].split(reSplitDetails) : [];
        }
        function hasPath(object3, path, hasFunc) {
          path = castPath(path, object3);
          var index2 = -1, length = path.length, result2 = false;
          while (++index2 < length) {
            var key = toKey(path[index2]);
            if (!(result2 = object3 != null && hasFunc(object3, key))) {
              break;
            }
            object3 = object3[key];
          }
          if (result2 || ++index2 != length) {
            return result2;
          }
          length = object3 == null ? 0 : object3.length;
          return !!length && isLength(length) && isIndex(key, length) && (isArray3(object3) || isArguments(object3));
        }
        function initCloneArray(array3) {
          var length = array3.length, result2 = new array3.constructor(length);
          if (length && typeof array3[0] === "string" && hasOwnProperty2.call(array3, "index")) {
            result2.index = array3.index;
            result2.input = array3.input;
          }
          return result2;
        }
        function initCloneObject(object3) {
          return typeof object3.constructor === "function" && !isPrototype(object3) ? baseCreate(getPrototype(object3)) : {};
        }
        function initCloneByTag(object3, tag2, isDeep) {
          var Ctor = object3.constructor;
          switch (tag2) {
            case arrayBufferTag:
              return cloneArrayBuffer(object3);
            case boolTag:
            case dateTag:
              return new Ctor(+object3);
            case dataViewTag:
              return cloneDataView(object3, isDeep);
            case float32Tag:
            case float64Tag:
            case int8Tag:
            case int16Tag:
            case int32Tag:
            case uint8Tag:
            case uint8ClampedTag:
            case uint16Tag:
            case uint32Tag:
              return cloneTypedArray(object3, isDeep);
            case mapTag:
              return new Ctor();
            case numberTag:
            case stringTag:
              return new Ctor(object3);
            case regexpTag:
              return cloneRegExp(object3);
            case setTag:
              return new Ctor();
            case symbolTag2:
              return cloneSymbol(object3);
          }
        }
        function insertWrapDetails(source, details) {
          var length = details.length;
          if (!length) {
            return source;
          }
          var lastIndex = length - 1;
          details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
          details = details.join(length > 2 ? ", " : " ");
          return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
        }
        function isFlattenable(value) {
          return isArray3(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        function isIndex(value, length) {
          var type2 = typeof value === "undefined" ? "undefined" : _typeof2(value);
          length = length == null ? MAX_SAFE_INTEGER : length;
          return !!length && (type2 == "number" || type2 != "symbol" && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
        }
        function isIterateeCall(value, index2, object3) {
          if (!isObject2(object3)) {
            return false;
          }
          var type2 = typeof index2 === "undefined" ? "undefined" : _typeof2(index2);
          if (type2 == "number" ? isArrayLike(object3) && isIndex(index2, object3.length) : type2 == "string" && index2 in object3) {
            return eq(object3[index2], value);
          }
          return false;
        }
        function isKey(value, object3) {
          if (isArray3(value)) {
            return false;
          }
          var type2 = typeof value === "undefined" ? "undefined" : _typeof2(value);
          if (type2 == "number" || type2 == "symbol" || type2 == "boolean" || value == null || isSymbol2(value)) {
            return true;
          }
          return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object3 != null && value in Object2(object3);
        }
        function isKeyable(value) {
          var type2 = typeof value === "undefined" ? "undefined" : _typeof2(value);
          return type2 == "string" || type2 == "number" || type2 == "symbol" || type2 == "boolean" ? value !== "__proto__" : value === null;
        }
        function isLaziable(func) {
          var funcName = getFuncName(func), other = lodash2[funcName];
          if (typeof other !== "function" || !(funcName in LazyWrapper.prototype)) {
            return false;
          }
          if (func === other) {
            return true;
          }
          var data = getData2(other);
          return !!data && func === data[0];
        }
        function isMasked(func) {
          return !!maskSrcKey && maskSrcKey in func;
        }
        var isMaskable = coreJsData ? isFunction2 : stubFalse;
        function isPrototype(value) {
          var Ctor = value && value.constructor, proto = typeof Ctor === "function" && Ctor.prototype || objectProto2;
          return value === proto;
        }
        function isStrictComparable(value) {
          return value === value && !isObject2(value);
        }
        function matchesStrictComparable(key, srcValue) {
          return function(object3) {
            if (object3 == null) {
              return false;
            }
            return object3[key] === srcValue && (srcValue !== undefined$1 || key in Object2(object3));
          };
        }
        function memoizeCapped(func) {
          var result2 = memoize(func, function(key) {
            if (cache.size === MAX_MEMOIZE_SIZE) {
              cache.clear();
            }
            return key;
          });
          var cache = result2.cache;
          return result2;
        }
        function mergeData2(data, source) {
          var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
          var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
          if (!(isCommon || isCombo)) {
            return data;
          }
          if (srcBitmask & WRAP_BIND_FLAG) {
            data[2] = source[2];
            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
          }
          var value = source[3];
          if (value) {
            var partials = data[3];
            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
          }
          value = source[5];
          if (value) {
            partials = data[5];
            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
          }
          value = source[7];
          if (value) {
            data[7] = value;
          }
          if (srcBitmask & WRAP_ARY_FLAG) {
            data[8] = data[8] == null ? source[8] : nativeMin2(data[8], source[8]);
          }
          if (data[9] == null) {
            data[9] = source[9];
          }
          data[0] = source[0];
          data[1] = newBitmask;
          return data;
        }
        function nativeKeysIn(object3) {
          var result2 = [];
          if (object3 != null) {
            for (var key in Object2(object3)) {
              result2.push(key);
            }
          }
          return result2;
        }
        function objectToString2(value) {
          return nativeObjectToString.call(value);
        }
        function overRest(func, start, transform2) {
          start = nativeMax2(start === undefined$1 ? func.length - 1 : start, 0);
          return function() {
            var args = arguments, index2 = -1, length = nativeMax2(args.length - start, 0), array3 = Array2(length);
            while (++index2 < length) {
              array3[index2] = args[start + index2];
            }
            index2 = -1;
            var otherArgs = Array2(start + 1);
            while (++index2 < start) {
              otherArgs[index2] = args[index2];
            }
            otherArgs[start] = transform2(array3);
            return apply(func, this, otherArgs);
          };
        }
        function parent(object3, path) {
          return path.length < 2 ? object3 : baseGet(object3, baseSlice(path, 0, -1));
        }
        function reorder(array3, indexes) {
          var arrLength = array3.length, length = nativeMin2(indexes.length, arrLength), oldArray = copyArray(array3);
          while (length--) {
            var index2 = indexes[length];
            array3[length] = isIndex(index2, arrLength) ? oldArray[index2] : undefined$1;
          }
          return array3;
        }
        var setData = shortOut(baseSetData);
        var setTimeout2 = ctxSetTimeout || function(func, wait) {
          return root2.setTimeout(func, wait);
        };
        var setToString = shortOut(baseSetToString);
        function setWrapToString(wrapper, reference, bitmask) {
          var source = reference + "";
          return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        function shortOut(func) {
          var count = 0, lastCalled = 0;
          return function() {
            var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
            lastCalled = stamp;
            if (remaining > 0) {
              if (++count >= HOT_COUNT) {
                return arguments[0];
              }
            } else {
              count = 0;
            }
            return func.apply(undefined$1, arguments);
          };
        }
        function shuffleSelf(array3, size2) {
          var index2 = -1, length = array3.length, lastIndex = length - 1;
          size2 = size2 === undefined$1 ? length : size2;
          while (++index2 < size2) {
            var rand = baseRandom(index2, lastIndex), value = array3[rand];
            array3[rand] = array3[index2];
            array3[index2] = value;
          }
          array3.length = size2;
          return array3;
        }
        var stringToPath = memoizeCapped(function(string2) {
          var result2 = [];
          if (string2.charCodeAt(0) === 46) {
            result2.push("");
          }
          string2.replace(rePropName, function(match, number3, quote, subString) {
            result2.push(quote ? subString.replace(reEscapeChar, "$1") : number3 || match);
          });
          return result2;
        });
        function toKey(value) {
          if (typeof value === "string" || isSymbol2(value)) {
            return value;
          }
          var result2 = value + "";
          return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
        }
        function toSource(func) {
          if (func != null) {
            try {
              return funcToString.call(func);
            } catch (e) {
            }
            try {
              return func + "";
            } catch (e) {
            }
          }
          return "";
        }
        function updateWrapDetails(details, bitmask) {
          arrayEach(wrapFlags, function(pair) {
            var value = "_." + pair[0];
            if (bitmask & pair[1] && !arrayIncludes(details, value)) {
              details.push(value);
            }
          });
          return details.sort();
        }
        function wrapperClone(wrapper) {
          if (wrapper instanceof LazyWrapper) {
            return wrapper.clone();
          }
          var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
          result2.__actions__ = copyArray(wrapper.__actions__);
          result2.__index__ = wrapper.__index__;
          result2.__values__ = wrapper.__values__;
          return result2;
        }
        function chunk(array3, size2, guard) {
          if (guard ? isIterateeCall(array3, size2, guard) : size2 === undefined$1) {
            size2 = 1;
          } else {
            size2 = nativeMax2(toInteger2(size2), 0);
          }
          var length = array3 == null ? 0 : array3.length;
          if (!length || size2 < 1) {
            return [];
          }
          var index2 = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
          while (index2 < length) {
            result2[resIndex++] = baseSlice(array3, index2, index2 += size2);
          }
          return result2;
        }
        function compact(array3) {
          var index2 = -1, length = array3 == null ? 0 : array3.length, resIndex = 0, result2 = [];
          while (++index2 < length) {
            var value = array3[index2];
            if (value) {
              result2[resIndex++] = value;
            }
          }
          return result2;
        }
        function concat2() {
          var length = arguments.length;
          if (!length) {
            return [];
          }
          var args = Array2(length - 1), array3 = arguments[0], index2 = length;
          while (index2--) {
            args[index2 - 1] = arguments[index2];
          }
          return arrayPush(isArray3(array3) ? copyArray(array3) : [array3], baseFlatten(args, 1));
        }
        var difference = baseRest(function(array3, values2) {
          return isArrayLikeObject(array3) ? baseDifference(array3, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
        });
        var differenceBy = baseRest(function(array3, values2) {
          var iteratee2 = last(values2);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined$1;
          }
          return isArrayLikeObject(array3) ? baseDifference(array3, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
        });
        var differenceWith = baseRest(function(array3, values2) {
          var comparator = last(values2);
          if (isArrayLikeObject(comparator)) {
            comparator = undefined$1;
          }
          return isArrayLikeObject(array3) ? baseDifference(array3, baseFlatten(values2, 1, isArrayLikeObject, true), undefined$1, comparator) : [];
        });
        function drop(array3, n, guard) {
          var length = array3 == null ? 0 : array3.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined$1 ? 1 : toInteger2(n);
          return baseSlice(array3, n < 0 ? 0 : n, length);
        }
        function dropRight(array3, n, guard) {
          var length = array3 == null ? 0 : array3.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined$1 ? 1 : toInteger2(n);
          n = length - n;
          return baseSlice(array3, 0, n < 0 ? 0 : n);
        }
        function dropRightWhile(array3, predicate) {
          return array3 && array3.length ? baseWhile(array3, getIteratee(predicate, 3), true, true) : [];
        }
        function dropWhile(array3, predicate) {
          return array3 && array3.length ? baseWhile(array3, getIteratee(predicate, 3), true) : [];
        }
        function fill(array3, value, start, end) {
          var length = array3 == null ? 0 : array3.length;
          if (!length) {
            return [];
          }
          if (start && typeof start !== "number" && isIterateeCall(array3, value, start)) {
            start = 0;
            end = length;
          }
          return baseFill(array3, value, start, end);
        }
        function findIndex(array3, predicate, fromIndex) {
          var length = array3 == null ? 0 : array3.length;
          if (!length) {
            return -1;
          }
          var index2 = fromIndex == null ? 0 : toInteger2(fromIndex);
          if (index2 < 0) {
            index2 = nativeMax2(length + index2, 0);
          }
          return baseFindIndex(array3, getIteratee(predicate, 3), index2);
        }
        function findLastIndex(array3, predicate, fromIndex) {
          var length = array3 == null ? 0 : array3.length;
          if (!length) {
            return -1;
          }
          var index2 = length - 1;
          if (fromIndex !== undefined$1) {
            index2 = toInteger2(fromIndex);
            index2 = fromIndex < 0 ? nativeMax2(length + index2, 0) : nativeMin2(index2, length - 1);
          }
          return baseFindIndex(array3, getIteratee(predicate, 3), index2, true);
        }
        function flatten(array3) {
          var length = array3 == null ? 0 : array3.length;
          return length ? baseFlatten(array3, 1) : [];
        }
        function flattenDeep(array3) {
          var length = array3 == null ? 0 : array3.length;
          return length ? baseFlatten(array3, INFINITY) : [];
        }
        function flattenDepth(array3, depth) {
          var length = array3 == null ? 0 : array3.length;
          if (!length) {
            return [];
          }
          depth = depth === undefined$1 ? 1 : toInteger2(depth);
          return baseFlatten(array3, depth);
        }
        function fromPairs(pairs) {
          var index2 = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
          while (++index2 < length) {
            var pair = pairs[index2];
            result2[pair[0]] = pair[1];
          }
          return result2;
        }
        function head(array3) {
          return array3 && array3.length ? array3[0] : undefined$1;
        }
        function indexOf(array3, value, fromIndex) {
          var length = array3 == null ? 0 : array3.length;
          if (!length) {
            return -1;
          }
          var index2 = fromIndex == null ? 0 : toInteger2(fromIndex);
          if (index2 < 0) {
            index2 = nativeMax2(length + index2, 0);
          }
          return baseIndexOf(array3, value, index2);
        }
        function initial(array3) {
          var length = array3 == null ? 0 : array3.length;
          return length ? baseSlice(array3, 0, -1) : [];
        }
        var intersection = baseRest(function(arrays) {
          var mapped = arrayMap(arrays, castArrayLikeObject);
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        var intersectionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          if (iteratee2 === last(mapped)) {
            iteratee2 = undefined$1;
          } else {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
        });
        var intersectionWith = baseRest(function(arrays) {
          var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
          comparator = typeof comparator === "function" ? comparator : undefined$1;
          if (comparator) {
            mapped.pop();
          }
          return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined$1, comparator) : [];
        });
        function join(array3, separator) {
          return array3 == null ? "" : nativeJoin.call(array3, separator);
        }
        function last(array3) {
          var length = array3 == null ? 0 : array3.length;
          return length ? array3[length - 1] : undefined$1;
        }
        function lastIndexOf(array3, value, fromIndex) {
          var length = array3 == null ? 0 : array3.length;
          if (!length) {
            return -1;
          }
          var index2 = length;
          if (fromIndex !== undefined$1) {
            index2 = toInteger2(fromIndex);
            index2 = index2 < 0 ? nativeMax2(length + index2, 0) : nativeMin2(index2, length - 1);
          }
          return value === value ? strictLastIndexOf(array3, value, index2) : baseFindIndex(array3, baseIsNaN, index2, true);
        }
        function nth(array3, n) {
          return array3 && array3.length ? baseNth(array3, toInteger2(n)) : undefined$1;
        }
        var pull = baseRest(pullAll);
        function pullAll(array3, values2) {
          return array3 && array3.length && values2 && values2.length ? basePullAll(array3, values2) : array3;
        }
        function pullAllBy(array3, values2, iteratee2) {
          return array3 && array3.length && values2 && values2.length ? basePullAll(array3, values2, getIteratee(iteratee2, 2)) : array3;
        }
        function pullAllWith(array3, values2, comparator) {
          return array3 && array3.length && values2 && values2.length ? basePullAll(array3, values2, undefined$1, comparator) : array3;
        }
        var pullAt = flatRest(function(array3, indexes) {
          var length = array3 == null ? 0 : array3.length, result2 = baseAt(array3, indexes);
          basePullAt(array3, arrayMap(indexes, function(index2) {
            return isIndex(index2, length) ? +index2 : index2;
          }).sort(compareAscending));
          return result2;
        });
        function remove2(array3, predicate) {
          var result2 = [];
          if (!(array3 && array3.length)) {
            return result2;
          }
          var index2 = -1, indexes = [], length = array3.length;
          predicate = getIteratee(predicate, 3);
          while (++index2 < length) {
            var value = array3[index2];
            if (predicate(value, index2, array3)) {
              result2.push(value);
              indexes.push(index2);
            }
          }
          basePullAt(array3, indexes);
          return result2;
        }
        function reverse(array3) {
          return array3 == null ? array3 : nativeReverse.call(array3);
        }
        function slice(array3, start, end) {
          var length = array3 == null ? 0 : array3.length;
          if (!length) {
            return [];
          }
          if (end && typeof end !== "number" && isIterateeCall(array3, start, end)) {
            start = 0;
            end = length;
          } else {
            start = start == null ? 0 : toInteger2(start);
            end = end === undefined$1 ? length : toInteger2(end);
          }
          return baseSlice(array3, start, end);
        }
        function sortedIndex(array3, value) {
          return baseSortedIndex(array3, value);
        }
        function sortedIndexBy(array3, value, iteratee2) {
          return baseSortedIndexBy(array3, value, getIteratee(iteratee2, 2));
        }
        function sortedIndexOf(array3, value) {
          var length = array3 == null ? 0 : array3.length;
          if (length) {
            var index2 = baseSortedIndex(array3, value);
            if (index2 < length && eq(array3[index2], value)) {
              return index2;
            }
          }
          return -1;
        }
        function sortedLastIndex(array3, value) {
          return baseSortedIndex(array3, value, true);
        }
        function sortedLastIndexBy(array3, value, iteratee2) {
          return baseSortedIndexBy(array3, value, getIteratee(iteratee2, 2), true);
        }
        function sortedLastIndexOf(array3, value) {
          var length = array3 == null ? 0 : array3.length;
          if (length) {
            var index2 = baseSortedIndex(array3, value, true) - 1;
            if (eq(array3[index2], value)) {
              return index2;
            }
          }
          return -1;
        }
        function sortedUniq(array3) {
          return array3 && array3.length ? baseSortedUniq(array3) : [];
        }
        function sortedUniqBy(array3, iteratee2) {
          return array3 && array3.length ? baseSortedUniq(array3, getIteratee(iteratee2, 2)) : [];
        }
        function tail(array3) {
          var length = array3 == null ? 0 : array3.length;
          return length ? baseSlice(array3, 1, length) : [];
        }
        function take(array3, n, guard) {
          if (!(array3 && array3.length)) {
            return [];
          }
          n = guard || n === undefined$1 ? 1 : toInteger2(n);
          return baseSlice(array3, 0, n < 0 ? 0 : n);
        }
        function takeRight(array3, n, guard) {
          var length = array3 == null ? 0 : array3.length;
          if (!length) {
            return [];
          }
          n = guard || n === undefined$1 ? 1 : toInteger2(n);
          n = length - n;
          return baseSlice(array3, n < 0 ? 0 : n, length);
        }
        function takeRightWhile(array3, predicate) {
          return array3 && array3.length ? baseWhile(array3, getIteratee(predicate, 3), false, true) : [];
        }
        function takeWhile(array3, predicate) {
          return array3 && array3.length ? baseWhile(array3, getIteratee(predicate, 3)) : [];
        }
        var union = baseRest(function(arrays) {
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        var unionBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined$1;
          }
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
        });
        var unionWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator === "function" ? comparator : undefined$1;
          return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
        });
        function uniq(array3) {
          return array3 && array3.length ? baseUniq(array3) : [];
        }
        function uniqBy(array3, iteratee2) {
          return array3 && array3.length ? baseUniq(array3, getIteratee(iteratee2, 2)) : [];
        }
        function uniqWith(array3, comparator) {
          comparator = typeof comparator === "function" ? comparator : undefined$1;
          return array3 && array3.length ? baseUniq(array3, undefined$1, comparator) : [];
        }
        function unzip(array3) {
          if (!(array3 && array3.length)) {
            return [];
          }
          var length = 0;
          array3 = arrayFilter(array3, function(group) {
            if (isArrayLikeObject(group)) {
              length = nativeMax2(group.length, length);
              return true;
            }
          });
          return baseTimes(length, function(index2) {
            return arrayMap(array3, baseProperty(index2));
          });
        }
        function unzipWith(array3, iteratee2) {
          if (!(array3 && array3.length)) {
            return [];
          }
          var result2 = unzip(array3);
          if (iteratee2 == null) {
            return result2;
          }
          return arrayMap(result2, function(group) {
            return apply(iteratee2, undefined$1, group);
          });
        }
        var without = baseRest(function(array3, values2) {
          return isArrayLikeObject(array3) ? baseDifference(array3, values2) : [];
        });
        var xor = baseRest(function(arrays) {
          return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        var xorBy = baseRest(function(arrays) {
          var iteratee2 = last(arrays);
          if (isArrayLikeObject(iteratee2)) {
            iteratee2 = undefined$1;
          }
          return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
        });
        var xorWith = baseRest(function(arrays) {
          var comparator = last(arrays);
          comparator = typeof comparator === "function" ? comparator : undefined$1;
          return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
        });
        var zip = baseRest(unzip);
        function zipObject(props2, values2) {
          return baseZipObject(props2 || [], values2 || [], assignValue);
        }
        function zipObjectDeep(props2, values2) {
          return baseZipObject(props2 || [], values2 || [], baseSet);
        }
        var zipWith = baseRest(function(arrays) {
          var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined$1;
          iteratee2 = typeof iteratee2 === "function" ? (arrays.pop(), iteratee2) : undefined$1;
          return unzipWith(arrays, iteratee2);
        });
        function chain(value) {
          var result2 = lodash2(value);
          result2.__chain__ = true;
          return result2;
        }
        function tap(value, interceptor) {
          interceptor(value);
          return value;
        }
        function thru(value, interceptor) {
          return interceptor(value);
        }
        var wrapperAt = flatRest(function(paths) {
          var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function interceptor2(object3) {
            return baseAt(object3, paths);
          };
          if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
            return this.thru(interceptor);
          }
          value = value.slice(start, +start + (length ? 1 : 0));
          value.__actions__.push({ func: thru, args: [interceptor], thisArg: undefined$1 });
          return new LodashWrapper(value, this.__chain__).thru(function(array3) {
            if (length && !array3.length) {
              array3.push(undefined$1);
            }
            return array3;
          });
        });
        function wrapperChain() {
          return chain(this);
        }
        function wrapperCommit() {
          return new LodashWrapper(this.value(), this.__chain__);
        }
        function wrapperNext() {
          if (this.__values__ === undefined$1) {
            this.__values__ = toArray2(this.value());
          }
          var done = this.__index__ >= this.__values__.length, value = done ? undefined$1 : this.__values__[this.__index__++];
          return { done, value };
        }
        function wrapperToIterator() {
          return this;
        }
        function wrapperPlant(value) {
          var result2, parent2 = this;
          while (parent2 instanceof baseLodash) {
            var clone2 = wrapperClone(parent2);
            clone2.__index__ = 0;
            clone2.__values__ = undefined$1;
            if (result2) {
              previous.__wrapped__ = clone2;
            } else {
              result2 = clone2;
            }
            var previous = clone2;
            parent2 = parent2.__wrapped__;
          }
          previous.__wrapped__ = value;
          return result2;
        }
        function wrapperReverse() {
          var value = this.__wrapped__;
          if (value instanceof LazyWrapper) {
            var wrapped = value;
            if (this.__actions__.length) {
              wrapped = new LazyWrapper(this);
            }
            wrapped = wrapped.reverse();
            wrapped.__actions__.push({ func: thru, args: [reverse], thisArg: undefined$1 });
            return new LodashWrapper(wrapped, this.__chain__);
          }
          return this.thru(reverse);
        }
        function wrapperValue() {
          return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        var countBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty2.call(result2, key)) {
            ++result2[key];
          } else {
            baseAssignValue(result2, key, 1);
          }
        });
        function every(collection, predicate, guard) {
          var func = isArray3(collection) ? arrayEvery : baseEvery;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined$1;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        function filter(collection, predicate) {
          var func = isArray3(collection) ? arrayFilter : baseFilter;
          return func(collection, getIteratee(predicate, 3));
        }
        var find = createFind(findIndex);
        var findLast = createFind(findLastIndex);
        function flatMap(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), 1);
        }
        function flatMapDeep(collection, iteratee2) {
          return baseFlatten(map(collection, iteratee2), INFINITY);
        }
        function flatMapDepth(collection, iteratee2, depth) {
          depth = depth === undefined$1 ? 1 : toInteger2(depth);
          return baseFlatten(map(collection, iteratee2), depth);
        }
        function forEach(collection, iteratee2) {
          var func = isArray3(collection) ? arrayEach : baseEach;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function forEachRight(collection, iteratee2) {
          var func = isArray3(collection) ? arrayEachRight : baseEachRight;
          return func(collection, getIteratee(iteratee2, 3));
        }
        var groupBy = createAggregator(function(result2, value, key) {
          if (hasOwnProperty2.call(result2, key)) {
            result2[key].push(value);
          } else {
            baseAssignValue(result2, key, [value]);
          }
        });
        function includes(collection, value, fromIndex, guard) {
          collection = isArrayLike(collection) ? collection : values(collection);
          fromIndex = fromIndex && !guard ? toInteger2(fromIndex) : 0;
          var length = collection.length;
          if (fromIndex < 0) {
            fromIndex = nativeMax2(length + fromIndex, 0);
          }
          return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        var invokeMap = baseRest(function(collection, path, args) {
          var index2 = -1, isFunc = typeof path === "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
          baseEach(collection, function(value) {
            result2[++index2] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
          });
          return result2;
        });
        var keyBy = createAggregator(function(result2, value, key) {
          baseAssignValue(result2, key, value);
        });
        function map(collection, iteratee2) {
          var func = isArray3(collection) ? arrayMap : baseMap;
          return func(collection, getIteratee(iteratee2, 3));
        }
        function orderBy(collection, iteratees, orders, guard) {
          if (collection == null) {
            return [];
          }
          if (!isArray3(iteratees)) {
            iteratees = iteratees == null ? [] : [iteratees];
          }
          orders = guard ? undefined$1 : orders;
          if (!isArray3(orders)) {
            orders = orders == null ? [] : [orders];
          }
          return baseOrderBy(collection, iteratees, orders);
        }
        var partition = createAggregator(function(result2, value, key) {
          result2[key ? 0 : 1].push(value);
        }, function() {
          return [[], []];
        });
        function reduce(collection, iteratee2, accumulator) {
          var func = isArray3(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
        }
        function reduceRight(collection, iteratee2, accumulator) {
          var func = isArray3(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
          return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
        }
        function reject(collection, predicate) {
          var func = isArray3(collection) ? arrayFilter : baseFilter;
          return func(collection, negate(getIteratee(predicate, 3)));
        }
        function sample(collection) {
          var func = isArray3(collection) ? arraySample : baseSample;
          return func(collection);
        }
        function sampleSize(collection, n, guard) {
          if (guard ? isIterateeCall(collection, n, guard) : n === undefined$1) {
            n = 1;
          } else {
            n = toInteger2(n);
          }
          var func = isArray3(collection) ? arraySampleSize : baseSampleSize;
          return func(collection, n);
        }
        function shuffle(collection) {
          var func = isArray3(collection) ? arrayShuffle : baseShuffle;
          return func(collection);
        }
        function size(collection) {
          if (collection == null) {
            return 0;
          }
          if (isArrayLike(collection)) {
            return isString(collection) ? stringSize(collection) : collection.length;
          }
          var tag2 = getTag(collection);
          if (tag2 == mapTag || tag2 == setTag) {
            return collection.size;
          }
          return baseKeys(collection).length;
        }
        function some(collection, predicate, guard) {
          var func = isArray3(collection) ? arraySome : baseSome;
          if (guard && isIterateeCall(collection, predicate, guard)) {
            predicate = undefined$1;
          }
          return func(collection, getIteratee(predicate, 3));
        }
        var sortBy = baseRest(function(collection, iteratees) {
          if (collection == null) {
            return [];
          }
          var length = iteratees.length;
          if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
            iteratees = [];
          } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
            iteratees = [iteratees[0]];
          }
          return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        var now2 = ctxNow || function() {
          return root2.Date.now();
        };
        function after(n, func) {
          if (typeof func !== "function") {
            throw new TypeError2(FUNC_ERROR_TEXT2);
          }
          n = toInteger2(n);
          return function() {
            if (--n < 1) {
              return func.apply(this, arguments);
            }
          };
        }
        function ary(func, n, guard) {
          n = guard ? undefined$1 : n;
          n = func && n == null ? func.length : n;
          return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
        }
        function before(n, func) {
          var result2;
          if (typeof func !== "function") {
            throw new TypeError2(FUNC_ERROR_TEXT2);
          }
          n = toInteger2(n);
          return function() {
            if (--n > 0) {
              result2 = func.apply(this, arguments);
            }
            if (n <= 1) {
              func = undefined$1;
            }
            return result2;
          };
        }
        var bind2 = baseRest(function(func, thisArg, partials) {
          var bitmask = WRAP_BIND_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bind2));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(func, bitmask, thisArg, partials, holders);
        });
        var bindKey = baseRest(function(object3, key, partials) {
          var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
          if (partials.length) {
            var holders = replaceHolders(partials, getHolder(bindKey));
            bitmask |= WRAP_PARTIAL_FLAG;
          }
          return createWrap(key, bitmask, object3, partials, holders);
        });
        function curry(func, arity, guard) {
          arity = guard ? undefined$1 : arity;
          var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
          result2.placeholder = curry.placeholder;
          return result2;
        }
        function curryRight(func, arity, guard) {
          arity = guard ? undefined$1 : arity;
          var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
          result2.placeholder = curryRight.placeholder;
          return result2;
        }
        function debounce2(func, wait, options) {
          var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
          if (typeof func !== "function") {
            throw new TypeError2(FUNC_ERROR_TEXT2);
          }
          wait = toNumber2(wait) || 0;
          if (isObject2(options)) {
            leading = !!options.leading;
            maxing = "maxWait" in options;
            maxWait = maxing ? nativeMax2(toNumber2(options.maxWait) || 0, wait) : maxWait;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          function invokeFunc(time) {
            var args = lastArgs, thisArg = lastThis;
            lastArgs = lastThis = undefined$1;
            lastInvokeTime = time;
            result2 = func.apply(thisArg, args);
            return result2;
          }
          function leadingEdge(time) {
            lastInvokeTime = time;
            timerId = setTimeout2(timerExpired, wait);
            return leading ? invokeFunc(time) : result2;
          }
          function remainingWait(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
            return maxing ? nativeMin2(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
          }
          function shouldInvoke(time) {
            var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
            return lastCallTime === undefined$1 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
          }
          function timerExpired() {
            var time = now2();
            if (shouldInvoke(time)) {
              return trailingEdge(time);
            }
            timerId = setTimeout2(timerExpired, remainingWait(time));
          }
          function trailingEdge(time) {
            timerId = undefined$1;
            if (trailing && lastArgs) {
              return invokeFunc(time);
            }
            lastArgs = lastThis = undefined$1;
            return result2;
          }
          function cancel() {
            if (timerId !== undefined$1) {
              clearTimeout2(timerId);
            }
            lastInvokeTime = 0;
            lastArgs = lastCallTime = lastThis = timerId = undefined$1;
          }
          function flush() {
            return timerId === undefined$1 ? result2 : trailingEdge(now2());
          }
          function debounced() {
            var time = now2(), isInvoking = shouldInvoke(time);
            lastArgs = arguments;
            lastThis = this;
            lastCallTime = time;
            if (isInvoking) {
              if (timerId === undefined$1) {
                return leadingEdge(lastCallTime);
              }
              if (maxing) {
                timerId = setTimeout2(timerExpired, wait);
                return invokeFunc(lastCallTime);
              }
            }
            if (timerId === undefined$1) {
              timerId = setTimeout2(timerExpired, wait);
            }
            return result2;
          }
          debounced.cancel = cancel;
          debounced.flush = flush;
          return debounced;
        }
        var defer = baseRest(function(func, args) {
          return baseDelay(func, 1, args);
        });
        var delay = baseRest(function(func, wait, args) {
          return baseDelay(func, toNumber2(wait) || 0, args);
        });
        function flip(func) {
          return createWrap(func, WRAP_FLIP_FLAG);
        }
        function memoize(func, resolver) {
          if (typeof func !== "function" || resolver != null && typeof resolver !== "function") {
            throw new TypeError2(FUNC_ERROR_TEXT2);
          }
          var memoized = function memoized2() {
            var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized2.cache;
            if (cache.has(key)) {
              return cache.get(key);
            }
            var result2 = func.apply(this, args);
            memoized2.cache = cache.set(key, result2) || cache;
            return result2;
          };
          memoized.cache = new (memoize.Cache || MapCache)();
          return memoized;
        }
        memoize.Cache = MapCache;
        function negate(predicate) {
          if (typeof predicate !== "function") {
            throw new TypeError2(FUNC_ERROR_TEXT2);
          }
          return function() {
            var args = arguments;
            switch (args.length) {
              case 0:
                return !predicate.call(this);
              case 1:
                return !predicate.call(this, args[0]);
              case 2:
                return !predicate.call(this, args[0], args[1]);
              case 3:
                return !predicate.call(this, args[0], args[1], args[2]);
            }
            return !predicate.apply(this, args);
          };
        }
        function once2(func) {
          return before(2, func);
        }
        var overArgs = castRest(function(func, transforms) {
          transforms = transforms.length == 1 && isArray3(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
          var funcsLength = transforms.length;
          return baseRest(function(args) {
            var index2 = -1, length = nativeMin2(args.length, funcsLength);
            while (++index2 < length) {
              args[index2] = transforms[index2].call(this, args[index2]);
            }
            return apply(func, this, args);
          });
        });
        var partial = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partial));
          return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
        });
        var partialRight = baseRest(function(func, partials) {
          var holders = replaceHolders(partials, getHolder(partialRight));
          return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
        });
        var rearg = flatRest(function(func, indexes) {
          return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
        });
        function rest(func, start) {
          if (typeof func !== "function") {
            throw new TypeError2(FUNC_ERROR_TEXT2);
          }
          start = start === undefined$1 ? start : toInteger2(start);
          return baseRest(func, start);
        }
        function spread(func, start) {
          if (typeof func !== "function") {
            throw new TypeError2(FUNC_ERROR_TEXT2);
          }
          start = start == null ? 0 : nativeMax2(toInteger2(start), 0);
          return baseRest(function(args) {
            var array3 = args[start], otherArgs = castSlice(args, 0, start);
            if (array3) {
              arrayPush(otherArgs, array3);
            }
            return apply(func, this, otherArgs);
          });
        }
        function throttle2(func, wait, options) {
          var leading = true, trailing = true;
          if (typeof func !== "function") {
            throw new TypeError2(FUNC_ERROR_TEXT2);
          }
          if (isObject2(options)) {
            leading = "leading" in options ? !!options.leading : leading;
            trailing = "trailing" in options ? !!options.trailing : trailing;
          }
          return debounce2(func, wait, { leading, maxWait: wait, trailing });
        }
        function unary(func) {
          return ary(func, 1);
        }
        function wrap2(value, wrapper) {
          return partial(castFunction(wrapper), value);
        }
        function castArray() {
          if (!arguments.length) {
            return [];
          }
          var value = arguments[0];
          return isArray3(value) ? value : [value];
        }
        function clone(value) {
          return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        function cloneWith(value, customizer) {
          customizer = typeof customizer === "function" ? customizer : undefined$1;
          return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        function cloneDeep(value) {
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        function cloneDeepWith(value, customizer) {
          customizer = typeof customizer === "function" ? customizer : undefined$1;
          return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        function conformsTo(object3, source) {
          return source == null || baseConformsTo(object3, source, keys2(source));
        }
        function eq(value, other) {
          return value === other || value !== value && other !== other;
        }
        var gt = createRelationalOperation(baseGt);
        var gte = createRelationalOperation(function(value, other) {
          return value >= other;
        });
        var isArguments = baseIsArguments(function() {
          return arguments;
        }()) ? baseIsArguments : function(value) {
          return isObjectLike2(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable2.call(value, "callee");
        };
        var isArray3 = Array2.isArray;
        var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction2(value);
        }
        function isArrayLikeObject(value) {
          return isObjectLike2(value) && isArrayLike(value);
        }
        function isBoolean2(value) {
          return value === true || value === false || isObjectLike2(value) && baseGetTag(value) == boolTag;
        }
        var isBuffer = nativeIsBuffer || stubFalse;
        var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        function isElement(value) {
          return isObjectLike2(value) && value.nodeType === 1 && !isPlainObject2(value);
        }
        function isEmpty(value) {
          if (value == null) {
            return true;
          }
          if (isArrayLike(value) && (isArray3(value) || typeof value === "string" || typeof value.splice === "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
            return !value.length;
          }
          var tag2 = getTag(value);
          if (tag2 == mapTag || tag2 == setTag) {
            return !value.size;
          }
          if (isPrototype(value)) {
            return !baseKeys(value).length;
          }
          for (var key in value) {
            if (hasOwnProperty2.call(value, key)) {
              return false;
            }
          }
          return true;
        }
        function isEqual(value, other) {
          return baseIsEqual(value, other);
        }
        function isEqualWith(value, other, customizer) {
          customizer = typeof customizer === "function" ? customizer : undefined$1;
          var result2 = customizer ? customizer(value, other) : undefined$1;
          return result2 === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result2;
        }
        function isError(value) {
          if (!isObjectLike2(value)) {
            return false;
          }
          var tag2 = baseGetTag(value);
          return tag2 == errorTag || tag2 == domExcTag || typeof value.message === "string" && typeof value.name === "string" && !isPlainObject2(value);
        }
        function isFinite2(value) {
          return typeof value === "number" && nativeIsFinite(value);
        }
        function isFunction2(value) {
          if (!isObject2(value)) {
            return false;
          }
          var tag2 = baseGetTag(value);
          return tag2 == funcTag || tag2 == genTag || tag2 == asyncTag || tag2 == proxyTag;
        }
        function isInteger(value) {
          return typeof value === "number" && value == toInteger2(value);
        }
        function isLength(value) {
          return typeof value === "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        function isObject2(value) {
          var type2 = typeof value === "undefined" ? "undefined" : _typeof2(value);
          return value != null && (type2 == "object" || type2 == "function");
        }
        function isObjectLike2(value) {
          return value != null && (typeof value === "undefined" ? "undefined" : _typeof2(value)) === "object";
        }
        var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        function isMatch(object3, source) {
          return object3 === source || baseIsMatch(object3, source, getMatchData(source));
        }
        function isMatchWith(object3, source, customizer) {
          customizer = typeof customizer === "function" ? customizer : undefined$1;
          return baseIsMatch(object3, source, getMatchData(source), customizer);
        }
        function isNaN2(value) {
          return isNumber(value) && value != +value;
        }
        function isNative2(value) {
          if (isMaskable(value)) {
            throw new Error2(CORE_ERROR_TEXT);
          }
          return baseIsNative(value);
        }
        function isNull(value) {
          return value === null;
        }
        function isNil(value) {
          return value == null;
        }
        function isNumber(value) {
          return typeof value === "number" || isObjectLike2(value) && baseGetTag(value) == numberTag;
        }
        function isPlainObject2(value) {
          if (!isObjectLike2(value) || baseGetTag(value) != objectTag) {
            return false;
          }
          var proto = getPrototype(value);
          if (proto === null) {
            return true;
          }
          var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
          return typeof Ctor === "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        var isRegExp2 = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        function isSafeInteger(value) {
          return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        function isString(value) {
          return typeof value === "string" || !isArray3(value) && isObjectLike2(value) && baseGetTag(value) == stringTag;
        }
        function isSymbol2(value) {
          return (typeof value === "undefined" ? "undefined" : _typeof2(value)) === "symbol" || isObjectLike2(value) && baseGetTag(value) == symbolTag2;
        }
        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        function isUndefined(value) {
          return value === undefined$1;
        }
        function isWeakMap(value) {
          return isObjectLike2(value) && getTag(value) == weakMapTag;
        }
        function isWeakSet(value) {
          return isObjectLike2(value) && baseGetTag(value) == weakSetTag;
        }
        var lt = createRelationalOperation(baseLt);
        var lte = createRelationalOperation(function(value, other) {
          return value <= other;
        });
        function toArray2(value) {
          if (!value) {
            return [];
          }
          if (isArrayLike(value)) {
            return isString(value) ? stringToArray(value) : copyArray(value);
          }
          if (symIterator && value[symIterator]) {
            return iteratorToArray(value[symIterator]());
          }
          var tag2 = getTag(value), func = tag2 == mapTag ? mapToArray : tag2 == setTag ? setToArray : values;
          return func(value);
        }
        function toFinite(value) {
          if (!value) {
            return value === 0 ? value : 0;
          }
          value = toNumber2(value);
          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }
          return value === value ? value : 0;
        }
        function toInteger2(value) {
          var result2 = toFinite(value), remainder = result2 % 1;
          return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
        }
        function toLength2(value) {
          return value ? baseClamp(toInteger2(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        function toNumber2(value) {
          if (typeof value === "number") {
            return value;
          }
          if (isSymbol2(value)) {
            return NAN2;
          }
          if (isObject2(value)) {
            var other = typeof value.valueOf === "function" ? value.valueOf() : value;
            value = isObject2(other) ? other + "" : other;
          }
          if (typeof value !== "string") {
            return value === 0 ? value : +value;
          }
          value = value.replace(reTrim2, "");
          var isBinary = reIsBinary2.test(value);
          return isBinary || reIsOctal2.test(value) ? freeParseInt2(value.slice(2), isBinary ? 2 : 8) : reIsBadHex2.test(value) ? NAN2 : +value;
        }
        function toPlainObject(value) {
          return copyObject(value, keysIn(value));
        }
        function toSafeInteger(value) {
          return value ? baseClamp(toInteger2(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        function toString2(value) {
          return value == null ? "" : baseToString(value);
        }
        var assign2 = createAssigner(function(object3, source) {
          if (isPrototype(source) || isArrayLike(source)) {
            copyObject(source, keys2(source), object3);
            return;
          }
          for (var key in source) {
            if (hasOwnProperty2.call(source, key)) {
              assignValue(object3, key, source[key]);
            }
          }
        });
        var assignIn = createAssigner(function(object3, source) {
          copyObject(source, keysIn(source), object3);
        });
        var assignInWith = createAssigner(function(object3, source, srcIndex, customizer) {
          copyObject(source, keysIn(source), object3, customizer);
        });
        var assignWith = createAssigner(function(object3, source, srcIndex, customizer) {
          copyObject(source, keys2(source), object3, customizer);
        });
        var at = flatRest(baseAt);
        function create4(prototype, properties) {
          var result2 = baseCreate(prototype);
          return properties == null ? result2 : baseAssign(result2, properties);
        }
        var defaults = baseRest(function(object3, sources) {
          object3 = Object2(object3);
          var index2 = -1;
          var length = sources.length;
          var guard = length > 2 ? sources[2] : undefined$1;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            length = 1;
          }
          while (++index2 < length) {
            var source = sources[index2];
            var props2 = keysIn(source);
            var propsIndex = -1;
            var propsLength = props2.length;
            while (++propsIndex < propsLength) {
              var key = props2[propsIndex];
              var value = object3[key];
              if (value === undefined$1 || eq(value, objectProto2[key]) && !hasOwnProperty2.call(object3, key)) {
                object3[key] = source[key];
              }
            }
          }
          return object3;
        });
        var defaultsDeep = baseRest(function(args) {
          args.push(undefined$1, customDefaultsMerge);
          return apply(mergeWith, undefined$1, args);
        });
        function findKey(object3, predicate) {
          return baseFindKey(object3, getIteratee(predicate, 3), baseForOwn);
        }
        function findLastKey(object3, predicate) {
          return baseFindKey(object3, getIteratee(predicate, 3), baseForOwnRight);
        }
        function forIn(object3, iteratee2) {
          return object3 == null ? object3 : baseFor(object3, getIteratee(iteratee2, 3), keysIn);
        }
        function forInRight(object3, iteratee2) {
          return object3 == null ? object3 : baseForRight(object3, getIteratee(iteratee2, 3), keysIn);
        }
        function forOwn(object3, iteratee2) {
          return object3 && baseForOwn(object3, getIteratee(iteratee2, 3));
        }
        function forOwnRight(object3, iteratee2) {
          return object3 && baseForOwnRight(object3, getIteratee(iteratee2, 3));
        }
        function functions(object3) {
          return object3 == null ? [] : baseFunctions(object3, keys2(object3));
        }
        function functionsIn(object3) {
          return object3 == null ? [] : baseFunctions(object3, keysIn(object3));
        }
        function get(object3, path, defaultValue) {
          var result2 = object3 == null ? undefined$1 : baseGet(object3, path);
          return result2 === undefined$1 ? defaultValue : result2;
        }
        function has2(object3, path) {
          return object3 != null && hasPath(object3, path, baseHas);
        }
        function hasIn(object3, path) {
          return object3 != null && hasPath(object3, path, baseHasIn);
        }
        var invert = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString !== "function") {
            value = nativeObjectToString.call(value);
          }
          result2[value] = key;
        }, constant(identity2));
        var invertBy = createInverter(function(result2, value, key) {
          if (value != null && typeof value.toString !== "function") {
            value = nativeObjectToString.call(value);
          }
          if (hasOwnProperty2.call(result2, value)) {
            result2[value].push(key);
          } else {
            result2[value] = [key];
          }
        }, getIteratee);
        var invoke = baseRest(baseInvoke);
        function keys2(object3) {
          return isArrayLike(object3) ? arrayLikeKeys(object3) : baseKeys(object3);
        }
        function keysIn(object3) {
          return isArrayLike(object3) ? arrayLikeKeys(object3, true) : baseKeysIn(object3);
        }
        function mapKeys(object3, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object3, function(value, key, object4) {
            baseAssignValue(result2, iteratee2(value, key, object4), value);
          });
          return result2;
        }
        function mapValues(object3, iteratee2) {
          var result2 = {};
          iteratee2 = getIteratee(iteratee2, 3);
          baseForOwn(object3, function(value, key, object4) {
            baseAssignValue(result2, key, iteratee2(value, key, object4));
          });
          return result2;
        }
        var merge2 = createAssigner(function(object3, source, srcIndex) {
          baseMerge(object3, source, srcIndex);
        });
        var mergeWith = createAssigner(function(object3, source, srcIndex, customizer) {
          baseMerge(object3, source, srcIndex, customizer);
        });
        var omit = flatRest(function(object3, paths) {
          var result2 = {};
          if (object3 == null) {
            return result2;
          }
          var isDeep = false;
          paths = arrayMap(paths, function(path) {
            path = castPath(path, object3);
            isDeep || (isDeep = path.length > 1);
            return path;
          });
          copyObject(object3, getAllKeysIn(object3), result2);
          if (isDeep) {
            result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
          }
          var length = paths.length;
          while (length--) {
            baseUnset(result2, paths[length]);
          }
          return result2;
        });
        function omitBy(object3, predicate) {
          return pickBy(object3, negate(getIteratee(predicate)));
        }
        var pick = flatRest(function(object3, paths) {
          return object3 == null ? {} : basePick(object3, paths);
        });
        function pickBy(object3, predicate) {
          if (object3 == null) {
            return {};
          }
          var props2 = arrayMap(getAllKeysIn(object3), function(prop) {
            return [prop];
          });
          predicate = getIteratee(predicate);
          return basePickBy(object3, props2, function(value, path) {
            return predicate(value, path[0]);
          });
        }
        function result(object3, path, defaultValue) {
          path = castPath(path, object3);
          var index2 = -1, length = path.length;
          if (!length) {
            length = 1;
            object3 = undefined$1;
          }
          while (++index2 < length) {
            var value = object3 == null ? undefined$1 : object3[toKey(path[index2])];
            if (value === undefined$1) {
              index2 = length;
              value = defaultValue;
            }
            object3 = isFunction2(value) ? value.call(object3) : value;
          }
          return object3;
        }
        function set2(object3, path, value) {
          return object3 == null ? object3 : baseSet(object3, path, value);
        }
        function setWith(object3, path, value, customizer) {
          customizer = typeof customizer === "function" ? customizer : undefined$1;
          return object3 == null ? object3 : baseSet(object3, path, value, customizer);
        }
        var toPairs = createToPairs(keys2);
        var toPairsIn = createToPairs(keysIn);
        function transform(object3, iteratee2, accumulator) {
          var isArr = isArray3(object3), isArrLike = isArr || isBuffer(object3) || isTypedArray(object3);
          iteratee2 = getIteratee(iteratee2, 4);
          if (accumulator == null) {
            var Ctor = object3 && object3.constructor;
            if (isArrLike) {
              accumulator = isArr ? new Ctor() : [];
            } else if (isObject2(object3)) {
              accumulator = isFunction2(Ctor) ? baseCreate(getPrototype(object3)) : {};
            } else {
              accumulator = {};
            }
          }
          (isArrLike ? arrayEach : baseForOwn)(object3, function(value, index2, object4) {
            return iteratee2(accumulator, value, index2, object4);
          });
          return accumulator;
        }
        function unset(object3, path) {
          return object3 == null ? true : baseUnset(object3, path);
        }
        function update2(object3, path, updater) {
          return object3 == null ? object3 : baseUpdate(object3, path, castFunction(updater));
        }
        function updateWith(object3, path, updater, customizer) {
          customizer = typeof customizer === "function" ? customizer : undefined$1;
          return object3 == null ? object3 : baseUpdate(object3, path, castFunction(updater), customizer);
        }
        function values(object3) {
          return object3 == null ? [] : baseValues(object3, keys2(object3));
        }
        function valuesIn(object3) {
          return object3 == null ? [] : baseValues(object3, keysIn(object3));
        }
        function clamp(number3, lower, upper) {
          if (upper === undefined$1) {
            upper = lower;
            lower = undefined$1;
          }
          if (upper !== undefined$1) {
            upper = toNumber2(upper);
            upper = upper === upper ? upper : 0;
          }
          if (lower !== undefined$1) {
            lower = toNumber2(lower);
            lower = lower === lower ? lower : 0;
          }
          return baseClamp(toNumber2(number3), lower, upper);
        }
        function inRange(number3, start, end) {
          start = toFinite(start);
          if (end === undefined$1) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          number3 = toNumber2(number3);
          return baseInRange(number3, start, end);
        }
        function random(lower, upper, floating) {
          if (floating && typeof floating !== "boolean" && isIterateeCall(lower, upper, floating)) {
            upper = floating = undefined$1;
          }
          if (floating === undefined$1) {
            if (typeof upper === "boolean") {
              floating = upper;
              upper = undefined$1;
            } else if (typeof lower === "boolean") {
              floating = lower;
              lower = undefined$1;
            }
          }
          if (lower === undefined$1 && upper === undefined$1) {
            lower = 0;
            upper = 1;
          } else {
            lower = toFinite(lower);
            if (upper === undefined$1) {
              upper = lower;
              lower = 0;
            } else {
              upper = toFinite(upper);
            }
          }
          if (lower > upper) {
            var temp = lower;
            lower = upper;
            upper = temp;
          }
          if (floating || lower % 1 || upper % 1) {
            var rand = nativeRandom();
            return nativeMin2(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
          }
          return baseRandom(lower, upper);
        }
        var camelCase = createCompounder(function(result2, word, index2) {
          word = word.toLowerCase();
          return result2 + (index2 ? capitalize2(word) : word);
        });
        function capitalize2(string2) {
          return upperFirst(toString2(string2).toLowerCase());
        }
        function deburr(string2) {
          string2 = toString2(string2);
          return string2 && string2.replace(reLatin, deburrLetter).replace(reComboMark, "");
        }
        function endsWith(string2, target2, position) {
          string2 = toString2(string2);
          target2 = baseToString(target2);
          var length = string2.length;
          position = position === undefined$1 ? length : baseClamp(toInteger2(position), 0, length);
          var end = position;
          position -= target2.length;
          return position >= 0 && string2.slice(position, end) == target2;
        }
        function escape(string2) {
          string2 = toString2(string2);
          return string2 && reHasUnescapedHtml.test(string2) ? string2.replace(reUnescapedHtml, escapeHtmlChar) : string2;
        }
        function escapeRegExp(string2) {
          string2 = toString2(string2);
          return string2 && reHasRegExpChar.test(string2) ? string2.replace(reRegExpChar, "\\$&") : string2;
        }
        var kebabCase = createCompounder(function(result2, word, index2) {
          return result2 + (index2 ? "-" : "") + word.toLowerCase();
        });
        var lowerCase = createCompounder(function(result2, word, index2) {
          return result2 + (index2 ? " " : "") + word.toLowerCase();
        });
        var lowerFirst = createCaseFirst("toLowerCase");
        function pad(string2, length, chars) {
          string2 = toString2(string2);
          length = toInteger2(length);
          var strLength = length ? stringSize(string2) : 0;
          if (!length || strLength >= length) {
            return string2;
          }
          var mid = (length - strLength) / 2;
          return createPadding(nativeFloor(mid), chars) + string2 + createPadding(nativeCeil(mid), chars);
        }
        function padEnd(string2, length, chars) {
          string2 = toString2(string2);
          length = toInteger2(length);
          var strLength = length ? stringSize(string2) : 0;
          return length && strLength < length ? string2 + createPadding(length - strLength, chars) : string2;
        }
        function padStart(string2, length, chars) {
          string2 = toString2(string2);
          length = toInteger2(length);
          var strLength = length ? stringSize(string2) : 0;
          return length && strLength < length ? createPadding(length - strLength, chars) + string2 : string2;
        }
        function parseInt2(string2, radix, guard) {
          if (guard || radix == null) {
            radix = 0;
          } else if (radix) {
            radix = +radix;
          }
          return nativeParseInt(toString2(string2).replace(reTrimStart, ""), radix || 0);
        }
        function repeat(string2, n, guard) {
          if (guard ? isIterateeCall(string2, n, guard) : n === undefined$1) {
            n = 1;
          } else {
            n = toInteger2(n);
          }
          return baseRepeat(toString2(string2), n);
        }
        function replace() {
          var args = arguments, string2 = toString2(args[0]);
          return args.length < 3 ? string2 : string2.replace(args[1], args[2]);
        }
        var snakeCase = createCompounder(function(result2, word, index2) {
          return result2 + (index2 ? "_" : "") + word.toLowerCase();
        });
        function split(string2, separator, limit) {
          if (limit && typeof limit !== "number" && isIterateeCall(string2, separator, limit)) {
            separator = limit = undefined$1;
          }
          limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
          if (!limit) {
            return [];
          }
          string2 = toString2(string2);
          if (string2 && (typeof separator === "string" || separator != null && !isRegExp2(separator))) {
            separator = baseToString(separator);
            if (!separator && hasUnicode(string2)) {
              return castSlice(stringToArray(string2), 0, limit);
            }
          }
          return string2.split(separator, limit);
        }
        var startCase = createCompounder(function(result2, word, index2) {
          return result2 + (index2 ? " " : "") + upperFirst(word);
        });
        function startsWith(string2, target2, position) {
          string2 = toString2(string2);
          position = position == null ? 0 : baseClamp(toInteger2(position), 0, string2.length);
          target2 = baseToString(target2);
          return string2.slice(position, position + target2.length) == target2;
        }
        function template(string2, options, guard) {
          var settings = lodash2.templateSettings;
          if (guard && isIterateeCall(string2, options, guard)) {
            options = undefined$1;
          }
          string2 = toString2(string2);
          options = assignInWith({}, options, settings, customDefaultsAssignIn);
          var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys2(imports), importsValues = baseValues(imports, importsKeys);
          var isEscaping, isEvaluating, index2 = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
          var reDelimiters = RegExp2((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
          var sourceURL = "//# sourceURL=" + ("sourceURL" in options ? options.sourceURL : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
          string2.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
            interpolateValue || (interpolateValue = esTemplateValue);
            source += string2.slice(index2, offset).replace(reUnescapedString, escapeStringChar);
            if (escapeValue) {
              isEscaping = true;
              source += "' +\n__e(" + escapeValue + ") +\n'";
            }
            if (evaluateValue) {
              isEvaluating = true;
              source += "';\n" + evaluateValue + ";\n__p += '";
            }
            if (interpolateValue) {
              source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
            }
            index2 = offset + match.length;
            return match;
          });
          source += "';\n";
          var variable = options.variable;
          if (!variable) {
            source = "with (obj) {\n" + source + "\n}\n";
          }
          source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
          source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
          var result2 = attempt(function() {
            return Function2(importsKeys, sourceURL + "return " + source).apply(undefined$1, importsValues);
          });
          result2.source = source;
          if (isError(result2)) {
            throw result2;
          }
          return result2;
        }
        function toLower(value) {
          return toString2(value).toLowerCase();
        }
        function toUpper(value) {
          return toString2(value).toUpperCase();
        }
        function trim(string2, chars, guard) {
          string2 = toString2(string2);
          if (string2 && (guard || chars === undefined$1)) {
            return string2.replace(reTrim2, "");
          }
          if (!string2 || !(chars = baseToString(chars))) {
            return string2;
          }
          var strSymbols = stringToArray(string2), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
          return castSlice(strSymbols, start, end).join("");
        }
        function trimEnd(string2, chars, guard) {
          string2 = toString2(string2);
          if (string2 && (guard || chars === undefined$1)) {
            return string2.replace(reTrimEnd, "");
          }
          if (!string2 || !(chars = baseToString(chars))) {
            return string2;
          }
          var strSymbols = stringToArray(string2), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
          return castSlice(strSymbols, 0, end).join("");
        }
        function trimStart(string2, chars, guard) {
          string2 = toString2(string2);
          if (string2 && (guard || chars === undefined$1)) {
            return string2.replace(reTrimStart, "");
          }
          if (!string2 || !(chars = baseToString(chars))) {
            return string2;
          }
          var strSymbols = stringToArray(string2), start = charsStartIndex(strSymbols, stringToArray(chars));
          return castSlice(strSymbols, start).join("");
        }
        function truncate(string2, options) {
          var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
          if (isObject2(options)) {
            var separator = "separator" in options ? options.separator : separator;
            length = "length" in options ? toInteger2(options.length) : length;
            omission = "omission" in options ? baseToString(options.omission) : omission;
          }
          string2 = toString2(string2);
          var strLength = string2.length;
          if (hasUnicode(string2)) {
            var strSymbols = stringToArray(string2);
            strLength = strSymbols.length;
          }
          if (length >= strLength) {
            return string2;
          }
          var end = length - stringSize(omission);
          if (end < 1) {
            return omission;
          }
          var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string2.slice(0, end);
          if (separator === undefined$1) {
            return result2 + omission;
          }
          if (strSymbols) {
            end += result2.length - end;
          }
          if (isRegExp2(separator)) {
            if (string2.slice(end).search(separator)) {
              var match, substring = result2;
              if (!separator.global) {
                separator = RegExp2(separator.source, toString2(reFlags.exec(separator)) + "g");
              }
              separator.lastIndex = 0;
              while (match = separator.exec(substring)) {
                var newEnd = match.index;
              }
              result2 = result2.slice(0, newEnd === undefined$1 ? end : newEnd);
            }
          } else if (string2.indexOf(baseToString(separator), end) != end) {
            var index2 = result2.lastIndexOf(separator);
            if (index2 > -1) {
              result2 = result2.slice(0, index2);
            }
          }
          return result2 + omission;
        }
        function unescape(string2) {
          string2 = toString2(string2);
          return string2 && reHasEscapedHtml.test(string2) ? string2.replace(reEscapedHtml, unescapeHtmlChar) : string2;
        }
        var upperCase = createCompounder(function(result2, word, index2) {
          return result2 + (index2 ? " " : "") + word.toUpperCase();
        });
        var upperFirst = createCaseFirst("toUpperCase");
        function words(string2, pattern2, guard) {
          string2 = toString2(string2);
          pattern2 = guard ? undefined$1 : pattern2;
          if (pattern2 === undefined$1) {
            return hasUnicodeWord(string2) ? unicodeWords(string2) : asciiWords(string2);
          }
          return string2.match(pattern2) || [];
        }
        var attempt = baseRest(function(func, args) {
          try {
            return apply(func, undefined$1, args);
          } catch (e) {
            return isError(e) ? e : new Error2(e);
          }
        });
        var bindAll = flatRest(function(object3, methodNames) {
          arrayEach(methodNames, function(key) {
            key = toKey(key);
            baseAssignValue(object3, key, bind2(object3[key], object3));
          });
          return object3;
        });
        function cond(pairs) {
          var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
          pairs = !length ? [] : arrayMap(pairs, function(pair) {
            if (typeof pair[1] !== "function") {
              throw new TypeError2(FUNC_ERROR_TEXT2);
            }
            return [toIteratee(pair[0]), pair[1]];
          });
          return baseRest(function(args) {
            var index2 = -1;
            while (++index2 < length) {
              var pair = pairs[index2];
              if (apply(pair[0], this, args)) {
                return apply(pair[1], this, args);
              }
            }
          });
        }
        function conforms(source) {
          return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        function constant(value) {
          return function() {
            return value;
          };
        }
        function defaultTo(value, defaultValue) {
          return value == null || value !== value ? defaultValue : value;
        }
        var flow = createFlow();
        var flowRight = createFlow(true);
        function identity2(value) {
          return value;
        }
        function iteratee(func) {
          return baseIteratee(typeof func === "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        function matches2(source) {
          return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        function matchesProperty(path, srcValue) {
          return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        var method3 = baseRest(function(path, args) {
          return function(object3) {
            return baseInvoke(object3, path, args);
          };
        });
        var methodOf = baseRest(function(object3, args) {
          return function(path) {
            return baseInvoke(object3, path, args);
          };
        });
        function mixin(object3, source, options) {
          var props2 = keys2(source), methodNames = baseFunctions(source, props2);
          if (options == null && !(isObject2(source) && (methodNames.length || !props2.length))) {
            options = source;
            source = object3;
            object3 = this;
            methodNames = baseFunctions(source, keys2(source));
          }
          var chain2 = !(isObject2(options) && "chain" in options) || !!options.chain, isFunc = isFunction2(object3);
          arrayEach(methodNames, function(methodName) {
            var func = source[methodName];
            object3[methodName] = func;
            if (isFunc) {
              object3.prototype[methodName] = function() {
                var chainAll = this.__chain__;
                if (chain2 || chainAll) {
                  var result2 = object3(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                  actions.push({ func, args: arguments, thisArg: object3 });
                  result2.__chain__ = chainAll;
                  return result2;
                }
                return func.apply(object3, arrayPush([this.value()], arguments));
              };
            }
          });
          return object3;
        }
        function noConflict() {
          if (root2._ === this) {
            root2._ = oldDash;
          }
          return this;
        }
        function noop2() {
        }
        function nthArg(n) {
          n = toInteger2(n);
          return baseRest(function(args) {
            return baseNth(args, n);
          });
        }
        var over = createOver(arrayMap);
        var overEvery = createOver(arrayEvery);
        var overSome = createOver(arraySome);
        function property(path) {
          return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        function propertyOf(object3) {
          return function(path) {
            return object3 == null ? undefined$1 : baseGet(object3, path);
          };
        }
        var range2 = createRange();
        var rangeRight = createRange(true);
        function stubArray() {
          return [];
        }
        function stubFalse() {
          return false;
        }
        function stubObject() {
          return {};
        }
        function stubString() {
          return "";
        }
        function stubTrue() {
          return true;
        }
        function times(n, iteratee2) {
          n = toInteger2(n);
          if (n < 1 || n > MAX_SAFE_INTEGER) {
            return [];
          }
          var index2 = MAX_ARRAY_LENGTH, length = nativeMin2(n, MAX_ARRAY_LENGTH);
          iteratee2 = getIteratee(iteratee2);
          n -= MAX_ARRAY_LENGTH;
          var result2 = baseTimes(length, iteratee2);
          while (++index2 < n) {
            iteratee2(index2);
          }
          return result2;
        }
        function toPath(value) {
          if (isArray3(value)) {
            return arrayMap(value, toKey);
          }
          return isSymbol2(value) ? [value] : copyArray(stringToPath(toString2(value)));
        }
        function uniqueId(prefix) {
          var id2 = ++idCounter;
          return toString2(prefix) + id2;
        }
        var add2 = createMathOperation(function(augend, addend) {
          return augend + addend;
        }, 0);
        var ceil2 = createRound("ceil");
        var divide = createMathOperation(function(dividend, divisor) {
          return dividend / divisor;
        }, 1);
        var floor2 = createRound("floor");
        function max2(array3) {
          return array3 && array3.length ? baseExtremum(array3, identity2, baseGt) : undefined$1;
        }
        function maxBy(array3, iteratee2) {
          return array3 && array3.length ? baseExtremum(array3, getIteratee(iteratee2, 2), baseGt) : undefined$1;
        }
        function mean(array3) {
          return baseMean(array3, identity2);
        }
        function meanBy(array3, iteratee2) {
          return baseMean(array3, getIteratee(iteratee2, 2));
        }
        function min2(array3) {
          return array3 && array3.length ? baseExtremum(array3, identity2, baseLt) : undefined$1;
        }
        function minBy(array3, iteratee2) {
          return array3 && array3.length ? baseExtremum(array3, getIteratee(iteratee2, 2), baseLt) : undefined$1;
        }
        var multiply = createMathOperation(function(multiplier, multiplicand) {
          return multiplier * multiplicand;
        }, 1);
        var round = createRound("round");
        var subtract = createMathOperation(function(minuend, subtrahend) {
          return minuend - subtrahend;
        }, 0);
        function sum(array3) {
          return array3 && array3.length ? baseSum(array3, identity2) : 0;
        }
        function sumBy(array3, iteratee2) {
          return array3 && array3.length ? baseSum(array3, getIteratee(iteratee2, 2)) : 0;
        }
        lodash2.after = after;
        lodash2.ary = ary;
        lodash2.assign = assign2;
        lodash2.assignIn = assignIn;
        lodash2.assignInWith = assignInWith;
        lodash2.assignWith = assignWith;
        lodash2.at = at;
        lodash2.before = before;
        lodash2.bind = bind2;
        lodash2.bindAll = bindAll;
        lodash2.bindKey = bindKey;
        lodash2.castArray = castArray;
        lodash2.chain = chain;
        lodash2.chunk = chunk;
        lodash2.compact = compact;
        lodash2.concat = concat2;
        lodash2.cond = cond;
        lodash2.conforms = conforms;
        lodash2.constant = constant;
        lodash2.countBy = countBy;
        lodash2.create = create4;
        lodash2.curry = curry;
        lodash2.curryRight = curryRight;
        lodash2.debounce = debounce2;
        lodash2.defaults = defaults;
        lodash2.defaultsDeep = defaultsDeep;
        lodash2.defer = defer;
        lodash2.delay = delay;
        lodash2.difference = difference;
        lodash2.differenceBy = differenceBy;
        lodash2.differenceWith = differenceWith;
        lodash2.drop = drop;
        lodash2.dropRight = dropRight;
        lodash2.dropRightWhile = dropRightWhile;
        lodash2.dropWhile = dropWhile;
        lodash2.fill = fill;
        lodash2.filter = filter;
        lodash2.flatMap = flatMap;
        lodash2.flatMapDeep = flatMapDeep;
        lodash2.flatMapDepth = flatMapDepth;
        lodash2.flatten = flatten;
        lodash2.flattenDeep = flattenDeep;
        lodash2.flattenDepth = flattenDepth;
        lodash2.flip = flip;
        lodash2.flow = flow;
        lodash2.flowRight = flowRight;
        lodash2.fromPairs = fromPairs;
        lodash2.functions = functions;
        lodash2.functionsIn = functionsIn;
        lodash2.groupBy = groupBy;
        lodash2.initial = initial;
        lodash2.intersection = intersection;
        lodash2.intersectionBy = intersectionBy;
        lodash2.intersectionWith = intersectionWith;
        lodash2.invert = invert;
        lodash2.invertBy = invertBy;
        lodash2.invokeMap = invokeMap;
        lodash2.iteratee = iteratee;
        lodash2.keyBy = keyBy;
        lodash2.keys = keys2;
        lodash2.keysIn = keysIn;
        lodash2.map = map;
        lodash2.mapKeys = mapKeys;
        lodash2.mapValues = mapValues;
        lodash2.matches = matches2;
        lodash2.matchesProperty = matchesProperty;
        lodash2.memoize = memoize;
        lodash2.merge = merge2;
        lodash2.mergeWith = mergeWith;
        lodash2.method = method3;
        lodash2.methodOf = methodOf;
        lodash2.mixin = mixin;
        lodash2.negate = negate;
        lodash2.nthArg = nthArg;
        lodash2.omit = omit;
        lodash2.omitBy = omitBy;
        lodash2.once = once2;
        lodash2.orderBy = orderBy;
        lodash2.over = over;
        lodash2.overArgs = overArgs;
        lodash2.overEvery = overEvery;
        lodash2.overSome = overSome;
        lodash2.partial = partial;
        lodash2.partialRight = partialRight;
        lodash2.partition = partition;
        lodash2.pick = pick;
        lodash2.pickBy = pickBy;
        lodash2.property = property;
        lodash2.propertyOf = propertyOf;
        lodash2.pull = pull;
        lodash2.pullAll = pullAll;
        lodash2.pullAllBy = pullAllBy;
        lodash2.pullAllWith = pullAllWith;
        lodash2.pullAt = pullAt;
        lodash2.range = range2;
        lodash2.rangeRight = rangeRight;
        lodash2.rearg = rearg;
        lodash2.reject = reject;
        lodash2.remove = remove2;
        lodash2.rest = rest;
        lodash2.reverse = reverse;
        lodash2.sampleSize = sampleSize;
        lodash2.set = set2;
        lodash2.setWith = setWith;
        lodash2.shuffle = shuffle;
        lodash2.slice = slice;
        lodash2.sortBy = sortBy;
        lodash2.sortedUniq = sortedUniq;
        lodash2.sortedUniqBy = sortedUniqBy;
        lodash2.split = split;
        lodash2.spread = spread;
        lodash2.tail = tail;
        lodash2.take = take;
        lodash2.takeRight = takeRight;
        lodash2.takeRightWhile = takeRightWhile;
        lodash2.takeWhile = takeWhile;
        lodash2.tap = tap;
        lodash2.throttle = throttle2;
        lodash2.thru = thru;
        lodash2.toArray = toArray2;
        lodash2.toPairs = toPairs;
        lodash2.toPairsIn = toPairsIn;
        lodash2.toPath = toPath;
        lodash2.toPlainObject = toPlainObject;
        lodash2.transform = transform;
        lodash2.unary = unary;
        lodash2.union = union;
        lodash2.unionBy = unionBy;
        lodash2.unionWith = unionWith;
        lodash2.uniq = uniq;
        lodash2.uniqBy = uniqBy;
        lodash2.uniqWith = uniqWith;
        lodash2.unset = unset;
        lodash2.unzip = unzip;
        lodash2.unzipWith = unzipWith;
        lodash2.update = update2;
        lodash2.updateWith = updateWith;
        lodash2.values = values;
        lodash2.valuesIn = valuesIn;
        lodash2.without = without;
        lodash2.words = words;
        lodash2.wrap = wrap2;
        lodash2.xor = xor;
        lodash2.xorBy = xorBy;
        lodash2.xorWith = xorWith;
        lodash2.zip = zip;
        lodash2.zipObject = zipObject;
        lodash2.zipObjectDeep = zipObjectDeep;
        lodash2.zipWith = zipWith;
        lodash2.entries = toPairs;
        lodash2.entriesIn = toPairsIn;
        lodash2.extend = assignIn;
        lodash2.extendWith = assignInWith;
        mixin(lodash2, lodash2);
        lodash2.add = add2;
        lodash2.attempt = attempt;
        lodash2.camelCase = camelCase;
        lodash2.capitalize = capitalize2;
        lodash2.ceil = ceil2;
        lodash2.clamp = clamp;
        lodash2.clone = clone;
        lodash2.cloneDeep = cloneDeep;
        lodash2.cloneDeepWith = cloneDeepWith;
        lodash2.cloneWith = cloneWith;
        lodash2.conformsTo = conformsTo;
        lodash2.deburr = deburr;
        lodash2.defaultTo = defaultTo;
        lodash2.divide = divide;
        lodash2.endsWith = endsWith;
        lodash2.eq = eq;
        lodash2.escape = escape;
        lodash2.escapeRegExp = escapeRegExp;
        lodash2.every = every;
        lodash2.find = find;
        lodash2.findIndex = findIndex;
        lodash2.findKey = findKey;
        lodash2.findLast = findLast;
        lodash2.findLastIndex = findLastIndex;
        lodash2.findLastKey = findLastKey;
        lodash2.floor = floor2;
        lodash2.forEach = forEach;
        lodash2.forEachRight = forEachRight;
        lodash2.forIn = forIn;
        lodash2.forInRight = forInRight;
        lodash2.forOwn = forOwn;
        lodash2.forOwnRight = forOwnRight;
        lodash2.get = get;
        lodash2.gt = gt;
        lodash2.gte = gte;
        lodash2.has = has2;
        lodash2.hasIn = hasIn;
        lodash2.head = head;
        lodash2.identity = identity2;
        lodash2.includes = includes;
        lodash2.indexOf = indexOf;
        lodash2.inRange = inRange;
        lodash2.invoke = invoke;
        lodash2.isArguments = isArguments;
        lodash2.isArray = isArray3;
        lodash2.isArrayBuffer = isArrayBuffer;
        lodash2.isArrayLike = isArrayLike;
        lodash2.isArrayLikeObject = isArrayLikeObject;
        lodash2.isBoolean = isBoolean2;
        lodash2.isBuffer = isBuffer;
        lodash2.isDate = isDate;
        lodash2.isElement = isElement;
        lodash2.isEmpty = isEmpty;
        lodash2.isEqual = isEqual;
        lodash2.isEqualWith = isEqualWith;
        lodash2.isError = isError;
        lodash2.isFinite = isFinite2;
        lodash2.isFunction = isFunction2;
        lodash2.isInteger = isInteger;
        lodash2.isLength = isLength;
        lodash2.isMap = isMap;
        lodash2.isMatch = isMatch;
        lodash2.isMatchWith = isMatchWith;
        lodash2.isNaN = isNaN2;
        lodash2.isNative = isNative2;
        lodash2.isNil = isNil;
        lodash2.isNull = isNull;
        lodash2.isNumber = isNumber;
        lodash2.isObject = isObject2;
        lodash2.isObjectLike = isObjectLike2;
        lodash2.isPlainObject = isPlainObject2;
        lodash2.isRegExp = isRegExp2;
        lodash2.isSafeInteger = isSafeInteger;
        lodash2.isSet = isSet;
        lodash2.isString = isString;
        lodash2.isSymbol = isSymbol2;
        lodash2.isTypedArray = isTypedArray;
        lodash2.isUndefined = isUndefined;
        lodash2.isWeakMap = isWeakMap;
        lodash2.isWeakSet = isWeakSet;
        lodash2.join = join;
        lodash2.kebabCase = kebabCase;
        lodash2.last = last;
        lodash2.lastIndexOf = lastIndexOf;
        lodash2.lowerCase = lowerCase;
        lodash2.lowerFirst = lowerFirst;
        lodash2.lt = lt;
        lodash2.lte = lte;
        lodash2.max = max2;
        lodash2.maxBy = maxBy;
        lodash2.mean = mean;
        lodash2.meanBy = meanBy;
        lodash2.min = min2;
        lodash2.minBy = minBy;
        lodash2.stubArray = stubArray;
        lodash2.stubFalse = stubFalse;
        lodash2.stubObject = stubObject;
        lodash2.stubString = stubString;
        lodash2.stubTrue = stubTrue;
        lodash2.multiply = multiply;
        lodash2.nth = nth;
        lodash2.noConflict = noConflict;
        lodash2.noop = noop2;
        lodash2.now = now2;
        lodash2.pad = pad;
        lodash2.padEnd = padEnd;
        lodash2.padStart = padStart;
        lodash2.parseInt = parseInt2;
        lodash2.random = random;
        lodash2.reduce = reduce;
        lodash2.reduceRight = reduceRight;
        lodash2.repeat = repeat;
        lodash2.replace = replace;
        lodash2.result = result;
        lodash2.round = round;
        lodash2.runInContext = runInContext2;
        lodash2.sample = sample;
        lodash2.size = size;
        lodash2.snakeCase = snakeCase;
        lodash2.some = some;
        lodash2.sortedIndex = sortedIndex;
        lodash2.sortedIndexBy = sortedIndexBy;
        lodash2.sortedIndexOf = sortedIndexOf;
        lodash2.sortedLastIndex = sortedLastIndex;
        lodash2.sortedLastIndexBy = sortedLastIndexBy;
        lodash2.sortedLastIndexOf = sortedLastIndexOf;
        lodash2.startCase = startCase;
        lodash2.startsWith = startsWith;
        lodash2.subtract = subtract;
        lodash2.sum = sum;
        lodash2.sumBy = sumBy;
        lodash2.template = template;
        lodash2.times = times;
        lodash2.toFinite = toFinite;
        lodash2.toInteger = toInteger2;
        lodash2.toLength = toLength2;
        lodash2.toLower = toLower;
        lodash2.toNumber = toNumber2;
        lodash2.toSafeInteger = toSafeInteger;
        lodash2.toString = toString2;
        lodash2.toUpper = toUpper;
        lodash2.trim = trim;
        lodash2.trimEnd = trimEnd;
        lodash2.trimStart = trimStart;
        lodash2.truncate = truncate;
        lodash2.unescape = unescape;
        lodash2.uniqueId = uniqueId;
        lodash2.upperCase = upperCase;
        lodash2.upperFirst = upperFirst;
        lodash2.each = forEach;
        lodash2.eachRight = forEachRight;
        lodash2.first = head;
        mixin(lodash2, function() {
          var source = {};
          baseForOwn(lodash2, function(func, methodName) {
            if (!hasOwnProperty2.call(lodash2.prototype, methodName)) {
              source[methodName] = func;
            }
          });
          return source;
        }(), { chain: false });
        lodash2.VERSION = VERSION;
        arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
          lodash2[methodName].placeholder = lodash2;
        });
        arrayEach(["drop", "take"], function(methodName, index2) {
          LazyWrapper.prototype[methodName] = function(n) {
            n = n === undefined$1 ? 1 : nativeMax2(toInteger2(n), 0);
            var result2 = this.__filtered__ && !index2 ? new LazyWrapper(this) : this.clone();
            if (result2.__filtered__) {
              result2.__takeCount__ = nativeMin2(n, result2.__takeCount__);
            } else {
              result2.__views__.push({ size: nativeMin2(n, MAX_ARRAY_LENGTH), type: methodName + (result2.__dir__ < 0 ? "Right" : "") });
            }
            return result2;
          };
          LazyWrapper.prototype[methodName + "Right"] = function(n) {
            return this.reverse()[methodName](n).reverse();
          };
        });
        arrayEach(["filter", "map", "takeWhile"], function(methodName, index2) {
          var type2 = index2 + 1, isFilter = type2 == LAZY_FILTER_FLAG || type2 == LAZY_WHILE_FLAG;
          LazyWrapper.prototype[methodName] = function(iteratee2) {
            var result2 = this.clone();
            result2.__iteratees__.push({ iteratee: getIteratee(iteratee2, 3), type: type2 });
            result2.__filtered__ = result2.__filtered__ || isFilter;
            return result2;
          };
        });
        arrayEach(["head", "last"], function(methodName, index2) {
          var takeName = "take" + (index2 ? "Right" : "");
          LazyWrapper.prototype[methodName] = function() {
            return this[takeName](1).value()[0];
          };
        });
        arrayEach(["initial", "tail"], function(methodName, index2) {
          var dropName = "drop" + (index2 ? "" : "Right");
          LazyWrapper.prototype[methodName] = function() {
            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
          };
        });
        LazyWrapper.prototype.compact = function() {
          return this.filter(identity2);
        };
        LazyWrapper.prototype.find = function(predicate) {
          return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
          return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
          if (typeof path === "function") {
            return new LazyWrapper(this);
          }
          return this.map(function(value) {
            return baseInvoke(value, path, args);
          });
        });
        LazyWrapper.prototype.reject = function(predicate) {
          return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
          start = toInteger2(start);
          var result2 = this;
          if (result2.__filtered__ && (start > 0 || end < 0)) {
            return new LazyWrapper(result2);
          }
          if (start < 0) {
            result2 = result2.takeRight(-start);
          } else if (start) {
            result2 = result2.drop(start);
          }
          if (end !== undefined$1) {
            end = toInteger2(end);
            result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
          }
          return result2;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
          return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
          return this.take(MAX_ARRAY_LENGTH);
        };
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash2[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
          if (!lodashFunc) {
            return;
          }
          lodash2.prototype[methodName] = function() {
            var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray3(value);
            var interceptor = function interceptor2(value2) {
              var result3 = lodashFunc.apply(lodash2, arrayPush([value2], args));
              return isTaker && chainAll ? result3[0] : result3;
            };
            if (useLazy && checkIteratee && typeof iteratee2 === "function" && iteratee2.length != 1) {
              isLazy = useLazy = false;
            }
            var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
            if (!retUnwrapped && useLazy) {
              value = onlyLazy ? value : new LazyWrapper(this);
              var result2 = func.apply(value, args);
              result2.__actions__.push({ func: thru, args: [interceptor], thisArg: undefined$1 });
              return new LodashWrapper(result2, chainAll);
            }
            if (isUnwrapped && onlyLazy) {
              return func.apply(this, args);
            }
            result2 = this.thru(interceptor);
            return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
          };
        });
        arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
          var func = arrayProto2[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
          lodash2.prototype[methodName] = function() {
            var args = arguments;
            if (retUnwrapped && !this.__chain__) {
              var value = this.value();
              return func.apply(isArray3(value) ? value : [], args);
            }
            return this[chainName](function(value2) {
              return func.apply(isArray3(value2) ? value2 : [], args);
            });
          };
        });
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
          var lodashFunc = lodash2[methodName];
          if (lodashFunc) {
            var key = lodashFunc.name + "", names = realNames[key] || (realNames[key] = []);
            names.push({ name: methodName, func: lodashFunc });
          }
        });
        realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{ name: "wrapper", func: undefined$1 }];
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        lodash2.prototype.at = wrapperAt;
        lodash2.prototype.chain = wrapperChain;
        lodash2.prototype.commit = wrapperCommit;
        lodash2.prototype.next = wrapperNext;
        lodash2.prototype.plant = wrapperPlant;
        lodash2.prototype.reverse = wrapperReverse;
        lodash2.prototype.toJSON = lodash2.prototype.valueOf = lodash2.prototype.value = wrapperValue;
        lodash2.prototype.first = lodash2.prototype.head;
        if (symIterator) {
          lodash2.prototype[symIterator] = wrapperToIterator;
        }
        return lodash2;
      };
      var _ = runInContext();
      if (freeModule) {
        (freeModule.exports = _)._ = _;
        freeExports._ = _;
      } else {
        root2._ = _;
      }
    }).call(void 0);
  })(lodash, lodash.exports);
  return lodash.exports;
}
var buttonGroup = { exports: {} };
var hasRequiredButtonGroup;
function requireButtonGroup() {
  if (hasRequiredButtonGroup)
    return buttonGroup.exports;
  hasRequiredButtonGroup = 1;
  (function(module) {
    module.exports = /******/
    function(modules2) {
      var installedModules = {};
      function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
          return installedModules[moduleId].exports;
        }
        var module2 = installedModules[moduleId] = {
          /******/
          i: moduleId,
          /******/
          l: false,
          /******/
          exports: {}
          /******/
        };
        modules2[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
        module2.l = true;
        return module2.exports;
      }
      __webpack_require__.m = modules2;
      __webpack_require__.c = installedModules;
      __webpack_require__.d = function(exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
          Object.defineProperty(exports, name, { enumerable: true, get: getter });
        }
      };
      __webpack_require__.r = function(exports) {
        if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
          Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
        }
        Object.defineProperty(exports, "__esModule", { value: true });
      };
      __webpack_require__.t = function(value, mode) {
        if (mode & 1)
          value = __webpack_require__(value);
        if (mode & 8)
          return value;
        if (mode & 4 && typeof value === "object" && value && value.__esModule)
          return value;
        var ns = /* @__PURE__ */ Object.create(null);
        __webpack_require__.r(ns);
        Object.defineProperty(ns, "default", { enumerable: true, value });
        if (mode & 2 && typeof value != "string")
          for (var key in value)
            __webpack_require__.d(ns, key, (function(key2) {
              return value[key2];
            }).bind(null, key));
        return ns;
      };
      __webpack_require__.n = function(module2) {
        var getter = module2 && module2.__esModule ? (
          /******/
          function getDefault() {
            return module2["default"];
          }
        ) : (
          /******/
          function getModuleExports() {
            return module2;
          }
        );
        __webpack_require__.d(getter, "a", getter);
        return getter;
      };
      __webpack_require__.o = function(object3, property) {
        return Object.prototype.hasOwnProperty.call(object3, property);
      };
      __webpack_require__.p = "/dist/";
      return __webpack_require__(__webpack_require__.s = 97);
    }({
      /***/
      0: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.d(__webpack_exports__, "a", function() {
            return normalizeComponent2;
          });
          function normalizeComponent2(scriptExports, render6, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
            var options = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
            if (render6) {
              options.render = render6;
              options.staticRenderFns = staticRenderFns;
              options._compiled = true;
            }
            if (functionalTemplate) {
              options.functional = true;
            }
            if (scopeId) {
              options._scopeId = "data-v-" + scopeId;
            }
            var hook;
            if (moduleIdentifier) {
              hook = function(context) {
                context = context || // cached call
                this.$vnode && this.$vnode.ssrContext || // stateful
                this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
                if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
                  context = __VUE_SSR_CONTEXT__;
                }
                if (injectStyles) {
                  injectStyles.call(this, context);
                }
                if (context && context._registeredComponents) {
                  context._registeredComponents.add(moduleIdentifier);
                }
              };
              options._ssrRegister = hook;
            } else if (injectStyles) {
              hook = shadowMode ? function() {
                injectStyles.call(this, this.$root.$options.shadowRoot);
              } : injectStyles;
            }
            if (hook) {
              if (options.functional) {
                options._injectStyles = hook;
                var originalRender = options.render;
                options.render = function renderWithStyleInjection(h2, context) {
                  hook.call(context);
                  return originalRender(h2, context);
                };
              } else {
                var existing = options.beforeCreate;
                options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
              }
            }
            return {
              exports: scriptExports,
              options
            };
          }
        }
      ),
      /***/
      97: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.r(__webpack_exports__);
          var render6 = function() {
            var _vm = this;
            var _h = _vm.$createElement;
            var _c = _vm._self._c || _h;
            return _c("div", { staticClass: "el-button-group" }, [_vm._t("default")], 2);
          };
          var staticRenderFns = [];
          render6._withStripped = true;
          var button_groupvue_type_script_lang_js_ = {
            name: "ElButtonGroup"
          };
          var src_button_groupvue_type_script_lang_js_ = button_groupvue_type_script_lang_js_;
          var componentNormalizer = __webpack_require__(0);
          var component = Object(componentNormalizer[
            "a"
            /* default */
          ])(
            src_button_groupvue_type_script_lang_js_,
            render6,
            staticRenderFns,
            false,
            null,
            null,
            null
          );
          component.options.__file = "packages/button/src/button-group.vue";
          var button_group = component.exports;
          button_group.install = function(Vue2) {
            Vue2.component(button_group.name, button_group);
          };
          __webpack_exports__["default"] = button_group;
        }
      )
      /******/
    });
  })(buttonGroup);
  return buttonGroup.exports;
}
var tag = { exports: {} };
var hasRequiredTag;
function requireTag() {
  if (hasRequiredTag)
    return tag.exports;
  hasRequiredTag = 1;
  (function(module) {
    module.exports = /******/
    function(modules2) {
      var installedModules = {};
      function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
          return installedModules[moduleId].exports;
        }
        var module2 = installedModules[moduleId] = {
          /******/
          i: moduleId,
          /******/
          l: false,
          /******/
          exports: {}
          /******/
        };
        modules2[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
        module2.l = true;
        return module2.exports;
      }
      __webpack_require__.m = modules2;
      __webpack_require__.c = installedModules;
      __webpack_require__.d = function(exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
          Object.defineProperty(exports, name, { enumerable: true, get: getter });
        }
      };
      __webpack_require__.r = function(exports) {
        if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
          Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
        }
        Object.defineProperty(exports, "__esModule", { value: true });
      };
      __webpack_require__.t = function(value, mode) {
        if (mode & 1)
          value = __webpack_require__(value);
        if (mode & 8)
          return value;
        if (mode & 4 && typeof value === "object" && value && value.__esModule)
          return value;
        var ns = /* @__PURE__ */ Object.create(null);
        __webpack_require__.r(ns);
        Object.defineProperty(ns, "default", { enumerable: true, value });
        if (mode & 2 && typeof value != "string")
          for (var key in value)
            __webpack_require__.d(ns, key, (function(key2) {
              return value[key2];
            }).bind(null, key));
        return ns;
      };
      __webpack_require__.n = function(module2) {
        var getter = module2 && module2.__esModule ? (
          /******/
          function getDefault() {
            return module2["default"];
          }
        ) : (
          /******/
          function getModuleExports() {
            return module2;
          }
        );
        __webpack_require__.d(getter, "a", getter);
        return getter;
      };
      __webpack_require__.o = function(object3, property) {
        return Object.prototype.hasOwnProperty.call(object3, property);
      };
      __webpack_require__.p = "/dist/";
      return __webpack_require__(__webpack_require__.s = 132);
    }({
      /***/
      0: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.d(__webpack_exports__, "a", function() {
            return normalizeComponent2;
          });
          function normalizeComponent2(scriptExports, render6, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
            var options = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
            if (render6) {
              options.render = render6;
              options.staticRenderFns = staticRenderFns;
              options._compiled = true;
            }
            if (functionalTemplate) {
              options.functional = true;
            }
            if (scopeId) {
              options._scopeId = "data-v-" + scopeId;
            }
            var hook;
            if (moduleIdentifier) {
              hook = function(context) {
                context = context || // cached call
                this.$vnode && this.$vnode.ssrContext || // stateful
                this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
                if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
                  context = __VUE_SSR_CONTEXT__;
                }
                if (injectStyles) {
                  injectStyles.call(this, context);
                }
                if (context && context._registeredComponents) {
                  context._registeredComponents.add(moduleIdentifier);
                }
              };
              options._ssrRegister = hook;
            } else if (injectStyles) {
              hook = shadowMode ? function() {
                injectStyles.call(this, this.$root.$options.shadowRoot);
              } : injectStyles;
            }
            if (hook) {
              if (options.functional) {
                options._injectStyles = hook;
                var originalRender = options.render;
                options.render = function renderWithStyleInjection(h2, context) {
                  hook.call(context);
                  return originalRender(h2, context);
                };
              } else {
                var existing = options.beforeCreate;
                options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
              }
            }
            return {
              exports: scriptExports,
              options
            };
          }
        }
      ),
      /***/
      132: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.r(__webpack_exports__);
          var tagvue_type_script_lang_js_ = {
            name: "ElTag",
            props: {
              text: String,
              closable: Boolean,
              type: String,
              hit: Boolean,
              disableTransitions: Boolean,
              color: String,
              size: String,
              effect: {
                type: String,
                default: "light",
                validator: function validator(val) {
                  return ["dark", "light", "plain"].indexOf(val) !== -1;
                }
              }
            },
            methods: {
              handleClose: function handleClose(event) {
                event.stopPropagation();
                this.$emit("close", event);
              },
              handleClick: function handleClick(event) {
                this.$emit("click", event);
              }
            },
            computed: {
              tagSize: function tagSize() {
                return this.size || (this.$ELEMENT || {}).size;
              }
            },
            render: function render7(h2) {
              var type2 = this.type, tagSize = this.tagSize, hit = this.hit, effect = this.effect;
              var classes = ["el-tag", type2 ? "el-tag--" + type2 : "", tagSize ? "el-tag--" + tagSize : "", effect ? "el-tag--" + effect : "", hit && "is-hit"];
              var tagEl = h2(
                "span",
                {
                  "class": classes,
                  style: { backgroundColor: this.color },
                  on: {
                    "click": this.handleClick
                  }
                },
                [this.$slots.default, this.closable && h2("i", {
                  "class": "el-tag__close el-icon-close",
                  on: {
                    "click": this.handleClose
                  }
                })]
              );
              return this.disableTransitions ? tagEl : h2(
                "transition",
                {
                  attrs: { name: "el-zoom-in-center" }
                },
                [tagEl]
              );
            }
          };
          var src_tagvue_type_script_lang_js_ = tagvue_type_script_lang_js_;
          var componentNormalizer = __webpack_require__(0);
          var render6, staticRenderFns;
          var component = Object(componentNormalizer[
            "a"
            /* default */
          ])(
            src_tagvue_type_script_lang_js_,
            render6,
            staticRenderFns,
            false,
            null,
            null,
            null
          );
          component.options.__file = "packages/tag/src/tag.vue";
          var tag2 = component.exports;
          tag2.install = function(Vue2) {
            Vue2.component(tag2.name, tag2);
          };
          __webpack_exports__["default"] = tag2;
        }
      )
      /******/
    });
  })(tag);
  return tag.exports;
}
var checkboxGroup = { exports: {} };
var hasRequiredCheckboxGroup;
function requireCheckboxGroup() {
  if (hasRequiredCheckboxGroup)
    return checkboxGroup.exports;
  hasRequiredCheckboxGroup = 1;
  (function(module) {
    module.exports = /******/
    function(modules2) {
      var installedModules = {};
      function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
          return installedModules[moduleId].exports;
        }
        var module2 = installedModules[moduleId] = {
          /******/
          i: moduleId,
          /******/
          l: false,
          /******/
          exports: {}
          /******/
        };
        modules2[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
        module2.l = true;
        return module2.exports;
      }
      __webpack_require__.m = modules2;
      __webpack_require__.c = installedModules;
      __webpack_require__.d = function(exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
          Object.defineProperty(exports, name, { enumerable: true, get: getter });
        }
      };
      __webpack_require__.r = function(exports) {
        if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
          Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
        }
        Object.defineProperty(exports, "__esModule", { value: true });
      };
      __webpack_require__.t = function(value, mode) {
        if (mode & 1)
          value = __webpack_require__(value);
        if (mode & 8)
          return value;
        if (mode & 4 && typeof value === "object" && value && value.__esModule)
          return value;
        var ns = /* @__PURE__ */ Object.create(null);
        __webpack_require__.r(ns);
        Object.defineProperty(ns, "default", { enumerable: true, value });
        if (mode & 2 && typeof value != "string")
          for (var key in value)
            __webpack_require__.d(ns, key, (function(key2) {
              return value[key2];
            }).bind(null, key));
        return ns;
      };
      __webpack_require__.n = function(module2) {
        var getter = module2 && module2.__esModule ? (
          /******/
          function getDefault() {
            return module2["default"];
          }
        ) : (
          /******/
          function getModuleExports() {
            return module2;
          }
        );
        __webpack_require__.d(getter, "a", getter);
        return getter;
      };
      __webpack_require__.o = function(object3, property) {
        return Object.prototype.hasOwnProperty.call(object3, property);
      };
      __webpack_require__.p = "/dist/";
      return __webpack_require__(__webpack_require__.s = 93);
    }({
      /***/
      0: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.d(__webpack_exports__, "a", function() {
            return normalizeComponent2;
          });
          function normalizeComponent2(scriptExports, render6, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
            var options = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
            if (render6) {
              options.render = render6;
              options.staticRenderFns = staticRenderFns;
              options._compiled = true;
            }
            if (functionalTemplate) {
              options.functional = true;
            }
            if (scopeId) {
              options._scopeId = "data-v-" + scopeId;
            }
            var hook;
            if (moduleIdentifier) {
              hook = function(context) {
                context = context || // cached call
                this.$vnode && this.$vnode.ssrContext || // stateful
                this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
                if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
                  context = __VUE_SSR_CONTEXT__;
                }
                if (injectStyles) {
                  injectStyles.call(this, context);
                }
                if (context && context._registeredComponents) {
                  context._registeredComponents.add(moduleIdentifier);
                }
              };
              options._ssrRegister = hook;
            } else if (injectStyles) {
              hook = shadowMode ? function() {
                injectStyles.call(this, this.$root.$options.shadowRoot);
              } : injectStyles;
            }
            if (hook) {
              if (options.functional) {
                options._injectStyles = hook;
                var originalRender = options.render;
                options.render = function renderWithStyleInjection(h2, context) {
                  hook.call(context);
                  return originalRender(h2, context);
                };
              } else {
                var existing = options.beforeCreate;
                options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
              }
            }
            return {
              exports: scriptExports,
              options
            };
          }
        }
      ),
      /***/
      4: (
        /***/
        function(module2, exports) {
          module2.exports = requireEmitter();
        }
      ),
      /***/
      93: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.r(__webpack_exports__);
          var render6 = function() {
            var _vm = this;
            var _h = _vm.$createElement;
            var _c = _vm._self._c || _h;
            return _c(
              "div",
              {
                staticClass: "el-checkbox-group",
                attrs: { role: "group", "aria-label": "checkbox-group" }
              },
              [_vm._t("default")],
              2
            );
          };
          var staticRenderFns = [];
          render6._withStripped = true;
          var emitter_ = __webpack_require__(4);
          var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
          var checkbox_groupvue_type_script_lang_js_ = {
            name: "ElCheckboxGroup",
            componentName: "ElCheckboxGroup",
            mixins: [emitter_default.a],
            inject: {
              elFormItem: {
                default: ""
              }
            },
            props: {
              value: {},
              disabled: Boolean,
              min: Number,
              max: Number,
              size: String,
              fill: String,
              textColor: String
            },
            computed: {
              _elFormItemSize: function _elFormItemSize() {
                return (this.elFormItem || {}).elFormItemSize;
              },
              checkboxGroupSize: function checkboxGroupSize() {
                return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
              }
            },
            watch: {
              value: function value(_value) {
                this.dispatch("ElFormItem", "el.form.change", [_value]);
              }
            }
          };
          var src_checkbox_groupvue_type_script_lang_js_ = checkbox_groupvue_type_script_lang_js_;
          var componentNormalizer = __webpack_require__(0);
          var component = Object(componentNormalizer[
            "a"
            /* default */
          ])(
            src_checkbox_groupvue_type_script_lang_js_,
            render6,
            staticRenderFns,
            false,
            null,
            null,
            null
          );
          component.options.__file = "packages/checkbox/src/checkbox-group.vue";
          var checkbox_group = component.exports;
          checkbox_group.install = function(Vue2) {
            Vue2.component(checkbox_group.name, checkbox_group);
          };
          __webpack_exports__["default"] = checkbox_group;
        }
      )
      /******/
    });
  })(checkboxGroup);
  return checkboxGroup.exports;
}
var afterLeave = {};
var hasRequiredAfterLeave;
function requireAfterLeave() {
  if (hasRequiredAfterLeave)
    return afterLeave;
  hasRequiredAfterLeave = 1;
  afterLeave.__esModule = true;
  afterLeave.default = function(instance, callback) {
    var speed = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 300;
    var once2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
    if (!instance || !callback)
      throw new Error("instance & callback is required");
    var called = false;
    var afterLeaveCallback = function afterLeaveCallback2() {
      if (called)
        return;
      called = true;
      if (callback) {
        callback.apply(null, arguments);
      }
    };
    if (once2) {
      instance.$once("after-leave", afterLeaveCallback);
    } else {
      instance.$on("after-leave", afterLeaveCallback);
    }
    setTimeout(function() {
      afterLeaveCallback();
    }, speed + 100);
  };
  return afterLeave;
}
var progress = { exports: {} };
var hasRequiredProgress;
function requireProgress() {
  if (hasRequiredProgress)
    return progress.exports;
  hasRequiredProgress = 1;
  (function(module) {
    module.exports = /******/
    function(modules2) {
      var installedModules = {};
      function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
          return installedModules[moduleId].exports;
        }
        var module2 = installedModules[moduleId] = {
          /******/
          i: moduleId,
          /******/
          l: false,
          /******/
          exports: {}
          /******/
        };
        modules2[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
        module2.l = true;
        return module2.exports;
      }
      __webpack_require__.m = modules2;
      __webpack_require__.c = installedModules;
      __webpack_require__.d = function(exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
          Object.defineProperty(exports, name, { enumerable: true, get: getter });
        }
      };
      __webpack_require__.r = function(exports) {
        if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
          Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
        }
        Object.defineProperty(exports, "__esModule", { value: true });
      };
      __webpack_require__.t = function(value, mode) {
        if (mode & 1)
          value = __webpack_require__(value);
        if (mode & 8)
          return value;
        if (mode & 4 && typeof value === "object" && value && value.__esModule)
          return value;
        var ns = /* @__PURE__ */ Object.create(null);
        __webpack_require__.r(ns);
        Object.defineProperty(ns, "default", { enumerable: true, value });
        if (mode & 2 && typeof value != "string")
          for (var key in value)
            __webpack_require__.d(ns, key, (function(key2) {
              return value[key2];
            }).bind(null, key));
        return ns;
      };
      __webpack_require__.n = function(module2) {
        var getter = module2 && module2.__esModule ? (
          /******/
          function getDefault() {
            return module2["default"];
          }
        ) : (
          /******/
          function getModuleExports() {
            return module2;
          }
        );
        __webpack_require__.d(getter, "a", getter);
        return getter;
      };
      __webpack_require__.o = function(object3, property) {
        return Object.prototype.hasOwnProperty.call(object3, property);
      };
      __webpack_require__.p = "/dist/";
      return __webpack_require__(__webpack_require__.s = 104);
    }({
      /***/
      0: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.d(__webpack_exports__, "a", function() {
            return normalizeComponent2;
          });
          function normalizeComponent2(scriptExports, render6, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
            var options = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
            if (render6) {
              options.render = render6;
              options.staticRenderFns = staticRenderFns;
              options._compiled = true;
            }
            if (functionalTemplate) {
              options.functional = true;
            }
            if (scopeId) {
              options._scopeId = "data-v-" + scopeId;
            }
            var hook;
            if (moduleIdentifier) {
              hook = function(context) {
                context = context || // cached call
                this.$vnode && this.$vnode.ssrContext || // stateful
                this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
                if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
                  context = __VUE_SSR_CONTEXT__;
                }
                if (injectStyles) {
                  injectStyles.call(this, context);
                }
                if (context && context._registeredComponents) {
                  context._registeredComponents.add(moduleIdentifier);
                }
              };
              options._ssrRegister = hook;
            } else if (injectStyles) {
              hook = shadowMode ? function() {
                injectStyles.call(this, this.$root.$options.shadowRoot);
              } : injectStyles;
            }
            if (hook) {
              if (options.functional) {
                options._injectStyles = hook;
                var originalRender = options.render;
                options.render = function renderWithStyleInjection(h2, context) {
                  hook.call(context);
                  return originalRender(h2, context);
                };
              } else {
                var existing = options.beforeCreate;
                options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
              }
            }
            return {
              exports: scriptExports,
              options
            };
          }
        }
      ),
      /***/
      104: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.r(__webpack_exports__);
          var render6 = function() {
            var _vm = this;
            var _h = _vm.$createElement;
            var _c = _vm._self._c || _h;
            return _c(
              "div",
              {
                staticClass: "el-progress",
                class: [
                  "el-progress--" + _vm.type,
                  _vm.status ? "is-" + _vm.status : "",
                  {
                    "el-progress--without-text": !_vm.showText,
                    "el-progress--text-inside": _vm.textInside
                  }
                ],
                attrs: {
                  role: "progressbar",
                  "aria-valuenow": _vm.percentage,
                  "aria-valuemin": "0",
                  "aria-valuemax": "100"
                }
              },
              [
                _vm.type === "line" ? _c("div", { staticClass: "el-progress-bar" }, [
                  _c(
                    "div",
                    {
                      staticClass: "el-progress-bar__outer",
                      style: {
                        height: _vm.strokeWidth + "px",
                        backgroundColor: _vm.defineBackColor
                      }
                    },
                    [
                      _c(
                        "div",
                        {
                          staticClass: "el-progress-bar__inner",
                          style: _vm.barStyle
                        },
                        [
                          _vm.showText && _vm.textInside ? _c(
                            "div",
                            {
                              staticClass: "el-progress-bar__innerText",
                              style: { color: _vm.textColor }
                            },
                            [_vm._v(_vm._s(_vm.content))]
                          ) : _vm._e()
                        ]
                      )
                    ]
                  )
                ]) : _c(
                  "div",
                  {
                    staticClass: "el-progress-circle",
                    style: { height: _vm.width + "px", width: _vm.width + "px" }
                  },
                  [
                    _c("svg", { attrs: { viewBox: "0 0 100 100" } }, [
                      _c("path", {
                        staticClass: "el-progress-circle__track",
                        style: _vm.trailPathStyle,
                        attrs: {
                          d: _vm.trackPath,
                          stroke: _vm.defineBackColor,
                          "stroke-width": _vm.relativeStrokeWidth,
                          fill: "none"
                        }
                      }),
                      _c("path", {
                        staticClass: "el-progress-circle__path",
                        style: _vm.circlePathStyle,
                        attrs: {
                          d: _vm.trackPath,
                          stroke: _vm.stroke,
                          fill: "none",
                          "stroke-linecap": _vm.strokeLinecap,
                          "stroke-width": _vm.percentage ? _vm.relativeStrokeWidth : 0
                        }
                      })
                    ])
                  ]
                ),
                _vm.showText && !_vm.textInside ? _c(
                  "div",
                  {
                    staticClass: "el-progress__text",
                    style: {
                      fontSize: _vm.progressTextSize + "px",
                      color: _vm.textColor
                    }
                  },
                  [
                    !_vm.status ? [_vm._v(_vm._s(_vm.content))] : _c("i", { class: _vm.iconClass })
                  ],
                  2
                ) : _vm._e()
              ]
            );
          };
          var staticRenderFns = [];
          render6._withStripped = true;
          var progressvue_type_script_lang_js_ = {
            name: "ElProgress",
            props: {
              type: {
                type: String,
                default: "line",
                validator: function validator(val) {
                  return ["line", "circle", "dashboard"].indexOf(val) > -1;
                }
              },
              percentage: {
                type: Number,
                default: 0,
                required: true,
                validator: function validator(val) {
                  return val >= 0 && val <= 100;
                }
              },
              status: {
                type: String,
                validator: function validator(val) {
                  return ["success", "exception", "warning"].indexOf(val) > -1;
                }
              },
              strokeWidth: {
                type: Number,
                default: 6
              },
              strokeLinecap: {
                type: String,
                default: "round"
              },
              textInside: {
                type: Boolean,
                default: false
              },
              width: {
                type: Number,
                default: 126
              },
              showText: {
                type: Boolean,
                default: true
              },
              color: {
                type: [String, Array, Function],
                default: ""
              },
              defineBackColor: {
                type: [String, Array, Function],
                default: "#ebeef5"
              },
              textColor: {
                type: [String, Array, Function],
                default: "#606266"
              },
              format: Function
            },
            computed: {
              barStyle: function barStyle() {
                var style2 = {};
                style2.width = this.percentage + "%";
                style2.backgroundColor = this.getCurrentColor(this.percentage);
                return style2;
              },
              relativeStrokeWidth: function relativeStrokeWidth() {
                return (this.strokeWidth / this.width * 100).toFixed(1);
              },
              radius: function radius() {
                if (this.type === "circle" || this.type === "dashboard") {
                  return parseInt(50 - parseFloat(this.relativeStrokeWidth) / 2, 10);
                } else {
                  return 0;
                }
              },
              trackPath: function trackPath() {
                var radius = this.radius;
                var isDashboard = this.type === "dashboard";
                return "\n        M 50 50\n        m 0 " + (isDashboard ? "" : "-") + radius + "\n        a " + radius + " " + radius + " 0 1 1 0 " + (isDashboard ? "-" : "") + radius * 2 + "\n        a " + radius + " " + radius + " 0 1 1 0 " + (isDashboard ? "" : "-") + radius * 2 + "\n        ";
              },
              perimeter: function perimeter() {
                return 2 * Math.PI * this.radius;
              },
              rate: function rate() {
                return this.type === "dashboard" ? 0.75 : 1;
              },
              strokeDashoffset: function strokeDashoffset() {
                var offset = -1 * this.perimeter * (1 - this.rate) / 2;
                return offset + "px";
              },
              trailPathStyle: function trailPathStyle() {
                return {
                  strokeDasharray: this.perimeter * this.rate + "px, " + this.perimeter + "px",
                  strokeDashoffset: this.strokeDashoffset
                };
              },
              circlePathStyle: function circlePathStyle() {
                return {
                  strokeDasharray: this.perimeter * this.rate * (this.percentage / 100) + "px, " + this.perimeter + "px",
                  strokeDashoffset: this.strokeDashoffset,
                  transition: "stroke-dasharray 0.6s ease 0s, stroke 0.6s ease"
                };
              },
              stroke: function stroke() {
                var ret = void 0;
                if (this.color) {
                  ret = this.getCurrentColor(this.percentage);
                } else {
                  switch (this.status) {
                    case "success":
                      ret = "#13ce66";
                      break;
                    case "exception":
                      ret = "#ff4949";
                      break;
                    case "warning":
                      ret = "#e6a23c";
                      break;
                    default:
                      ret = "#20a0ff";
                  }
                }
                return ret;
              },
              iconClass: function iconClass() {
                if (this.status === "warning") {
                  return "el-icon-warning";
                }
                if (this.type === "line") {
                  return this.status === "success" ? "el-icon-circle-check" : "el-icon-circle-close";
                } else {
                  return this.status === "success" ? "el-icon-check" : "el-icon-close";
                }
              },
              progressTextSize: function progressTextSize() {
                return this.type === "line" ? 12 + this.strokeWidth * 0.4 : this.width * 0.111111 + 2;
              },
              content: function content() {
                if (typeof this.format === "function") {
                  return this.format(this.percentage) || "";
                } else {
                  return this.percentage + "%";
                }
              }
            },
            methods: {
              getCurrentColor: function getCurrentColor(percentage) {
                if (typeof this.color === "function") {
                  return this.color(percentage);
                } else if (typeof this.color === "string") {
                  return this.color;
                } else {
                  return this.getLevelColor(percentage);
                }
              },
              getLevelColor: function getLevelColor(percentage) {
                var colorArray = this.getColorArray().sort(function(a, b) {
                  return a.percentage - b.percentage;
                });
                for (var i = 0; i < colorArray.length; i++) {
                  if (colorArray[i].percentage > percentage) {
                    return colorArray[i].color;
                  }
                }
                return colorArray[colorArray.length - 1].color;
              },
              getColorArray: function getColorArray() {
                var color = this.color;
                var span = 100 / color.length;
                return color.map(function(seriesColor, index2) {
                  if (typeof seriesColor === "string") {
                    return {
                      color: seriesColor,
                      percentage: (index2 + 1) * span
                    };
                  }
                  return seriesColor;
                });
              }
            }
          };
          var src_progressvue_type_script_lang_js_ = progressvue_type_script_lang_js_;
          var componentNormalizer = __webpack_require__(0);
          var component = Object(componentNormalizer[
            "a"
            /* default */
          ])(
            src_progressvue_type_script_lang_js_,
            render6,
            staticRenderFns,
            false,
            null,
            null,
            null
          );
          component.options.__file = "packages/progress/src/progress.vue";
          var progress2 = component.exports;
          progress2.install = function(Vue2) {
            Vue2.component(progress2.name, progress2);
          };
          __webpack_exports__["default"] = progress2;
        }
      )
      /******/
    });
  })(progress);
  return progress.exports;
}
var ariaUtils = {};
var hasRequiredAriaUtils;
function requireAriaUtils() {
  if (hasRequiredAriaUtils)
    return ariaUtils;
  hasRequiredAriaUtils = 1;
  ariaUtils.__esModule = true;
  var aria = aria || {};
  aria.Utils = aria.Utils || {};
  aria.Utils.focusFirstDescendant = function(element) {
    for (var i = 0; i < element.childNodes.length; i++) {
      var child = element.childNodes[i];
      if (aria.Utils.attemptFocus(child) || aria.Utils.focusFirstDescendant(child)) {
        return true;
      }
    }
    return false;
  };
  aria.Utils.focusLastDescendant = function(element) {
    for (var i = element.childNodes.length - 1; i >= 0; i--) {
      var child = element.childNodes[i];
      if (aria.Utils.attemptFocus(child) || aria.Utils.focusLastDescendant(child)) {
        return true;
      }
    }
    return false;
  };
  aria.Utils.attemptFocus = function(element) {
    if (!aria.Utils.isFocusable(element)) {
      return false;
    }
    aria.Utils.IgnoreUtilFocusChanges = true;
    try {
      element.focus();
    } catch (e) {
    }
    aria.Utils.IgnoreUtilFocusChanges = false;
    return document.activeElement === element;
  };
  aria.Utils.isFocusable = function(element) {
    if (element.tabIndex > 0 || element.tabIndex === 0 && element.getAttribute("tabIndex") !== null) {
      return true;
    }
    if (element.disabled) {
      return false;
    }
    switch (element.nodeName) {
      case "A":
        return !!element.href && element.rel !== "ignore";
      case "INPUT":
        return element.type !== "hidden" && element.type !== "file";
      case "BUTTON":
      case "SELECT":
      case "TEXTAREA":
        return true;
      default:
        return false;
    }
  };
  aria.Utils.triggerEvent = function(elm, name) {
    var eventName = void 0;
    if (/^mouse|click/.test(name)) {
      eventName = "MouseEvents";
    } else if (/^key/.test(name)) {
      eventName = "KeyboardEvent";
    } else {
      eventName = "HTMLEvents";
    }
    var evt = document.createEvent(eventName);
    for (var _len = arguments.length, opts = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      opts[_key - 2] = arguments[_key];
    }
    evt.initEvent.apply(evt, [name].concat(opts));
    elm.dispatchEvent ? elm.dispatchEvent(evt) : elm.fireEvent("on" + name, evt);
    return elm;
  };
  aria.Utils.keys = {
    tab: 9,
    enter: 13,
    space: 32,
    left: 37,
    up: 38,
    right: 39,
    down: 40,
    esc: 27
  };
  ariaUtils.default = aria.Utils;
  return ariaUtils;
}
var select = { exports: {} };
var hasRequiredSelect;
function requireSelect() {
  if (hasRequiredSelect)
    return select.exports;
  hasRequiredSelect = 1;
  (function(module) {
    module.exports = /******/
    function(modules2) {
      var installedModules = {};
      function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
          return installedModules[moduleId].exports;
        }
        var module2 = installedModules[moduleId] = {
          /******/
          i: moduleId,
          /******/
          l: false,
          /******/
          exports: {}
          /******/
        };
        modules2[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
        module2.l = true;
        return module2.exports;
      }
      __webpack_require__.m = modules2;
      __webpack_require__.c = installedModules;
      __webpack_require__.d = function(exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
          Object.defineProperty(exports, name, { enumerable: true, get: getter });
        }
      };
      __webpack_require__.r = function(exports) {
        if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
          Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
        }
        Object.defineProperty(exports, "__esModule", { value: true });
      };
      __webpack_require__.t = function(value, mode) {
        if (mode & 1)
          value = __webpack_require__(value);
        if (mode & 8)
          return value;
        if (mode & 4 && typeof value === "object" && value && value.__esModule)
          return value;
        var ns = /* @__PURE__ */ Object.create(null);
        __webpack_require__.r(ns);
        Object.defineProperty(ns, "default", { enumerable: true, value });
        if (mode & 2 && typeof value != "string")
          for (var key in value)
            __webpack_require__.d(ns, key, (function(key2) {
              return value[key2];
            }).bind(null, key));
        return ns;
      };
      __webpack_require__.n = function(module2) {
        var getter = module2 && module2.__esModule ? (
          /******/
          function getDefault() {
            return module2["default"];
          }
        ) : (
          /******/
          function getModuleExports() {
            return module2;
          }
        );
        __webpack_require__.d(getter, "a", getter);
        return getter;
      };
      __webpack_require__.o = function(object3, property) {
        return Object.prototype.hasOwnProperty.call(object3, property);
      };
      __webpack_require__.p = "/dist/";
      return __webpack_require__(__webpack_require__.s = 62);
    }({
      /***/
      0: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.d(__webpack_exports__, "a", function() {
            return normalizeComponent2;
          });
          function normalizeComponent2(scriptExports, render6, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
            var options = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
            if (render6) {
              options.render = render6;
              options.staticRenderFns = staticRenderFns;
              options._compiled = true;
            }
            if (functionalTemplate) {
              options.functional = true;
            }
            if (scopeId) {
              options._scopeId = "data-v-" + scopeId;
            }
            var hook;
            if (moduleIdentifier) {
              hook = function(context) {
                context = context || // cached call
                this.$vnode && this.$vnode.ssrContext || // stateful
                this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
                if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
                  context = __VUE_SSR_CONTEXT__;
                }
                if (injectStyles) {
                  injectStyles.call(this, context);
                }
                if (context && context._registeredComponents) {
                  context._registeredComponents.add(moduleIdentifier);
                }
              };
              options._ssrRegister = hook;
            } else if (injectStyles) {
              hook = shadowMode ? function() {
                injectStyles.call(this, this.$root.$options.shadowRoot);
              } : injectStyles;
            }
            if (hook) {
              if (options.functional) {
                options._injectStyles = hook;
                var originalRender = options.render;
                options.render = function renderWithStyleInjection(h2, context) {
                  hook.call(context);
                  return originalRender(h2, context);
                };
              } else {
                var existing = options.beforeCreate;
                options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
              }
            }
            return {
              exports: scriptExports,
              options
            };
          }
        }
      ),
      /***/
      10: (
        /***/
        function(module2, exports) {
          module2.exports = requireInput();
        }
      ),
      /***/
      12: (
        /***/
        function(module2, exports) {
          module2.exports = requireClickoutside();
        }
      ),
      /***/
      15: (
        /***/
        function(module2, exports) {
          module2.exports = requireScrollbar();
        }
      ),
      /***/
      16: (
        /***/
        function(module2, exports) {
          module2.exports = requireResizeEvent();
        }
      ),
      /***/
      19: (
        /***/
        function(module2, exports) {
          module2.exports = requireDebounce();
        }
      ),
      /***/
      21: (
        /***/
        function(module2, exports) {
          module2.exports = requireShared();
        }
      ),
      /***/
      22: (
        /***/
        function(module2, exports) {
          module2.exports = requireFocus();
        }
      ),
      /***/
      3: (
        /***/
        function(module2, exports) {
          module2.exports = requireUtil();
        }
      ),
      /***/
      31: (
        /***/
        function(module2, exports) {
          module2.exports = requireScrollIntoView();
        }
      ),
      /***/
      33: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          var render6 = function() {
            var _vm = this;
            var _h = _vm.$createElement;
            var _c = _vm._self._c || _h;
            return _c(
              "li",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.visible,
                    expression: "visible"
                  }
                ],
                staticClass: "el-select-dropdown__item",
                class: {
                  selected: _vm.itemSelected,
                  "is-disabled": _vm.disabled || _vm.groupDisabled || _vm.limitReached,
                  hover: _vm.hover
                },
                on: {
                  mouseenter: _vm.hoverItem,
                  click: function($event) {
                    $event.stopPropagation();
                    return _vm.selectOptionClick($event);
                  }
                }
              },
              [_vm._t("default", [_c("span", [_vm._v(_vm._s(_vm.currentLabel))])])],
              2
            );
          };
          var staticRenderFns = [];
          render6._withStripped = true;
          var emitter_ = __webpack_require__(4);
          var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
          var util_ = __webpack_require__(3);
          var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
            return typeof obj;
          } : function(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
          var optionvue_type_script_lang_js_ = {
            mixins: [emitter_default.a],
            name: "ElOption",
            componentName: "ElOption",
            inject: ["select"],
            props: {
              value: {
                required: true
              },
              label: [String, Number],
              created: Boolean,
              disabled: {
                type: Boolean,
                default: false
              }
            },
            data: function data() {
              return {
                index: -1,
                groupDisabled: false,
                visible: true,
                hitState: false,
                hover: false
              };
            },
            computed: {
              isObject: function isObject2() {
                return Object.prototype.toString.call(this.value).toLowerCase() === "[object object]";
              },
              currentLabel: function currentLabel() {
                return this.label || (this.isObject ? "" : this.value);
              },
              currentValue: function currentValue() {
                return this.value || this.label || "";
              },
              itemSelected: function itemSelected() {
                if (!this.select.multiple) {
                  return this.isEqual(this.value, this.select.value);
                } else {
                  return this.contains(this.select.value, this.value);
                }
              },
              limitReached: function limitReached() {
                if (this.select.multiple) {
                  return !this.itemSelected && (this.select.value || []).length >= this.select.multipleLimit && this.select.multipleLimit > 0;
                } else {
                  return false;
                }
              }
            },
            watch: {
              currentLabel: function currentLabel() {
                if (!this.created && !this.select.remote)
                  this.dispatch("ElSelect", "setSelected");
              },
              value: function value(val, oldVal) {
                var _select = this.select, remote = _select.remote, valueKey = _select.valueKey;
                if (!this.created && !remote) {
                  if (valueKey && (typeof val === "undefined" ? "undefined" : _typeof2(val)) === "object" && (typeof oldVal === "undefined" ? "undefined" : _typeof2(oldVal)) === "object" && val[valueKey] === oldVal[valueKey]) {
                    return;
                  }
                  this.dispatch("ElSelect", "setSelected");
                }
              }
            },
            methods: {
              isEqual: function isEqual(a, b) {
                if (!this.isObject) {
                  return a === b;
                } else {
                  var valueKey = this.select.valueKey;
                  return Object(util_["getValueByPath"])(a, valueKey) === Object(util_["getValueByPath"])(b, valueKey);
                }
              },
              contains: function contains() {
                var arr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
                var target2 = arguments[1];
                if (!this.isObject) {
                  return arr && arr.indexOf(target2) > -1;
                } else {
                  var valueKey = this.select.valueKey;
                  return arr && arr.some(function(item) {
                    return Object(util_["getValueByPath"])(item, valueKey) === Object(util_["getValueByPath"])(target2, valueKey);
                  });
                }
              },
              handleGroupDisabled: function handleGroupDisabled(val) {
                this.groupDisabled = val;
              },
              hoverItem: function hoverItem() {
                if (!this.disabled && !this.groupDisabled) {
                  this.select.hoverIndex = this.select.options.indexOf(this);
                }
              },
              selectOptionClick: function selectOptionClick() {
                if (this.disabled !== true && this.groupDisabled !== true) {
                  this.dispatch("ElSelect", "handleOptionClick", [this, true]);
                }
              },
              queryChange: function queryChange(query2) {
                this.visible = new RegExp(Object(util_["escapeRegexpString"])(query2), "i").test(this.currentLabel) || this.created;
                if (!this.visible) {
                  this.select.filteredOptionsCount--;
                }
              }
            },
            created: function created() {
              this.select.options.push(this);
              this.select.cachedOptions.push(this);
              this.select.optionsCount++;
              this.select.filteredOptionsCount++;
              this.$on("queryChange", this.queryChange);
              this.$on("handleGroupDisabled", this.handleGroupDisabled);
            },
            beforeDestroy: function beforeDestroy2() {
              var _select2 = this.select, selected = _select2.selected, multiple = _select2.multiple;
              var selectedOptions = multiple ? selected : [selected];
              var index2 = this.select.cachedOptions.indexOf(this);
              var selectedIndex = selectedOptions.indexOf(this);
              if (index2 > -1 && selectedIndex < 0) {
                this.select.cachedOptions.splice(index2, 1);
              }
              this.select.onOptionDestroy(this.select.options.indexOf(this));
            }
          };
          var src_optionvue_type_script_lang_js_ = optionvue_type_script_lang_js_;
          var componentNormalizer = __webpack_require__(0);
          var component = Object(componentNormalizer[
            "a"
            /* default */
          ])(
            src_optionvue_type_script_lang_js_,
            render6,
            staticRenderFns,
            false,
            null,
            null,
            null
          );
          component.options.__file = "packages/select/src/option.vue";
          __webpack_exports__["a"] = component.exports;
        }
      ),
      /***/
      38: (
        /***/
        function(module2, exports) {
          module2.exports = requireTag();
        }
      ),
      /***/
      4: (
        /***/
        function(module2, exports) {
          module2.exports = requireEmitter();
        }
      ),
      /***/
      5: (
        /***/
        function(module2, exports) {
          module2.exports = requireVuePopper();
        }
      ),
      /***/
      6: (
        /***/
        function(module2, exports) {
          module2.exports = requireLocale();
        }
      ),
      /***/
      62: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.r(__webpack_exports__);
          var render6 = function() {
            var _vm = this;
            var _h = _vm.$createElement;
            var _c = _vm._self._c || _h;
            return _c(
              "div",
              {
                directives: [
                  {
                    name: "clickoutside",
                    rawName: "v-clickoutside",
                    value: _vm.handleClose,
                    expression: "handleClose"
                  }
                ],
                staticClass: "el-select",
                class: [_vm.selectSize ? "el-select--" + _vm.selectSize : ""],
                on: {
                  click: function($event) {
                    $event.stopPropagation();
                    return _vm.toggleMenu($event);
                  }
                }
              },
              [
                _vm.multiple ? _c(
                  "div",
                  {
                    ref: "tags",
                    staticClass: "el-select__tags",
                    style: { "max-width": _vm.inputWidth - 32 + "px", width: "100%" }
                  },
                  [
                    _vm.collapseTags && _vm.selected.length ? _c(
                      "span",
                      [
                        _c(
                          "el-tag",
                          {
                            attrs: {
                              closable: !_vm.selectDisabled,
                              size: _vm.collapseTagSize,
                              hit: _vm.selected[0].hitState,
                              type: "info",
                              "disable-transitions": ""
                            },
                            on: {
                              close: function($event) {
                                _vm.deleteTag($event, _vm.selected[0]);
                              }
                            }
                          },
                          [
                            _c("span", { staticClass: "el-select__tags-text" }, [
                              _vm._v(_vm._s(_vm.selected[0].currentLabel))
                            ])
                          ]
                        ),
                        _vm.selected.length > 1 ? _c(
                          "el-tag",
                          {
                            attrs: {
                              closable: false,
                              size: _vm.collapseTagSize,
                              type: "info",
                              "disable-transitions": ""
                            }
                          },
                          [
                            _c(
                              "span",
                              { staticClass: "el-select__tags-text" },
                              [_vm._v("+ " + _vm._s(_vm.selected.length - 1))]
                            )
                          ]
                        ) : _vm._e()
                      ],
                      1
                    ) : _vm._e(),
                    !_vm.collapseTags ? _c(
                      "transition-group",
                      { on: { "after-leave": _vm.resetInputHeight } },
                      _vm._l(_vm.selected, function(item) {
                        return _c(
                          "el-tag",
                          {
                            key: _vm.getValueKey(item),
                            attrs: {
                              closable: !_vm.selectDisabled,
                              size: _vm.collapseTagSize,
                              hit: item.hitState,
                              type: "info",
                              "disable-transitions": ""
                            },
                            on: {
                              close: function($event) {
                                _vm.deleteTag($event, item);
                              }
                            }
                          },
                          [
                            _c("span", { staticClass: "el-select__tags-text" }, [
                              _vm._v(_vm._s(item.currentLabel))
                            ])
                          ]
                        );
                      }),
                      1
                    ) : _vm._e(),
                    _vm.filterable ? _c("input", {
                      directives: [
                        {
                          name: "model",
                          rawName: "v-model",
                          value: _vm.query,
                          expression: "query"
                        }
                      ],
                      ref: "input",
                      staticClass: "el-select__input",
                      class: [_vm.selectSize ? "is-" + _vm.selectSize : ""],
                      style: {
                        "flex-grow": "1",
                        width: _vm.inputLength / (_vm.inputWidth - 32) + "%",
                        "max-width": _vm.inputWidth - 42 + "px"
                      },
                      attrs: {
                        type: "text",
                        disabled: _vm.selectDisabled,
                        autocomplete: _vm.autoComplete || _vm.autocomplete
                      },
                      domProps: { value: _vm.query },
                      on: {
                        focus: _vm.handleFocus,
                        blur: function($event) {
                          _vm.softFocus = false;
                        },
                        keyup: _vm.managePlaceholder,
                        keydown: [
                          _vm.resetInputState,
                          function($event) {
                            if (!("button" in $event) && _vm._k($event.keyCode, "down", 40, $event.key, [
                              "Down",
                              "ArrowDown"
                            ])) {
                              return null;
                            }
                            $event.preventDefault();
                            _vm.handleNavigate("next");
                          },
                          function($event) {
                            if (!("button" in $event) && _vm._k($event.keyCode, "up", 38, $event.key, [
                              "Up",
                              "ArrowUp"
                            ])) {
                              return null;
                            }
                            $event.preventDefault();
                            _vm.handleNavigate("prev");
                          },
                          function($event) {
                            if (!("button" in $event) && _vm._k(
                              $event.keyCode,
                              "enter",
                              13,
                              $event.key,
                              "Enter"
                            )) {
                              return null;
                            }
                            $event.preventDefault();
                            return _vm.selectOption($event);
                          },
                          function($event) {
                            if (!("button" in $event) && _vm._k($event.keyCode, "esc", 27, $event.key, [
                              "Esc",
                              "Escape"
                            ])) {
                              return null;
                            }
                            $event.stopPropagation();
                            $event.preventDefault();
                            _vm.visible = false;
                          },
                          function($event) {
                            if (!("button" in $event) && _vm._k(
                              $event.keyCode,
                              "delete",
                              [8, 46],
                              $event.key,
                              ["Backspace", "Delete", "Del"]
                            )) {
                              return null;
                            }
                            return _vm.deletePrevTag($event);
                          },
                          function($event) {
                            if (!("button" in $event) && _vm._k($event.keyCode, "tab", 9, $event.key, "Tab")) {
                              return null;
                            }
                            _vm.visible = false;
                          }
                        ],
                        compositionstart: _vm.handleComposition,
                        compositionupdate: _vm.handleComposition,
                        compositionend: _vm.handleComposition,
                        input: [
                          function($event) {
                            if ($event.target.composing) {
                              return;
                            }
                            _vm.query = $event.target.value;
                          },
                          _vm.debouncedQueryChange
                        ]
                      }
                    }) : _vm._e()
                  ],
                  1
                ) : _vm._e(),
                _c(
                  "el-input",
                  {
                    ref: "reference",
                    class: { "is-focus": _vm.visible },
                    attrs: {
                      type: "text",
                      placeholder: _vm.currentPlaceholder,
                      name: _vm.name,
                      id: _vm.id,
                      autocomplete: _vm.autoComplete || _vm.autocomplete,
                      size: _vm.selectSize,
                      disabled: _vm.selectDisabled,
                      readonly: _vm.readonly,
                      "validate-event": false,
                      tabindex: _vm.multiple && _vm.filterable ? "-1" : null
                    },
                    on: {
                      focus: _vm.handleFocus,
                      blur: _vm.handleBlur,
                      input: _vm.debouncedOnInputChange,
                      compositionstart: _vm.handleComposition,
                      compositionupdate: _vm.handleComposition,
                      compositionend: _vm.handleComposition
                    },
                    nativeOn: {
                      keydown: [
                        function($event) {
                          if (!("button" in $event) && _vm._k($event.keyCode, "down", 40, $event.key, [
                            "Down",
                            "ArrowDown"
                          ])) {
                            return null;
                          }
                          $event.stopPropagation();
                          $event.preventDefault();
                          _vm.handleNavigate("next");
                        },
                        function($event) {
                          if (!("button" in $event) && _vm._k($event.keyCode, "up", 38, $event.key, [
                            "Up",
                            "ArrowUp"
                          ])) {
                            return null;
                          }
                          $event.stopPropagation();
                          $event.preventDefault();
                          _vm.handleNavigate("prev");
                        },
                        function($event) {
                          if (!("button" in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                            return null;
                          }
                          $event.preventDefault();
                          return _vm.selectOption($event);
                        },
                        function($event) {
                          if (!("button" in $event) && _vm._k($event.keyCode, "esc", 27, $event.key, [
                            "Esc",
                            "Escape"
                          ])) {
                            return null;
                          }
                          $event.stopPropagation();
                          $event.preventDefault();
                          _vm.visible = false;
                        },
                        function($event) {
                          if (!("button" in $event) && _vm._k($event.keyCode, "tab", 9, $event.key, "Tab")) {
                            return null;
                          }
                          _vm.visible = false;
                        }
                      ],
                      mouseenter: function($event) {
                        _vm.inputHovering = true;
                      },
                      mouseleave: function($event) {
                        _vm.inputHovering = false;
                      }
                    },
                    model: {
                      value: _vm.selectedLabel,
                      callback: function($$v) {
                        _vm.selectedLabel = $$v;
                      },
                      expression: "selectedLabel"
                    }
                  },
                  [
                    _vm.$slots.prefix ? _c("template", { slot: "prefix" }, [_vm._t("prefix")], 2) : _vm._e(),
                    _c("template", { slot: "suffix" }, [
                      _c("i", {
                        directives: [
                          {
                            name: "show",
                            rawName: "v-show",
                            value: !_vm.showClose,
                            expression: "!showClose"
                          }
                        ],
                        class: [
                          "el-select__caret",
                          "el-input__icon",
                          "el-icon-" + _vm.iconClass
                        ]
                      }),
                      _vm.showClose ? _c("i", {
                        staticClass: "el-select__caret el-input__icon el-icon-circle-close",
                        on: { click: _vm.handleClearClick }
                      }) : _vm._e()
                    ])
                  ],
                  2
                ),
                _c(
                  "transition",
                  {
                    attrs: { name: "el-zoom-in-top" },
                    on: {
                      "before-enter": _vm.handleMenuEnter,
                      "after-leave": _vm.doDestroy
                    }
                  },
                  [
                    _c(
                      "el-select-menu",
                      {
                        directives: [
                          {
                            name: "show",
                            rawName: "v-show",
                            value: _vm.visible && _vm.emptyText !== false,
                            expression: "visible && emptyText !== false"
                          }
                        ],
                        ref: "popper",
                        attrs: { "append-to-body": _vm.popperAppendToBody }
                      },
                      [
                        _c(
                          "el-scrollbar",
                          {
                            directives: [
                              {
                                name: "show",
                                rawName: "v-show",
                                value: _vm.options.length > 0 && !_vm.loading,
                                expression: "options.length > 0 && !loading"
                              }
                            ],
                            ref: "scrollbar",
                            class: {
                              "is-empty": !_vm.allowCreate && _vm.query && _vm.filteredOptionsCount === 0
                            },
                            attrs: {
                              tag: "ul",
                              "wrap-class": "el-select-dropdown__wrap",
                              "view-class": "el-select-dropdown__list"
                            }
                          },
                          [
                            _vm.showNewOption ? _c("el-option", {
                              attrs: { value: _vm.query, created: "" }
                            }) : _vm._e(),
                            _vm._t("default")
                          ],
                          2
                        ),
                        _vm.emptyText && (!_vm.allowCreate || _vm.loading || _vm.allowCreate && _vm.options.length === 0) ? [
                          _vm.$slots.empty ? _vm._t("empty") : _c("p", { staticClass: "el-select-dropdown__empty" }, [
                            _vm._v(
                              "\n          " + _vm._s(_vm.emptyText) + "\n        "
                            )
                          ])
                        ] : _vm._e()
                      ],
                      2
                    )
                  ],
                  1
                )
              ],
              1
            );
          };
          var staticRenderFns = [];
          render6._withStripped = true;
          var emitter_ = __webpack_require__(4);
          var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
          var focus_ = __webpack_require__(22);
          var focus_default = /* @__PURE__ */ __webpack_require__.n(focus_);
          var locale_ = __webpack_require__(6);
          var locale_default = /* @__PURE__ */ __webpack_require__.n(locale_);
          var input_ = __webpack_require__(10);
          var input_default = /* @__PURE__ */ __webpack_require__.n(input_);
          var select_dropdownvue_type_template_id_06828748_render = function() {
            var _vm = this;
            var _h = _vm.$createElement;
            var _c = _vm._self._c || _h;
            return _c(
              "div",
              {
                staticClass: "el-select-dropdown el-popper",
                class: [{ "is-multiple": _vm.$parent.multiple }, _vm.popperClass],
                style: { minWidth: _vm.minWidth }
              },
              [_vm._t("default")],
              2
            );
          };
          var select_dropdownvue_type_template_id_06828748_staticRenderFns = [];
          select_dropdownvue_type_template_id_06828748_render._withStripped = true;
          var vue_popper_ = __webpack_require__(5);
          var vue_popper_default = /* @__PURE__ */ __webpack_require__.n(vue_popper_);
          var select_dropdownvue_type_script_lang_js_ = {
            name: "ElSelectDropdown",
            componentName: "ElSelectDropdown",
            mixins: [vue_popper_default.a],
            props: {
              placement: {
                default: "bottom-start"
              },
              boundariesPadding: {
                default: 0
              },
              popperOptions: {
                default: function _default2() {
                  return {
                    gpuAcceleration: false
                  };
                }
              },
              visibleArrow: {
                default: true
              },
              appendToBody: {
                type: Boolean,
                default: true
              }
            },
            data: function data() {
              return {
                minWidth: ""
              };
            },
            computed: {
              popperClass: function popperClass() {
                return this.$parent.popperClass;
              }
            },
            watch: {
              "$parent.inputWidth": function $parentInputWidth() {
                this.minWidth = this.$parent.$el.getBoundingClientRect().width + "px";
              }
            },
            mounted: function mounted2() {
              var _this = this;
              this.referenceElm = this.$parent.$refs.reference.$el;
              this.$parent.popperElm = this.popperElm = this.$el;
              this.$on("updatePopper", function() {
                if (_this.$parent.visible)
                  _this.updatePopper();
              });
              this.$on("destroyPopper", this.destroyPopper);
            }
          };
          var src_select_dropdownvue_type_script_lang_js_ = select_dropdownvue_type_script_lang_js_;
          var componentNormalizer = __webpack_require__(0);
          var component = Object(componentNormalizer[
            "a"
            /* default */
          ])(
            src_select_dropdownvue_type_script_lang_js_,
            select_dropdownvue_type_template_id_06828748_render,
            select_dropdownvue_type_template_id_06828748_staticRenderFns,
            false,
            null,
            null,
            null
          );
          component.options.__file = "packages/select/src/select-dropdown.vue";
          var select_dropdown = component.exports;
          var src_option = __webpack_require__(33);
          var tag_ = __webpack_require__(38);
          var tag_default = /* @__PURE__ */ __webpack_require__.n(tag_);
          var scrollbar_ = __webpack_require__(15);
          var scrollbar_default = /* @__PURE__ */ __webpack_require__.n(scrollbar_);
          var debounce_ = __webpack_require__(19);
          var debounce_default = /* @__PURE__ */ __webpack_require__.n(debounce_);
          var clickoutside_ = __webpack_require__(12);
          var clickoutside_default = /* @__PURE__ */ __webpack_require__.n(clickoutside_);
          var resize_event_ = __webpack_require__(16);
          var scroll_into_view_ = __webpack_require__(31);
          var scroll_into_view_default = /* @__PURE__ */ __webpack_require__.n(scroll_into_view_);
          var util_ = __webpack_require__(3);
          var navigation_mixin = {
            data: function data() {
              return {
                hoverOption: -1
              };
            },
            computed: {
              optionsAllDisabled: function optionsAllDisabled() {
                return this.options.filter(function(option2) {
                  return option2.visible;
                }).every(function(option2) {
                  return option2.disabled;
                });
              }
            },
            watch: {
              hoverIndex: function hoverIndex(val) {
                var _this = this;
                if (typeof val === "number" && val > -1) {
                  this.hoverOption = this.options[val] || {};
                }
                this.options.forEach(function(option2) {
                  option2.hover = _this.hoverOption === option2;
                });
              }
            },
            methods: {
              navigateOptions: function navigateOptions(direction) {
                var _this2 = this;
                if (!this.visible) {
                  this.visible = true;
                  return;
                }
                if (this.options.length === 0 || this.filteredOptionsCount === 0)
                  return;
                if (!this.optionsAllDisabled) {
                  if (direction === "next") {
                    this.hoverIndex++;
                    if (this.hoverIndex === this.options.length) {
                      this.hoverIndex = 0;
                    }
                  } else if (direction === "prev") {
                    this.hoverIndex--;
                    if (this.hoverIndex < 0) {
                      this.hoverIndex = this.options.length - 1;
                    }
                  }
                  var option2 = this.options[this.hoverIndex];
                  if (option2.disabled === true || option2.groupDisabled === true || !option2.visible) {
                    this.navigateOptions(direction);
                  }
                  this.$nextTick(function() {
                    return _this2.scrollToOption(_this2.hoverOption);
                  });
                }
              }
            }
          };
          var shared_ = __webpack_require__(21);
          var selectvue_type_script_lang_js_ = {
            mixins: [emitter_default.a, locale_default.a, focus_default()("reference"), navigation_mixin],
            name: "ElSelect",
            componentName: "ElSelect",
            inject: {
              elForm: {
                default: ""
              },
              elFormItem: {
                default: ""
              }
            },
            provide: function provide2() {
              return {
                "select": this
              };
            },
            computed: {
              _elFormItemSize: function _elFormItemSize() {
                return (this.elFormItem || {}).elFormItemSize;
              },
              readonly: function readonly2() {
                return !this.filterable || this.multiple || !Object(util_["isIE"])() && !Object(util_["isEdge"])() && !this.visible;
              },
              showClose: function showClose() {
                var hasValue = this.multiple ? Array.isArray(this.value) && this.value.length > 0 : this.value !== void 0 && this.value !== null && this.value !== "";
                var criteria = this.clearable && !this.selectDisabled && this.inputHovering && hasValue;
                return criteria;
              },
              iconClass: function iconClass() {
                return this.remote && this.filterable ? "" : this.visible ? "arrow-up is-reverse" : "arrow-up";
              },
              debounce: function debounce2() {
                return this.remote ? 300 : 0;
              },
              emptyText: function emptyText() {
                if (this.loading) {
                  return this.loadingText || this.t("el.select.loading");
                } else {
                  if (this.remote && this.query === "" && this.options.length === 0)
                    return false;
                  if (this.filterable && this.query && this.options.length > 0 && this.filteredOptionsCount === 0) {
                    return this.noMatchText || this.t("el.select.noMatch");
                  }
                  if (this.options.length === 0) {
                    return this.noDataText || this.t("el.select.noData");
                  }
                }
                return null;
              },
              showNewOption: function showNewOption() {
                var _this = this;
                var hasExistingOption = this.options.filter(function(option2) {
                  return !option2.created;
                }).some(function(option2) {
                  return option2.currentLabel === _this.query;
                });
                return this.filterable && this.allowCreate && this.query !== "" && !hasExistingOption;
              },
              selectSize: function selectSize() {
                return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
              },
              selectDisabled: function selectDisabled() {
                return this.disabled || (this.elForm || {}).disabled;
              },
              collapseTagSize: function collapseTagSize() {
                return ["small", "mini"].indexOf(this.selectSize) > -1 ? "mini" : "small";
              },
              propPlaceholder: function propPlaceholder() {
                return typeof this.placeholder !== "undefined" ? this.placeholder : this.t("el.select.placeholder");
              }
            },
            components: {
              ElInput: input_default.a,
              ElSelectMenu: select_dropdown,
              ElOption: src_option[
                "a"
                /* default */
              ],
              ElTag: tag_default.a,
              ElScrollbar: scrollbar_default.a
            },
            directives: { Clickoutside: clickoutside_default.a },
            props: {
              name: String,
              id: String,
              value: {
                required: true
              },
              autocomplete: {
                type: String,
                default: "off"
              },
              /** @Deprecated in next major version */
              autoComplete: {
                type: String,
                validator: function validator(val) {
                  return true;
                }
              },
              automaticDropdown: Boolean,
              size: String,
              disabled: Boolean,
              clearable: Boolean,
              filterable: Boolean,
              allowCreate: Boolean,
              loading: Boolean,
              popperClass: String,
              remote: Boolean,
              loadingText: String,
              noMatchText: String,
              noDataText: String,
              remoteMethod: Function,
              filterMethod: Function,
              multiple: Boolean,
              multipleLimit: {
                type: Number,
                default: 0
              },
              placeholder: {
                type: String,
                required: false
              },
              defaultFirstOption: Boolean,
              reserveKeyword: Boolean,
              valueKey: {
                type: String,
                default: "value"
              },
              collapseTags: Boolean,
              popperAppendToBody: {
                type: Boolean,
                default: true
              }
            },
            data: function data() {
              return {
                options: [],
                cachedOptions: [],
                createdLabel: null,
                createdSelected: false,
                selected: this.multiple ? [] : {},
                inputLength: 20,
                inputWidth: 0,
                initialInputHeight: 0,
                cachedPlaceHolder: "",
                optionsCount: 0,
                filteredOptionsCount: 0,
                visible: false,
                softFocus: false,
                selectedLabel: "",
                hoverIndex: -1,
                query: "",
                previousQuery: null,
                inputHovering: false,
                currentPlaceholder: "",
                menuVisibleOnFocus: false,
                isOnComposition: false,
                isSilentBlur: false
              };
            },
            watch: {
              selectDisabled: function selectDisabled() {
                var _this2 = this;
                this.$nextTick(function() {
                  _this2.resetInputHeight();
                });
              },
              propPlaceholder: function propPlaceholder(val) {
                this.cachedPlaceHolder = this.currentPlaceholder = val;
              },
              value: function value(val, oldVal) {
                if (this.multiple) {
                  this.resetInputHeight();
                  if (val && val.length > 0 || this.$refs.input && this.query !== "") {
                    this.currentPlaceholder = "";
                  } else {
                    this.currentPlaceholder = this.cachedPlaceHolder;
                  }
                  if (this.filterable && !this.reserveKeyword) {
                    this.query = "";
                    this.handleQueryChange(this.query);
                  }
                }
                this.setSelected();
                if (this.filterable && !this.multiple) {
                  this.inputLength = 20;
                }
                if (!Object(util_["valueEquals"])(val, oldVal)) {
                  this.dispatch("ElFormItem", "el.form.change", val);
                }
              },
              visible: function visible(val) {
                var _this3 = this;
                if (!val) {
                  this.broadcast("ElSelectDropdown", "destroyPopper");
                  if (this.$refs.input) {
                    this.$refs.input.blur();
                  }
                  this.query = "";
                  this.previousQuery = null;
                  this.selectedLabel = "";
                  this.inputLength = 20;
                  this.menuVisibleOnFocus = false;
                  this.resetHoverIndex();
                  this.$nextTick(function() {
                    if (_this3.$refs.input && _this3.$refs.input.value === "" && _this3.selected.length === 0) {
                      _this3.currentPlaceholder = _this3.cachedPlaceHolder;
                    }
                  });
                  if (!this.multiple) {
                    if (this.selected) {
                      if (this.filterable && this.allowCreate && this.createdSelected && this.createdLabel) {
                        this.selectedLabel = this.createdLabel;
                      } else {
                        this.selectedLabel = this.selected.currentLabel;
                      }
                      if (this.filterable)
                        this.query = this.selectedLabel;
                    }
                    if (this.filterable) {
                      this.currentPlaceholder = this.cachedPlaceHolder;
                    }
                  }
                } else {
                  this.broadcast("ElSelectDropdown", "updatePopper");
                  if (this.filterable) {
                    this.query = this.remote ? "" : this.selectedLabel;
                    this.handleQueryChange(this.query);
                    if (this.multiple) {
                      this.$refs.input.focus();
                    } else {
                      if (!this.remote) {
                        this.broadcast("ElOption", "queryChange", "");
                        this.broadcast("ElOptionGroup", "queryChange");
                      }
                      if (this.selectedLabel) {
                        this.currentPlaceholder = this.selectedLabel;
                        this.selectedLabel = "";
                      }
                    }
                  }
                }
                this.$emit("visible-change", val);
              },
              options: function options() {
                var _this4 = this;
                if (this.$isServer)
                  return;
                this.$nextTick(function() {
                  _this4.broadcast("ElSelectDropdown", "updatePopper");
                });
                if (this.multiple) {
                  this.resetInputHeight();
                }
                var inputs = this.$el.querySelectorAll("input");
                if ([].indexOf.call(inputs, document.activeElement) === -1) {
                  this.setSelected();
                }
                if (this.defaultFirstOption && (this.filterable || this.remote) && this.filteredOptionsCount) {
                  this.checkDefaultFirstOption();
                }
              }
            },
            methods: {
              handleNavigate: function handleNavigate(direction) {
                if (this.isOnComposition)
                  return;
                this.navigateOptions(direction);
              },
              handleComposition: function handleComposition(event) {
                var _this5 = this;
                var text = event.target.value;
                if (event.type === "compositionend") {
                  this.isOnComposition = false;
                  this.$nextTick(function(_) {
                    return _this5.handleQueryChange(text);
                  });
                } else {
                  var lastCharacter = text[text.length - 1] || "";
                  this.isOnComposition = !Object(shared_["isKorean"])(lastCharacter);
                }
              },
              handleQueryChange: function handleQueryChange(val) {
                var _this6 = this;
                if (this.previousQuery === val || this.isOnComposition)
                  return;
                if (this.previousQuery === null && (typeof this.filterMethod === "function" || typeof this.remoteMethod === "function")) {
                  this.previousQuery = val;
                  return;
                }
                this.previousQuery = val;
                this.$nextTick(function() {
                  if (_this6.visible)
                    _this6.broadcast("ElSelectDropdown", "updatePopper");
                });
                this.hoverIndex = -1;
                if (this.multiple && this.filterable) {
                  this.$nextTick(function() {
                    var length = _this6.$refs.input.value.length * 15 + 20;
                    _this6.inputLength = _this6.collapseTags ? Math.min(50, length) : length;
                    _this6.managePlaceholder();
                    _this6.resetInputHeight();
                  });
                }
                if (this.remote && typeof this.remoteMethod === "function") {
                  this.hoverIndex = -1;
                  this.remoteMethod(val);
                } else if (typeof this.filterMethod === "function") {
                  this.filterMethod(val);
                  this.broadcast("ElOptionGroup", "queryChange");
                } else {
                  this.filteredOptionsCount = this.optionsCount;
                  this.broadcast("ElOption", "queryChange", val);
                  this.broadcast("ElOptionGroup", "queryChange");
                }
                if (this.defaultFirstOption && (this.filterable || this.remote) && this.filteredOptionsCount) {
                  this.checkDefaultFirstOption();
                }
              },
              scrollToOption: function scrollToOption(option2) {
                var target2 = Array.isArray(option2) && option2[0] ? option2[0].$el : option2.$el;
                if (this.$refs.popper && target2) {
                  var menu = this.$refs.popper.$el.querySelector(".el-select-dropdown__wrap");
                  scroll_into_view_default()(menu, target2);
                }
                this.$refs.scrollbar && this.$refs.scrollbar.handleScroll();
              },
              handleMenuEnter: function handleMenuEnter() {
                var _this7 = this;
                this.$nextTick(function() {
                  return _this7.scrollToOption(_this7.selected);
                });
              },
              emitChange: function emitChange(val) {
                if (!Object(util_["valueEquals"])(this.value, val)) {
                  this.$emit("change", val);
                }
              },
              getOption: function getOption(value) {
                var option2 = void 0;
                var isObject2 = Object.prototype.toString.call(value).toLowerCase() === "[object object]";
                var isNull = Object.prototype.toString.call(value).toLowerCase() === "[object null]";
                var isUndefined = Object.prototype.toString.call(value).toLowerCase() === "[object undefined]";
                for (var i = this.cachedOptions.length - 1; i >= 0; i--) {
                  var cachedOption = this.cachedOptions[i];
                  var isEqual = isObject2 ? Object(util_["getValueByPath"])(cachedOption.value, this.valueKey) === Object(util_["getValueByPath"])(value, this.valueKey) : cachedOption.value === value;
                  if (isEqual) {
                    option2 = cachedOption;
                    break;
                  }
                }
                if (option2)
                  return option2;
                var label = !isObject2 && !isNull && !isUndefined ? String(value) : "";
                var newOption = {
                  value,
                  currentLabel: label
                };
                if (this.multiple) {
                  newOption.hitState = false;
                }
                return newOption;
              },
              setSelected: function setSelected2() {
                var _this8 = this;
                if (!this.multiple) {
                  var option2 = this.getOption(this.value);
                  if (option2.created) {
                    this.createdLabel = option2.currentLabel;
                    this.createdSelected = true;
                  } else {
                    this.createdSelected = false;
                  }
                  this.selectedLabel = option2.currentLabel;
                  this.selected = option2;
                  if (this.filterable)
                    this.query = this.selectedLabel;
                  return;
                }
                var result = [];
                if (Array.isArray(this.value)) {
                  this.value.forEach(function(value) {
                    result.push(_this8.getOption(value));
                  });
                }
                this.selected = result;
                this.$nextTick(function() {
                  _this8.resetInputHeight();
                });
              },
              handleFocus: function handleFocus(event) {
                if (!this.softFocus) {
                  if (this.automaticDropdown || this.filterable) {
                    if (this.filterable && !this.visible) {
                      this.menuVisibleOnFocus = true;
                    }
                    this.visible = true;
                  }
                  this.$emit("focus", event);
                } else {
                  this.softFocus = false;
                }
              },
              blur: function blur() {
                this.visible = false;
                this.$refs.reference.blur();
              },
              handleBlur: function handleBlur(event) {
                var _this9 = this;
                setTimeout(function() {
                  if (_this9.isSilentBlur) {
                    _this9.isSilentBlur = false;
                  } else {
                    _this9.$emit("blur", event);
                  }
                }, 50);
                this.softFocus = false;
              },
              handleClearClick: function handleClearClick(event) {
                this.deleteSelected(event);
              },
              doDestroy: function doDestroy() {
                this.$refs.popper && this.$refs.popper.doDestroy();
              },
              handleClose: function handleClose() {
                this.visible = false;
              },
              toggleLastOptionHitState: function toggleLastOptionHitState(hit) {
                if (!Array.isArray(this.selected))
                  return;
                var option2 = this.selected[this.selected.length - 1];
                if (!option2)
                  return;
                if (hit === true || hit === false) {
                  option2.hitState = hit;
                  return hit;
                }
                option2.hitState = !option2.hitState;
                return option2.hitState;
              },
              deletePrevTag: function deletePrevTag(e) {
                if (e.target.value.length <= 0 && !this.toggleLastOptionHitState()) {
                  var value = this.value.slice();
                  value.pop();
                  this.$emit("input", value);
                  this.emitChange(value);
                }
              },
              managePlaceholder: function managePlaceholder() {
                if (this.currentPlaceholder !== "") {
                  this.currentPlaceholder = this.$refs.input.value ? "" : this.cachedPlaceHolder;
                }
              },
              resetInputState: function resetInputState(e) {
                if (e.keyCode !== 8)
                  this.toggleLastOptionHitState(false);
                this.inputLength = this.$refs.input.value.length * 15 + 20;
                this.resetInputHeight();
              },
              resetInputHeight: function resetInputHeight() {
                var _this10 = this;
                if (this.collapseTags && !this.filterable)
                  return;
                this.$nextTick(function() {
                  if (!_this10.$refs.reference)
                    return;
                  var inputChildNodes = _this10.$refs.reference.$el.childNodes;
                  var input2 = [].filter.call(inputChildNodes, function(item) {
                    return item.tagName === "INPUT";
                  })[0];
                  var tags = _this10.$refs.tags;
                  var tagsHeight = tags ? Math.round(tags.getBoundingClientRect().height) : 0;
                  var sizeInMap = _this10.initialInputHeight || 40;
                  input2.style.height = _this10.selected.length === 0 ? sizeInMap + "px" : Math.max(tags ? tagsHeight + (tagsHeight > sizeInMap ? 6 : 0) : 0, sizeInMap) + "px";
                  if (_this10.visible && _this10.emptyText !== false) {
                    _this10.broadcast("ElSelectDropdown", "updatePopper");
                  }
                });
              },
              resetHoverIndex: function resetHoverIndex() {
                var _this11 = this;
                setTimeout(function() {
                  if (!_this11.multiple) {
                    _this11.hoverIndex = _this11.options.indexOf(_this11.selected);
                  } else {
                    if (_this11.selected.length > 0) {
                      _this11.hoverIndex = Math.min.apply(null, _this11.selected.map(function(item) {
                        return _this11.options.indexOf(item);
                      }));
                    } else {
                      _this11.hoverIndex = -1;
                    }
                  }
                }, 300);
              },
              handleOptionSelect: function handleOptionSelect(option2, byClick) {
                var _this12 = this;
                if (this.multiple) {
                  var value = (this.value || []).slice();
                  var optionIndex = this.getValueIndex(value, option2.value);
                  if (optionIndex > -1) {
                    value.splice(optionIndex, 1);
                  } else if (this.multipleLimit <= 0 || value.length < this.multipleLimit) {
                    value.push(option2.value);
                  }
                  this.$emit("input", value);
                  this.emitChange(value);
                  if (option2.created) {
                    this.query = "";
                    this.handleQueryChange("");
                    this.inputLength = 20;
                  }
                  if (this.filterable)
                    this.$refs.input.focus();
                } else {
                  this.$emit("input", option2.value);
                  this.emitChange(option2.value);
                  this.visible = false;
                }
                this.isSilentBlur = byClick;
                this.setSoftFocus();
                if (this.visible)
                  return;
                this.$nextTick(function() {
                  _this12.scrollToOption(option2);
                });
              },
              setSoftFocus: function setSoftFocus() {
                this.softFocus = true;
                var input2 = this.$refs.input || this.$refs.reference;
                if (input2) {
                  input2.focus();
                }
              },
              getValueIndex: function getValueIndex() {
                var arr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
                var value = arguments[1];
                var isObject2 = Object.prototype.toString.call(value).toLowerCase() === "[object object]";
                if (!isObject2) {
                  return arr.indexOf(value);
                } else {
                  var valueKey = this.valueKey;
                  var index2 = -1;
                  arr.some(function(item, i) {
                    if (Object(util_["getValueByPath"])(item, valueKey) === Object(util_["getValueByPath"])(value, valueKey)) {
                      index2 = i;
                      return true;
                    }
                    return false;
                  });
                  return index2;
                }
              },
              toggleMenu: function toggleMenu() {
                if (!this.selectDisabled) {
                  if (this.menuVisibleOnFocus) {
                    this.menuVisibleOnFocus = false;
                  } else {
                    this.visible = !this.visible;
                  }
                  if (this.visible) {
                    (this.$refs.input || this.$refs.reference).focus();
                  }
                }
              },
              selectOption: function selectOption() {
                if (!this.visible) {
                  this.toggleMenu();
                } else {
                  if (this.options[this.hoverIndex]) {
                    this.handleOptionSelect(this.options[this.hoverIndex]);
                  }
                }
              },
              deleteSelected: function deleteSelected(event) {
                event.stopPropagation();
                var value = this.multiple ? [] : "";
                this.$emit("input", value);
                this.emitChange(value);
                this.visible = false;
                this.$emit("clear");
              },
              deleteTag: function deleteTag(event, tag2) {
                var index2 = this.selected.indexOf(tag2);
                if (index2 > -1 && !this.selectDisabled) {
                  var value = this.value.slice();
                  value.splice(index2, 1);
                  this.$emit("input", value);
                  this.emitChange(value);
                  this.$emit("remove-tag", tag2.value);
                }
                event.stopPropagation();
              },
              onInputChange: function onInputChange() {
                if (this.filterable && this.query !== this.selectedLabel) {
                  this.query = this.selectedLabel;
                  this.handleQueryChange(this.query);
                }
              },
              onOptionDestroy: function onOptionDestroy(index2) {
                if (index2 > -1) {
                  this.optionsCount--;
                  this.filteredOptionsCount--;
                  this.options.splice(index2, 1);
                }
              },
              resetInputWidth: function resetInputWidth() {
                this.inputWidth = this.$refs.reference.$el.getBoundingClientRect().width;
              },
              handleResize: function handleResize() {
                this.resetInputWidth();
                if (this.multiple)
                  this.resetInputHeight();
              },
              checkDefaultFirstOption: function checkDefaultFirstOption() {
                this.hoverIndex = -1;
                var hasCreated = false;
                for (var i = this.options.length - 1; i >= 0; i--) {
                  if (this.options[i].created) {
                    hasCreated = true;
                    this.hoverIndex = i;
                    break;
                  }
                }
                if (hasCreated)
                  return;
                for (var _i = 0; _i !== this.options.length; ++_i) {
                  var option2 = this.options[_i];
                  if (this.query) {
                    if (!option2.disabled && !option2.groupDisabled && option2.visible) {
                      this.hoverIndex = _i;
                      break;
                    }
                  } else {
                    if (option2.itemSelected) {
                      this.hoverIndex = _i;
                      break;
                    }
                  }
                }
              },
              getValueKey: function getValueKey(item) {
                if (Object.prototype.toString.call(item.value).toLowerCase() !== "[object object]") {
                  return item.value;
                } else {
                  return Object(util_["getValueByPath"])(item.value, this.valueKey);
                }
              }
            },
            created: function created() {
              var _this13 = this;
              this.cachedPlaceHolder = this.currentPlaceholder = this.propPlaceholder;
              if (this.multiple && !Array.isArray(this.value)) {
                this.$emit("input", []);
              }
              if (!this.multiple && Array.isArray(this.value)) {
                this.$emit("input", "");
              }
              this.debouncedOnInputChange = debounce_default()(this.debounce, function() {
                _this13.onInputChange();
              });
              this.debouncedQueryChange = debounce_default()(this.debounce, function(e) {
                _this13.handleQueryChange(e.target.value);
              });
              this.$on("handleOptionClick", this.handleOptionSelect);
              this.$on("setSelected", this.setSelected);
            },
            mounted: function mounted2() {
              var _this14 = this;
              if (this.multiple && Array.isArray(this.value) && this.value.length > 0) {
                this.currentPlaceholder = "";
              }
              Object(resize_event_["addResizeListener"])(this.$el, this.handleResize);
              var reference = this.$refs.reference;
              if (reference && reference.$el) {
                var sizeMap = {
                  medium: 36,
                  small: 32,
                  mini: 28
                };
                var input2 = reference.$el.querySelector("input");
                this.initialInputHeight = input2.getBoundingClientRect().height || sizeMap[this.selectSize];
              }
              if (this.remote && this.multiple) {
                this.resetInputHeight();
              }
              this.$nextTick(function() {
                if (reference && reference.$el) {
                  _this14.inputWidth = reference.$el.getBoundingClientRect().width;
                }
              });
              this.setSelected();
            },
            beforeDestroy: function beforeDestroy2() {
              if (this.$el && this.handleResize)
                Object(resize_event_["removeResizeListener"])(this.$el, this.handleResize);
            }
          };
          var src_selectvue_type_script_lang_js_ = selectvue_type_script_lang_js_;
          var select_component = Object(componentNormalizer[
            "a"
            /* default */
          ])(
            src_selectvue_type_script_lang_js_,
            render6,
            staticRenderFns,
            false,
            null,
            null,
            null
          );
          select_component.options.__file = "packages/select/src/select.vue";
          var src_select = select_component.exports;
          src_select.install = function(Vue2) {
            Vue2.component(src_select.name, src_select);
          };
          __webpack_exports__["default"] = src_select;
        }
      )
      /******/
    });
  })(select);
  return select.exports;
}
var option = { exports: {} };
var hasRequiredOption;
function requireOption() {
  if (hasRequiredOption)
    return option.exports;
  hasRequiredOption = 1;
  (function(module) {
    module.exports = /******/
    function(modules2) {
      var installedModules = {};
      function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
          return installedModules[moduleId].exports;
        }
        var module2 = installedModules[moduleId] = {
          /******/
          i: moduleId,
          /******/
          l: false,
          /******/
          exports: {}
          /******/
        };
        modules2[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
        module2.l = true;
        return module2.exports;
      }
      __webpack_require__.m = modules2;
      __webpack_require__.c = installedModules;
      __webpack_require__.d = function(exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
          Object.defineProperty(exports, name, { enumerable: true, get: getter });
        }
      };
      __webpack_require__.r = function(exports) {
        if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
          Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
        }
        Object.defineProperty(exports, "__esModule", { value: true });
      };
      __webpack_require__.t = function(value, mode) {
        if (mode & 1)
          value = __webpack_require__(value);
        if (mode & 8)
          return value;
        if (mode & 4 && typeof value === "object" && value && value.__esModule)
          return value;
        var ns = /* @__PURE__ */ Object.create(null);
        __webpack_require__.r(ns);
        Object.defineProperty(ns, "default", { enumerable: true, value });
        if (mode & 2 && typeof value != "string")
          for (var key in value)
            __webpack_require__.d(ns, key, (function(key2) {
              return value[key2];
            }).bind(null, key));
        return ns;
      };
      __webpack_require__.n = function(module2) {
        var getter = module2 && module2.__esModule ? (
          /******/
          function getDefault() {
            return module2["default"];
          }
        ) : (
          /******/
          function getModuleExports() {
            return module2;
          }
        );
        __webpack_require__.d(getter, "a", getter);
        return getter;
      };
      __webpack_require__.o = function(object3, property) {
        return Object.prototype.hasOwnProperty.call(object3, property);
      };
      __webpack_require__.p = "/dist/";
      return __webpack_require__(__webpack_require__.s = 54);
    }({
      /***/
      0: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.d(__webpack_exports__, "a", function() {
            return normalizeComponent2;
          });
          function normalizeComponent2(scriptExports, render6, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
            var options = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
            if (render6) {
              options.render = render6;
              options.staticRenderFns = staticRenderFns;
              options._compiled = true;
            }
            if (functionalTemplate) {
              options.functional = true;
            }
            if (scopeId) {
              options._scopeId = "data-v-" + scopeId;
            }
            var hook;
            if (moduleIdentifier) {
              hook = function(context) {
                context = context || // cached call
                this.$vnode && this.$vnode.ssrContext || // stateful
                this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
                if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
                  context = __VUE_SSR_CONTEXT__;
                }
                if (injectStyles) {
                  injectStyles.call(this, context);
                }
                if (context && context._registeredComponents) {
                  context._registeredComponents.add(moduleIdentifier);
                }
              };
              options._ssrRegister = hook;
            } else if (injectStyles) {
              hook = shadowMode ? function() {
                injectStyles.call(this, this.$root.$options.shadowRoot);
              } : injectStyles;
            }
            if (hook) {
              if (options.functional) {
                options._injectStyles = hook;
                var originalRender = options.render;
                options.render = function renderWithStyleInjection(h2, context) {
                  hook.call(context);
                  return originalRender(h2, context);
                };
              } else {
                var existing = options.beforeCreate;
                options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
              }
            }
            return {
              exports: scriptExports,
              options
            };
          }
        }
      ),
      /***/
      3: (
        /***/
        function(module2, exports) {
          module2.exports = requireUtil();
        }
      ),
      /***/
      33: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          var render6 = function() {
            var _vm = this;
            var _h = _vm.$createElement;
            var _c = _vm._self._c || _h;
            return _c(
              "li",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.visible,
                    expression: "visible"
                  }
                ],
                staticClass: "el-select-dropdown__item",
                class: {
                  selected: _vm.itemSelected,
                  "is-disabled": _vm.disabled || _vm.groupDisabled || _vm.limitReached,
                  hover: _vm.hover
                },
                on: {
                  mouseenter: _vm.hoverItem,
                  click: function($event) {
                    $event.stopPropagation();
                    return _vm.selectOptionClick($event);
                  }
                }
              },
              [_vm._t("default", [_c("span", [_vm._v(_vm._s(_vm.currentLabel))])])],
              2
            );
          };
          var staticRenderFns = [];
          render6._withStripped = true;
          var emitter_ = __webpack_require__(4);
          var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
          var util_ = __webpack_require__(3);
          var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
            return typeof obj;
          } : function(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
          var optionvue_type_script_lang_js_ = {
            mixins: [emitter_default.a],
            name: "ElOption",
            componentName: "ElOption",
            inject: ["select"],
            props: {
              value: {
                required: true
              },
              label: [String, Number],
              created: Boolean,
              disabled: {
                type: Boolean,
                default: false
              }
            },
            data: function data() {
              return {
                index: -1,
                groupDisabled: false,
                visible: true,
                hitState: false,
                hover: false
              };
            },
            computed: {
              isObject: function isObject2() {
                return Object.prototype.toString.call(this.value).toLowerCase() === "[object object]";
              },
              currentLabel: function currentLabel() {
                return this.label || (this.isObject ? "" : this.value);
              },
              currentValue: function currentValue() {
                return this.value || this.label || "";
              },
              itemSelected: function itemSelected() {
                if (!this.select.multiple) {
                  return this.isEqual(this.value, this.select.value);
                } else {
                  return this.contains(this.select.value, this.value);
                }
              },
              limitReached: function limitReached() {
                if (this.select.multiple) {
                  return !this.itemSelected && (this.select.value || []).length >= this.select.multipleLimit && this.select.multipleLimit > 0;
                } else {
                  return false;
                }
              }
            },
            watch: {
              currentLabel: function currentLabel() {
                if (!this.created && !this.select.remote)
                  this.dispatch("ElSelect", "setSelected");
              },
              value: function value(val, oldVal) {
                var _select = this.select, remote = _select.remote, valueKey = _select.valueKey;
                if (!this.created && !remote) {
                  if (valueKey && (typeof val === "undefined" ? "undefined" : _typeof2(val)) === "object" && (typeof oldVal === "undefined" ? "undefined" : _typeof2(oldVal)) === "object" && val[valueKey] === oldVal[valueKey]) {
                    return;
                  }
                  this.dispatch("ElSelect", "setSelected");
                }
              }
            },
            methods: {
              isEqual: function isEqual(a, b) {
                if (!this.isObject) {
                  return a === b;
                } else {
                  var valueKey = this.select.valueKey;
                  return Object(util_["getValueByPath"])(a, valueKey) === Object(util_["getValueByPath"])(b, valueKey);
                }
              },
              contains: function contains() {
                var arr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
                var target2 = arguments[1];
                if (!this.isObject) {
                  return arr && arr.indexOf(target2) > -1;
                } else {
                  var valueKey = this.select.valueKey;
                  return arr && arr.some(function(item) {
                    return Object(util_["getValueByPath"])(item, valueKey) === Object(util_["getValueByPath"])(target2, valueKey);
                  });
                }
              },
              handleGroupDisabled: function handleGroupDisabled(val) {
                this.groupDisabled = val;
              },
              hoverItem: function hoverItem() {
                if (!this.disabled && !this.groupDisabled) {
                  this.select.hoverIndex = this.select.options.indexOf(this);
                }
              },
              selectOptionClick: function selectOptionClick() {
                if (this.disabled !== true && this.groupDisabled !== true) {
                  this.dispatch("ElSelect", "handleOptionClick", [this, true]);
                }
              },
              queryChange: function queryChange(query2) {
                this.visible = new RegExp(Object(util_["escapeRegexpString"])(query2), "i").test(this.currentLabel) || this.created;
                if (!this.visible) {
                  this.select.filteredOptionsCount--;
                }
              }
            },
            created: function created() {
              this.select.options.push(this);
              this.select.cachedOptions.push(this);
              this.select.optionsCount++;
              this.select.filteredOptionsCount++;
              this.$on("queryChange", this.queryChange);
              this.$on("handleGroupDisabled", this.handleGroupDisabled);
            },
            beforeDestroy: function beforeDestroy2() {
              var _select2 = this.select, selected = _select2.selected, multiple = _select2.multiple;
              var selectedOptions = multiple ? selected : [selected];
              var index2 = this.select.cachedOptions.indexOf(this);
              var selectedIndex = selectedOptions.indexOf(this);
              if (index2 > -1 && selectedIndex < 0) {
                this.select.cachedOptions.splice(index2, 1);
              }
              this.select.onOptionDestroy(this.select.options.indexOf(this));
            }
          };
          var src_optionvue_type_script_lang_js_ = optionvue_type_script_lang_js_;
          var componentNormalizer = __webpack_require__(0);
          var component = Object(componentNormalizer[
            "a"
            /* default */
          ])(
            src_optionvue_type_script_lang_js_,
            render6,
            staticRenderFns,
            false,
            null,
            null,
            null
          );
          component.options.__file = "packages/select/src/option.vue";
          __webpack_exports__["a"] = component.exports;
        }
      ),
      /***/
      4: (
        /***/
        function(module2, exports) {
          module2.exports = requireEmitter();
        }
      ),
      /***/
      54: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.r(__webpack_exports__);
          var _select_src_option__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(33);
          _select_src_option__WEBPACK_IMPORTED_MODULE_0__[
            /* default */
            "a"
          ].install = function(Vue2) {
            Vue2.component(_select_src_option__WEBPACK_IMPORTED_MODULE_0__[
              /* default */
              "a"
            ].name, _select_src_option__WEBPACK_IMPORTED_MODULE_0__[
              /* default */
              "a"
            ]);
          };
          __webpack_exports__["default"] = _select_src_option__WEBPACK_IMPORTED_MODULE_0__[
            /* default */
            "a"
          ];
        }
      )
      /******/
    });
  })(option);
  return option.exports;
}
var UserAgent_DEPRECATED_1;
var hasRequiredUserAgent_DEPRECATED;
function requireUserAgent_DEPRECATED() {
  if (hasRequiredUserAgent_DEPRECATED)
    return UserAgent_DEPRECATED_1;
  hasRequiredUserAgent_DEPRECATED = 1;
  var _populated = false;
  var _ie, _firefox, _opera, _webkit, _chrome;
  var _ie_real_version;
  var _osx, _windows, _linux, _android;
  var _win64;
  var _iphone, _ipad, _native;
  var _mobile;
  function _populate() {
    if (_populated) {
      return;
    }
    _populated = true;
    var uas = navigator.userAgent;
    var agent = /(?:MSIE.(\d+\.\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\d+\.\d+))|(?:Opera(?:.+Version.|.)(\d+\.\d+))|(?:AppleWebKit.(\d+(?:\.\d+)?))|(?:Trident\/\d+\.\d+.*rv:(\d+\.\d+))/.exec(uas);
    var os = /(Mac OS X)|(Windows)|(Linux)/.exec(uas);
    _iphone = /\b(iPhone|iP[ao]d)/.exec(uas);
    _ipad = /\b(iP[ao]d)/.exec(uas);
    _android = /Android/i.exec(uas);
    _native = /FBAN\/\w+;/i.exec(uas);
    _mobile = /Mobile/i.exec(uas);
    _win64 = !!/Win64/.exec(uas);
    if (agent) {
      _ie = agent[1] ? parseFloat(agent[1]) : agent[5] ? parseFloat(agent[5]) : NaN;
      if (_ie && document && document.documentMode) {
        _ie = document.documentMode;
      }
      var trident = /(?:Trident\/(\d+.\d+))/.exec(uas);
      _ie_real_version = trident ? parseFloat(trident[1]) + 4 : _ie;
      _firefox = agent[2] ? parseFloat(agent[2]) : NaN;
      _opera = agent[3] ? parseFloat(agent[3]) : NaN;
      _webkit = agent[4] ? parseFloat(agent[4]) : NaN;
      if (_webkit) {
        agent = /(?:Chrome\/(\d+\.\d+))/.exec(uas);
        _chrome = agent && agent[1] ? parseFloat(agent[1]) : NaN;
      } else {
        _chrome = NaN;
      }
    } else {
      _ie = _firefox = _opera = _chrome = _webkit = NaN;
    }
    if (os) {
      if (os[1]) {
        var ver = /(?:Mac OS X (\d+(?:[._]\d+)?))/.exec(uas);
        _osx = ver ? parseFloat(ver[1].replace("_", ".")) : true;
      } else {
        _osx = false;
      }
      _windows = !!os[2];
      _linux = !!os[3];
    } else {
      _osx = _windows = _linux = false;
    }
  }
  var UserAgent_DEPRECATED = {
    /**
     *  Check if the UA is Internet Explorer.
     *
     *
     *  @return float|NaN Version number (if match) or NaN.
     */
    ie: function() {
      return _populate() || _ie;
    },
    /**
     * Check if we're in Internet Explorer compatibility mode.
     *
     * @return bool true if in compatibility mode, false if
     * not compatibility mode or not ie
     */
    ieCompatibilityMode: function() {
      return _populate() || _ie_real_version > _ie;
    },
    /**
     * Whether the browser is 64-bit IE.  Really, this is kind of weak sauce;  we
     * only need this because Skype can't handle 64-bit IE yet.  We need to remove
     * this when we don't need it -- tracked by #601957.
     */
    ie64: function() {
      return UserAgent_DEPRECATED.ie() && _win64;
    },
    /**
     *  Check if the UA is Firefox.
     *
     *
     *  @return float|NaN Version number (if match) or NaN.
     */
    firefox: function() {
      return _populate() || _firefox;
    },
    /**
     *  Check if the UA is Opera.
     *
     *
     *  @return float|NaN Version number (if match) or NaN.
     */
    opera: function() {
      return _populate() || _opera;
    },
    /**
     *  Check if the UA is WebKit.
     *
     *
     *  @return float|NaN Version number (if match) or NaN.
     */
    webkit: function() {
      return _populate() || _webkit;
    },
    /**
     *  For Push
     *  WILL BE REMOVED VERY SOON. Use UserAgent_DEPRECATED.webkit
     */
    safari: function() {
      return UserAgent_DEPRECATED.webkit();
    },
    /**
     *  Check if the UA is a Chrome browser.
     *
     *
     *  @return float|NaN Version number (if match) or NaN.
     */
    chrome: function() {
      return _populate() || _chrome;
    },
    /**
     *  Check if the user is running Windows.
     *
     *  @return bool `true' if the user's OS is Windows.
     */
    windows: function() {
      return _populate() || _windows;
    },
    /**
     *  Check if the user is running Mac OS X.
     *
     *  @return float|bool   Returns a float if a version number is detected,
     *                       otherwise true/false.
     */
    osx: function() {
      return _populate() || _osx;
    },
    /**
     * Check if the user is running Linux.
     *
     * @return bool `true' if the user's OS is some flavor of Linux.
     */
    linux: function() {
      return _populate() || _linux;
    },
    /**
     * Check if the user is running on an iPhone or iPod platform.
     *
     * @return bool `true' if the user is running some flavor of the
     *    iPhone OS.
     */
    iphone: function() {
      return _populate() || _iphone;
    },
    mobile: function() {
      return _populate() || (_iphone || _ipad || _android || _mobile);
    },
    nativeApp: function() {
      return _populate() || _native;
    },
    android: function() {
      return _populate() || _android;
    },
    ipad: function() {
      return _populate() || _ipad;
    }
  };
  UserAgent_DEPRECATED_1 = UserAgent_DEPRECATED;
  return UserAgent_DEPRECATED_1;
}
var ExecutionEnvironment_1;
var hasRequiredExecutionEnvironment;
function requireExecutionEnvironment() {
  if (hasRequiredExecutionEnvironment)
    return ExecutionEnvironment_1;
  hasRequiredExecutionEnvironment = 1;
  var canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);
  var ExecutionEnvironment = {
    canUseDOM,
    canUseWorkers: typeof Worker !== "undefined",
    canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
    canUseViewport: canUseDOM && !!window.screen,
    isInWorker: !canUseDOM
    // For now, this is true - might change in the future.
  };
  ExecutionEnvironment_1 = ExecutionEnvironment;
  return ExecutionEnvironment_1;
}
var isEventSupported_1;
var hasRequiredIsEventSupported;
function requireIsEventSupported() {
  if (hasRequiredIsEventSupported)
    return isEventSupported_1;
  hasRequiredIsEventSupported = 1;
  var ExecutionEnvironment = requireExecutionEnvironment();
  var useHasFeature;
  if (ExecutionEnvironment.canUseDOM) {
    useHasFeature = document.implementation && document.implementation.hasFeature && // always returns true in newer browsers as per the standard.
    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
    document.implementation.hasFeature("", "") !== true;
  }
  /**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @param {?boolean} capture Check if the capture phase is supported.
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   */
  function isEventSupported(eventNameSuffix, capture) {
    if (!ExecutionEnvironment.canUseDOM || capture && !("addEventListener" in document)) {
      return false;
    }
    var eventName = "on" + eventNameSuffix;
    var isSupported = eventName in document;
    if (!isSupported) {
      var element = document.createElement("div");
      element.setAttribute(eventName, "return;");
      isSupported = typeof element[eventName] === "function";
    }
    if (!isSupported && useHasFeature && eventNameSuffix === "wheel") {
      isSupported = document.implementation.hasFeature("Events.wheel", "3.0");
    }
    return isSupported;
  }
  isEventSupported_1 = isEventSupported;
  return isEventSupported_1;
}
var normalizeWheel_1;
var hasRequiredNormalizeWheel$1;
function requireNormalizeWheel$1() {
  if (hasRequiredNormalizeWheel$1)
    return normalizeWheel_1;
  hasRequiredNormalizeWheel$1 = 1;
  var UserAgent_DEPRECATED = requireUserAgent_DEPRECATED();
  var isEventSupported = requireIsEventSupported();
  var PIXEL_STEP = 10;
  var LINE_HEIGHT = 40;
  var PAGE_HEIGHT = 800;
  function normalizeWheel2(event) {
    var sX = 0, sY = 0, pX = 0, pY = 0;
    if ("detail" in event) {
      sY = event.detail;
    }
    if ("wheelDelta" in event) {
      sY = -event.wheelDelta / 120;
    }
    if ("wheelDeltaY" in event) {
      sY = -event.wheelDeltaY / 120;
    }
    if ("wheelDeltaX" in event) {
      sX = -event.wheelDeltaX / 120;
    }
    if ("axis" in event && event.axis === event.HORIZONTAL_AXIS) {
      sX = sY;
      sY = 0;
    }
    pX = sX * PIXEL_STEP;
    pY = sY * PIXEL_STEP;
    if ("deltaY" in event) {
      pY = event.deltaY;
    }
    if ("deltaX" in event) {
      pX = event.deltaX;
    }
    if ((pX || pY) && event.deltaMode) {
      if (event.deltaMode == 1) {
        pX *= LINE_HEIGHT;
        pY *= LINE_HEIGHT;
      } else {
        pX *= PAGE_HEIGHT;
        pY *= PAGE_HEIGHT;
      }
    }
    if (pX && !sX) {
      sX = pX < 1 ? -1 : 1;
    }
    if (pY && !sY) {
      sY = pY < 1 ? -1 : 1;
    }
    return {
      spinX: sX,
      spinY: sY,
      pixelX: pX,
      pixelY: pY
    };
  }
  normalizeWheel2.getEventType = function() {
    return UserAgent_DEPRECATED.firefox() ? "DOMMouseScroll" : isEventSupported("wheel") ? "wheel" : "mousewheel";
  };
  normalizeWheel_1 = normalizeWheel2;
  return normalizeWheel_1;
}
var normalizeWheel;
var hasRequiredNormalizeWheel;
function requireNormalizeWheel() {
  if (hasRequiredNormalizeWheel)
    return normalizeWheel;
  hasRequiredNormalizeWheel = 1;
  normalizeWheel = requireNormalizeWheel$1();
  return normalizeWheel;
}
var ariaDialog = {};
var hasRequiredAriaDialog;
function requireAriaDialog() {
  if (hasRequiredAriaDialog)
    return ariaDialog;
  hasRequiredAriaDialog = 1;
  ariaDialog.__esModule = true;
  var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
  } : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };
  var _ariaUtils = requireAriaUtils();
  var _ariaUtils2 = _interopRequireDefault2(_ariaUtils);
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
  var aria = aria || {};
  var tabEvent;
  aria.Dialog = function(dialog, focusAfterClosed, focusFirst) {
    var _this = this;
    this.dialogNode = dialog;
    if (this.dialogNode === null || this.dialogNode.getAttribute("role") !== "dialog") {
      throw new Error("Dialog() requires a DOM element with ARIA role of dialog.");
    }
    if (typeof focusAfterClosed === "string") {
      this.focusAfterClosed = document.getElementById(focusAfterClosed);
    } else if ((typeof focusAfterClosed === "undefined" ? "undefined" : _typeof2(focusAfterClosed)) === "object") {
      this.focusAfterClosed = focusAfterClosed;
    } else {
      this.focusAfterClosed = null;
    }
    if (typeof focusFirst === "string") {
      this.focusFirst = document.getElementById(focusFirst);
    } else if ((typeof focusFirst === "undefined" ? "undefined" : _typeof2(focusFirst)) === "object") {
      this.focusFirst = focusFirst;
    } else {
      this.focusFirst = null;
    }
    if (this.focusFirst) {
      this.focusFirst.focus();
    } else {
      _ariaUtils2.default.focusFirstDescendant(this.dialogNode);
    }
    this.lastFocus = document.activeElement;
    tabEvent = function tabEvent2(e) {
      _this.trapFocus(e);
    };
    this.addListeners();
  };
  aria.Dialog.prototype.addListeners = function() {
    document.addEventListener("focus", tabEvent, true);
  };
  aria.Dialog.prototype.removeListeners = function() {
    document.removeEventListener("focus", tabEvent, true);
  };
  aria.Dialog.prototype.closeDialog = function() {
    var _this2 = this;
    this.removeListeners();
    if (this.focusAfterClosed) {
      setTimeout(function() {
        _this2.focusAfterClosed.focus();
      });
    }
  };
  aria.Dialog.prototype.trapFocus = function(event) {
    if (_ariaUtils2.default.IgnoreUtilFocusChanges) {
      return;
    }
    if (this.dialogNode.contains(event.target)) {
      this.lastFocus = event.target;
    } else {
      _ariaUtils2.default.focusFirstDescendant(this.dialogNode);
      if (this.lastFocus === document.activeElement) {
        _ariaUtils2.default.focusLastDescendant(this.dialogNode);
      }
      this.lastFocus = document.activeElement;
    }
  };
  ariaDialog.default = aria.Dialog;
  return ariaDialog;
}
var _global$2 = { exports: {} };
var global$6 = _global$2.exports = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();
if (typeof __g == "number")
  __g = global$6;
var _globalExports = _global$2.exports;
const _global = /* @__PURE__ */ getDefaultExportFromCjs(_globalExports);
const _global$1 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _global
}, [_globalExports]);
const require$$0$c = /* @__PURE__ */ getAugmentedNamespace(_global$1);
var _core$2 = { exports: {} };
var core$3 = _core$2.exports = { version: "2.6.12" };
if (typeof __e == "number")
  __e = core$3;
var _coreExports = _core$2.exports;
const _core = /* @__PURE__ */ getDefaultExportFromCjs(_coreExports);
const _core$1 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _core
}, [_coreExports]);
const require$$4$2 = /* @__PURE__ */ getAugmentedNamespace(_core$1);
var _aFunction = function(it) {
  if (typeof it != "function")
    throw TypeError(it + " is not a function!");
  return it;
};
const _aFunction$1 = /* @__PURE__ */ getDefaultExportFromCjs(_aFunction);
const _aFunction$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _aFunction$1
}, [_aFunction]);
const require$$0$b = /* @__PURE__ */ getAugmentedNamespace(_aFunction$2);
var aFunction = require$$0$b;
var _ctx = function(fn, that, length) {
  aFunction(fn);
  if (that === void 0)
    return fn;
  switch (length) {
    case 1:
      return function(a) {
        return fn.call(that, a);
      };
    case 2:
      return function(a, b) {
        return fn.call(that, a, b);
      };
    case 3:
      return function(a, b, c) {
        return fn.call(that, a, b, c);
      };
  }
  return function() {
    return fn.apply(that, arguments);
  };
};
const _ctx$1 = /* @__PURE__ */ getDefaultExportFromCjs(_ctx);
const _ctx$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _ctx$1
}, [_ctx]);
const require$$2$4 = /* @__PURE__ */ getAugmentedNamespace(_ctx$2);
var _objectDp$1 = {};
var _isObject = function(it) {
  return typeof it === "object" ? it !== null : typeof it === "function";
};
const _isObject$1 = /* @__PURE__ */ getDefaultExportFromCjs(_isObject);
const _isObject$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _isObject$1
}, [_isObject]);
const require$$16 = /* @__PURE__ */ getAugmentedNamespace(_isObject$2);
var isObject$4 = require$$16;
var _anObject = function(it) {
  if (!isObject$4(it))
    throw TypeError(it + " is not an object!");
  return it;
};
const _anObject$1 = /* @__PURE__ */ getDefaultExportFromCjs(_anObject);
const _anObject$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _anObject$1
}, [_anObject]);
const require$$15 = /* @__PURE__ */ getAugmentedNamespace(_anObject$2);
var _fails = function(exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};
const _fails$1 = /* @__PURE__ */ getDefaultExportFromCjs(_fails);
const _fails$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _fails$1
}, [_fails]);
const require$$6 = /* @__PURE__ */ getAugmentedNamespace(_fails$2);
var _descriptors = !require$$6(function() {
  return Object.defineProperty({}, "a", { get: function() {
    return 7;
  } }).a != 7;
});
const _descriptors$1 = /* @__PURE__ */ getDefaultExportFromCjs(_descriptors);
const _descriptors$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _descriptors$1
}, [_descriptors]);
const require$$2$3 = /* @__PURE__ */ getAugmentedNamespace(_descriptors$2);
var _domCreate;
var hasRequired_domCreate;
function require_domCreate() {
  if (hasRequired_domCreate)
    return _domCreate;
  hasRequired_domCreate = 1;
  var isObject2 = require$$16;
  var document2 = require$$0$c.document;
  var is = isObject2(document2) && isObject2(document2.createElement);
  _domCreate = function(it) {
    return is ? document2.createElement(it) : {};
  };
  return _domCreate;
}
var _ie8DomDefine = !require$$2$3 && !require$$6(function() {
  return Object.defineProperty(require_domCreate()("div"), "a", { get: function() {
    return 7;
  } }).a != 7;
});
const _ie8DomDefine$1 = /* @__PURE__ */ getDefaultExportFromCjs(_ie8DomDefine);
const _ie8DomDefine$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _ie8DomDefine$1
}, [_ie8DomDefine]);
const require$$5$3 = /* @__PURE__ */ getAugmentedNamespace(_ie8DomDefine$2);
var isObject$3 = require$$16;
var _toPrimitive = function(it, S) {
  if (!isObject$3(it))
    return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == "function" && !isObject$3(val = fn.call(it)))
    return val;
  if (typeof (fn = it.valueOf) == "function" && !isObject$3(val = fn.call(it)))
    return val;
  if (!S && typeof (fn = it.toString) == "function" && !isObject$3(val = fn.call(it)))
    return val;
  throw TypeError("Can't convert object to primitive value");
};
const _toPrimitive$1 = /* @__PURE__ */ getDefaultExportFromCjs(_toPrimitive);
const _toPrimitive$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _toPrimitive$1
}, [_toPrimitive]);
const require$$19 = /* @__PURE__ */ getAugmentedNamespace(_toPrimitive$2);
var anObject$3 = require$$15;
var IE8_DOM_DEFINE$1 = require$$5$3;
var toPrimitive$2 = require$$19;
var dP$3 = Object.defineProperty;
var f$6 = _objectDp$1.f = require$$2$3 ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject$3(O);
  P = toPrimitive$2(P, true);
  anObject$3(Attributes);
  if (IE8_DOM_DEFINE$1)
    try {
      return dP$3(O, P, Attributes);
    } catch (e) {
    }
  if ("get" in Attributes || "set" in Attributes)
    throw TypeError("Accessors not supported!");
  if ("value" in Attributes)
    O[P] = Attributes.value;
  return O;
};
const _objectDp = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _objectDp$1,
  f: f$6
}, [_objectDp$1]);
const require$$25 = /* @__PURE__ */ getAugmentedNamespace(_objectDp);
var _propertyDesc = function(bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value
  };
};
const _propertyDesc$1 = /* @__PURE__ */ getDefaultExportFromCjs(_propertyDesc);
const _propertyDesc$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _propertyDesc$1
}, [_propertyDesc]);
const require$$20 = /* @__PURE__ */ getAugmentedNamespace(_propertyDesc$2);
var dP$2 = require$$25;
var createDesc$2 = require$$20;
var _hide = require$$2$3 ? function(object3, key, value) {
  return dP$2.f(object3, key, createDesc$2(1, value));
} : function(object3, key, value) {
  object3[key] = value;
  return object3;
};
const _hide$1 = /* @__PURE__ */ getDefaultExportFromCjs(_hide);
const _hide$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _hide$1
}, [_hide]);
const require$$30 = /* @__PURE__ */ getAugmentedNamespace(_hide$2);
var hasOwnProperty = {}.hasOwnProperty;
var _has = function(it, key) {
  return hasOwnProperty.call(it, key);
};
const _has$1 = /* @__PURE__ */ getDefaultExportFromCjs(_has);
const _has$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _has$1
}, [_has]);
const require$$1$6 = /* @__PURE__ */ getAugmentedNamespace(_has$2);
var global$5 = require$$0$c;
var core$2 = require$$4$2;
var ctx = require$$2$4;
var hide$2 = require$$30;
var has$6 = require$$1$6;
var PROTOTYPE$2 = "prototype";
var $export$3 = function(type2, name, source) {
  var IS_FORCED = type2 & $export$3.F;
  var IS_GLOBAL = type2 & $export$3.G;
  var IS_STATIC = type2 & $export$3.S;
  var IS_PROTO = type2 & $export$3.P;
  var IS_BIND = type2 & $export$3.B;
  var IS_WRAP = type2 & $export$3.W;
  var exports = IS_GLOBAL ? core$2 : core$2[name] || (core$2[name] = {});
  var expProto = exports[PROTOTYPE$2];
  var target2 = IS_GLOBAL ? global$5 : IS_STATIC ? global$5[name] : (global$5[name] || {})[PROTOTYPE$2];
  var key, own, out;
  if (IS_GLOBAL)
    source = name;
  for (key in source) {
    own = !IS_FORCED && target2 && target2[key] !== void 0;
    if (own && has$6(exports, key))
      continue;
    out = own ? target2[key] : source[key];
    exports[key] = IS_GLOBAL && typeof target2[key] != "function" ? source[key] : IS_BIND && own ? ctx(out, global$5) : IS_WRAP && target2[key] == out ? function(C) {
      var F = function(a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0:
              return new C();
            case 1:
              return new C(a);
            case 2:
              return new C(a, b);
          }
          return new C(a, b, c);
        }
        return C.apply(this, arguments);
      };
      F[PROTOTYPE$2] = C[PROTOTYPE$2];
      return F;
    }(out) : IS_PROTO && typeof out == "function" ? ctx(Function.call, out) : out;
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      if (type2 & $export$3.R && expProto && !expProto[key])
        hide$2(expProto, key, out);
    }
  }
};
$export$3.F = 1;
$export$3.G = 2;
$export$3.S = 4;
$export$3.P = 8;
$export$3.B = 16;
$export$3.W = 32;
$export$3.U = 64;
$export$3.R = 128;
var _export = $export$3;
const _export$1 = /* @__PURE__ */ getDefaultExportFromCjs(_export);
const _export$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _export$1
}, [_export]);
const require$$3$1 = /* @__PURE__ */ getAugmentedNamespace(_export$2);
var toString$1 = {}.toString;
var _cof = function(it) {
  return toString$1.call(it).slice(8, -1);
};
const _cof$1 = /* @__PURE__ */ getDefaultExportFromCjs(_cof);
const _cof$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _cof$1
}, [_cof]);
const require$$0$a = /* @__PURE__ */ getAugmentedNamespace(_cof$2);
var cof$1 = require$$0$a;
var _iobject = Object("z").propertyIsEnumerable(0) ? Object : function(it) {
  return cof$1(it) == "String" ? it.split("") : Object(it);
};
const _iobject$1 = /* @__PURE__ */ getDefaultExportFromCjs(_iobject);
const _iobject$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _iobject$1
}, [_iobject]);
const require$$5$2 = /* @__PURE__ */ getAugmentedNamespace(_iobject$2);
var _defined = function(it) {
  if (it == void 0)
    throw TypeError("Can't call method on  " + it);
  return it;
};
const _defined$1 = /* @__PURE__ */ getDefaultExportFromCjs(_defined);
const _defined$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _defined$1
}, [_defined]);
const require$$1$5 = /* @__PURE__ */ getAugmentedNamespace(_defined$2);
var IObject = require$$5$2;
var defined$2 = require$$1$5;
var _toIobject = function(it) {
  return IObject(defined$2(it));
};
const _toIobject$1 = /* @__PURE__ */ getDefaultExportFromCjs(_toIobject);
const _toIobject$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _toIobject$1
}, [_toIobject]);
const require$$18 = /* @__PURE__ */ getAugmentedNamespace(_toIobject$2);
var ceil = Math.ceil;
var floor = Math.floor;
var _toInteger = function(it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};
const _toInteger$1 = /* @__PURE__ */ getDefaultExportFromCjs(_toInteger);
const _toInteger$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _toInteger$1
}, [_toInteger]);
const require$$0$9 = /* @__PURE__ */ getAugmentedNamespace(_toInteger$2);
var toInteger$2 = require$$0$9;
var min$1 = Math.min;
var _toLength = function(it) {
  return it > 0 ? min$1(toInteger$2(it), 9007199254740991) : 0;
};
const _toLength$1 = /* @__PURE__ */ getDefaultExportFromCjs(_toLength);
const _toLength$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _toLength$1
}, [_toLength]);
const require$$1$4 = /* @__PURE__ */ getAugmentedNamespace(_toLength$2);
var toInteger$1 = require$$0$9;
var max = Math.max;
var min = Math.min;
var _toAbsoluteIndex = function(index2, length) {
  index2 = toInteger$1(index2);
  return index2 < 0 ? max(index2 + length, 0) : min(index2, length);
};
const _toAbsoluteIndex$1 = /* @__PURE__ */ getDefaultExportFromCjs(_toAbsoluteIndex);
const _toAbsoluteIndex$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _toAbsoluteIndex$1
}, [_toAbsoluteIndex]);
const require$$2$2 = /* @__PURE__ */ getAugmentedNamespace(_toAbsoluteIndex$2);
var toIObject$5 = require$$18;
var toLength = require$$1$4;
var toAbsoluteIndex = require$$2$2;
var _arrayIncludes = function(IS_INCLUDES) {
  return function($this, el, fromIndex) {
    var O = toIObject$5($this);
    var length = toLength(O.length);
    var index2 = toAbsoluteIndex(fromIndex, length);
    var value;
    if (IS_INCLUDES && el != el)
      while (length > index2) {
        value = O[index2++];
        if (value != value)
          return true;
      }
    else
      for (; length > index2; index2++)
        if (IS_INCLUDES || index2 in O) {
          if (O[index2] === el)
            return IS_INCLUDES || index2 || 0;
        }
    return !IS_INCLUDES && -1;
  };
};
const _arrayIncludes$1 = /* @__PURE__ */ getDefaultExportFromCjs(_arrayIncludes);
const _arrayIncludes$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _arrayIncludes$1
}, [_arrayIncludes]);
const require$$2$1 = /* @__PURE__ */ getAugmentedNamespace(_arrayIncludes$2);
var _shared$2 = { exports: {} };
var _library = true;
const _library$1 = /* @__PURE__ */ getDefaultExportFromCjs(_library);
const _library$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _library$1
}, [_library]);
const require$$29 = /* @__PURE__ */ getAugmentedNamespace(_library$2);
var core$1 = require$$4$2;
var global$4 = require$$0$c;
var SHARED = "__core-js_shared__";
var store$1 = global$4[SHARED] || (global$4[SHARED] = {});
(_shared$2.exports = function(key, value) {
  return store$1[key] || (store$1[key] = value !== void 0 ? value : {});
})("versions", []).push({
  version: core$1.version,
  mode: require$$29 ? "pure" : "global",
  copyright: "© 2020 Denis Pushkarev (zloirock.ru)"
});
var _sharedExports = _shared$2.exports;
const _shared = /* @__PURE__ */ getDefaultExportFromCjs(_sharedExports);
const _shared$1 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _shared
}, [_sharedExports]);
const require$$7$1 = /* @__PURE__ */ getAugmentedNamespace(_shared$1);
var id$1 = 0;
var px = Math.random();
var _uid = function(key) {
  return "Symbol(".concat(key === void 0 ? "" : key, ")_", (++id$1 + px).toString(36));
};
const _uid$1 = /* @__PURE__ */ getDefaultExportFromCjs(_uid);
const _uid$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _uid$1
}, [_uid]);
const require$$9 = /* @__PURE__ */ getAugmentedNamespace(_uid$2);
var shared$1 = require$$7$1("keys");
var uid$3 = require$$9;
var _sharedKey = function(key) {
  return shared$1[key] || (shared$1[key] = uid$3(key));
};
const _sharedKey$1 = /* @__PURE__ */ getDefaultExportFromCjs(_sharedKey);
const _sharedKey$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _sharedKey$1
}, [_sharedKey]);
const require$$2 = /* @__PURE__ */ getAugmentedNamespace(_sharedKey$2);
var has$5 = require$$1$6;
var toIObject$4 = require$$18;
var arrayIndexOf = require$$2$1(false);
var IE_PROTO$2 = require$$2("IE_PROTO");
var _objectKeysInternal = function(object3, names) {
  var O = toIObject$4(object3);
  var i = 0;
  var result = [];
  var key;
  for (key in O)
    if (key != IE_PROTO$2)
      has$5(O, key) && result.push(key);
  while (names.length > i)
    if (has$5(O, key = names[i++])) {
      ~arrayIndexOf(result, key) || result.push(key);
    }
  return result;
};
const _objectKeysInternal$1 = /* @__PURE__ */ getDefaultExportFromCjs(_objectKeysInternal);
const _objectKeysInternal$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _objectKeysInternal$1
}, [_objectKeysInternal]);
const require$$0$8 = /* @__PURE__ */ getAugmentedNamespace(_objectKeysInternal$2);
var _enumBugKeys = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",");
const _enumBugKeys$1 = /* @__PURE__ */ getDefaultExportFromCjs(_enumBugKeys);
const _enumBugKeys$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _enumBugKeys$1
}, [_enumBugKeys]);
const require$$1$3 = /* @__PURE__ */ getAugmentedNamespace(_enumBugKeys$2);
var $keys$2 = require$$0$8;
var enumBugKeys$1 = require$$1$3;
var _objectKeys = Object.keys || function keys(O) {
  return $keys$2(O, enumBugKeys$1);
};
const _objectKeys$1 = /* @__PURE__ */ getDefaultExportFromCjs(_objectKeys);
const _objectKeys$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _objectKeys$1
}, [_objectKeys]);
const require$$26 = /* @__PURE__ */ getAugmentedNamespace(_objectKeys$2);
var _objectGops$1 = {};
var f$5 = _objectGops$1.f = Object.getOwnPropertySymbols;
const _objectGops = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _objectGops$1,
  f: f$5
}, [_objectGops$1]);
const require$$24 = /* @__PURE__ */ getAugmentedNamespace(_objectGops);
var _objectPie$1 = {};
var f$4 = _objectPie$1.f = {}.propertyIsEnumerable;
const _objectPie = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _objectPie$1,
  f: f$4
}, [_objectPie$1]);
const require$$28 = /* @__PURE__ */ getAugmentedNamespace(_objectPie);
var defined$1 = require$$1$5;
var _toObject = function(it) {
  return Object(defined$1(it));
};
const _toObject$1 = /* @__PURE__ */ getDefaultExportFromCjs(_toObject);
const _toObject$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _toObject$1
}, [_toObject]);
const require$$17 = /* @__PURE__ */ getAugmentedNamespace(_toObject$2);
var _objectAssign;
var hasRequired_objectAssign;
function require_objectAssign() {
  if (hasRequired_objectAssign)
    return _objectAssign;
  hasRequired_objectAssign = 1;
  var DESCRIPTORS2 = require$$2$3;
  var getKeys2 = require$$26;
  var gOPS2 = require$$24;
  var pIE2 = require$$28;
  var toObject2 = require$$17;
  var IObject2 = require$$5$2;
  var $assign = Object.assign;
  _objectAssign = !$assign || require$$6(function() {
    var A = {};
    var B = {};
    var S = Symbol();
    var K = "abcdefghijklmnopqrst";
    A[S] = 7;
    K.split("").forEach(function(k) {
      B[k] = k;
    });
    return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join("") != K;
  }) ? function assign2(target2, source) {
    var T = toObject2(target2);
    var aLen = arguments.length;
    var index2 = 1;
    var getSymbols = gOPS2.f;
    var isEnum2 = pIE2.f;
    while (aLen > index2) {
      var S = IObject2(arguments[index2++]);
      var keys2 = getSymbols ? getKeys2(S).concat(getSymbols(S)) : getKeys2(S);
      var length = keys2.length;
      var j = 0;
      var key;
      while (length > j) {
        key = keys2[j++];
        if (!DESCRIPTORS2 || isEnum2.call(S, key))
          T[key] = S[key];
      }
    }
    return T;
  } : $assign;
  return _objectAssign;
}
var $export$2 = require$$3$1;
$export$2($export$2.S + $export$2.F, "Object", { assign: require_objectAssign() });
var assign$3 = require$$4$2.Object.assign;
const assign$4 = /* @__PURE__ */ getDefaultExportFromCjs(assign$3);
const assign$5 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: assign$4
}, [assign$3]);
const require$$0$7 = /* @__PURE__ */ getAugmentedNamespace(assign$5);
var assign = { "default": require$$0$7, __esModule: true };
const assign$1 = /* @__PURE__ */ getDefaultExportFromCjs(assign);
const assign$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: assign$1
}, [assign]);
const require$$0$6 = /* @__PURE__ */ getAugmentedNamespace(assign$2);
var _assign = require$$0$6;
var _assign2 = _interopRequireDefault$1(_assign);
function _interopRequireDefault$1(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var _default$1 = _assign2.default || function(target2) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target2[key] = source[key];
      }
    }
  }
  return target2;
};
var toInteger = require$$0$9;
var defined = require$$1$5;
var _stringAt = function(TO_STRING) {
  return function(that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l)
      return TO_STRING ? "" : void 0;
    a = s.charCodeAt(i);
    return a < 55296 || a > 56319 || i + 1 === l || (b = s.charCodeAt(i + 1)) < 56320 || b > 57343 ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 55296 << 10) + (b - 56320) + 65536;
  };
};
const _stringAt$1 = /* @__PURE__ */ getDefaultExportFromCjs(_stringAt);
const _stringAt$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _stringAt$1
}, [_stringAt]);
const require$$0$5 = /* @__PURE__ */ getAugmentedNamespace(_stringAt$2);
var _redefine = require$$30;
const _redefine$1 = /* @__PURE__ */ getDefaultExportFromCjs(_redefine);
const _redefine$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _redefine$1
}, [_redefine]);
const require$$4$1 = /* @__PURE__ */ getAugmentedNamespace(_redefine$2);
var _iterators = {};
const _iterators$1 = /* @__PURE__ */ getDefaultExportFromCjs(_iterators);
const _iterators$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _iterators$1
}, [_iterators]);
const require$$3 = /* @__PURE__ */ getAugmentedNamespace(_iterators$2);
var dP$1 = require$$25;
var anObject$2 = require$$15;
var getKeys$1 = require$$26;
var _objectDps = require$$2$3 ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject$2(O);
  var keys2 = getKeys$1(Properties);
  var length = keys2.length;
  var i = 0;
  var P;
  while (length > i)
    dP$1.f(O, P = keys2[i++], Properties[P]);
  return O;
};
const _objectDps$1 = /* @__PURE__ */ getDefaultExportFromCjs(_objectDps);
const _objectDps$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _objectDps$1
}, [_objectDps]);
const require$$1$2 = /* @__PURE__ */ getAugmentedNamespace(_objectDps$2);
var _html;
var hasRequired_html;
function require_html() {
  if (hasRequired_html)
    return _html;
  hasRequired_html = 1;
  var document2 = require$$0$c.document;
  _html = document2 && document2.documentElement;
  return _html;
}
var anObject$1 = require$$15;
var dPs = require$$1$2;
var enumBugKeys = require$$1$3;
var IE_PROTO$1 = require$$2("IE_PROTO");
var Empty = function() {
};
var PROTOTYPE$1 = "prototype";
var createDict = function() {
  var iframe = require_domCreate()("iframe");
  var i = enumBugKeys.length;
  var lt = "<";
  var gt = ">";
  var iframeDocument;
  iframe.style.display = "none";
  require_html().appendChild(iframe);
  iframe.src = "javascript:";
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + "script" + gt + "document.F=Object" + lt + "/script" + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--)
    delete createDict[PROTOTYPE$1][enumBugKeys[i]];
  return createDict();
};
var _objectCreate = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE$1] = anObject$1(O);
    result = new Empty();
    Empty[PROTOTYPE$1] = null;
    result[IE_PROTO$1] = O;
  } else
    result = createDict();
  return Properties === void 0 ? result : dPs(result, Properties);
};
const _objectCreate$1 = /* @__PURE__ */ getDefaultExportFromCjs(_objectCreate);
const _objectCreate$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _objectCreate$1
}, [_objectCreate]);
const require$$21 = /* @__PURE__ */ getAugmentedNamespace(_objectCreate$2);
var _wks$2 = { exports: {} };
var store = require$$7$1("wks");
var uid$2 = require$$9;
var Symbol$1 = require$$0$c.Symbol;
var USE_SYMBOL = typeof Symbol$1 == "function";
var $exports = _wks$2.exports = function(name) {
  return store[name] || (store[name] = USE_SYMBOL && Symbol$1[name] || (USE_SYMBOL ? Symbol$1 : uid$2)("Symbol." + name));
};
$exports.store = store;
var _wksExports = _wks$2.exports;
const _wks = /* @__PURE__ */ getDefaultExportFromCjs(_wksExports);
const _wks$1 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _wks
}, [_wksExports]);
const require$$10 = /* @__PURE__ */ getAugmentedNamespace(_wks$1);
var def = require$$25.f;
var has$4 = require$$1$6;
var TAG = require$$10("toStringTag");
var _setToStringTag = function(it, tag2, stat) {
  if (it && !has$4(it = stat ? it : it.prototype, TAG))
    def(it, TAG, { configurable: true, value: tag2 });
};
const _setToStringTag$1 = /* @__PURE__ */ getDefaultExportFromCjs(_setToStringTag);
const _setToStringTag$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _setToStringTag$1
}, [_setToStringTag]);
const require$$8 = /* @__PURE__ */ getAugmentedNamespace(_setToStringTag$2);
var create2 = require$$21;
var descriptor = require$$20;
var setToStringTag$2 = require$$8;
var IteratorPrototype = {};
require$$30(IteratorPrototype, require$$10("iterator"), function() {
  return this;
});
var _iterCreate = function(Constructor, NAME, next) {
  Constructor.prototype = create2(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag$2(Constructor, NAME + " Iterator");
};
const _iterCreate$1 = /* @__PURE__ */ getDefaultExportFromCjs(_iterCreate);
const _iterCreate$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _iterCreate$1
}, [_iterCreate]);
const require$$5$1 = /* @__PURE__ */ getAugmentedNamespace(_iterCreate$2);
var has$3 = require$$1$6;
var toObject$1 = require$$17;
var IE_PROTO = require$$2("IE_PROTO");
var ObjectProto$1 = Object.prototype;
var _objectGpo = Object.getPrototypeOf || function(O) {
  O = toObject$1(O);
  if (has$3(O, IE_PROTO))
    return O[IE_PROTO];
  if (typeof O.constructor == "function" && O instanceof O.constructor) {
    return O.constructor.prototype;
  }
  return O instanceof Object ? ObjectProto$1 : null;
};
const _objectGpo$1 = /* @__PURE__ */ getDefaultExportFromCjs(_objectGpo);
const _objectGpo$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _objectGpo$1
}, [_objectGpo]);
const require$$7 = /* @__PURE__ */ getAugmentedNamespace(_objectGpo$2);
var LIBRARY$1 = require$$29;
var $export$1 = require$$3$1;
var redefine$1 = require$$4$1;
var hide$1 = require$$30;
var Iterators$2 = require$$3;
var $iterCreate = require$$5$1;
var setToStringTag$1 = require$$8;
var getPrototypeOf = require$$7;
var ITERATOR = require$$10("iterator");
var BUGGY = !([].keys && "next" in [].keys());
var FF_ITERATOR = "@@iterator";
var KEYS = "keys";
var VALUES = "values";
var returnThis = function() {
  return this;
};
var _iterDefine = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function(kind) {
    if (!BUGGY && kind in proto)
      return proto[kind];
    switch (kind) {
      case KEYS:
        return function keys2() {
          return new Constructor(this, kind);
        };
      case VALUES:
        return function values() {
          return new Constructor(this, kind);
        };
    }
    return function entries() {
      return new Constructor(this, kind);
    };
  };
  var TAG2 = NAME + " Iterator";
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod("entries") : void 0;
  var $anyNative = NAME == "Array" ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype2;
  if ($anyNative) {
    IteratorPrototype2 = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype2 !== Object.prototype && IteratorPrototype2.next) {
      setToStringTag$1(IteratorPrototype2, TAG2, true);
      if (!LIBRARY$1 && typeof IteratorPrototype2[ITERATOR] != "function")
        hide$1(IteratorPrototype2, ITERATOR, returnThis);
    }
  }
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() {
      return $native.call(this);
    };
  }
  if ((!LIBRARY$1 || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide$1(proto, ITERATOR, $default);
  }
  Iterators$2[NAME] = $default;
  Iterators$2[TAG2] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED)
      for (key in methods) {
        if (!(key in proto))
          redefine$1(proto, key, methods[key]);
      }
    else
      $export$1($export$1.P + $export$1.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};
const _iterDefine$1 = /* @__PURE__ */ getDefaultExportFromCjs(_iterDefine);
const _iterDefine$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _iterDefine$1
}, [_iterDefine]);
const require$$4 = /* @__PURE__ */ getAugmentedNamespace(_iterDefine$2);
var $at = require$$0$5(true);
require$$4(String, "String", function(iterated) {
  this._t = String(iterated);
  this._i = 0;
}, function() {
  var O = this._t;
  var index2 = this._i;
  var point;
  if (index2 >= O.length)
    return { value: void 0, done: true };
  point = $at(O, index2);
  this._i += point.length;
  return { value: point, done: false };
});
var _addToUnscopables = function() {
};
const _addToUnscopables$1 = /* @__PURE__ */ getDefaultExportFromCjs(_addToUnscopables);
const _addToUnscopables$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _addToUnscopables$1
}, [_addToUnscopables]);
const require$$0$4 = /* @__PURE__ */ getAugmentedNamespace(_addToUnscopables$2);
var _iterStep = function(done, value) {
  return { value, done: !!done };
};
const _iterStep$1 = /* @__PURE__ */ getDefaultExportFromCjs(_iterStep);
const _iterStep$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _iterStep$1
}, [_iterStep]);
const require$$1$1 = /* @__PURE__ */ getAugmentedNamespace(_iterStep$2);
var addToUnscopables = require$$0$4;
var step = require$$1$1;
var Iterators$1 = require$$3;
var toIObject$3 = require$$18;
require$$4(Array, "Array", function(iterated, kind) {
  this._t = toIObject$3(iterated);
  this._i = 0;
  this._k = kind;
}, function() {
  var O = this._t;
  var kind = this._k;
  var index2 = this._i++;
  if (!O || index2 >= O.length) {
    this._t = void 0;
    return step(1);
  }
  if (kind == "keys")
    return step(0, index2);
  if (kind == "values")
    return step(0, O[index2]);
  return step(0, [index2, O[index2]]);
}, "values");
Iterators$1.Arguments = Iterators$1.Array;
addToUnscopables("keys");
addToUnscopables("values");
addToUnscopables("entries");
var global$3 = require$$0$c;
var hide = require$$30;
var Iterators = require$$3;
var TO_STRING_TAG = require$$10("toStringTag");
var DOMIterables = "CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(",");
for (var i = 0; i < DOMIterables.length; i++) {
  var NAME = DOMIterables[i];
  var Collection = global$3[NAME];
  var proto = Collection && Collection.prototype;
  if (proto && !proto[TO_STRING_TAG])
    hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}
var _wksExt$1 = {};
var f$3 = _wksExt$1.f = require$$10;
const _wksExt = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _wksExt$1,
  f: f$3
}, [_wksExt$1]);
const require$$11 = /* @__PURE__ */ getAugmentedNamespace(_wksExt);
var iterator$3 = require$$11.f("iterator");
const iterator$4 = /* @__PURE__ */ getDefaultExportFromCjs(iterator$3);
const iterator$5 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: iterator$4
}, [iterator$3]);
const require$$0$3 = /* @__PURE__ */ getAugmentedNamespace(iterator$5);
var iterator = { "default": require$$0$3, __esModule: true };
const iterator$1 = /* @__PURE__ */ getDefaultExportFromCjs(iterator);
const iterator$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: iterator$1
}, [iterator]);
const require$$0$2 = /* @__PURE__ */ getAugmentedNamespace(iterator$2);
var _meta$2 = { exports: {} };
var META$1 = require$$9("meta");
var isObject$2 = require$$16;
var has$2 = require$$1$6;
var setDesc = require$$25.f;
var id = 0;
var isExtensible = Object.isExtensible || function() {
  return true;
};
var FREEZE = !require$$6(function() {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function(it) {
  setDesc(it, META$1, { value: {
    i: "O" + ++id,
    // object ID
    w: {}
    // weak collections IDs
  } });
};
var fastKey = function(it, create4) {
  if (!isObject$2(it))
    return typeof it == "symbol" ? it : (typeof it == "string" ? "S" : "P") + it;
  if (!has$2(it, META$1)) {
    if (!isExtensible(it))
      return "F";
    if (!create4)
      return "E";
    setMeta(it);
  }
  return it[META$1].i;
};
var getWeak = function(it, create4) {
  if (!has$2(it, META$1)) {
    if (!isExtensible(it))
      return true;
    if (!create4)
      return false;
    setMeta(it);
  }
  return it[META$1].w;
};
var onFreeze = function(it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has$2(it, META$1))
    setMeta(it);
  return it;
};
var meta = _meta$2.exports = {
  KEY: META$1,
  NEED: false,
  fastKey,
  getWeak,
  onFreeze
};
var _metaExports = _meta$2.exports;
const _meta = /* @__PURE__ */ getDefaultExportFromCjs(_metaExports);
const _meta$1 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _meta
}, [_metaExports]);
const require$$5 = /* @__PURE__ */ getAugmentedNamespace(_meta$1);
var global$2 = require$$0$c;
var core = require$$4$2;
var LIBRARY = require$$29;
var wksExt$1 = require$$11;
var defineProperty2 = require$$25.f;
var _wksDefine = function(name) {
  var $Symbol2 = core.Symbol || (core.Symbol = LIBRARY ? {} : global$2.Symbol || {});
  if (name.charAt(0) != "_" && !(name in $Symbol2))
    defineProperty2($Symbol2, name, { value: wksExt$1.f(name) });
};
const _wksDefine$1 = /* @__PURE__ */ getDefaultExportFromCjs(_wksDefine);
const _wksDefine$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _wksDefine$1
}, [_wksDefine]);
const require$$0$1 = /* @__PURE__ */ getAugmentedNamespace(_wksDefine$2);
var getKeys = require$$26;
var gOPS = require$$24;
var pIE$1 = require$$28;
var _enumKeys = function(it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum2 = pIE$1.f;
    var i = 0;
    var key;
    while (symbols.length > i)
      if (isEnum2.call(it, key = symbols[i++]))
        result.push(key);
  }
  return result;
};
const _enumKeys$1 = /* @__PURE__ */ getDefaultExportFromCjs(_enumKeys);
const _enumKeys$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _enumKeys$1
}, [_enumKeys]);
const require$$13 = /* @__PURE__ */ getAugmentedNamespace(_enumKeys$2);
var cof = require$$0$a;
var _isArray = Array.isArray || function isArray(arg) {
  return cof(arg) == "Array";
};
const _isArray$1 = /* @__PURE__ */ getDefaultExportFromCjs(_isArray);
const _isArray$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _isArray$1
}, [_isArray]);
const require$$14 = /* @__PURE__ */ getAugmentedNamespace(_isArray$2);
var _objectGopnExt$1 = {};
var _objectGopn$1 = {};
var $keys$1 = require$$0$8;
var hiddenKeys = require$$1$3.concat("length", "prototype");
var f$2 = _objectGopn$1.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys$1(O, hiddenKeys);
};
const _objectGopn = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _objectGopn$1,
  f: f$2
}, [_objectGopn$1]);
const require$$27 = /* @__PURE__ */ getAugmentedNamespace(_objectGopn);
var toIObject$2 = require$$18;
var gOPN$1 = require$$27.f;
var toString = {}.toString;
var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
var getWindowNames = function(it) {
  try {
    return gOPN$1(it);
  } catch (e) {
    return windowNames.slice();
  }
};
var f$1 = _objectGopnExt$1.f = function getOwnPropertyNames2(it) {
  return windowNames && toString.call(it) == "[object Window]" ? getWindowNames(it) : gOPN$1(toIObject$2(it));
};
const _objectGopnExt = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _objectGopnExt$1,
  f: f$1
}, [_objectGopnExt$1]);
const require$$22 = /* @__PURE__ */ getAugmentedNamespace(_objectGopnExt);
var _objectGopd$1 = {};
var pIE = require$$28;
var createDesc$1 = require$$20;
var toIObject$1 = require$$18;
var toPrimitive$1 = require$$19;
var has$1 = require$$1$6;
var IE8_DOM_DEFINE = require$$5$3;
var gOPD$1 = Object.getOwnPropertyDescriptor;
var f = _objectGopd$1.f = require$$2$3 ? gOPD$1 : function getOwnPropertyDescriptor(O, P) {
  O = toIObject$1(O);
  P = toPrimitive$1(P, true);
  if (IE8_DOM_DEFINE)
    try {
      return gOPD$1(O, P);
    } catch (e) {
    }
  if (has$1(O, P))
    return createDesc$1(!pIE.f.call(O, P), O[P]);
};
const _objectGopd = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: _objectGopd$1,
  f
}, [_objectGopd$1]);
const require$$23 = /* @__PURE__ */ getAugmentedNamespace(_objectGopd);
var global$1 = require$$0$c;
var has = require$$1$6;
var DESCRIPTORS = require$$2$3;
var $export = require$$3$1;
var redefine = require$$4$1;
var META = require$$5.KEY;
var $fails = require$$6;
var shared = require$$7$1;
var setToStringTag = require$$8;
var uid$1 = require$$9;
var wks = require$$10;
var wksExt = require$$11;
var wksDefine = require$$0$1;
var enumKeys = require$$13;
var isArray2 = require$$14;
var anObject = require$$15;
var isObject$1 = require$$16;
var toObject = require$$17;
var toIObject = require$$18;
var toPrimitive = require$$19;
var createDesc = require$$20;
var _create = require$$21;
var gOPNExt = require$$22;
var $GOPD = require$$23;
var $GOPS = require$$24;
var $DP = require$$25;
var $keys = require$$26;
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global$1.Symbol;
var $JSON = global$1.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = "prototype";
var HIDDEN = wks("_hidden");
var TO_PRIMITIVE = wks("toPrimitive");
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared("symbol-registry");
var AllSymbols = shared("symbols");
var OPSymbols = shared("op-symbols");
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == "function" && !!$GOPS.f;
var QObject = global$1.QObject;
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
var setSymbolDesc = DESCRIPTORS && $fails(function() {
  return _create(dP({}, "a", {
    get: function() {
      return dP(this, "a", { value: 7 }).a;
    }
  })).a != 7;
}) ? function(it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc)
    delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto)
    dP(ObjectProto, key, protoDesc);
} : dP;
var wrap = function(tag2) {
  var sym = AllSymbols[tag2] = _create($Symbol[PROTOTYPE]);
  sym._k = tag2;
  return sym;
};
var isSymbol$1 = USE_NATIVE && typeof $Symbol.iterator == "symbol" ? function(it) {
  return typeof it == "symbol";
} : function(it) {
  return it instanceof $Symbol;
};
var $defineProperty = function defineProperty3(it, key, D) {
  if (it === ObjectProto)
    $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN))
        dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key])
        it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    }
    return setSymbolDesc(it, key, D);
  }
  return dP(it, key, D);
};
var $defineProperties = function defineProperties2(it, P) {
  anObject(it);
  var keys2 = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys2.length;
  var key;
  while (l > i)
    $defineProperty(it, key = keys2[i++], P[key]);
  return it;
};
var $create = function create3(it, P) {
  return P === void 0 ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))
    return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor2(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))
    return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))
    D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames3(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)
      result.push(key);
  }
  return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))
      result.push(AllSymbols[key]);
  }
  return result;
};
if (!USE_NATIVE) {
  $Symbol = function Symbol2() {
    if (this instanceof $Symbol)
      throw TypeError("Symbol is not a constructor!");
    var tag2 = uid$1(arguments.length > 0 ? arguments[0] : void 0);
    var $set = function(value) {
      if (this === ObjectProto)
        $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag2))
        this[HIDDEN][tag2] = false;
      setSymbolDesc(this, tag2, createDesc(1, value));
    };
    if (DESCRIPTORS && setter)
      setSymbolDesc(ObjectProto, tag2, { configurable: true, set: $set });
    return wrap(tag2);
  };
  redefine($Symbol[PROTOTYPE], "toString", function toString2() {
    return this._k;
  });
  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  require$$27.f = gOPNExt.f = $getOwnPropertyNames;
  require$$28.f = $propertyIsEnumerable;
  $GOPS.f = $getOwnPropertySymbols;
  if (DESCRIPTORS && !require$$29) {
    redefine(ObjectProto, "propertyIsEnumerable", $propertyIsEnumerable, true);
  }
  wksExt.f = function(name) {
    return wrap(wks(name));
  };
}
$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });
for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  "hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(",")
), j = 0; es6Symbols.length > j; )
  wks(es6Symbols[j++]);
for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k; )
  wksDefine(wellKnownSymbols[k++]);
$export($export.S + $export.F * !USE_NATIVE, "Symbol", {
  // 19.4.2.1 Symbol.for(key)
  "for": function(key) {
    return has(SymbolRegistry, key += "") ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol$1(sym))
      throw TypeError(sym + " is not a symbol!");
    for (var key in SymbolRegistry)
      if (SymbolRegistry[key] === sym)
        return key;
  },
  useSetter: function() {
    setter = true;
  },
  useSimple: function() {
    setter = false;
  }
});
$export($export.S + $export.F * !USE_NATIVE, "Object", {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});
var FAILS_ON_PRIMITIVES = $fails(function() {
  $GOPS.f(1);
});
$export($export.S + $export.F * FAILS_ON_PRIMITIVES, "Object", {
  getOwnPropertySymbols: function getOwnPropertySymbols2(it) {
    return $GOPS.f(toObject(it));
  }
});
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function() {
  var S = $Symbol();
  return _stringify([S]) != "[null]" || _stringify({ a: S }) != "{}" || _stringify(Object(S)) != "{}";
})), "JSON", {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i)
      args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject$1(replacer) && it === void 0 || isSymbol$1(it))
      return;
    if (!isArray2(replacer))
      replacer = function(key, value) {
        if (typeof $replacer == "function")
          value = $replacer.call(this, key, value);
        if (!isSymbol$1(value))
          return value;
      };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require$$30($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
setToStringTag($Symbol, "Symbol");
setToStringTag(Math, "Math", true);
setToStringTag(global$1.JSON, "JSON", true);
require$$0$1("asyncIterator");
require$$0$1("observable");
var symbol$3 = require$$4$2.Symbol;
const index = /* @__PURE__ */ getDefaultExportFromCjs(symbol$3);
const symbol$4 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: index
}, [symbol$3]);
const require$$0 = /* @__PURE__ */ getAugmentedNamespace(symbol$4);
var symbol = { "default": require$$0, __esModule: true };
const symbol$1 = /* @__PURE__ */ getDefaultExportFromCjs(symbol);
const symbol$2 = /* @__PURE__ */ _mergeNamespaces({
  __proto__: null,
  default: symbol$1
}, [symbol]);
const require$$1 = /* @__PURE__ */ getAugmentedNamespace(symbol$2);
var _iterator = require$$0$2;
var _iterator2 = _interopRequireDefault(_iterator);
var _symbol = require$$1;
var _symbol2 = _interopRequireDefault(_symbol);
var _typeof$1 = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function(obj) {
  return typeof obj;
} : function(obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj;
};
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}
var _default = typeof _symbol2.default === "function" && _typeof$1(_iterator2.default) === "symbol" ? function(obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof$1(obj);
} : function(obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof$1(obj);
};
var formatRegExp = /%[sdj%]/g;
var warning = function warning2() {
};
if (process.env.NODE_ENV !== "production" && typeof window !== "undefined" && typeof document !== "undefined") {
  warning = function warning3(type2, errors) {
    if (typeof console !== "undefined" && console.warn) {
      if (errors.every(function(e) {
        return typeof e === "string";
      })) {
        console.warn(type2, errors);
      }
    }
  };
}
function format() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  var i = 1;
  var f2 = args[0];
  var len = args.length;
  if (typeof f2 === "function") {
    return f2.apply(null, args.slice(1));
  }
  if (typeof f2 === "string") {
    var str = String(f2).replace(formatRegExp, function(x) {
      if (x === "%%") {
        return "%";
      }
      if (i >= len) {
        return x;
      }
      switch (x) {
        case "%s":
          return String(args[i++]);
        case "%d":
          return Number(args[i++]);
        case "%j":
          try {
            return JSON.stringify(args[i++]);
          } catch (_) {
            return "[Circular]";
          }
          break;
        default:
          return x;
      }
    });
    for (var arg = args[i]; i < len; arg = args[++i]) {
      str += " " + arg;
    }
    return str;
  }
  return f2;
}
function isNativeStringType(type2) {
  return type2 === "string" || type2 === "url" || type2 === "hex" || type2 === "email" || type2 === "pattern";
}
function isEmptyValue(value, type2) {
  if (value === void 0 || value === null) {
    return true;
  }
  if (type2 === "array" && Array.isArray(value) && !value.length) {
    return true;
  }
  if (isNativeStringType(type2) && typeof value === "string" && !value) {
    return true;
  }
  return false;
}
function asyncParallelArray(arr, func, callback) {
  var results = [];
  var total = 0;
  var arrLength = arr.length;
  function count(errors) {
    results.push.apply(results, errors);
    total++;
    if (total === arrLength) {
      callback(results);
    }
  }
  arr.forEach(function(a) {
    func(a, count);
  });
}
function asyncSerialArray(arr, func, callback) {
  var index2 = 0;
  var arrLength = arr.length;
  function next(errors) {
    if (errors && errors.length) {
      callback(errors);
      return;
    }
    var original = index2;
    index2 = index2 + 1;
    if (original < arrLength) {
      func(arr[original], next);
    } else {
      callback([]);
    }
  }
  next([]);
}
function flattenObjArr(objArr) {
  var ret = [];
  Object.keys(objArr).forEach(function(k) {
    ret.push.apply(ret, objArr[k]);
  });
  return ret;
}
function asyncMap(objArr, option2, func, callback) {
  if (option2.first) {
    var flattenArr = flattenObjArr(objArr);
    return asyncSerialArray(flattenArr, func, callback);
  }
  var firstFields = option2.firstFields || [];
  if (firstFields === true) {
    firstFields = Object.keys(objArr);
  }
  var objArrKeys = Object.keys(objArr);
  var objArrLength = objArrKeys.length;
  var total = 0;
  var results = [];
  var next = function next2(errors) {
    results.push.apply(results, errors);
    total++;
    if (total === objArrLength) {
      callback(results);
    }
  };
  objArrKeys.forEach(function(key) {
    var arr = objArr[key];
    if (firstFields.indexOf(key) !== -1) {
      asyncSerialArray(arr, func, next);
    } else {
      asyncParallelArray(arr, func, next);
    }
  });
}
function complementError(rule) {
  return function(oe) {
    if (oe && oe.message) {
      oe.field = oe.field || rule.fullField;
      return oe;
    }
    return {
      message: oe,
      field: oe.field || rule.fullField
    };
  };
}
function deepMerge(target2, source) {
  if (source) {
    for (var s in source) {
      if (source.hasOwnProperty(s)) {
        var value = source[s];
        if ((typeof value === "undefined" ? "undefined" : _default(value)) === "object" && _default(target2[s]) === "object") {
          target2[s] = _default$1({}, target2[s], value);
        } else {
          target2[s] = value;
        }
      }
    }
  }
  return target2;
}
function required$1(rule, value, source, errors, options, type2) {
  if (rule.required && (!source.hasOwnProperty(rule.field) || isEmptyValue(value, type2 || rule.type))) {
    errors.push(format(options.messages.required, rule.fullField));
  }
}
function whitespace(rule, value, source, errors, options) {
  if (/^\s+$/.test(value) || value === "") {
    errors.push(format(options.messages.whitespace, rule.fullField));
  }
}
var pattern$2 = {
  // http://emailregex.com/
  email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
  url: new RegExp("^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$", "i"),
  hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
};
var types = {
  integer: function integer(value) {
    return types.number(value) && parseInt(value, 10) === value;
  },
  float: function float(value) {
    return types.number(value) && !types.integer(value);
  },
  array: function array(value) {
    return Array.isArray(value);
  },
  regexp: function regexp(value) {
    if (value instanceof RegExp) {
      return true;
    }
    try {
      return !!new RegExp(value);
    } catch (e) {
      return false;
    }
  },
  date: function date(value) {
    return typeof value.getTime === "function" && typeof value.getMonth === "function" && typeof value.getYear === "function";
  },
  number: function number(value) {
    if (isNaN(value)) {
      return false;
    }
    return typeof value === "number";
  },
  object: function object(value) {
    return (typeof value === "undefined" ? "undefined" : _default(value)) === "object" && !types.array(value);
  },
  method: function method(value) {
    return typeof value === "function";
  },
  email: function email(value) {
    return typeof value === "string" && !!value.match(pattern$2.email) && value.length < 255;
  },
  url: function url(value) {
    return typeof value === "string" && !!value.match(pattern$2.url);
  },
  hex: function hex(value) {
    return typeof value === "string" && !!value.match(pattern$2.hex);
  }
};
function type$1(rule, value, source, errors, options) {
  if (rule.required && value === void 0) {
    required$1(rule, value, source, errors, options);
    return;
  }
  var custom = ["integer", "float", "array", "regexp", "object", "method", "email", "number", "date", "url", "hex"];
  var ruleType = rule.type;
  if (custom.indexOf(ruleType) > -1) {
    if (!types[ruleType](value)) {
      errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
    }
  } else if (ruleType && (typeof value === "undefined" ? "undefined" : _default(value)) !== rule.type) {
    errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
  }
}
function range(rule, value, source, errors, options) {
  var len = typeof rule.len === "number";
  var min2 = typeof rule.min === "number";
  var max2 = typeof rule.max === "number";
  var spRegexp = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
  var val = value;
  var key = null;
  var num = typeof value === "number";
  var str = typeof value === "string";
  var arr = Array.isArray(value);
  if (num) {
    key = "number";
  } else if (str) {
    key = "string";
  } else if (arr) {
    key = "array";
  }
  if (!key) {
    return false;
  }
  if (arr) {
    val = value.length;
  }
  if (str) {
    val = value.replace(spRegexp, "_").length;
  }
  if (len) {
    if (val !== rule.len) {
      errors.push(format(options.messages[key].len, rule.fullField, rule.len));
    }
  } else if (min2 && !max2 && val < rule.min) {
    errors.push(format(options.messages[key].min, rule.fullField, rule.min));
  } else if (max2 && !min2 && val > rule.max) {
    errors.push(format(options.messages[key].max, rule.fullField, rule.max));
  } else if (min2 && max2 && (val < rule.min || val > rule.max)) {
    errors.push(format(options.messages[key].range, rule.fullField, rule.min, rule.max));
  }
}
var ENUM$1 = "enum";
function enumerable$1(rule, value, source, errors, options) {
  rule[ENUM$1] = Array.isArray(rule[ENUM$1]) ? rule[ENUM$1] : [];
  if (rule[ENUM$1].indexOf(value) === -1) {
    errors.push(format(options.messages[ENUM$1], rule.fullField, rule[ENUM$1].join(", ")));
  }
}
function pattern$1(rule, value, source, errors, options) {
  if (rule.pattern) {
    if (rule.pattern instanceof RegExp) {
      rule.pattern.lastIndex = 0;
      if (!rule.pattern.test(value)) {
        errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
      }
    } else if (typeof rule.pattern === "string") {
      var _pattern = new RegExp(rule.pattern);
      if (!_pattern.test(value)) {
        errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
      }
    }
  }
}
const rules = {
  required: required$1,
  whitespace,
  type: type$1,
  range,
  "enum": enumerable$1,
  pattern: pattern$1
};
function string(rule, value, callback, source, options) {
  var errors = [];
  var validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate2) {
    if (isEmptyValue(value, "string") && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options, "string");
    if (!isEmptyValue(value, "string")) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
      rules.pattern(rule, value, source, errors, options);
      if (rule.whitespace === true) {
        rules.whitespace(rule, value, source, errors, options);
      }
    }
  }
  callback(errors);
}
function method2(rule, value, callback, source, options) {
  var errors = [];
  var validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate2) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
    }
  }
  callback(errors);
}
function number2(rule, value, callback, source, options) {
  var errors = [];
  var validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate2) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
    }
  }
  callback(errors);
}
function boolean(rule, value, callback, source, options) {
  var errors = [];
  var validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate2) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
    }
  }
  callback(errors);
}
function regexp2(rule, value, callback, source, options) {
  var errors = [];
  var validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate2) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (!isEmptyValue(value)) {
      rules.type(rule, value, source, errors, options);
    }
  }
  callback(errors);
}
function integer2(rule, value, callback, source, options) {
  var errors = [];
  var validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate2) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
    }
  }
  callback(errors);
}
function floatFn(rule, value, callback, source, options) {
  var errors = [];
  var validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate2) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
    }
  }
  callback(errors);
}
function array2(rule, value, callback, source, options) {
  var errors = [];
  var validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate2) {
    if (isEmptyValue(value, "array") && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options, "array");
    if (!isEmptyValue(value, "array")) {
      rules.type(rule, value, source, errors, options);
      rules.range(rule, value, source, errors, options);
    }
  }
  callback(errors);
}
function object2(rule, value, callback, source, options) {
  var errors = [];
  var validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate2) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value !== void 0) {
      rules.type(rule, value, source, errors, options);
    }
  }
  callback(errors);
}
var ENUM = "enum";
function enumerable(rule, value, callback, source, options) {
  var errors = [];
  var validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate2) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (value) {
      rules[ENUM](rule, value, source, errors, options);
    }
  }
  callback(errors);
}
function pattern(rule, value, callback, source, options) {
  var errors = [];
  var validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate2) {
    if (isEmptyValue(value, "string") && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (!isEmptyValue(value, "string")) {
      rules.pattern(rule, value, source, errors, options);
    }
  }
  callback(errors);
}
function date2(rule, value, callback, source, options) {
  var errors = [];
  var validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate2) {
    if (isEmptyValue(value) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options);
    if (!isEmptyValue(value)) {
      var dateObject = void 0;
      if (typeof value === "number") {
        dateObject = new Date(value);
      } else {
        dateObject = value;
      }
      rules.type(rule, dateObject, source, errors, options);
      if (dateObject) {
        rules.range(rule, dateObject.getTime(), source, errors, options);
      }
    }
  }
  callback(errors);
}
function required(rule, value, callback, source, options) {
  var errors = [];
  var type2 = Array.isArray(value) ? "array" : typeof value === "undefined" ? "undefined" : _default(value);
  rules.required(rule, value, source, errors, options, type2);
  callback(errors);
}
function type(rule, value, callback, source, options) {
  var ruleType = rule.type;
  var errors = [];
  var validate2 = rule.required || !rule.required && source.hasOwnProperty(rule.field);
  if (validate2) {
    if (isEmptyValue(value, ruleType) && !rule.required) {
      return callback();
    }
    rules.required(rule, value, source, errors, options, ruleType);
    if (!isEmptyValue(value, ruleType)) {
      rules.type(rule, value, source, errors, options);
    }
  }
  callback(errors);
}
const validators = {
  string,
  method: method2,
  number: number2,
  boolean,
  regexp: regexp2,
  integer: integer2,
  float: floatFn,
  array: array2,
  object: object2,
  "enum": enumerable,
  pattern,
  date: date2,
  url: type,
  hex: type,
  email: type,
  required
};
function newMessages() {
  return {
    "default": "Validation error on field %s",
    required: "%s is required",
    "enum": "%s must be one of %s",
    whitespace: "%s cannot be empty",
    date: {
      format: "%s date %s is invalid for format %s",
      parse: "%s date could not be parsed, %s is invalid ",
      invalid: "%s date %s is invalid"
    },
    types: {
      string: "%s is not a %s",
      method: "%s is not a %s (function)",
      array: "%s is not an %s",
      object: "%s is not an %s",
      number: "%s is not a %s",
      date: "%s is not a %s",
      boolean: "%s is not a %s",
      integer: "%s is not an %s",
      float: "%s is not a %s",
      regexp: "%s is not a valid %s",
      email: "%s is not a valid %s",
      url: "%s is not a valid %s",
      hex: "%s is not a valid %s"
    },
    string: {
      len: "%s must be exactly %s characters",
      min: "%s must be at least %s characters",
      max: "%s cannot be longer than %s characters",
      range: "%s must be between %s and %s characters"
    },
    number: {
      len: "%s must equal %s",
      min: "%s cannot be less than %s",
      max: "%s cannot be greater than %s",
      range: "%s must be between %s and %s"
    },
    array: {
      len: "%s must be exactly %s in length",
      min: "%s cannot be less than %s in length",
      max: "%s cannot be greater than %s in length",
      range: "%s must be between %s and %s in length"
    },
    pattern: {
      mismatch: "%s value %s does not match pattern %s"
    },
    clone: function clone() {
      var cloned = JSON.parse(JSON.stringify(this));
      cloned.clone = this.clone;
      return cloned;
    }
  };
}
var messages = newMessages();
function Schema(descriptor2) {
  this.rules = null;
  this._messages = messages;
  this.define(descriptor2);
}
Schema.prototype = {
  messages: function messages2(_messages) {
    if (_messages) {
      this._messages = deepMerge(newMessages(), _messages);
    }
    return this._messages;
  },
  define: function define(rules2) {
    if (!rules2) {
      throw new Error("Cannot configure a schema with no rules");
    }
    if ((typeof rules2 === "undefined" ? "undefined" : _default(rules2)) !== "object" || Array.isArray(rules2)) {
      throw new Error("Rules must be an object");
    }
    this.rules = {};
    var z = void 0;
    var item = void 0;
    for (z in rules2) {
      if (rules2.hasOwnProperty(z)) {
        item = rules2[z];
        this.rules[z] = Array.isArray(item) ? item : [item];
      }
    }
  },
  validate: function validate(source_) {
    var _this = this;
    var o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var oc = arguments[2];
    var source = source_;
    var options = o;
    var callback = oc;
    if (typeof options === "function") {
      callback = options;
      options = {};
    }
    if (!this.rules || Object.keys(this.rules).length === 0) {
      if (callback) {
        callback();
      }
      return;
    }
    function complete(results) {
      var i = void 0;
      var field = void 0;
      var errors = [];
      var fields = {};
      function add2(e) {
        if (Array.isArray(e)) {
          errors = errors.concat.apply(errors, e);
        } else {
          errors.push(e);
        }
      }
      for (i = 0; i < results.length; i++) {
        add2(results[i]);
      }
      if (!errors.length) {
        errors = null;
        fields = null;
      } else {
        for (i = 0; i < errors.length; i++) {
          field = errors[i].field;
          fields[field] = fields[field] || [];
          fields[field].push(errors[i]);
        }
      }
      callback(errors, fields);
    }
    if (options.messages) {
      var messages$1 = this.messages();
      if (messages$1 === messages) {
        messages$1 = newMessages();
      }
      deepMerge(messages$1, options.messages);
      options.messages = messages$1;
    } else {
      options.messages = this.messages();
    }
    var arr = void 0;
    var value = void 0;
    var series = {};
    var keys2 = options.keys || Object.keys(this.rules);
    keys2.forEach(function(z) {
      arr = _this.rules[z];
      value = source[z];
      arr.forEach(function(r) {
        var rule = r;
        if (typeof rule.transform === "function") {
          if (source === source_) {
            source = _default$1({}, source);
          }
          value = source[z] = rule.transform(value);
        }
        if (typeof rule === "function") {
          rule = {
            validator: rule
          };
        } else {
          rule = _default$1({}, rule);
        }
        rule.validator = _this.getValidationMethod(rule);
        rule.field = z;
        rule.fullField = rule.fullField || z;
        rule.type = _this.getType(rule);
        if (!rule.validator) {
          return;
        }
        series[z] = series[z] || [];
        series[z].push({
          rule,
          value,
          source,
          field: z
        });
      });
    });
    var errorFields = {};
    asyncMap(series, options, function(data, doIt) {
      var rule = data.rule;
      var deep = (rule.type === "object" || rule.type === "array") && (_default(rule.fields) === "object" || _default(rule.defaultField) === "object");
      deep = deep && (rule.required || !rule.required && data.value);
      rule.field = data.field;
      function addFullfield(key, schema) {
        return _default$1({}, schema, {
          fullField: rule.fullField + "." + key
        });
      }
      function cb() {
        var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
        var errors = e;
        if (!Array.isArray(errors)) {
          errors = [errors];
        }
        if (errors.length) {
          warning("async-validator:", errors);
        }
        if (errors.length && rule.message) {
          errors = [].concat(rule.message);
        }
        errors = errors.map(complementError(rule));
        if (options.first && errors.length) {
          errorFields[rule.field] = 1;
          return doIt(errors);
        }
        if (!deep) {
          doIt(errors);
        } else {
          if (rule.required && !data.value) {
            if (rule.message) {
              errors = [].concat(rule.message).map(complementError(rule));
            } else if (options.error) {
              errors = [options.error(rule, format(options.messages.required, rule.field))];
            } else {
              errors = [];
            }
            return doIt(errors);
          }
          var fieldsSchema = {};
          if (rule.defaultField) {
            for (var k in data.value) {
              if (data.value.hasOwnProperty(k)) {
                fieldsSchema[k] = rule.defaultField;
              }
            }
          }
          fieldsSchema = _default$1({}, fieldsSchema, data.rule.fields);
          for (var f2 in fieldsSchema) {
            if (fieldsSchema.hasOwnProperty(f2)) {
              var fieldSchema = Array.isArray(fieldsSchema[f2]) ? fieldsSchema[f2] : [fieldsSchema[f2]];
              fieldsSchema[f2] = fieldSchema.map(addFullfield.bind(null, f2));
            }
          }
          var schema = new Schema(fieldsSchema);
          schema.messages(options.messages);
          if (data.rule.options) {
            data.rule.options.messages = options.messages;
            data.rule.options.error = options.error;
          }
          schema.validate(data.value, data.rule.options || options, function(errs) {
            doIt(errs && errs.length ? errors.concat(errs) : errs);
          });
        }
      }
      var res = rule.validator(rule, data.value, cb, data.source, options);
      if (res && res.then) {
        res.then(function() {
          return cb();
        }, function(e) {
          return cb(e);
        });
      }
    }, function(results) {
      complete(results);
    });
  },
  getType: function getType2(rule) {
    if (rule.type === void 0 && rule.pattern instanceof RegExp) {
      rule.type = "pattern";
    }
    if (typeof rule.validator !== "function" && rule.type && !validators.hasOwnProperty(rule.type)) {
      throw new Error(format("Unknown rule type %s", rule.type));
    }
    return rule.type || "string";
  },
  getValidationMethod: function getValidationMethod(rule) {
    if (typeof rule.validator === "function") {
      return rule.validator;
    }
    var keys2 = Object.keys(rule);
    var messageIndex = keys2.indexOf("message");
    if (messageIndex !== -1) {
      keys2.splice(messageIndex, 1);
    }
    if (keys2.length === 1 && keys2[0] === "required") {
      return validators.required;
    }
    return validators[this.getType(rule)] || false;
  }
};
Schema.register = function register(type2, validator) {
  if (typeof validator !== "function") {
    throw new Error("Cannot register a validator by type, validator is not a function");
  }
  validators[type2] = validator;
};
Schema.messages = messages;
const es = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Schema
}, Symbol.toStringTag, { value: "Module" }));
const require$$41 = /* @__PURE__ */ getAugmentedNamespace(es);
var inputNumber = { exports: {} };
var hasRequiredInputNumber;
function requireInputNumber() {
  if (hasRequiredInputNumber)
    return inputNumber.exports;
  hasRequiredInputNumber = 1;
  (function(module) {
    module.exports = /******/
    function(modules2) {
      var installedModules = {};
      function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
          return installedModules[moduleId].exports;
        }
        var module2 = installedModules[moduleId] = {
          /******/
          i: moduleId,
          /******/
          l: false,
          /******/
          exports: {}
          /******/
        };
        modules2[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
        module2.l = true;
        return module2.exports;
      }
      __webpack_require__.m = modules2;
      __webpack_require__.c = installedModules;
      __webpack_require__.d = function(exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
          Object.defineProperty(exports, name, { enumerable: true, get: getter });
        }
      };
      __webpack_require__.r = function(exports) {
        if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
          Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
        }
        Object.defineProperty(exports, "__esModule", { value: true });
      };
      __webpack_require__.t = function(value, mode) {
        if (mode & 1)
          value = __webpack_require__(value);
        if (mode & 8)
          return value;
        if (mode & 4 && typeof value === "object" && value && value.__esModule)
          return value;
        var ns = /* @__PURE__ */ Object.create(null);
        __webpack_require__.r(ns);
        Object.defineProperty(ns, "default", { enumerable: true, value });
        if (mode & 2 && typeof value != "string")
          for (var key in value)
            __webpack_require__.d(ns, key, (function(key2) {
              return value[key2];
            }).bind(null, key));
        return ns;
      };
      __webpack_require__.n = function(module2) {
        var getter = module2 && module2.__esModule ? (
          /******/
          function getDefault() {
            return module2["default"];
          }
        ) : (
          /******/
          function getModuleExports() {
            return module2;
          }
        );
        __webpack_require__.d(getter, "a", getter);
        return getter;
      };
      __webpack_require__.o = function(object3, property) {
        return Object.prototype.hasOwnProperty.call(object3, property);
      };
      __webpack_require__.p = "/dist/";
      return __webpack_require__(__webpack_require__.s = 87);
    }({
      /***/
      0: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.d(__webpack_exports__, "a", function() {
            return normalizeComponent2;
          });
          function normalizeComponent2(scriptExports, render6, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
            var options = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
            if (render6) {
              options.render = render6;
              options.staticRenderFns = staticRenderFns;
              options._compiled = true;
            }
            if (functionalTemplate) {
              options.functional = true;
            }
            if (scopeId) {
              options._scopeId = "data-v-" + scopeId;
            }
            var hook;
            if (moduleIdentifier) {
              hook = function(context) {
                context = context || // cached call
                this.$vnode && this.$vnode.ssrContext || // stateful
                this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
                if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
                  context = __VUE_SSR_CONTEXT__;
                }
                if (injectStyles) {
                  injectStyles.call(this, context);
                }
                if (context && context._registeredComponents) {
                  context._registeredComponents.add(moduleIdentifier);
                }
              };
              options._ssrRegister = hook;
            } else if (injectStyles) {
              hook = shadowMode ? function() {
                injectStyles.call(this, this.$root.$options.shadowRoot);
              } : injectStyles;
            }
            if (hook) {
              if (options.functional) {
                options._injectStyles = hook;
                var originalRender = options.render;
                options.render = function renderWithStyleInjection(h2, context) {
                  hook.call(context);
                  return originalRender(h2, context);
                };
              } else {
                var existing = options.beforeCreate;
                options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
              }
            }
            return {
              exports: scriptExports,
              options
            };
          }
        }
      ),
      /***/
      10: (
        /***/
        function(module2, exports) {
          module2.exports = requireInput();
        }
      ),
      /***/
      2: (
        /***/
        function(module2, exports) {
          module2.exports = requireDom();
        }
      ),
      /***/
      22: (
        /***/
        function(module2, exports) {
          module2.exports = requireFocus();
        }
      ),
      /***/
      3: (
        /***/
        function(module2, exports) {
          module2.exports = requireUtil();
        }
      ),
      /***/
      30: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          var element_ui_src_utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
          var element_ui_src_utils_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);
          __webpack_exports__["a"] = {
            bind: function bind2(el, binding, vnode) {
              var interval = null;
              var startTime = void 0;
              var maxIntervals = Object(element_ui_src_utils_util__WEBPACK_IMPORTED_MODULE_1__["isMac"])() ? 100 : 200;
              var handler = function handler2() {
                return vnode.context[binding.expression].apply();
              };
              var clear = function clear2() {
                if (Date.now() - startTime < maxIntervals) {
                  handler();
                }
                clearInterval(interval);
                interval = null;
              };
              Object(element_ui_src_utils_dom__WEBPACK_IMPORTED_MODULE_0__["on"])(el, "mousedown", function(e) {
                if (e.button !== 0)
                  return;
                startTime = Date.now();
                Object(element_ui_src_utils_dom__WEBPACK_IMPORTED_MODULE_0__["once"])(document, "mouseup", clear);
                clearInterval(interval);
                interval = setInterval(handler, maxIntervals);
              });
            }
          };
        }
      ),
      /***/
      87: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.r(__webpack_exports__);
          var render6 = function() {
            var _vm = this;
            var _h = _vm.$createElement;
            var _c = _vm._self._c || _h;
            return _c(
              "div",
              {
                class: [
                  "el-input-number",
                  _vm.inputNumberSize ? "el-input-number--" + _vm.inputNumberSize : "",
                  { "is-disabled": _vm.inputNumberDisabled },
                  { "is-without-controls": !_vm.controls },
                  { "is-controls-right": _vm.controlsAtRight }
                ],
                on: {
                  dragstart: function($event) {
                    $event.preventDefault();
                  }
                }
              },
              [
                _vm.controls ? _c(
                  "span",
                  {
                    directives: [
                      {
                        name: "repeat-click",
                        rawName: "v-repeat-click",
                        value: _vm.decrease,
                        expression: "decrease"
                      }
                    ],
                    staticClass: "el-input-number__decrease",
                    class: { "is-disabled": _vm.minDisabled },
                    attrs: { role: "button" },
                    on: {
                      keydown: function($event) {
                        if (!("button" in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                          return null;
                        }
                        return _vm.decrease($event);
                      }
                    }
                  },
                  [
                    _c("i", {
                      class: "el-icon-" + (_vm.controlsAtRight ? "arrow-down" : "minus")
                    })
                  ]
                ) : _vm._e(),
                _vm.controls ? _c(
                  "span",
                  {
                    directives: [
                      {
                        name: "repeat-click",
                        rawName: "v-repeat-click",
                        value: _vm.increase,
                        expression: "increase"
                      }
                    ],
                    staticClass: "el-input-number__increase",
                    class: { "is-disabled": _vm.maxDisabled },
                    attrs: { role: "button" },
                    on: {
                      keydown: function($event) {
                        if (!("button" in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                          return null;
                        }
                        return _vm.increase($event);
                      }
                    }
                  },
                  [
                    _c("i", {
                      class: "el-icon-" + (_vm.controlsAtRight ? "arrow-up" : "plus")
                    })
                  ]
                ) : _vm._e(),
                _c("el-input", {
                  ref: "input",
                  attrs: {
                    value: _vm.displayValue,
                    placeholder: _vm.placeholder,
                    disabled: _vm.inputNumberDisabled,
                    size: _vm.inputNumberSize,
                    max: _vm.max,
                    min: _vm.min,
                    name: _vm.name,
                    label: _vm.label
                  },
                  on: {
                    blur: _vm.handleBlur,
                    focus: _vm.handleFocus,
                    input: _vm.handleInput,
                    change: _vm.handleInputChange
                  },
                  nativeOn: {
                    keydown: [
                      function($event) {
                        if (!("button" in $event) && _vm._k($event.keyCode, "up", 38, $event.key, ["Up", "ArrowUp"])) {
                          return null;
                        }
                        $event.preventDefault();
                        return _vm.increase($event);
                      },
                      function($event) {
                        if (!("button" in $event) && _vm._k($event.keyCode, "down", 40, $event.key, [
                          "Down",
                          "ArrowDown"
                        ])) {
                          return null;
                        }
                        $event.preventDefault();
                        return _vm.decrease($event);
                      }
                    ]
                  }
                })
              ],
              1
            );
          };
          var staticRenderFns = [];
          render6._withStripped = true;
          var input_ = __webpack_require__(10);
          var input_default = /* @__PURE__ */ __webpack_require__.n(input_);
          var focus_ = __webpack_require__(22);
          var focus_default = /* @__PURE__ */ __webpack_require__.n(focus_);
          var repeat_click = __webpack_require__(30);
          var input_numbervue_type_script_lang_js_ = {
            name: "ElInputNumber",
            mixins: [focus_default()("input")],
            inject: {
              elForm: {
                default: ""
              },
              elFormItem: {
                default: ""
              }
            },
            directives: {
              repeatClick: repeat_click[
                "a"
                /* default */
              ]
            },
            components: {
              ElInput: input_default.a
            },
            props: {
              step: {
                type: Number,
                default: 1
              },
              stepStrictly: {
                type: Boolean,
                default: false
              },
              max: {
                type: Number,
                default: Infinity
              },
              min: {
                type: Number,
                default: -Infinity
              },
              value: {},
              disabled: Boolean,
              size: String,
              controls: {
                type: Boolean,
                default: true
              },
              controlsPosition: {
                type: String,
                default: ""
              },
              name: String,
              label: String,
              placeholder: String,
              precision: {
                type: Number,
                validator: function validator(val) {
                  return val >= 0 && val === parseInt(val, 10);
                }
              }
            },
            data: function data() {
              return {
                currentValue: 0,
                userInput: null
              };
            },
            watch: {
              value: {
                immediate: true,
                handler: function handler(value) {
                  var newVal = value === void 0 ? value : Number(value);
                  if (newVal !== void 0) {
                    if (isNaN(newVal)) {
                      return;
                    }
                    if (this.stepStrictly) {
                      var stepPrecision = this.getPrecision(this.step);
                      var precisionFactor = Math.pow(10, stepPrecision);
                      newVal = Math.round(newVal / this.step) * precisionFactor * this.step / precisionFactor;
                    }
                    if (this.precision !== void 0) {
                      newVal = this.toPrecision(newVal, this.precision);
                    }
                  }
                  if (newVal >= this.max)
                    newVal = this.max;
                  if (newVal <= this.min)
                    newVal = this.min;
                  this.currentValue = newVal;
                  this.userInput = null;
                  this.$emit("input", newVal);
                }
              }
            },
            computed: {
              minDisabled: function minDisabled() {
                return this._decrease(this.value, this.step) < this.min;
              },
              maxDisabled: function maxDisabled() {
                return this._increase(this.value, this.step) > this.max;
              },
              numPrecision: function numPrecision() {
                var value = this.value, step2 = this.step, getPrecision = this.getPrecision, precision = this.precision;
                var stepPrecision = getPrecision(step2);
                if (precision !== void 0) {
                  if (stepPrecision > precision) {
                    console.warn("[Element Warn][InputNumber]precision should not be less than the decimal places of step");
                  }
                  return precision;
                } else {
                  return Math.max(getPrecision(value), stepPrecision);
                }
              },
              controlsAtRight: function controlsAtRight() {
                return this.controls && this.controlsPosition === "right";
              },
              _elFormItemSize: function _elFormItemSize() {
                return (this.elFormItem || {}).elFormItemSize;
              },
              inputNumberSize: function inputNumberSize() {
                return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
              },
              inputNumberDisabled: function inputNumberDisabled() {
                return this.disabled || !!(this.elForm || {}).disabled;
              },
              displayValue: function displayValue() {
                if (this.userInput !== null) {
                  return this.userInput;
                }
                var currentValue = this.currentValue;
                if (typeof currentValue === "number") {
                  if (this.stepStrictly) {
                    var stepPrecision = this.getPrecision(this.step);
                    var precisionFactor = Math.pow(10, stepPrecision);
                    currentValue = Math.round(currentValue / this.step) * precisionFactor * this.step / precisionFactor;
                  }
                  if (this.precision !== void 0) {
                    currentValue = currentValue.toFixed(this.precision);
                  }
                }
                return currentValue;
              }
            },
            methods: {
              toPrecision: function toPrecision(num, precision) {
                if (precision === void 0)
                  precision = this.numPrecision;
                return parseFloat(Math.round(num * Math.pow(10, precision)) / Math.pow(10, precision));
              },
              getPrecision: function getPrecision(value) {
                if (value === void 0)
                  return 0;
                var valueString = value.toString();
                var dotPosition = valueString.indexOf(".");
                var precision = 0;
                if (dotPosition !== -1) {
                  precision = valueString.length - dotPosition - 1;
                }
                return precision;
              },
              _increase: function _increase(val, step2) {
                if (typeof val !== "number" && val !== void 0)
                  return this.currentValue;
                var precisionFactor = Math.pow(10, this.numPrecision);
                return this.toPrecision((precisionFactor * val + precisionFactor * step2) / precisionFactor);
              },
              _decrease: function _decrease(val, step2) {
                if (typeof val !== "number" && val !== void 0)
                  return this.currentValue;
                var precisionFactor = Math.pow(10, this.numPrecision);
                return this.toPrecision((precisionFactor * val - precisionFactor * step2) / precisionFactor);
              },
              increase: function increase() {
                if (this.inputNumberDisabled || this.maxDisabled)
                  return;
                var value = this.value || 0;
                var newVal = this._increase(value, this.step);
                this.setCurrentValue(newVal);
              },
              decrease: function decrease() {
                if (this.inputNumberDisabled || this.minDisabled)
                  return;
                var value = this.value || 0;
                var newVal = this._decrease(value, this.step);
                this.setCurrentValue(newVal);
              },
              handleBlur: function handleBlur(event) {
                this.$emit("blur", event);
              },
              handleFocus: function handleFocus(event) {
                this.$emit("focus", event);
              },
              setCurrentValue: function setCurrentValue(newVal) {
                var oldVal = this.currentValue;
                if (typeof newVal === "number" && this.precision !== void 0) {
                  newVal = this.toPrecision(newVal, this.precision);
                }
                if (newVal >= this.max)
                  newVal = this.max;
                if (newVal <= this.min)
                  newVal = this.min;
                if (oldVal === newVal)
                  return;
                this.userInput = null;
                this.$emit("input", newVal);
                this.$emit("change", newVal, oldVal);
                this.currentValue = newVal;
              },
              handleInput: function handleInput(value) {
                this.userInput = value;
              },
              handleInputChange: function handleInputChange(value) {
                var newVal = value === "" ? void 0 : Number(value);
                if (!isNaN(newVal) || value === "") {
                  this.setCurrentValue(newVal);
                }
                this.userInput = null;
              },
              select: function select2() {
                this.$refs.input.select();
              }
            },
            mounted: function mounted2() {
              var innerInput = this.$refs.input.$refs.input;
              innerInput.setAttribute("role", "spinbutton");
              innerInput.setAttribute("aria-valuemax", this.max);
              innerInput.setAttribute("aria-valuemin", this.min);
              innerInput.setAttribute("aria-valuenow", this.currentValue);
              innerInput.setAttribute("aria-disabled", this.inputNumberDisabled);
            },
            updated: function updated() {
              if (!this.$refs || !this.$refs.input)
                return;
              var innerInput = this.$refs.input.$refs.input;
              innerInput.setAttribute("aria-valuenow", this.currentValue);
            }
          };
          var src_input_numbervue_type_script_lang_js_ = input_numbervue_type_script_lang_js_;
          var componentNormalizer = __webpack_require__(0);
          var component = Object(componentNormalizer[
            "a"
            /* default */
          ])(
            src_input_numbervue_type_script_lang_js_,
            render6,
            staticRenderFns,
            false,
            null,
            null,
            null
          );
          component.options.__file = "packages/input-number/src/input-number.vue";
          var input_number = component.exports;
          input_number.install = function(Vue2) {
            Vue2.component(input_number.name, input_number);
          };
          __webpack_exports__["default"] = input_number;
        }
      )
      /******/
    });
  })(inputNumber);
  return inputNumber.exports;
}
var cascaderPanel = { exports: {} };
var radio = { exports: {} };
var hasRequiredRadio;
function requireRadio() {
  if (hasRequiredRadio)
    return radio.exports;
  hasRequiredRadio = 1;
  (function(module) {
    module.exports = /******/
    function(modules2) {
      var installedModules = {};
      function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
          return installedModules[moduleId].exports;
        }
        var module2 = installedModules[moduleId] = {
          /******/
          i: moduleId,
          /******/
          l: false,
          /******/
          exports: {}
          /******/
        };
        modules2[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
        module2.l = true;
        return module2.exports;
      }
      __webpack_require__.m = modules2;
      __webpack_require__.c = installedModules;
      __webpack_require__.d = function(exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
          Object.defineProperty(exports, name, { enumerable: true, get: getter });
        }
      };
      __webpack_require__.r = function(exports) {
        if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
          Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
        }
        Object.defineProperty(exports, "__esModule", { value: true });
      };
      __webpack_require__.t = function(value, mode) {
        if (mode & 1)
          value = __webpack_require__(value);
        if (mode & 8)
          return value;
        if (mode & 4 && typeof value === "object" && value && value.__esModule)
          return value;
        var ns = /* @__PURE__ */ Object.create(null);
        __webpack_require__.r(ns);
        Object.defineProperty(ns, "default", { enumerable: true, value });
        if (mode & 2 && typeof value != "string")
          for (var key in value)
            __webpack_require__.d(ns, key, (function(key2) {
              return value[key2];
            }).bind(null, key));
        return ns;
      };
      __webpack_require__.n = function(module2) {
        var getter = module2 && module2.__esModule ? (
          /******/
          function getDefault() {
            return module2["default"];
          }
        ) : (
          /******/
          function getModuleExports() {
            return module2;
          }
        );
        __webpack_require__.d(getter, "a", getter);
        return getter;
      };
      __webpack_require__.o = function(object3, property) {
        return Object.prototype.hasOwnProperty.call(object3, property);
      };
      __webpack_require__.p = "/dist/";
      return __webpack_require__(__webpack_require__.s = 88);
    }({
      /***/
      0: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.d(__webpack_exports__, "a", function() {
            return normalizeComponent2;
          });
          function normalizeComponent2(scriptExports, render6, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
            var options = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
            if (render6) {
              options.render = render6;
              options.staticRenderFns = staticRenderFns;
              options._compiled = true;
            }
            if (functionalTemplate) {
              options.functional = true;
            }
            if (scopeId) {
              options._scopeId = "data-v-" + scopeId;
            }
            var hook;
            if (moduleIdentifier) {
              hook = function(context) {
                context = context || // cached call
                this.$vnode && this.$vnode.ssrContext || // stateful
                this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
                if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
                  context = __VUE_SSR_CONTEXT__;
                }
                if (injectStyles) {
                  injectStyles.call(this, context);
                }
                if (context && context._registeredComponents) {
                  context._registeredComponents.add(moduleIdentifier);
                }
              };
              options._ssrRegister = hook;
            } else if (injectStyles) {
              hook = shadowMode ? function() {
                injectStyles.call(this, this.$root.$options.shadowRoot);
              } : injectStyles;
            }
            if (hook) {
              if (options.functional) {
                options._injectStyles = hook;
                var originalRender = options.render;
                options.render = function renderWithStyleInjection(h2, context) {
                  hook.call(context);
                  return originalRender(h2, context);
                };
              } else {
                var existing = options.beforeCreate;
                options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
              }
            }
            return {
              exports: scriptExports,
              options
            };
          }
        }
      ),
      /***/
      4: (
        /***/
        function(module2, exports) {
          module2.exports = requireEmitter();
        }
      ),
      /***/
      88: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.r(__webpack_exports__);
          var render6 = function() {
            var _vm = this;
            var _h = _vm.$createElement;
            var _c = _vm._self._c || _h;
            return _c(
              "label",
              {
                staticClass: "el-radio",
                class: [
                  _vm.border && _vm.radioSize ? "el-radio--" + _vm.radioSize : "",
                  { "is-disabled": _vm.isDisabled },
                  { "is-focus": _vm.focus },
                  { "is-bordered": _vm.border },
                  { "is-checked": _vm.model === _vm.label }
                ],
                attrs: {
                  role: "radio",
                  "aria-checked": _vm.model === _vm.label,
                  "aria-disabled": _vm.isDisabled,
                  tabindex: _vm.tabIndex
                },
                on: {
                  keydown: function($event) {
                    if (!("button" in $event) && _vm._k($event.keyCode, "space", 32, $event.key, [" ", "Spacebar"])) {
                      return null;
                    }
                    $event.stopPropagation();
                    $event.preventDefault();
                    _vm.model = _vm.isDisabled ? _vm.model : _vm.label;
                  }
                }
              },
              [
                _c(
                  "span",
                  {
                    staticClass: "el-radio__input",
                    class: {
                      "is-disabled": _vm.isDisabled,
                      "is-checked": _vm.model === _vm.label
                    }
                  },
                  [
                    _c("span", { staticClass: "el-radio__inner" }),
                    _c("input", {
                      directives: [
                        {
                          name: "model",
                          rawName: "v-model",
                          value: _vm.model,
                          expression: "model"
                        }
                      ],
                      ref: "radio",
                      staticClass: "el-radio__original",
                      attrs: {
                        type: "radio",
                        "aria-hidden": "true",
                        name: _vm.name,
                        disabled: _vm.isDisabled,
                        tabindex: "-1",
                        autocomplete: "off"
                      },
                      domProps: {
                        value: _vm.label,
                        checked: _vm._q(_vm.model, _vm.label)
                      },
                      on: {
                        focus: function($event) {
                          _vm.focus = true;
                        },
                        blur: function($event) {
                          _vm.focus = false;
                        },
                        change: [
                          function($event) {
                            _vm.model = _vm.label;
                          },
                          _vm.handleChange
                        ]
                      }
                    })
                  ]
                ),
                _c(
                  "span",
                  {
                    staticClass: "el-radio__label",
                    on: {
                      keydown: function($event) {
                        $event.stopPropagation();
                      }
                    }
                  },
                  [
                    _vm._t("default"),
                    !_vm.$slots.default ? [_vm._v(_vm._s(_vm.label))] : _vm._e()
                  ],
                  2
                )
              ]
            );
          };
          var staticRenderFns = [];
          render6._withStripped = true;
          var emitter_ = __webpack_require__(4);
          var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
          var radiovue_type_script_lang_js_ = {
            name: "ElRadio",
            mixins: [emitter_default.a],
            inject: {
              elForm: {
                default: ""
              },
              elFormItem: {
                default: ""
              }
            },
            componentName: "ElRadio",
            props: {
              value: {},
              label: {},
              disabled: Boolean,
              name: String,
              border: Boolean,
              size: String
            },
            data: function data() {
              return {
                focus: false
              };
            },
            computed: {
              isGroup: function isGroup() {
                var parent = this.$parent;
                while (parent) {
                  if (parent.$options.componentName !== "ElRadioGroup") {
                    parent = parent.$parent;
                  } else {
                    this._radioGroup = parent;
                    return true;
                  }
                }
                return false;
              },
              model: {
                get: function get() {
                  return this.isGroup ? this._radioGroup.value : this.value;
                },
                set: function set2(val) {
                  if (this.isGroup) {
                    this.dispatch("ElRadioGroup", "input", [val]);
                  } else {
                    this.$emit("input", val);
                  }
                  this.$refs.radio && (this.$refs.radio.checked = this.model === this.label);
                }
              },
              _elFormItemSize: function _elFormItemSize() {
                return (this.elFormItem || {}).elFormItemSize;
              },
              radioSize: function radioSize() {
                var temRadioSize = this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
                return this.isGroup ? this._radioGroup.radioGroupSize || temRadioSize : temRadioSize;
              },
              isDisabled: function isDisabled() {
                return this.isGroup ? this._radioGroup.disabled || this.disabled || (this.elForm || {}).disabled : this.disabled || (this.elForm || {}).disabled;
              },
              tabIndex: function tabIndex() {
                return this.isDisabled || this.isGroup && this.model !== this.label ? -1 : 0;
              }
            },
            methods: {
              handleChange: function handleChange() {
                var _this = this;
                this.$nextTick(function() {
                  _this.$emit("change", _this.model);
                  _this.isGroup && _this.dispatch("ElRadioGroup", "handleChange", _this.model);
                });
              }
            }
          };
          var src_radiovue_type_script_lang_js_ = radiovue_type_script_lang_js_;
          var componentNormalizer = __webpack_require__(0);
          var component = Object(componentNormalizer[
            "a"
            /* default */
          ])(
            src_radiovue_type_script_lang_js_,
            render6,
            staticRenderFns,
            false,
            null,
            null,
            null
          );
          component.options.__file = "packages/radio/src/radio.vue";
          var src_radio = component.exports;
          src_radio.install = function(Vue2) {
            Vue2.component(src_radio.name, src_radio);
          };
          __webpack_exports__["default"] = src_radio;
        }
      )
      /******/
    });
  })(radio);
  return radio.exports;
}
var hasRequiredCascaderPanel;
function requireCascaderPanel() {
  if (hasRequiredCascaderPanel)
    return cascaderPanel.exports;
  hasRequiredCascaderPanel = 1;
  (function(module) {
    module.exports = /******/
    function(modules2) {
      var installedModules = {};
      function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
          return installedModules[moduleId].exports;
        }
        var module2 = installedModules[moduleId] = {
          /******/
          i: moduleId,
          /******/
          l: false,
          /******/
          exports: {}
          /******/
        };
        modules2[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
        module2.l = true;
        return module2.exports;
      }
      __webpack_require__.m = modules2;
      __webpack_require__.c = installedModules;
      __webpack_require__.d = function(exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
          Object.defineProperty(exports, name, { enumerable: true, get: getter });
        }
      };
      __webpack_require__.r = function(exports) {
        if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
          Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
        }
        Object.defineProperty(exports, "__esModule", { value: true });
      };
      __webpack_require__.t = function(value, mode) {
        if (mode & 1)
          value = __webpack_require__(value);
        if (mode & 8)
          return value;
        if (mode & 4 && typeof value === "object" && value && value.__esModule)
          return value;
        var ns = /* @__PURE__ */ Object.create(null);
        __webpack_require__.r(ns);
        Object.defineProperty(ns, "default", { enumerable: true, value });
        if (mode & 2 && typeof value != "string")
          for (var key in value)
            __webpack_require__.d(ns, key, (function(key2) {
              return value[key2];
            }).bind(null, key));
        return ns;
      };
      __webpack_require__.n = function(module2) {
        var getter = module2 && module2.__esModule ? (
          /******/
          function getDefault() {
            return module2["default"];
          }
        ) : (
          /******/
          function getModuleExports() {
            return module2;
          }
        );
        __webpack_require__.d(getter, "a", getter);
        return getter;
      };
      __webpack_require__.o = function(object3, property) {
        return Object.prototype.hasOwnProperty.call(object3, property);
      };
      __webpack_require__.p = "/dist/";
      return __webpack_require__(__webpack_require__.s = 61);
    }({
      /***/
      0: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.d(__webpack_exports__, "a", function() {
            return normalizeComponent2;
          });
          function normalizeComponent2(scriptExports, render6, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
            var options = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
            if (render6) {
              options.render = render6;
              options.staticRenderFns = staticRenderFns;
              options._compiled = true;
            }
            if (functionalTemplate) {
              options.functional = true;
            }
            if (scopeId) {
              options._scopeId = "data-v-" + scopeId;
            }
            var hook;
            if (moduleIdentifier) {
              hook = function(context) {
                context = context || // cached call
                this.$vnode && this.$vnode.ssrContext || // stateful
                this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
                if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
                  context = __VUE_SSR_CONTEXT__;
                }
                if (injectStyles) {
                  injectStyles.call(this, context);
                }
                if (context && context._registeredComponents) {
                  context._registeredComponents.add(moduleIdentifier);
                }
              };
              options._ssrRegister = hook;
            } else if (injectStyles) {
              hook = shadowMode ? function() {
                injectStyles.call(this, this.$root.$options.shadowRoot);
              } : injectStyles;
            }
            if (hook) {
              if (options.functional) {
                options._injectStyles = hook;
                var originalRender = options.render;
                options.render = function renderWithStyleInjection(h2, context) {
                  hook.call(context);
                  return originalRender(h2, context);
                };
              } else {
                var existing = options.beforeCreate;
                options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
              }
            }
            return {
              exports: scriptExports,
              options
            };
          }
        }
      ),
      /***/
      15: (
        /***/
        function(module2, exports) {
          module2.exports = requireScrollbar();
        }
      ),
      /***/
      18: (
        /***/
        function(module2, exports) {
          module2.exports = requireCheckbox();
        }
      ),
      /***/
      21: (
        /***/
        function(module2, exports) {
          module2.exports = requireShared();
        }
      ),
      /***/
      26: (
        /***/
        function(module2, exports) {
          module2.exports = requireBabelHelperVueJsxMergeProps();
        }
      ),
      /***/
      3: (
        /***/
        function(module2, exports) {
          module2.exports = requireUtil();
        }
      ),
      /***/
      31: (
        /***/
        function(module2, exports) {
          module2.exports = requireScrollIntoView();
        }
      ),
      /***/
      41: (
        /***/
        function(module2, exports) {
          module2.exports = requireAriaUtils();
        }
      ),
      /***/
      52: (
        /***/
        function(module2, exports) {
          module2.exports = requireRadio();
        }
      ),
      /***/
      6: (
        /***/
        function(module2, exports) {
          module2.exports = requireLocale();
        }
      ),
      /***/
      61: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.r(__webpack_exports__);
          var cascader_panelvue_type_template_id_34932346_render = function() {
            var _vm = this;
            var _h = _vm.$createElement;
            var _c = _vm._self._c || _h;
            return _c(
              "div",
              {
                class: ["el-cascader-panel", _vm.border && "is-bordered"],
                on: { keydown: _vm.handleKeyDown }
              },
              _vm._l(_vm.menus, function(menu, index2) {
                return _c("cascader-menu", {
                  key: index2,
                  ref: "menu",
                  refInFor: true,
                  attrs: { index: index2, nodes: menu }
                });
              }),
              1
            );
          };
          var staticRenderFns = [];
          cascader_panelvue_type_template_id_34932346_render._withStripped = true;
          var external_babel_helper_vue_jsx_merge_props_ = __webpack_require__(26);
          var external_babel_helper_vue_jsx_merge_props_default = /* @__PURE__ */ __webpack_require__.n(external_babel_helper_vue_jsx_merge_props_);
          var scrollbar_ = __webpack_require__(15);
          var scrollbar_default = /* @__PURE__ */ __webpack_require__.n(scrollbar_);
          var checkbox_ = __webpack_require__(18);
          var checkbox_default = /* @__PURE__ */ __webpack_require__.n(checkbox_);
          var radio_ = __webpack_require__(52);
          var radio_default = /* @__PURE__ */ __webpack_require__.n(radio_);
          var util_ = __webpack_require__(3);
          var stopPropagation = function stopPropagation2(e) {
            return e.stopPropagation();
          };
          var cascader_nodevue_type_script_lang_js_ = {
            inject: ["panel"],
            components: {
              ElCheckbox: checkbox_default.a,
              ElRadio: radio_default.a
            },
            props: {
              node: {
                required: true
              },
              nodeId: String
            },
            computed: {
              config: function config2() {
                return this.panel.config;
              },
              isLeaf: function isLeaf() {
                return this.node.isLeaf;
              },
              isDisabled: function isDisabled() {
                return this.node.isDisabled;
              },
              checkedValue: function checkedValue() {
                return this.panel.checkedValue;
              },
              isChecked: function isChecked() {
                return this.node.isSameNode(this.checkedValue);
              },
              inActivePath: function inActivePath() {
                return this.isInPath(this.panel.activePath);
              },
              inCheckedPath: function inCheckedPath() {
                var _this = this;
                if (!this.config.checkStrictly)
                  return false;
                return this.panel.checkedNodePaths.some(function(checkedPath) {
                  return _this.isInPath(checkedPath);
                });
              },
              value: function value() {
                return this.node.getValueByOption();
              }
            },
            methods: {
              handleExpand: function handleExpand() {
                var _this2 = this;
                var panel = this.panel, node = this.node, isDisabled = this.isDisabled, config2 = this.config;
                var multiple = config2.multiple, checkStrictly = config2.checkStrictly;
                if (!checkStrictly && isDisabled || node.loading)
                  return;
                if (config2.lazy && !node.loaded) {
                  panel.lazyLoad(node, function() {
                    var isLeaf = _this2.isLeaf;
                    if (!isLeaf)
                      _this2.handleExpand();
                    if (multiple) {
                      var checked = isLeaf ? node.checked : false;
                      _this2.handleMultiCheckChange(checked);
                    }
                  });
                } else {
                  panel.handleExpand(node);
                }
              },
              handleCheckChange: function handleCheckChange() {
                var panel = this.panel, value = this.value, node = this.node;
                panel.handleCheckChange(value);
                panel.handleExpand(node);
              },
              handleMultiCheckChange: function handleMultiCheckChange(checked) {
                this.node.doCheck(checked);
                this.panel.calculateMultiCheckedValue();
              },
              isInPath: function isInPath(pathNodes) {
                var node = this.node;
                var selectedPathNode = pathNodes[node.level - 1] || {};
                return selectedPathNode.uid === node.uid;
              },
              renderPrefix: function renderPrefix(h2) {
                var isLeaf = this.isLeaf, isChecked = this.isChecked, config2 = this.config;
                var checkStrictly = config2.checkStrictly, multiple = config2.multiple;
                if (multiple) {
                  return this.renderCheckbox(h2);
                } else if (checkStrictly) {
                  return this.renderRadio(h2);
                } else if (isLeaf && isChecked) {
                  return this.renderCheckIcon(h2);
                }
                return null;
              },
              renderPostfix: function renderPostfix(h2) {
                var node = this.node, isLeaf = this.isLeaf;
                if (node.loading) {
                  return this.renderLoadingIcon(h2);
                } else if (!isLeaf) {
                  return this.renderExpandIcon(h2);
                }
                return null;
              },
              renderCheckbox: function renderCheckbox(h2) {
                var node = this.node, config2 = this.config, isDisabled = this.isDisabled;
                var events2 = {
                  on: { change: this.handleMultiCheckChange },
                  nativeOn: {}
                };
                if (config2.checkStrictly) {
                  events2.nativeOn.click = stopPropagation;
                }
                return h2("el-checkbox", external_babel_helper_vue_jsx_merge_props_default()([{
                  attrs: {
                    value: node.checked,
                    indeterminate: node.indeterminate,
                    disabled: isDisabled
                  }
                }, events2]));
              },
              renderRadio: function renderRadio(h2) {
                var checkedValue = this.checkedValue, value = this.value, isDisabled = this.isDisabled;
                if (Object(util_["isEqual"])(value, checkedValue)) {
                  value = checkedValue;
                }
                return h2(
                  "el-radio",
                  {
                    attrs: {
                      value: checkedValue,
                      label: value,
                      disabled: isDisabled
                    },
                    on: {
                      "change": this.handleCheckChange
                    },
                    nativeOn: {
                      "click": stopPropagation
                    }
                  },
                  [h2("span")]
                );
              },
              renderCheckIcon: function renderCheckIcon(h2) {
                return h2("i", { "class": "el-icon-check el-cascader-node__prefix" });
              },
              renderLoadingIcon: function renderLoadingIcon(h2) {
                return h2("i", { "class": "el-icon-loading el-cascader-node__postfix" });
              },
              renderExpandIcon: function renderExpandIcon(h2) {
                return h2("i", { "class": "el-icon-arrow-right el-cascader-node__postfix" });
              },
              renderContent: function renderContent(h2) {
                var panel = this.panel, node = this.node;
                var render6 = panel.renderLabelFn;
                var vnode = render6 ? render6({ node, data: node.data }) : null;
                return h2(
                  "span",
                  { "class": "el-cascader-node__label" },
                  [vnode || node.label]
                );
              }
            },
            render: function render6(h2) {
              var _this3 = this;
              var inActivePath = this.inActivePath, inCheckedPath = this.inCheckedPath, isChecked = this.isChecked, isLeaf = this.isLeaf, isDisabled = this.isDisabled, config2 = this.config, nodeId = this.nodeId;
              var expandTrigger = config2.expandTrigger, checkStrictly = config2.checkStrictly, multiple = config2.multiple;
              var disabled = !checkStrictly && isDisabled;
              var events2 = { on: {} };
              if (expandTrigger === "click") {
                events2.on.click = this.handleExpand;
              } else {
                events2.on.mouseenter = function(e) {
                  _this3.handleExpand();
                  _this3.$emit("expand", e);
                };
                events2.on.focus = function(e) {
                  _this3.handleExpand();
                  _this3.$emit("expand", e);
                };
              }
              if (isLeaf && !isDisabled && !checkStrictly && !multiple) {
                events2.on.click = this.handleCheckChange;
              }
              return h2(
                "li",
                external_babel_helper_vue_jsx_merge_props_default()([{
                  attrs: {
                    role: "menuitem",
                    id: nodeId,
                    "aria-expanded": inActivePath,
                    tabindex: disabled ? null : -1
                  },
                  "class": {
                    "el-cascader-node": true,
                    "is-selectable": checkStrictly,
                    "in-active-path": inActivePath,
                    "in-checked-path": inCheckedPath,
                    "is-active": isChecked,
                    "is-disabled": disabled
                  }
                }, events2]),
                [this.renderPrefix(h2), this.renderContent(h2), this.renderPostfix(h2)]
              );
            }
          };
          var src_cascader_nodevue_type_script_lang_js_ = cascader_nodevue_type_script_lang_js_;
          var componentNormalizer = __webpack_require__(0);
          var cascader_node_render, cascader_node_staticRenderFns;
          var component = Object(componentNormalizer[
            "a"
            /* default */
          ])(
            src_cascader_nodevue_type_script_lang_js_,
            cascader_node_render,
            cascader_node_staticRenderFns,
            false,
            null,
            null,
            null
          );
          component.options.__file = "packages/cascader-panel/src/cascader-node.vue";
          var cascader_node = component.exports;
          var locale_ = __webpack_require__(6);
          var locale_default = /* @__PURE__ */ __webpack_require__.n(locale_);
          var cascader_menuvue_type_script_lang_js_ = {
            name: "ElCascaderMenu",
            mixins: [locale_default.a],
            inject: ["panel"],
            components: {
              ElScrollbar: scrollbar_default.a,
              CascaderNode: cascader_node
            },
            props: {
              nodes: {
                type: Array,
                required: true
              },
              index: Number
            },
            data: function data() {
              return {
                activeNode: null,
                hoverTimer: null,
                id: Object(util_["generateId"])()
              };
            },
            computed: {
              isEmpty: function isEmpty() {
                return !this.nodes.length;
              },
              menuId: function menuId() {
                return "cascader-menu-" + this.id + "-" + this.index;
              }
            },
            methods: {
              handleExpand: function handleExpand(e) {
                this.activeNode = e.target;
              },
              handleMouseMove: function handleMouseMove(e) {
                var activeNode = this.activeNode, hoverTimer = this.hoverTimer;
                var hoverZone = this.$refs.hoverZone;
                if (!activeNode || !hoverZone)
                  return;
                if (activeNode.contains(e.target)) {
                  clearTimeout(hoverTimer);
                  var _$el$getBoundingClien = this.$el.getBoundingClientRect(), left = _$el$getBoundingClien.left;
                  var startX = e.clientX - left;
                  var _$el = this.$el, offsetWidth = _$el.offsetWidth, offsetHeight = _$el.offsetHeight;
                  var top = activeNode.offsetTop;
                  var bottom = top + activeNode.offsetHeight;
                  hoverZone.innerHTML = '\n          <path style="pointer-events: auto;" fill="transparent" d="M' + startX + " " + top + " L" + offsetWidth + " 0 V" + top + ' Z" />\n          <path style="pointer-events: auto;" fill="transparent" d="M' + startX + " " + bottom + " L" + offsetWidth + " " + offsetHeight + " V" + bottom + ' Z" />\n        ';
                } else if (!hoverTimer) {
                  this.hoverTimer = setTimeout(this.clearHoverZone, this.panel.config.hoverThreshold);
                }
              },
              clearHoverZone: function clearHoverZone() {
                var hoverZone = this.$refs.hoverZone;
                if (!hoverZone)
                  return;
                hoverZone.innerHTML = "";
              },
              renderEmptyText: function renderEmptyText(h2) {
                return h2(
                  "div",
                  { "class": "el-cascader-menu__empty-text" },
                  [this.t("el.cascader.noData")]
                );
              },
              renderNodeList: function renderNodeList(h2) {
                var menuId = this.menuId;
                var isHoverMenu = this.panel.isHoverMenu;
                var events2 = { on: {} };
                if (isHoverMenu) {
                  events2.on.expand = this.handleExpand;
                }
                var nodes = this.nodes.map(function(node, index2) {
                  var hasChildren = node.hasChildren;
                  return h2("cascader-node", external_babel_helper_vue_jsx_merge_props_default()([{
                    key: node.uid,
                    attrs: {
                      node,
                      "node-id": menuId + "-" + index2,
                      "aria-haspopup": hasChildren,
                      "aria-owns": hasChildren ? menuId : null
                    }
                  }, events2]));
                });
                return [].concat(nodes, [isHoverMenu ? h2("svg", { ref: "hoverZone", "class": "el-cascader-menu__hover-zone" }) : null]);
              }
            },
            render: function render6(h2) {
              var isEmpty = this.isEmpty, menuId = this.menuId;
              var events2 = { nativeOn: {} };
              if (this.panel.isHoverMenu) {
                events2.nativeOn.mousemove = this.handleMouseMove;
              }
              return h2(
                "el-scrollbar",
                external_babel_helper_vue_jsx_merge_props_default()([{
                  attrs: {
                    tag: "ul",
                    role: "menu",
                    id: menuId,
                    "wrap-class": "el-cascader-menu__wrap",
                    "view-class": {
                      "el-cascader-menu__list": true,
                      "is-empty": isEmpty
                    }
                  },
                  "class": "el-cascader-menu"
                }, events2]),
                [isEmpty ? this.renderEmptyText(h2) : this.renderNodeList(h2)]
              );
            }
          };
          var src_cascader_menuvue_type_script_lang_js_ = cascader_menuvue_type_script_lang_js_;
          var cascader_menu_render, cascader_menu_staticRenderFns;
          var cascader_menu_component = Object(componentNormalizer[
            "a"
            /* default */
          ])(
            src_cascader_menuvue_type_script_lang_js_,
            cascader_menu_render,
            cascader_menu_staticRenderFns,
            false,
            null,
            null,
            null
          );
          cascader_menu_component.options.__file = "packages/cascader-panel/src/cascader-menu.vue";
          var cascader_menu = cascader_menu_component.exports;
          var shared_ = __webpack_require__(21);
          var _createClass2 = function() {
            function defineProperties3(target2, props2) {
              for (var i = 0; i < props2.length; i++) {
                var descriptor2 = props2[i];
                descriptor2.enumerable = descriptor2.enumerable || false;
                descriptor2.configurable = true;
                if ("value" in descriptor2)
                  descriptor2.writable = true;
                Object.defineProperty(target2, descriptor2.key, descriptor2);
              }
            }
            return function(Constructor, protoProps, staticProps) {
              if (protoProps)
                defineProperties3(Constructor.prototype, protoProps);
              if (staticProps)
                defineProperties3(Constructor, staticProps);
              return Constructor;
            };
          }();
          function _classCallCheck2(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var uid2 = 0;
          var node_Node = function() {
            function Node2(data, config2, parentNode2) {
              _classCallCheck2(this, Node2);
              this.data = data;
              this.config = config2;
              this.parent = parentNode2 || null;
              this.level = !this.parent ? 1 : this.parent.level + 1;
              this.uid = uid2++;
              this.initState();
              this.initChildren();
            }
            Node2.prototype.initState = function initState2() {
              var _config = this.config, valueKey = _config.value, labelKey = _config.label;
              this.value = this.data[valueKey];
              this.label = this.data[labelKey];
              this.pathNodes = this.calculatePathNodes();
              this.path = this.pathNodes.map(function(node) {
                return node.value;
              });
              this.pathLabels = this.pathNodes.map(function(node) {
                return node.label;
              });
              this.loading = false;
              this.loaded = false;
            };
            Node2.prototype.initChildren = function initChildren() {
              var _this = this;
              var config2 = this.config;
              var childrenKey = config2.children;
              var childrenData = this.data[childrenKey];
              this.hasChildren = Array.isArray(childrenData);
              this.children = (childrenData || []).map(function(child) {
                return new Node2(child, config2, _this);
              });
            };
            Node2.prototype.calculatePathNodes = function calculatePathNodes() {
              var nodes = [this];
              var parent = this.parent;
              while (parent) {
                nodes.unshift(parent);
                parent = parent.parent;
              }
              return nodes;
            };
            Node2.prototype.getPath = function getPath() {
              return this.path;
            };
            Node2.prototype.getValue = function getValue2() {
              return this.value;
            };
            Node2.prototype.getValueByOption = function getValueByOption() {
              return this.config.emitPath ? this.getPath() : this.getValue();
            };
            Node2.prototype.getText = function getText(allLevels, separator) {
              return allLevels ? this.pathLabels.join(separator) : this.label;
            };
            Node2.prototype.isSameNode = function isSameNode(checkedValue) {
              var value = this.getValueByOption();
              return this.config.multiple && Array.isArray(checkedValue) ? checkedValue.some(function(val) {
                return Object(util_["isEqual"])(val, value);
              }) : Object(util_["isEqual"])(checkedValue, value);
            };
            Node2.prototype.broadcast = function broadcast(event) {
              for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              var handlerName = "onParent" + Object(util_["capitalize"])(event);
              this.children.forEach(function(child) {
                if (child) {
                  child.broadcast.apply(child, [event].concat(args));
                  child[handlerName] && child[handlerName].apply(child, args);
                }
              });
            };
            Node2.prototype.emit = function emit(event) {
              var parent = this.parent;
              var handlerName = "onChild" + Object(util_["capitalize"])(event);
              if (parent) {
                for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                parent[handlerName] && parent[handlerName].apply(parent, args);
                parent.emit.apply(parent, [event].concat(args));
              }
            };
            Node2.prototype.onParentCheck = function onParentCheck(checked) {
              if (!this.isDisabled) {
                this.setCheckState(checked);
              }
            };
            Node2.prototype.onChildCheck = function onChildCheck() {
              var children = this.children;
              var validChildren = children.filter(function(child) {
                return !child.isDisabled;
              });
              var checked = validChildren.length ? validChildren.every(function(child) {
                return child.checked;
              }) : false;
              this.setCheckState(checked);
            };
            Node2.prototype.setCheckState = function setCheckState(checked) {
              var totalNum = this.children.length;
              var checkedNum = this.children.reduce(function(c, p) {
                var num = p.checked ? 1 : p.indeterminate ? 0.5 : 0;
                return c + num;
              }, 0);
              this.checked = checked;
              this.indeterminate = checkedNum !== totalNum && checkedNum > 0;
            };
            Node2.prototype.syncCheckState = function syncCheckState(checkedValue) {
              var value = this.getValueByOption();
              var checked = this.isSameNode(checkedValue, value);
              this.doCheck(checked);
            };
            Node2.prototype.doCheck = function doCheck(checked) {
              if (this.checked !== checked) {
                if (this.config.checkStrictly) {
                  this.checked = checked;
                } else {
                  this.broadcast("check", checked);
                  this.setCheckState(checked);
                  this.emit("check");
                }
              }
            };
            _createClass2(Node2, [{
              key: "isDisabled",
              get: function get() {
                var data = this.data, parent = this.parent, config2 = this.config;
                var disabledKey = config2.disabled;
                var checkStrictly = config2.checkStrictly;
                return data[disabledKey] || !checkStrictly && parent && parent.isDisabled;
              }
            }, {
              key: "isLeaf",
              get: function get() {
                var data = this.data, loaded = this.loaded, hasChildren = this.hasChildren, children = this.children;
                var _config2 = this.config, lazy = _config2.lazy, leafKey = _config2.leaf;
                if (lazy) {
                  var isLeaf = Object(shared_["isDef"])(data[leafKey]) ? data[leafKey] : loaded ? !children.length : false;
                  this.hasChildren = !isLeaf;
                  return isLeaf;
                }
                return !hasChildren;
              }
            }]);
            return Node2;
          }();
          var src_node = node_Node;
          function store_classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var flatNodes = function flatNodes2(data, leafOnly) {
            return data.reduce(function(res, node) {
              if (node.isLeaf) {
                res.push(node);
              } else {
                !leafOnly && res.push(node);
                res = res.concat(flatNodes2(node.children, leafOnly));
              }
              return res;
            }, []);
          };
          var store_Store = function() {
            function Store(data, config2) {
              store_classCallCheck(this, Store);
              this.config = config2;
              this.initNodes(data);
            }
            Store.prototype.initNodes = function initNodes(data) {
              var _this = this;
              data = Object(util_["coerceTruthyValueToArray"])(data);
              this.nodes = data.map(function(nodeData) {
                return new src_node(nodeData, _this.config);
              });
              this.flattedNodes = this.getFlattedNodes(false, false);
              this.leafNodes = this.getFlattedNodes(true, false);
            };
            Store.prototype.appendNode = function appendNode(nodeData, parentNode2) {
              var node = new src_node(nodeData, this.config, parentNode2);
              var children = parentNode2 ? parentNode2.children : this.nodes;
              children.push(node);
            };
            Store.prototype.appendNodes = function appendNodes(nodeDataList, parentNode2) {
              var _this2 = this;
              nodeDataList = Object(util_["coerceTruthyValueToArray"])(nodeDataList);
              nodeDataList.forEach(function(nodeData) {
                return _this2.appendNode(nodeData, parentNode2);
              });
            };
            Store.prototype.getNodes = function getNodes() {
              return this.nodes;
            };
            Store.prototype.getFlattedNodes = function getFlattedNodes(leafOnly) {
              var cached2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
              var cachedNodes = leafOnly ? this.leafNodes : this.flattedNodes;
              return cached2 ? cachedNodes : flatNodes(this.nodes, leafOnly);
            };
            Store.prototype.getNodeByValue = function getNodeByValue(value) {
              var nodes = this.getFlattedNodes(false, !this.config.lazy).filter(function(node) {
                return Object(util_["valueEquals"])(node.path, value) || node.value === value;
              });
              return nodes && nodes.length ? nodes[0] : null;
            };
            return Store;
          }();
          var src_store = store_Store;
          var merge_ = __webpack_require__(9);
          var merge_default = /* @__PURE__ */ __webpack_require__.n(merge_);
          var aria_utils_ = __webpack_require__(41);
          var aria_utils_default = /* @__PURE__ */ __webpack_require__.n(aria_utils_);
          var scroll_into_view_ = __webpack_require__(31);
          var scroll_into_view_default = /* @__PURE__ */ __webpack_require__.n(scroll_into_view_);
          var _extends = Object.assign || function(target2) {
            for (var i = 1; i < arguments.length; i++) {
              var source = arguments[i];
              for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                  target2[key] = source[key];
                }
              }
            }
            return target2;
          };
          var KeyCode = aria_utils_default.a.keys;
          var DefaultProps = {
            expandTrigger: "click",
            // or hover
            multiple: false,
            checkStrictly: false,
            // whether all nodes can be selected
            emitPath: true,
            // wether to emit an array of all levels value in which node is located
            lazy: false,
            lazyLoad: util_["noop"],
            value: "value",
            label: "label",
            children: "children",
            leaf: "leaf",
            disabled: "disabled",
            hoverThreshold: 500
          };
          var cascader_panelvue_type_script_lang_js_isLeaf = function isLeaf(el) {
            return !el.getAttribute("aria-owns");
          };
          var getSibling = function getSibling2(el, distance) {
            var parentNode2 = el.parentNode;
            if (parentNode2) {
              var siblings = parentNode2.querySelectorAll('.el-cascader-node[tabindex="-1"]');
              var index2 = Array.prototype.indexOf.call(siblings, el);
              return siblings[index2 + distance] || null;
            }
            return null;
          };
          var getMenuIndex = function getMenuIndex2(el, distance) {
            if (!el)
              return;
            var pieces = el.id.split("-");
            return Number(pieces[pieces.length - 2]);
          };
          var focusNode = function focusNode2(el) {
            if (!el)
              return;
            el.focus();
            !cascader_panelvue_type_script_lang_js_isLeaf(el) && el.click();
          };
          var checkNode = function checkNode2(el) {
            if (!el)
              return;
            var input2 = el.querySelector("input");
            if (input2) {
              input2.click();
            } else if (cascader_panelvue_type_script_lang_js_isLeaf(el)) {
              el.click();
            }
          };
          var cascader_panelvue_type_script_lang_js_ = {
            name: "ElCascaderPanel",
            components: {
              CascaderMenu: cascader_menu
            },
            props: {
              value: {},
              options: Array,
              props: Object,
              border: {
                type: Boolean,
                default: true
              },
              renderLabel: Function
            },
            provide: function provide2() {
              return {
                panel: this
              };
            },
            data: function data() {
              return {
                checkedValue: null,
                checkedNodePaths: [],
                store: [],
                menus: [],
                activePath: [],
                loadCount: 0
              };
            },
            computed: {
              config: function config2() {
                return merge_default()(_extends({}, DefaultProps), this.props || {});
              },
              multiple: function multiple() {
                return this.config.multiple;
              },
              checkStrictly: function checkStrictly() {
                return this.config.checkStrictly;
              },
              leafOnly: function leafOnly() {
                return !this.checkStrictly;
              },
              isHoverMenu: function isHoverMenu() {
                return this.config.expandTrigger === "hover";
              },
              renderLabelFn: function renderLabelFn() {
                return this.renderLabel || this.$scopedSlots.default;
              }
            },
            watch: {
              value: function value() {
                this.syncCheckedValue();
                this.checkStrictly && this.calculateCheckedNodePaths();
              },
              options: {
                handler: function handler() {
                  this.initStore();
                },
                immediate: true,
                deep: true
              },
              checkedValue: function checkedValue(val) {
                if (!Object(util_["isEqual"])(val, this.value)) {
                  this.checkStrictly && this.calculateCheckedNodePaths();
                  this.$emit("input", val);
                  this.$emit("change", val);
                }
              }
            },
            mounted: function mounted2() {
              if (!this.isEmptyValue(this.value)) {
                this.syncCheckedValue();
              }
            },
            methods: {
              initStore: function initStore() {
                var config2 = this.config, options = this.options;
                if (config2.lazy && Object(util_["isEmpty"])(options)) {
                  this.lazyLoad();
                } else {
                  this.store = new src_store(options, config2);
                  this.menus = [this.store.getNodes()];
                  this.syncMenuState();
                }
              },
              syncCheckedValue: function syncCheckedValue() {
                var value = this.value, checkedValue = this.checkedValue;
                if (!Object(util_["isEqual"])(value, checkedValue)) {
                  this.activePath = [];
                  this.checkedValue = value;
                  this.syncMenuState();
                }
              },
              syncMenuState: function syncMenuState() {
                var multiple = this.multiple, checkStrictly = this.checkStrictly;
                this.syncActivePath();
                multiple && this.syncMultiCheckState();
                checkStrictly && this.calculateCheckedNodePaths();
                this.$nextTick(this.scrollIntoView);
              },
              syncMultiCheckState: function syncMultiCheckState() {
                var _this = this;
                var nodes = this.getFlattedNodes(this.leafOnly);
                nodes.forEach(function(node) {
                  node.syncCheckState(_this.checkedValue);
                });
              },
              isEmptyValue: function isEmptyValue2(val) {
                var multiple = this.multiple, config2 = this.config;
                var emitPath = config2.emitPath;
                if (multiple || emitPath) {
                  return Object(util_["isEmpty"])(val);
                }
                return false;
              },
              syncActivePath: function syncActivePath() {
                var _this2 = this;
                var store2 = this.store, multiple = this.multiple, activePath = this.activePath, checkedValue = this.checkedValue;
                if (!Object(util_["isEmpty"])(activePath)) {
                  var nodes = activePath.map(function(node) {
                    return _this2.getNodeByValue(node.getValue());
                  });
                  this.expandNodes(nodes);
                } else if (!this.isEmptyValue(checkedValue)) {
                  var value = multiple ? checkedValue[0] : checkedValue;
                  var checkedNode = this.getNodeByValue(value) || {};
                  var _nodes = (checkedNode.pathNodes || []).slice(0, -1);
                  this.expandNodes(_nodes);
                } else {
                  this.activePath = [];
                  this.menus = [store2.getNodes()];
                }
              },
              expandNodes: function expandNodes(nodes) {
                var _this3 = this;
                nodes.forEach(function(node) {
                  return _this3.handleExpand(
                    node,
                    true
                    /* silent */
                  );
                });
              },
              calculateCheckedNodePaths: function calculateCheckedNodePaths() {
                var _this4 = this;
                var checkedValue = this.checkedValue, multiple = this.multiple;
                var checkedValues = multiple ? Object(util_["coerceTruthyValueToArray"])(checkedValue) : [checkedValue];
                this.checkedNodePaths = checkedValues.map(function(v) {
                  var checkedNode = _this4.getNodeByValue(v);
                  return checkedNode ? checkedNode.pathNodes : [];
                });
              },
              handleKeyDown: function handleKeyDown(e) {
                var target2 = e.target, keyCode = e.keyCode;
                switch (keyCode) {
                  case KeyCode.up:
                    var prev = getSibling(target2, -1);
                    focusNode(prev);
                    break;
                  case KeyCode.down:
                    var next = getSibling(target2, 1);
                    focusNode(next);
                    break;
                  case KeyCode.left:
                    var preMenu = this.$refs.menu[getMenuIndex(target2) - 1];
                    if (preMenu) {
                      var expandedNode = preMenu.$el.querySelector('.el-cascader-node[aria-expanded="true"]');
                      focusNode(expandedNode);
                    }
                    break;
                  case KeyCode.right:
                    var nextMenu = this.$refs.menu[getMenuIndex(target2) + 1];
                    if (nextMenu) {
                      var firstNode = nextMenu.$el.querySelector('.el-cascader-node[tabindex="-1"]');
                      focusNode(firstNode);
                    }
                    break;
                  case KeyCode.enter:
                    checkNode(target2);
                    break;
                  case KeyCode.esc:
                  case KeyCode.tab:
                    this.$emit("close");
                    break;
                  default:
                    return;
                }
              },
              handleExpand: function handleExpand(node, silent) {
                var activePath = this.activePath;
                var level = node.level;
                var path = activePath.slice(0, level - 1);
                var menus = this.menus.slice(0, level);
                if (!node.isLeaf) {
                  path.push(node);
                  menus.push(node.children);
                }
                this.activePath = path;
                this.menus = menus;
                if (!silent) {
                  var pathValues = path.map(function(node2) {
                    return node2.getValue();
                  });
                  var activePathValues = activePath.map(function(node2) {
                    return node2.getValue();
                  });
                  if (!Object(util_["valueEquals"])(pathValues, activePathValues)) {
                    this.$emit("active-item-change", pathValues);
                    this.$emit("expand-change", pathValues);
                  }
                }
              },
              handleCheckChange: function handleCheckChange(value) {
                this.checkedValue = value;
              },
              lazyLoad: function lazyLoad(node, onFullfiled) {
                var _this5 = this;
                var config2 = this.config;
                if (!node) {
                  node = node || { root: true, level: 0 };
                  this.store = new src_store([], config2);
                  this.menus = [this.store.getNodes()];
                }
                node.loading = true;
                var resolve = function resolve2(dataList) {
                  var parent = node.root ? null : node;
                  dataList && dataList.length && _this5.store.appendNodes(dataList, parent);
                  node.loading = false;
                  node.loaded = true;
                  if (Array.isArray(_this5.checkedValue)) {
                    var nodeValue = _this5.checkedValue[_this5.loadCount++];
                    var valueKey = _this5.config.value;
                    var leafKey = _this5.config.leaf;
                    if (Array.isArray(dataList) && dataList.filter(function(item) {
                      return item[valueKey] === nodeValue;
                    }).length > 0) {
                      var checkedNode = _this5.store.getNodeByValue(nodeValue);
                      if (!checkedNode.data[leafKey]) {
                        _this5.lazyLoad(checkedNode, function() {
                          _this5.handleExpand(checkedNode);
                        });
                      }
                      if (_this5.loadCount === _this5.checkedValue.length) {
                        _this5.$parent.computePresentText();
                      }
                    }
                  }
                  onFullfiled && onFullfiled(dataList);
                };
                config2.lazyLoad(node, resolve);
              },
              /**
               * public methods
              */
              calculateMultiCheckedValue: function calculateMultiCheckedValue() {
                this.checkedValue = this.getCheckedNodes(this.leafOnly).map(function(node) {
                  return node.getValueByOption();
                });
              },
              scrollIntoView: function scrollIntoView2() {
                if (this.$isServer)
                  return;
                var menus = this.$refs.menu || [];
                menus.forEach(function(menu) {
                  var menuElement = menu.$el;
                  if (menuElement) {
                    var container = menuElement.querySelector(".el-scrollbar__wrap");
                    var activeNode = menuElement.querySelector(".el-cascader-node.is-active") || menuElement.querySelector(".el-cascader-node.in-active-path");
                    scroll_into_view_default()(container, activeNode);
                  }
                });
              },
              getNodeByValue: function getNodeByValue(val) {
                return this.store.getNodeByValue(val);
              },
              getFlattedNodes: function getFlattedNodes(leafOnly) {
                var cached2 = !this.config.lazy;
                return this.store.getFlattedNodes(leafOnly, cached2);
              },
              getCheckedNodes: function getCheckedNodes(leafOnly) {
                var checkedValue = this.checkedValue, multiple = this.multiple;
                if (multiple) {
                  var nodes = this.getFlattedNodes(leafOnly);
                  return nodes.filter(function(node) {
                    return node.checked;
                  });
                } else {
                  return this.isEmptyValue(checkedValue) ? [] : [this.getNodeByValue(checkedValue)];
                }
              },
              clearCheckedNodes: function clearCheckedNodes() {
                var config2 = this.config, leafOnly = this.leafOnly;
                var multiple = config2.multiple, emitPath = config2.emitPath;
                if (multiple) {
                  this.getCheckedNodes(leafOnly).filter(function(node) {
                    return !node.isDisabled;
                  }).forEach(function(node) {
                    return node.doCheck(false);
                  });
                  this.calculateMultiCheckedValue();
                } else {
                  this.checkedValue = emitPath ? [] : null;
                }
              }
            }
          };
          var src_cascader_panelvue_type_script_lang_js_ = cascader_panelvue_type_script_lang_js_;
          var cascader_panel_component = Object(componentNormalizer[
            "a"
            /* default */
          ])(
            src_cascader_panelvue_type_script_lang_js_,
            cascader_panelvue_type_template_id_34932346_render,
            staticRenderFns,
            false,
            null,
            null,
            null
          );
          cascader_panel_component.options.__file = "packages/cascader-panel/src/cascader-panel.vue";
          var cascader_panel = cascader_panel_component.exports;
          cascader_panel.install = function(Vue2) {
            Vue2.component(cascader_panel.name, cascader_panel);
          };
          __webpack_exports__["default"] = cascader_panel;
        }
      ),
      /***/
      9: (
        /***/
        function(module2, exports) {
          module2.exports = requireMerge();
        }
      )
      /******/
    });
  })(cascaderPanel);
  return cascaderPanel.exports;
}
var popover = { exports: {} };
var hasRequiredPopover;
function requirePopover() {
  if (hasRequiredPopover)
    return popover.exports;
  hasRequiredPopover = 1;
  (function(module) {
    module.exports = /******/
    function(modules2) {
      var installedModules = {};
      function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
          return installedModules[moduleId].exports;
        }
        var module2 = installedModules[moduleId] = {
          /******/
          i: moduleId,
          /******/
          l: false,
          /******/
          exports: {}
          /******/
        };
        modules2[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
        module2.l = true;
        return module2.exports;
      }
      __webpack_require__.m = modules2;
      __webpack_require__.c = installedModules;
      __webpack_require__.d = function(exports, name, getter) {
        if (!__webpack_require__.o(exports, name)) {
          Object.defineProperty(exports, name, { enumerable: true, get: getter });
        }
      };
      __webpack_require__.r = function(exports) {
        if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
          Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
        }
        Object.defineProperty(exports, "__esModule", { value: true });
      };
      __webpack_require__.t = function(value, mode) {
        if (mode & 1)
          value = __webpack_require__(value);
        if (mode & 8)
          return value;
        if (mode & 4 && typeof value === "object" && value && value.__esModule)
          return value;
        var ns = /* @__PURE__ */ Object.create(null);
        __webpack_require__.r(ns);
        Object.defineProperty(ns, "default", { enumerable: true, value });
        if (mode & 2 && typeof value != "string")
          for (var key in value)
            __webpack_require__.d(ns, key, (function(key2) {
              return value[key2];
            }).bind(null, key));
        return ns;
      };
      __webpack_require__.n = function(module2) {
        var getter = module2 && module2.__esModule ? (
          /******/
          function getDefault() {
            return module2["default"];
          }
        ) : (
          /******/
          function getModuleExports() {
            return module2;
          }
        );
        __webpack_require__.d(getter, "a", getter);
        return getter;
      };
      __webpack_require__.o = function(object3, property) {
        return Object.prototype.hasOwnProperty.call(object3, property);
      };
      __webpack_require__.p = "/dist/";
      return __webpack_require__(__webpack_require__.s = 78);
    }({
      /***/
      0: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.d(__webpack_exports__, "a", function() {
            return normalizeComponent2;
          });
          function normalizeComponent2(scriptExports, render6, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
            var options = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
            if (render6) {
              options.render = render6;
              options.staticRenderFns = staticRenderFns;
              options._compiled = true;
            }
            if (functionalTemplate) {
              options.functional = true;
            }
            if (scopeId) {
              options._scopeId = "data-v-" + scopeId;
            }
            var hook;
            if (moduleIdentifier) {
              hook = function(context) {
                context = context || // cached call
                this.$vnode && this.$vnode.ssrContext || // stateful
                this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
                if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
                  context = __VUE_SSR_CONTEXT__;
                }
                if (injectStyles) {
                  injectStyles.call(this, context);
                }
                if (context && context._registeredComponents) {
                  context._registeredComponents.add(moduleIdentifier);
                }
              };
              options._ssrRegister = hook;
            } else if (injectStyles) {
              hook = shadowMode ? function() {
                injectStyles.call(this, this.$root.$options.shadowRoot);
              } : injectStyles;
            }
            if (hook) {
              if (options.functional) {
                options._injectStyles = hook;
                var originalRender = options.render;
                options.render = function renderWithStyleInjection(h2, context) {
                  hook.call(context);
                  return originalRender(h2, context);
                };
              } else {
                var existing = options.beforeCreate;
                options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
              }
            }
            return {
              exports: scriptExports,
              options
            };
          }
        }
      ),
      /***/
      2: (
        /***/
        function(module2, exports) {
          module2.exports = requireDom();
        }
      ),
      /***/
      3: (
        /***/
        function(module2, exports) {
          module2.exports = requireUtil();
        }
      ),
      /***/
      5: (
        /***/
        function(module2, exports) {
          module2.exports = requireVuePopper();
        }
      ),
      /***/
      7: (
        /***/
        function(module2, exports) {
          module2.exports = require$$6$1;
        }
      ),
      /***/
      78: (
        /***/
        function(module2, __webpack_exports__, __webpack_require__) {
          __webpack_require__.r(__webpack_exports__);
          var render6 = function() {
            var _vm = this;
            var _h = _vm.$createElement;
            var _c = _vm._self._c || _h;
            return _c(
              "span",
              [
                _c(
                  "transition",
                  {
                    attrs: { name: _vm.transition },
                    on: {
                      "after-enter": _vm.handleAfterEnter,
                      "after-leave": _vm.handleAfterLeave
                    }
                  },
                  [
                    _c(
                      "div",
                      {
                        directives: [
                          {
                            name: "show",
                            rawName: "v-show",
                            value: !_vm.disabled && _vm.showPopper,
                            expression: "!disabled && showPopper"
                          }
                        ],
                        ref: "popper",
                        staticClass: "el-popover el-popper",
                        class: [_vm.popperClass, _vm.content && "el-popover--plain"],
                        style: { width: _vm.width + "px" },
                        attrs: {
                          role: "tooltip",
                          id: _vm.tooltipId,
                          "aria-hidden": _vm.disabled || !_vm.showPopper ? "true" : "false"
                        }
                      },
                      [
                        _vm.title ? _c("div", {
                          staticClass: "el-popover__title",
                          domProps: { textContent: _vm._s(_vm.title) }
                        }) : _vm._e(),
                        _vm._t("default", [_vm._v(_vm._s(_vm.content))])
                      ],
                      2
                    )
                  ]
                ),
                _c(
                  "span",
                  { ref: "wrapper", staticClass: "el-popover__reference-wrapper" },
                  [_vm._t("reference")],
                  2
                )
              ],
              1
            );
          };
          var staticRenderFns = [];
          render6._withStripped = true;
          var vue_popper_ = __webpack_require__(5);
          var vue_popper_default = /* @__PURE__ */ __webpack_require__.n(vue_popper_);
          var dom_ = __webpack_require__(2);
          var util_ = __webpack_require__(3);
          var mainvue_type_script_lang_js_ = {
            name: "ElPopover",
            mixins: [vue_popper_default.a],
            props: {
              trigger: {
                type: String,
                default: "click",
                validator: function validator(value) {
                  return ["click", "focus", "hover", "manual"].indexOf(value) > -1;
                }
              },
              openDelay: {
                type: Number,
                default: 0
              },
              closeDelay: {
                type: Number,
                default: 200
              },
              title: String,
              disabled: Boolean,
              content: String,
              reference: {},
              popperClass: String,
              width: {},
              visibleArrow: {
                default: true
              },
              arrowOffset: {
                type: Number,
                default: 0
              },
              transition: {
                type: String,
                default: "fade-in-linear"
              },
              tabindex: {
                type: Number,
                default: 0
              }
            },
            computed: {
              tooltipId: function tooltipId() {
                return "el-popover-" + Object(util_["generateId"])();
              }
            },
            watch: {
              showPopper: function showPopper(val) {
                if (this.disabled) {
                  return;
                }
                val ? this.$emit("show") : this.$emit("hide");
              }
            },
            mounted: function mounted2() {
              var _this = this;
              var reference = this.referenceElm = this.reference || this.$refs.reference;
              var popper2 = this.popper || this.$refs.popper;
              if (!reference && this.$refs.wrapper.children) {
                reference = this.referenceElm = this.$refs.wrapper.children[0];
              }
              if (reference) {
                Object(dom_["addClass"])(reference, "el-popover__reference");
                reference.setAttribute("aria-describedby", this.tooltipId);
                reference.setAttribute("tabindex", this.tabindex);
                popper2.setAttribute("tabindex", 0);
                if (this.trigger !== "click") {
                  Object(dom_["on"])(reference, "focusin", function() {
                    _this.handleFocus();
                    var instance = reference.__vue__;
                    if (instance && typeof instance.focus === "function") {
                      instance.focus();
                    }
                  });
                  Object(dom_["on"])(popper2, "focusin", this.handleFocus);
                  Object(dom_["on"])(reference, "focusout", this.handleBlur);
                  Object(dom_["on"])(popper2, "focusout", this.handleBlur);
                }
                Object(dom_["on"])(reference, "keydown", this.handleKeydown);
                Object(dom_["on"])(reference, "click", this.handleClick);
              }
              if (this.trigger === "click") {
                Object(dom_["on"])(reference, "click", this.doToggle);
                Object(dom_["on"])(document, "click", this.handleDocumentClick);
              } else if (this.trigger === "hover") {
                Object(dom_["on"])(reference, "mouseenter", this.handleMouseEnter);
                Object(dom_["on"])(popper2, "mouseenter", this.handleMouseEnter);
                Object(dom_["on"])(reference, "mouseleave", this.handleMouseLeave);
                Object(dom_["on"])(popper2, "mouseleave", this.handleMouseLeave);
              } else if (this.trigger === "focus") {
                if (this.tabindex < 0) {
                  console.warn("[Element Warn][Popover]a negative taindex means that the element cannot be focused by tab key");
                }
                if (reference.querySelector("input, textarea")) {
                  Object(dom_["on"])(reference, "focusin", this.doShow);
                  Object(dom_["on"])(reference, "focusout", this.doClose);
                } else {
                  Object(dom_["on"])(reference, "mousedown", this.doShow);
                  Object(dom_["on"])(reference, "mouseup", this.doClose);
                }
              }
            },
            beforeDestroy: function beforeDestroy2() {
              this.cleanup();
            },
            deactivated: function deactivated() {
              this.cleanup();
            },
            methods: {
              doToggle: function doToggle() {
                this.showPopper = !this.showPopper;
              },
              doShow: function doShow() {
                this.showPopper = true;
              },
              doClose: function doClose() {
                this.showPopper = false;
              },
              handleFocus: function handleFocus() {
                Object(dom_["addClass"])(this.referenceElm, "focusing");
                if (this.trigger === "click" || this.trigger === "focus")
                  this.showPopper = true;
              },
              handleClick: function handleClick() {
                Object(dom_["removeClass"])(this.referenceElm, "focusing");
              },
              handleBlur: function handleBlur() {
                Object(dom_["removeClass"])(this.referenceElm, "focusing");
                if (this.trigger === "click" || this.trigger === "focus")
                  this.showPopper = false;
              },
              handleMouseEnter: function handleMouseEnter() {
                var _this2 = this;
                clearTimeout(this._timer);
                if (this.openDelay) {
                  this._timer = setTimeout(function() {
                    _this2.showPopper = true;
                  }, this.openDelay);
                } else {
                  this.showPopper = true;
                }
              },
              handleKeydown: function handleKeydown(ev) {
                if (ev.keyCode === 27 && this.trigger !== "manual") {
                  this.doClose();
                }
              },
              handleMouseLeave: function handleMouseLeave() {
                var _this3 = this;
                clearTimeout(this._timer);
                if (this.closeDelay) {
                  this._timer = setTimeout(function() {
                    _this3.showPopper = false;
                  }, this.closeDelay);
                } else {
                  this.showPopper = false;
                }
              },
              handleDocumentClick: function handleDocumentClick(e) {
                var reference = this.reference || this.$refs.reference;
                var popper2 = this.popper || this.$refs.popper;
                if (!reference && this.$refs.wrapper.children) {
                  reference = this.referenceElm = this.$refs.wrapper.children[0];
                }
                if (!this.$el || !reference || this.$el.contains(e.target) || reference.contains(e.target) || !popper2 || popper2.contains(e.target))
                  return;
                this.showPopper = false;
              },
              handleAfterEnter: function handleAfterEnter() {
                this.$emit("after-enter");
              },
              handleAfterLeave: function handleAfterLeave() {
                this.$emit("after-leave");
                this.doDestroy();
              },
              cleanup: function cleanup() {
                if (this.openDelay || this.closeDelay) {
                  clearTimeout(this._timer);
                }
              }
            },
            destroyed: function destroyed() {
              var reference = this.reference;
              Object(dom_["off"])(reference, "click", this.doToggle);
              Object(dom_["off"])(reference, "mouseup", this.doClose);
              Object(dom_["off"])(reference, "mousedown", this.doShow);
              Object(dom_["off"])(reference, "focusin", this.doShow);
              Object(dom_["off"])(reference, "focusout", this.doClose);
              Object(dom_["off"])(reference, "mousedown", this.doShow);
              Object(dom_["off"])(reference, "mouseup", this.doClose);
              Object(dom_["off"])(reference, "mouseleave", this.handleMouseLeave);
              Object(dom_["off"])(reference, "mouseenter", this.handleMouseEnter);
              Object(dom_["off"])(document, "click", this.handleDocumentClick);
            }
          };
          var src_mainvue_type_script_lang_js_ = mainvue_type_script_lang_js_;
          var componentNormalizer = __webpack_require__(0);
          var component = Object(componentNormalizer[
            "a"
            /* default */
          ])(
            src_mainvue_type_script_lang_js_,
            render6,
            staticRenderFns,
            false,
            null,
            null,
            null
          );
          component.options.__file = "packages/popover/src/main.vue";
          var main = component.exports;
          var getReference = function getReference2(el, binding, vnode) {
            var _ref = binding.expression ? binding.value : binding.arg;
            var popper2 = vnode.context.$refs[_ref];
            if (popper2) {
              if (Array.isArray(popper2)) {
                popper2[0].$refs.reference = el;
              } else {
                popper2.$refs.reference = el;
              }
            }
          };
          var directive2 = {
            bind: function bind2(el, binding, vnode) {
              getReference(el, binding, vnode);
            },
            inserted: function inserted(el, binding, vnode) {
              getReference(el, binding, vnode);
            }
          };
          var external_vue_ = __webpack_require__(7);
          var external_vue_default = /* @__PURE__ */ __webpack_require__.n(external_vue_);
          external_vue_default.a.directive("popover", directive2);
          main.install = function(Vue2) {
            Vue2.directive("popover", directive2);
            Vue2.component(main.name, main);
          };
          main.directive = directive2;
          __webpack_exports__["default"] = main;
        }
      )
      /******/
    });
  })(popover);
  return popover.exports;
}
(function(module) {
  module.exports = /******/
  function(modules2) {
    var installedModules = {};
    function __webpack_require__(moduleId) {
      if (installedModules[moduleId]) {
        return installedModules[moduleId].exports;
      }
      var module2 = installedModules[moduleId] = {
        /******/
        i: moduleId,
        /******/
        l: false,
        /******/
        exports: {}
        /******/
      };
      modules2[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
      module2.l = true;
      return module2.exports;
    }
    __webpack_require__.m = modules2;
    __webpack_require__.c = installedModules;
    __webpack_require__.d = function(exports, name, getter) {
      if (!__webpack_require__.o(exports, name)) {
        Object.defineProperty(exports, name, { enumerable: true, get: getter });
      }
    };
    __webpack_require__.r = function(exports) {
      if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
        Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      }
      Object.defineProperty(exports, "__esModule", { value: true });
    };
    __webpack_require__.t = function(value, mode) {
      if (mode & 1)
        value = __webpack_require__(value);
      if (mode & 8)
        return value;
      if (mode & 4 && typeof value === "object" && value && value.__esModule)
        return value;
      var ns = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(ns);
      Object.defineProperty(ns, "default", { enumerable: true, value });
      if (mode & 2 && typeof value != "string")
        for (var key in value)
          __webpack_require__.d(ns, key, (function(key2) {
            return value[key2];
          }).bind(null, key));
      return ns;
    };
    __webpack_require__.n = function(module2) {
      var getter = module2 && module2.__esModule ? (
        /******/
        function getDefault() {
          return module2["default"];
        }
      ) : (
        /******/
        function getModuleExports() {
          return module2;
        }
      );
      __webpack_require__.d(getter, "a", getter);
      return getter;
    };
    __webpack_require__.o = function(object3, property) {
      return Object.prototype.hasOwnProperty.call(object3, property);
    };
    __webpack_require__.p = "/dist/";
    return __webpack_require__(__webpack_require__.s = 46);
  }([
    /* 0 */
    /***/
    function(module2, exports) {
      module2.exports = requireDateUtil();
    },
    /* 1 */
    /***/
    function(module2, exports) {
      module2.exports = requireDom();
    },
    /* 2 */
    /***/
    function(module2, exports) {
      module2.exports = requireUtil();
    },
    /* 3 */
    /***/
    function(module2, exports) {
      module2.exports = requireEmitter();
    },
    /* 4 */
    /***/
    function(module2, exports) {
      module2.exports = requireLocale();
    },
    /* 5 */
    /***/
    function(module2, exports) {
      module2.exports = requireVuePopper();
    },
    /* 6 */
    /***/
    function(module2, exports) {
      module2.exports = require$$6$1;
    },
    /* 7 */
    /***/
    function(module2, exports) {
      module2.exports = requireMerge();
    },
    /* 8 */
    /***/
    function(module2, exports) {
      module2.exports = requireInput();
    },
    /* 9 */
    /***/
    function(module2, exports) {
      module2.exports = requireMigrating();
    },
    /* 10 */
    /***/
    function(module2, exports) {
      module2.exports = requireClickoutside();
    },
    /* 11 */
    /***/
    function(module2, exports) {
      module2.exports = requirePopup();
    },
    /* 12 */
    /***/
    function(module2, exports) {
      module2.exports = requireLocale$1();
    },
    /* 13 */
    /***/
    function(module2, exports) {
      module2.exports = requireButton();
    },
    /* 14 */
    /***/
    function(module2, exports) {
      module2.exports = requireCheckbox();
    },
    /* 15 */
    /***/
    function(module2, exports) {
      module2.exports = requireResizeEvent();
    },
    /* 16 */
    /***/
    function(module2, exports) {
      module2.exports = requireTypes();
    },
    /* 17 */
    /***/
    function(module2, exports) {
      module2.exports = requireDebounce();
    },
    /* 18 */
    /***/
    function(module2, exports) {
      module2.exports = requireScrollbar();
    },
    /* 19 */
    /***/
    function(module2, exports) {
      module2.exports = requireShared();
    },
    /* 20 */
    /***/
    function(module2, exports) {
      module2.exports = requireDate();
    },
    /* 21 */
    /***/
    function(module2, exports) {
      module2.exports = requireCollapseTransition();
    },
    /* 22 */
    /***/
    function(module2, exports) {
      module2.exports = requireVdom();
    },
    /* 23 */
    /***/
    function(module2, exports) {
      module2.exports = requireFocus();
    },
    /* 24 */
    /***/
    function(module2, exports) {
      module2.exports = requireBabelHelperVueJsxMergeProps();
    },
    /* 25 */
    /***/
    function(module2, exports) {
      module2.exports = requireThrottle();
    },
    /* 26 */
    /***/
    function(module2, exports) {
      module2.exports = requireTooltip();
    },
    /* 27 */
    /***/
    function(module2, exports) {
      module2.exports = requireScrollIntoView();
    },
    /* 28 */
    /***/
    function(module2, exports) {
      module2.exports = requireLodash();
    },
    /* 29 */
    /***/
    function(module2, exports) {
      module2.exports = requireButtonGroup();
    },
    /* 30 */
    /***/
    function(module2, exports) {
      module2.exports = requireTag();
    },
    /* 31 */
    /***/
    function(module2, exports) {
      module2.exports = requireScrollbarWidth();
    },
    /* 32 */
    /***/
    function(module2, exports) {
      module2.exports = requireCheckboxGroup();
    },
    /* 33 */
    /***/
    function(module2, exports) {
      module2.exports = requireAfterLeave();
    },
    /* 34 */
    /***/
    function(module2, exports) {
      module2.exports = requireProgress();
    },
    /* 35 */
    /***/
    function(module2, exports) {
      module2.exports = requireAriaUtils();
    },
    /* 36 */
    /***/
    function(module2, exports) {
      module2.exports = requireThrottleDebounce();
    },
    /* 37 */
    /***/
    function(module2, exports) {
      module2.exports = requireSelect();
    },
    /* 38 */
    /***/
    function(module2, exports) {
      module2.exports = requireOption();
    },
    /* 39 */
    /***/
    function(module2, exports) {
      module2.exports = requireNormalizeWheel();
    },
    /* 40 */
    /***/
    function(module2, exports) {
      module2.exports = requireAriaDialog();
    },
    /* 41 */
    /***/
    function(module2, exports) {
      module2.exports = require$$41;
    },
    /* 42 */
    /***/
    function(module2, exports) {
      module2.exports = requireInputNumber();
    },
    /* 43 */
    /***/
    function(module2, exports) {
      module2.exports = requireCascaderPanel();
    },
    /* 44 */
    /***/
    function(module2, exports) {
      module2.exports = requireRadio();
    },
    /* 45 */
    /***/
    function(module2, exports) {
      module2.exports = requirePopover();
    },
    /* 46 */
    /***/
    function(module2, exports, __webpack_require__) {
      module2.exports = __webpack_require__(47);
    },
    /* 47 */
    /***/
    function(module2, __webpack_exports__, __webpack_require__) {
      __webpack_require__.r(__webpack_exports__);
      var pagervue_type_template_id_7274f267_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "ul",
          { staticClass: "el-pager", on: { click: _vm.onPagerClick } },
          [
            _vm.pageCount > 0 ? _c(
              "li",
              {
                staticClass: "number",
                class: { active: _vm.currentPage === 1, disabled: _vm.disabled }
              },
              [_vm._v("1")]
            ) : _vm._e(),
            _vm.showPrevMore ? _c("li", {
              staticClass: "el-icon more btn-quickprev",
              class: [_vm.quickprevIconClass, { disabled: _vm.disabled }],
              on: {
                mouseenter: function($event) {
                  _vm.onMouseenter("left");
                },
                mouseleave: function($event) {
                  _vm.quickprevIconClass = "el-icon-more";
                }
              }
            }) : _vm._e(),
            _vm._l(_vm.pagers, function(pager2) {
              return _c(
                "li",
                {
                  key: pager2,
                  staticClass: "number",
                  class: { active: _vm.currentPage === pager2, disabled: _vm.disabled }
                },
                [_vm._v(_vm._s(pager2))]
              );
            }),
            _vm.showNextMore ? _c("li", {
              staticClass: "el-icon more btn-quicknext",
              class: [_vm.quicknextIconClass, { disabled: _vm.disabled }],
              on: {
                mouseenter: function($event) {
                  _vm.onMouseenter("right");
                },
                mouseleave: function($event) {
                  _vm.quicknextIconClass = "el-icon-more";
                }
              }
            }) : _vm._e(),
            _vm.pageCount > 1 ? _c(
              "li",
              {
                staticClass: "number",
                class: {
                  active: _vm.currentPage === _vm.pageCount,
                  disabled: _vm.disabled
                }
              },
              [_vm._v(_vm._s(_vm.pageCount))]
            ) : _vm._e()
          ],
          2
        );
      };
      var staticRenderFns = [];
      pagervue_type_template_id_7274f267_render._withStripped = true;
      var pagervue_type_script_lang_js_ = {
        name: "ElPager",
        props: {
          currentPage: Number,
          pageCount: Number,
          pagerCount: Number,
          disabled: Boolean
        },
        watch: {
          showPrevMore: function showPrevMore(val) {
            if (!val)
              this.quickprevIconClass = "el-icon-more";
          },
          showNextMore: function showNextMore(val) {
            if (!val)
              this.quicknextIconClass = "el-icon-more";
          }
        },
        methods: {
          onPagerClick: function onPagerClick(event) {
            var target2 = event.target;
            if (target2.tagName === "UL" || this.disabled) {
              return;
            }
            var newPage = Number(event.target.textContent);
            var pageCount = this.pageCount;
            var currentPage = this.currentPage;
            var pagerCountOffset = this.pagerCount - 2;
            if (target2.className.indexOf("more") !== -1) {
              if (target2.className.indexOf("quickprev") !== -1) {
                newPage = currentPage - pagerCountOffset;
              } else if (target2.className.indexOf("quicknext") !== -1) {
                newPage = currentPage + pagerCountOffset;
              }
            }
            if (!isNaN(newPage)) {
              if (newPage < 1) {
                newPage = 1;
              }
              if (newPage > pageCount) {
                newPage = pageCount;
              }
            }
            if (newPage !== currentPage) {
              this.$emit("change", newPage);
            }
          },
          onMouseenter: function onMouseenter(direction) {
            if (this.disabled)
              return;
            if (direction === "left") {
              this.quickprevIconClass = "el-icon-d-arrow-left";
            } else {
              this.quicknextIconClass = "el-icon-d-arrow-right";
            }
          }
        },
        computed: {
          pagers: function pagers() {
            var pagerCount = this.pagerCount;
            var halfPagerCount = (pagerCount - 1) / 2;
            var currentPage = Number(this.currentPage);
            var pageCount = Number(this.pageCount);
            var showPrevMore = false;
            var showNextMore = false;
            if (pageCount > pagerCount) {
              if (currentPage > pagerCount - halfPagerCount) {
                showPrevMore = true;
              }
              if (currentPage < pageCount - halfPagerCount) {
                showNextMore = true;
              }
            }
            var array3 = [];
            if (showPrevMore && !showNextMore) {
              var startPage = pageCount - (pagerCount - 2);
              for (var i = startPage; i < pageCount; i++) {
                array3.push(i);
              }
            } else if (!showPrevMore && showNextMore) {
              for (var _i = 2; _i < pagerCount; _i++) {
                array3.push(_i);
              }
            } else if (showPrevMore && showNextMore) {
              var offset = Math.floor(pagerCount / 2) - 1;
              for (var _i2 = currentPage - offset; _i2 <= currentPage + offset; _i2++) {
                array3.push(_i2);
              }
            } else {
              for (var _i3 = 2; _i3 < pageCount; _i3++) {
                array3.push(_i3);
              }
            }
            this.showPrevMore = showPrevMore;
            this.showNextMore = showNextMore;
            return array3;
          }
        },
        data: function data() {
          return {
            current: null,
            showPrevMore: false,
            showNextMore: false,
            quicknextIconClass: "el-icon-more",
            quickprevIconClass: "el-icon-more"
          };
        }
      };
      var src_pagervue_type_script_lang_js_ = pagervue_type_script_lang_js_;
      function normalizeComponent2(scriptExports, render6, staticRenderFns2, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
        var options = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
        if (render6) {
          options.render = render6;
          options.staticRenderFns = staticRenderFns2;
          options._compiled = true;
        }
        if (functionalTemplate) {
          options.functional = true;
        }
        if (scopeId) {
          options._scopeId = "data-v-" + scopeId;
        }
        var hook;
        if (moduleIdentifier) {
          hook = function(context) {
            context = context || // cached call
            this.$vnode && this.$vnode.ssrContext || // stateful
            this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
            if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
              context = __VUE_SSR_CONTEXT__;
            }
            if (injectStyles) {
              injectStyles.call(this, context);
            }
            if (context && context._registeredComponents) {
              context._registeredComponents.add(moduleIdentifier);
            }
          };
          options._ssrRegister = hook;
        } else if (injectStyles) {
          hook = shadowMode ? function() {
            injectStyles.call(this, this.$root.$options.shadowRoot);
          } : injectStyles;
        }
        if (hook) {
          if (options.functional) {
            options._injectStyles = hook;
            var originalRender = options.render;
            options.render = function renderWithStyleInjection(h2, context) {
              hook.call(context);
              return originalRender(h2, context);
            };
          } else {
            var existing = options.beforeCreate;
            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
          }
        }
        return {
          exports: scriptExports,
          options
        };
      }
      var component = normalizeComponent2(
        src_pagervue_type_script_lang_js_,
        pagervue_type_template_id_7274f267_render,
        staticRenderFns,
        false,
        null,
        null,
        null
      );
      component.options.__file = "packages/pagination/src/pager.vue";
      var pager = component.exports;
      var select_ = __webpack_require__(37);
      var select_default = /* @__PURE__ */ __webpack_require__.n(select_);
      var option_ = __webpack_require__(38);
      var option_default = /* @__PURE__ */ __webpack_require__.n(option_);
      var input_ = __webpack_require__(8);
      var input_default = /* @__PURE__ */ __webpack_require__.n(input_);
      var locale_ = __webpack_require__(4);
      var locale_default = /* @__PURE__ */ __webpack_require__.n(locale_);
      var util_ = __webpack_require__(2);
      var pagination = {
        name: "ElPagination",
        props: {
          pageSize: {
            type: Number,
            default: 10
          },
          small: Boolean,
          total: Number,
          pageCount: Number,
          pagerCount: {
            type: Number,
            validator: function validator(value) {
              return (value | 0) === value && value > 4 && value < 22 && value % 2 === 1;
            },
            default: 7
          },
          currentPage: {
            type: Number,
            default: 1
          },
          layout: {
            default: "prev, pager, next, jumper, ->, total"
          },
          pageSizes: {
            type: Array,
            default: function _default2() {
              return [10, 20, 30, 40, 50, 100];
            }
          },
          popperClass: String,
          prevText: String,
          nextText: String,
          background: Boolean,
          disabled: Boolean,
          hideOnSinglePage: Boolean
        },
        data: function data() {
          return {
            internalCurrentPage: 1,
            internalPageSize: 0,
            lastEmittedPage: -1,
            userChangePageSize: false
          };
        },
        render: function render6(h2) {
          var layout = this.layout;
          if (!layout)
            return null;
          if (this.hideOnSinglePage && (!this.internalPageCount || this.internalPageCount === 1))
            return null;
          var template = h2("div", { "class": ["el-pagination", {
            "is-background": this.background,
            "el-pagination--small": this.small
          }] });
          var TEMPLATE_MAP = {
            prev: h2("prev"),
            jumper: h2("jumper"),
            pager: h2("pager", {
              attrs: { currentPage: this.internalCurrentPage, pageCount: this.internalPageCount, pagerCount: this.pagerCount, disabled: this.disabled },
              on: {
                "change": this.handleCurrentChange
              }
            }),
            next: h2("next"),
            sizes: h2("sizes", {
              attrs: { pageSizes: this.pageSizes }
            }),
            slot: h2("slot", [this.$slots.default ? this.$slots.default : ""]),
            total: h2("total")
          };
          var components2 = layout.split(",").map(function(item) {
            return item.trim();
          });
          var rightWrapper = h2("div", { "class": "el-pagination__rightwrapper" });
          var haveRightWrapper = false;
          template.children = template.children || [];
          rightWrapper.children = rightWrapper.children || [];
          components2.forEach(function(compo) {
            if (compo === "->") {
              haveRightWrapper = true;
              return;
            }
            if (!haveRightWrapper) {
              template.children.push(TEMPLATE_MAP[compo]);
            } else {
              rightWrapper.children.push(TEMPLATE_MAP[compo]);
            }
          });
          if (haveRightWrapper) {
            template.children.unshift(rightWrapper);
          }
          return template;
        },
        components: {
          Prev: {
            render: function render6(h2) {
              return h2(
                "button",
                {
                  attrs: {
                    type: "button",
                    disabled: this.$parent.disabled || this.$parent.internalCurrentPage <= 1
                  },
                  "class": "btn-prev",
                  on: {
                    "click": this.$parent.prev
                  }
                },
                [this.$parent.prevText ? h2("span", [this.$parent.prevText]) : h2("i", { "class": "el-icon el-icon-arrow-left" })]
              );
            }
          },
          Next: {
            render: function render6(h2) {
              return h2(
                "button",
                {
                  attrs: {
                    type: "button",
                    disabled: this.$parent.disabled || this.$parent.internalCurrentPage === this.$parent.internalPageCount || this.$parent.internalPageCount === 0
                  },
                  "class": "btn-next",
                  on: {
                    "click": this.$parent.next
                  }
                },
                [this.$parent.nextText ? h2("span", [this.$parent.nextText]) : h2("i", { "class": "el-icon el-icon-arrow-right" })]
              );
            }
          },
          Sizes: {
            mixins: [locale_default.a],
            props: {
              pageSizes: Array
            },
            watch: {
              pageSizes: {
                immediate: true,
                handler: function handler(newVal, oldVal) {
                  if (Object(util_["valueEquals"])(newVal, oldVal))
                    return;
                  if (Array.isArray(newVal)) {
                    this.$parent.internalPageSize = newVal.indexOf(this.$parent.pageSize) > -1 ? this.$parent.pageSize : this.pageSizes[0];
                  }
                }
              }
            },
            render: function render6(h2) {
              var _this = this;
              return h2(
                "span",
                { "class": "el-pagination__sizes" },
                [h2(
                  "el-select",
                  {
                    attrs: {
                      value: this.$parent.internalPageSize,
                      popperClass: this.$parent.popperClass || "",
                      size: "mini",
                      disabled: this.$parent.disabled
                    },
                    on: {
                      "input": this.handleChange
                    }
                  },
                  [this.pageSizes.map(function(item) {
                    return h2("el-option", {
                      attrs: {
                        value: item,
                        label: item + _this.t("el.pagination.pagesize")
                      }
                    });
                  })]
                )]
              );
            },
            components: {
              ElSelect: select_default.a,
              ElOption: option_default.a
            },
            methods: {
              handleChange: function handleChange(val) {
                if (val !== this.$parent.internalPageSize) {
                  this.$parent.internalPageSize = val = parseInt(val, 10);
                  this.$parent.userChangePageSize = true;
                  this.$parent.$emit("update:pageSize", val);
                  this.$parent.$emit("size-change", val);
                }
              }
            }
          },
          Jumper: {
            mixins: [locale_default.a],
            components: { ElInput: input_default.a },
            data: function data() {
              return {
                userInput: null
              };
            },
            watch: {
              "$parent.internalCurrentPage": function $parentInternalCurrentPage() {
                this.userInput = null;
              }
            },
            methods: {
              handleKeyup: function handleKeyup(_ref) {
                var keyCode2 = _ref.keyCode, target2 = _ref.target;
                if (keyCode2 === 13) {
                  this.handleChange(target2.value);
                }
              },
              handleInput: function handleInput(value) {
                this.userInput = value;
              },
              handleChange: function handleChange(value) {
                this.$parent.internalCurrentPage = this.$parent.getValidCurrentPage(value);
                this.$parent.emitChange();
                this.userInput = null;
              }
            },
            render: function render6(h2) {
              return h2(
                "span",
                { "class": "el-pagination__jump" },
                [this.t("el.pagination.goto"), h2("el-input", {
                  "class": "el-pagination__editor is-in-pagination",
                  attrs: {
                    min: 1,
                    max: this.$parent.internalPageCount,
                    value: this.userInput !== null ? this.userInput : this.$parent.internalCurrentPage,
                    type: "number",
                    disabled: this.$parent.disabled
                  },
                  nativeOn: {
                    "keyup": this.handleKeyup
                  },
                  on: {
                    "input": this.handleInput,
                    "change": this.handleChange
                  }
                }), this.t("el.pagination.pageClassifier")]
              );
            }
          },
          Total: {
            mixins: [locale_default.a],
            render: function render6(h2) {
              return typeof this.$parent.total === "number" ? h2(
                "span",
                { "class": "el-pagination__total" },
                [this.t("el.pagination.total", { total: this.$parent.total })]
              ) : "";
            }
          },
          Pager: pager
        },
        methods: {
          handleCurrentChange: function handleCurrentChange(val) {
            this.internalCurrentPage = this.getValidCurrentPage(val);
            this.userChangePageSize = true;
            this.emitChange();
          },
          prev: function prev() {
            if (this.disabled)
              return;
            var newVal = this.internalCurrentPage - 1;
            this.internalCurrentPage = this.getValidCurrentPage(newVal);
            this.$emit("prev-click", this.internalCurrentPage);
            this.emitChange();
          },
          next: function next() {
            if (this.disabled)
              return;
            var newVal = this.internalCurrentPage + 1;
            this.internalCurrentPage = this.getValidCurrentPage(newVal);
            this.$emit("next-click", this.internalCurrentPage);
            this.emitChange();
          },
          getValidCurrentPage: function getValidCurrentPage(value) {
            value = parseInt(value, 10);
            var havePageCount = typeof this.internalPageCount === "number";
            var resetValue = void 0;
            if (!havePageCount) {
              if (isNaN(value) || value < 1)
                resetValue = 1;
            } else {
              if (value < 1) {
                resetValue = 1;
              } else if (value > this.internalPageCount) {
                resetValue = this.internalPageCount;
              }
            }
            if (resetValue === void 0 && isNaN(value)) {
              resetValue = 1;
            } else if (resetValue === 0) {
              resetValue = 1;
            }
            return resetValue === void 0 ? value : resetValue;
          },
          emitChange: function emitChange() {
            var _this2 = this;
            this.$nextTick(function() {
              if (_this2.internalCurrentPage !== _this2.lastEmittedPage || _this2.userChangePageSize) {
                _this2.$emit("current-change", _this2.internalCurrentPage);
                _this2.lastEmittedPage = _this2.internalCurrentPage;
                _this2.userChangePageSize = false;
              }
            });
          }
        },
        computed: {
          internalPageCount: function internalPageCount() {
            if (typeof this.total === "number") {
              return Math.max(1, Math.ceil(this.total / this.internalPageSize));
            } else if (typeof this.pageCount === "number") {
              return Math.max(1, this.pageCount);
            }
            return null;
          }
        },
        watch: {
          currentPage: {
            immediate: true,
            handler: function handler(val) {
              this.internalCurrentPage = this.getValidCurrentPage(val);
            }
          },
          pageSize: {
            immediate: true,
            handler: function handler(val) {
              this.internalPageSize = isNaN(val) ? 10 : val;
            }
          },
          internalCurrentPage: {
            immediate: true,
            handler: function handler(newVal) {
              this.$emit("update:currentPage", newVal);
              this.lastEmittedPage = -1;
            }
          },
          internalPageCount: function internalPageCount(newVal) {
            var oldPage = this.internalCurrentPage;
            if (newVal > 0 && oldPage === 0) {
              this.internalCurrentPage = 1;
            } else if (oldPage > newVal) {
              this.internalCurrentPage = newVal === 0 ? 1 : newVal;
              this.userChangePageSize && this.emitChange();
            }
            this.userChangePageSize = false;
          }
        }
      };
      pagination.install = function(Vue2) {
        Vue2.component(pagination.name, pagination);
      };
      var packages_pagination = pagination;
      var componentvue_type_template_id_60140e62_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "transition",
          {
            attrs: { name: "dialog-fade" },
            on: { "after-enter": _vm.afterEnter, "after-leave": _vm.afterLeave }
          },
          [
            _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.visible,
                    expression: "visible"
                  }
                ],
                staticClass: "el-dialog__wrapper",
                on: {
                  click: function($event) {
                    if ($event.target !== $event.currentTarget) {
                      return null;
                    }
                    return _vm.handleWrapperClick($event);
                  }
                }
              },
              [
                _c(
                  "div",
                  {
                    key: _vm.key,
                    ref: "dialog",
                    class: [
                      "el-dialog",
                      {
                        "is-fullscreen": _vm.fullscreen,
                        "el-dialog--center": _vm.center
                      },
                      _vm.customClass
                    ],
                    style: _vm.style,
                    attrs: {
                      role: "dialog",
                      "aria-modal": "true",
                      "aria-label": _vm.title || "dialog"
                    }
                  },
                  [
                    _c(
                      "div",
                      { staticClass: "el-dialog__header" },
                      [
                        _vm._t("title", [
                          _c("span", { staticClass: "el-dialog__title" }, [
                            _vm._v(_vm._s(_vm.title))
                          ])
                        ]),
                        _vm.showClose ? _c(
                          "button",
                          {
                            staticClass: "el-dialog__headerbtn",
                            attrs: { type: "button", "aria-label": "Close" },
                            on: { click: _vm.handleClose }
                          },
                          [
                            _c("i", {
                              staticClass: "el-dialog__close el-icon el-icon-close"
                            })
                          ]
                        ) : _vm._e()
                      ],
                      2
                    ),
                    _vm.rendered ? _c(
                      "div",
                      { staticClass: "el-dialog__body" },
                      [_vm._t("default")],
                      2
                    ) : _vm._e(),
                    _vm.$slots.footer ? _c(
                      "div",
                      { staticClass: "el-dialog__footer" },
                      [_vm._t("footer")],
                      2
                    ) : _vm._e()
                  ]
                )
              ]
            )
          ]
        );
      };
      var componentvue_type_template_id_60140e62_staticRenderFns = [];
      componentvue_type_template_id_60140e62_render._withStripped = true;
      var popup_ = __webpack_require__(11);
      var popup_default = /* @__PURE__ */ __webpack_require__.n(popup_);
      var migrating_ = __webpack_require__(9);
      var migrating_default = /* @__PURE__ */ __webpack_require__.n(migrating_);
      var emitter_ = __webpack_require__(3);
      var emitter_default = /* @__PURE__ */ __webpack_require__.n(emitter_);
      var componentvue_type_script_lang_js_ = {
        name: "ElDialog",
        mixins: [popup_default.a, emitter_default.a, migrating_default.a],
        props: {
          title: {
            type: String,
            default: ""
          },
          modal: {
            type: Boolean,
            default: true
          },
          modalAppendToBody: {
            type: Boolean,
            default: true
          },
          appendToBody: {
            type: Boolean,
            default: false
          },
          lockScroll: {
            type: Boolean,
            default: true
          },
          closeOnClickModal: {
            type: Boolean,
            default: true
          },
          closeOnPressEscape: {
            type: Boolean,
            default: true
          },
          showClose: {
            type: Boolean,
            default: true
          },
          width: String,
          fullscreen: Boolean,
          customClass: {
            type: String,
            default: ""
          },
          top: {
            type: String,
            default: "15vh"
          },
          beforeClose: Function,
          center: {
            type: Boolean,
            default: false
          },
          destroyOnClose: Boolean
        },
        data: function data() {
          return {
            closed: false,
            key: 0
          };
        },
        watch: {
          visible: function visible(val) {
            var _this = this;
            if (val) {
              this.closed = false;
              this.$emit("open");
              this.$el.addEventListener("scroll", this.updatePopper);
              this.$nextTick(function() {
                _this.$refs.dialog.scrollTop = 0;
              });
              if (this.appendToBody) {
                document.body.appendChild(this.$el);
              }
            } else {
              this.$el.removeEventListener("scroll", this.updatePopper);
              if (!this.closed)
                this.$emit("close");
              if (this.destroyOnClose) {
                this.$nextTick(function() {
                  _this.key++;
                });
              }
            }
          }
        },
        computed: {
          style: function style2() {
            var style3 = {};
            if (!this.fullscreen) {
              style3.marginTop = this.top;
              if (this.width) {
                style3.width = this.width;
              }
            }
            return style3;
          }
        },
        methods: {
          getMigratingConfig: function getMigratingConfig() {
            return {
              props: {
                "size": "size is removed."
              }
            };
          },
          handleWrapperClick: function handleWrapperClick() {
            if (!this.closeOnClickModal)
              return;
            this.handleClose();
          },
          handleClose: function handleClose() {
            if (typeof this.beforeClose === "function") {
              this.beforeClose(this.hide);
            } else {
              this.hide();
            }
          },
          hide: function hide2(cancel) {
            if (cancel !== false) {
              this.$emit("update:visible", false);
              this.$emit("close");
              this.closed = true;
            }
          },
          updatePopper: function updatePopper() {
            this.broadcast("ElSelectDropdown", "updatePopper");
            this.broadcast("ElDropdownMenu", "updatePopper");
          },
          afterEnter: function afterEnter() {
            this.$emit("opened");
          },
          afterLeave: function afterLeave2() {
            this.$emit("closed");
          }
        },
        mounted: function mounted2() {
          if (this.visible) {
            this.rendered = true;
            this.open();
            if (this.appendToBody) {
              document.body.appendChild(this.$el);
            }
          }
        },
        destroyed: function destroyed() {
          if (this.appendToBody && this.$el && this.$el.parentNode) {
            this.$el.parentNode.removeChild(this.$el);
          }
        }
      };
      var src_componentvue_type_script_lang_js_ = componentvue_type_script_lang_js_;
      var component_component = normalizeComponent2(
        src_componentvue_type_script_lang_js_,
        componentvue_type_template_id_60140e62_render,
        componentvue_type_template_id_60140e62_staticRenderFns,
        false,
        null,
        null,
        null
      );
      component_component.options.__file = "packages/dialog/src/component.vue";
      var src_component = component_component.exports;
      src_component.install = function(Vue2) {
        Vue2.component(src_component.name, src_component);
      };
      var dialog = src_component;
      var autocompletevue_type_template_id_152f2ee6_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            directives: [
              {
                name: "clickoutside",
                rawName: "v-clickoutside",
                value: _vm.close,
                expression: "close"
              }
            ],
            staticClass: "el-autocomplete",
            attrs: {
              "aria-haspopup": "listbox",
              role: "combobox",
              "aria-expanded": _vm.suggestionVisible,
              "aria-owns": _vm.id
            }
          },
          [
            _c(
              "el-input",
              _vm._b(
                {
                  ref: "input",
                  on: {
                    input: _vm.handleInput,
                    change: _vm.handleChange,
                    focus: _vm.handleFocus,
                    blur: _vm.handleBlur,
                    clear: _vm.handleClear
                  },
                  nativeOn: {
                    keydown: [
                      function($event) {
                        if (!("button" in $event) && _vm._k($event.keyCode, "up", 38, $event.key, [
                          "Up",
                          "ArrowUp"
                        ])) {
                          return null;
                        }
                        $event.preventDefault();
                        _vm.highlight(_vm.highlightedIndex - 1);
                      },
                      function($event) {
                        if (!("button" in $event) && _vm._k($event.keyCode, "down", 40, $event.key, [
                          "Down",
                          "ArrowDown"
                        ])) {
                          return null;
                        }
                        $event.preventDefault();
                        _vm.highlight(_vm.highlightedIndex + 1);
                      },
                      function($event) {
                        if (!("button" in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                          return null;
                        }
                        return _vm.handleKeyEnter($event);
                      },
                      function($event) {
                        if (!("button" in $event) && _vm._k($event.keyCode, "tab", 9, $event.key, "Tab")) {
                          return null;
                        }
                        return _vm.close($event);
                      }
                    ]
                  }
                },
                "el-input",
                [_vm.$props, _vm.$attrs],
                false
              ),
              [
                _vm.$slots.prepend ? _c("template", { slot: "prepend" }, [_vm._t("prepend")], 2) : _vm._e(),
                _vm.$slots.append ? _c("template", { slot: "append" }, [_vm._t("append")], 2) : _vm._e(),
                _vm.$slots.prefix ? _c("template", { slot: "prefix" }, [_vm._t("prefix")], 2) : _vm._e(),
                _vm.$slots.suffix ? _c("template", { slot: "suffix" }, [_vm._t("suffix")], 2) : _vm._e()
              ],
              2
            ),
            _c(
              "el-autocomplete-suggestions",
              {
                ref: "suggestions",
                class: [_vm.popperClass ? _vm.popperClass : ""],
                attrs: {
                  "visible-arrow": "",
                  "popper-options": _vm.popperOptions,
                  "append-to-body": _vm.popperAppendToBody,
                  placement: _vm.placement,
                  id: _vm.id
                }
              },
              _vm._l(_vm.suggestions, function(item, index2) {
                return _c(
                  "li",
                  {
                    key: index2,
                    class: { highlighted: _vm.highlightedIndex === index2 },
                    attrs: {
                      id: _vm.id + "-item-" + index2,
                      role: "option",
                      "aria-selected": _vm.highlightedIndex === index2
                    },
                    on: {
                      click: function($event) {
                        _vm.select(item);
                      }
                    }
                  },
                  [
                    _vm._t(
                      "default",
                      [
                        _vm._v("\n        " + _vm._s(item[_vm.valueKey]) + "\n      ")
                      ],
                      { item }
                    )
                  ],
                  2
                );
              }),
              0
            )
          ],
          1
        );
      };
      var autocompletevue_type_template_id_152f2ee6_staticRenderFns = [];
      autocompletevue_type_template_id_152f2ee6_render._withStripped = true;
      var debounce_ = __webpack_require__(17);
      var debounce_default = /* @__PURE__ */ __webpack_require__.n(debounce_);
      var clickoutside_ = __webpack_require__(10);
      var clickoutside_default = /* @__PURE__ */ __webpack_require__.n(clickoutside_);
      var autocomplete_suggestionsvue_type_template_id_cd10dcf0_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "transition",
          { attrs: { name: "el-zoom-in-top" }, on: { "after-leave": _vm.doDestroy } },
          [
            _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.showPopper,
                    expression: "showPopper"
                  }
                ],
                staticClass: "el-autocomplete-suggestion el-popper",
                class: {
                  "is-loading": !_vm.parent.hideLoading && _vm.parent.loading
                },
                style: { width: _vm.dropdownWidth },
                attrs: { role: "region" }
              },
              [
                _c(
                  "el-scrollbar",
                  {
                    attrs: {
                      tag: "ul",
                      "wrap-class": "el-autocomplete-suggestion__wrap",
                      "view-class": "el-autocomplete-suggestion__list"
                    }
                  },
                  [
                    !_vm.parent.hideLoading && _vm.parent.loading ? _c("li", [_c("i", { staticClass: "el-icon-loading" })]) : _vm._t("default")
                  ],
                  2
                )
              ],
              1
            )
          ]
        );
      };
      var autocomplete_suggestionsvue_type_template_id_cd10dcf0_staticRenderFns = [];
      autocomplete_suggestionsvue_type_template_id_cd10dcf0_render._withStripped = true;
      var vue_popper_ = __webpack_require__(5);
      var vue_popper_default = /* @__PURE__ */ __webpack_require__.n(vue_popper_);
      var scrollbar_ = __webpack_require__(18);
      var scrollbar_default = /* @__PURE__ */ __webpack_require__.n(scrollbar_);
      var autocomplete_suggestionsvue_type_script_lang_js_ = {
        components: { ElScrollbar: scrollbar_default.a },
        mixins: [vue_popper_default.a, emitter_default.a],
        componentName: "ElAutocompleteSuggestions",
        data: function data() {
          return {
            parent: this.$parent,
            dropdownWidth: ""
          };
        },
        props: {
          options: {
            default: function _default2() {
              return {
                gpuAcceleration: false
              };
            }
          },
          id: String
        },
        methods: {
          select: function select2(item) {
            this.dispatch("ElAutocomplete", "item-click", item);
          }
        },
        updated: function updated() {
          var _this = this;
          this.$nextTick(function(_) {
            _this.popperJS && _this.updatePopper();
          });
        },
        mounted: function mounted2() {
          this.$parent.popperElm = this.popperElm = this.$el;
          this.referenceElm = this.$parent.$refs.input.$refs.input || this.$parent.$refs.input.$refs.textarea;
          this.referenceList = this.$el.querySelector(".el-autocomplete-suggestion__list");
          this.referenceList.setAttribute("role", "listbox");
          this.referenceList.setAttribute("id", this.id);
        },
        created: function created() {
          var _this2 = this;
          this.$on("visible", function(val, inputWidth) {
            _this2.dropdownWidth = inputWidth + "px";
            _this2.showPopper = val;
          });
        }
      };
      var src_autocomplete_suggestionsvue_type_script_lang_js_ = autocomplete_suggestionsvue_type_script_lang_js_;
      var autocomplete_suggestions_component = normalizeComponent2(
        src_autocomplete_suggestionsvue_type_script_lang_js_,
        autocomplete_suggestionsvue_type_template_id_cd10dcf0_render,
        autocomplete_suggestionsvue_type_template_id_cd10dcf0_staticRenderFns,
        false,
        null,
        null,
        null
      );
      autocomplete_suggestions_component.options.__file = "packages/autocomplete/src/autocomplete-suggestions.vue";
      var autocomplete_suggestions = autocomplete_suggestions_component.exports;
      var focus_ = __webpack_require__(23);
      var focus_default = /* @__PURE__ */ __webpack_require__.n(focus_);
      var autocompletevue_type_script_lang_js_ = {
        name: "ElAutocomplete",
        mixins: [emitter_default.a, focus_default()("input"), migrating_default.a],
        inheritAttrs: false,
        componentName: "ElAutocomplete",
        components: {
          ElInput: input_default.a,
          ElAutocompleteSuggestions: autocomplete_suggestions
        },
        directives: { Clickoutside: clickoutside_default.a },
        props: {
          valueKey: {
            type: String,
            default: "value"
          },
          popperClass: String,
          popperOptions: Object,
          placeholder: String,
          clearable: {
            type: Boolean,
            default: false
          },
          disabled: Boolean,
          name: String,
          size: String,
          value: String,
          maxlength: Number,
          minlength: Number,
          autofocus: Boolean,
          fetchSuggestions: Function,
          triggerOnFocus: {
            type: Boolean,
            default: true
          },
          customItem: String,
          selectWhenUnmatched: {
            type: Boolean,
            default: false
          },
          prefixIcon: String,
          suffixIcon: String,
          label: String,
          debounce: {
            type: Number,
            default: 300
          },
          placement: {
            type: String,
            default: "bottom-start"
          },
          hideLoading: Boolean,
          popperAppendToBody: {
            type: Boolean,
            default: true
          },
          highlightFirstItem: {
            type: Boolean,
            default: false
          }
        },
        data: function data() {
          return {
            activated: false,
            suggestions: [],
            loading: false,
            highlightedIndex: -1,
            suggestionDisabled: false
          };
        },
        computed: {
          suggestionVisible: function suggestionVisible() {
            var suggestions = this.suggestions;
            var isValidData = Array.isArray(suggestions) && suggestions.length > 0;
            return (isValidData || this.loading) && this.activated;
          },
          id: function id2() {
            return "el-autocomplete-" + Object(util_["generateId"])();
          }
        },
        watch: {
          suggestionVisible: function suggestionVisible(val) {
            var $input = this.getInput();
            if ($input) {
              this.broadcast("ElAutocompleteSuggestions", "visible", [val, $input.offsetWidth]);
            }
          }
        },
        methods: {
          getMigratingConfig: function getMigratingConfig() {
            return {
              props: {
                "custom-item": "custom-item is removed, use scoped slot instead.",
                "props": "props is removed, use value-key instead."
              }
            };
          },
          getData: function getData2(queryString) {
            var _this = this;
            if (this.suggestionDisabled) {
              return;
            }
            this.loading = true;
            this.fetchSuggestions(queryString, function(suggestions) {
              _this.loading = false;
              if (_this.suggestionDisabled) {
                return;
              }
              if (Array.isArray(suggestions)) {
                _this.suggestions = suggestions;
                _this.highlightedIndex = _this.highlightFirstItem ? 0 : -1;
              } else {
                console.error("[Element Error][Autocomplete]autocomplete suggestions must be an array");
              }
            });
          },
          handleInput: function handleInput(value) {
            this.$emit("input", value);
            this.suggestionDisabled = false;
            if (!this.triggerOnFocus && !value) {
              this.suggestionDisabled = true;
              this.suggestions = [];
              return;
            }
            this.debouncedGetData(value);
          },
          handleChange: function handleChange(value) {
            this.$emit("change", value);
          },
          handleFocus: function handleFocus(event) {
            this.activated = true;
            this.$emit("focus", event);
            if (this.triggerOnFocus) {
              this.debouncedGetData(this.value);
            }
          },
          handleBlur: function handleBlur(event) {
            this.$emit("blur", event);
          },
          handleClear: function handleClear() {
            this.activated = false;
            this.$emit("clear");
          },
          close: function close(e) {
            this.activated = false;
          },
          handleKeyEnter: function handleKeyEnter(e) {
            var _this2 = this;
            if (this.suggestionVisible && this.highlightedIndex >= 0 && this.highlightedIndex < this.suggestions.length) {
              e.preventDefault();
              this.select(this.suggestions[this.highlightedIndex]);
            } else if (this.selectWhenUnmatched) {
              this.$emit("select", { value: this.value });
              this.$nextTick(function(_) {
                _this2.suggestions = [];
                _this2.highlightedIndex = -1;
              });
            }
          },
          select: function select2(item) {
            var _this3 = this;
            this.$emit("input", item[this.valueKey]);
            this.$emit("select", item);
            this.$nextTick(function(_) {
              _this3.suggestions = [];
              _this3.highlightedIndex = -1;
            });
          },
          highlight: function highlight(index2) {
            if (!this.suggestionVisible || this.loading) {
              return;
            }
            if (index2 < 0) {
              this.highlightedIndex = -1;
              return;
            }
            if (index2 >= this.suggestions.length) {
              index2 = this.suggestions.length - 1;
            }
            var suggestion = this.$refs.suggestions.$el.querySelector(".el-autocomplete-suggestion__wrap");
            var suggestionList = suggestion.querySelectorAll(".el-autocomplete-suggestion__list li");
            var highlightItem = suggestionList[index2];
            var scrollTop = suggestion.scrollTop;
            var offsetTop = highlightItem.offsetTop;
            if (offsetTop + highlightItem.scrollHeight > scrollTop + suggestion.clientHeight) {
              suggestion.scrollTop += highlightItem.scrollHeight;
            }
            if (offsetTop < scrollTop) {
              suggestion.scrollTop -= highlightItem.scrollHeight;
            }
            this.highlightedIndex = index2;
            var $input = this.getInput();
            $input.setAttribute("aria-activedescendant", this.id + "-item-" + this.highlightedIndex);
          },
          getInput: function getInput() {
            return this.$refs.input.getInput();
          }
        },
        mounted: function mounted2() {
          var _this4 = this;
          this.debouncedGetData = debounce_default()(this.debounce, this.getData);
          this.$on("item-click", function(item) {
            _this4.select(item);
          });
          var $input = this.getInput();
          $input.setAttribute("role", "textbox");
          $input.setAttribute("aria-autocomplete", "list");
          $input.setAttribute("aria-controls", "id");
          $input.setAttribute("aria-activedescendant", this.id + "-item-" + this.highlightedIndex);
        },
        beforeDestroy: function beforeDestroy2() {
          this.$refs.suggestions.$destroy();
        }
      };
      var src_autocompletevue_type_script_lang_js_ = autocompletevue_type_script_lang_js_;
      var autocomplete_component = normalizeComponent2(
        src_autocompletevue_type_script_lang_js_,
        autocompletevue_type_template_id_152f2ee6_render,
        autocompletevue_type_template_id_152f2ee6_staticRenderFns,
        false,
        null,
        null,
        null
      );
      autocomplete_component.options.__file = "packages/autocomplete/src/autocomplete.vue";
      var autocomplete = autocomplete_component.exports;
      autocomplete.install = function(Vue2) {
        Vue2.component(autocomplete.name, autocomplete);
      };
      var packages_autocomplete = autocomplete;
      var button_ = __webpack_require__(13);
      var button_default = /* @__PURE__ */ __webpack_require__.n(button_);
      var button_group_ = __webpack_require__(29);
      var button_group_default = /* @__PURE__ */ __webpack_require__.n(button_group_);
      var dropdownvue_type_script_lang_js_ = {
        name: "ElDropdown",
        componentName: "ElDropdown",
        mixins: [emitter_default.a, migrating_default.a],
        directives: { Clickoutside: clickoutside_default.a },
        components: {
          ElButton: button_default.a,
          ElButtonGroup: button_group_default.a
        },
        provide: function provide2() {
          return {
            dropdown: this
          };
        },
        props: {
          trigger: {
            type: String,
            default: "hover"
          },
          type: String,
          size: {
            type: String,
            default: ""
          },
          splitButton: Boolean,
          hideOnClick: {
            type: Boolean,
            default: true
          },
          placement: {
            type: String,
            default: "bottom-end"
          },
          visibleArrow: {
            default: true
          },
          showTimeout: {
            type: Number,
            default: 250
          },
          hideTimeout: {
            type: Number,
            default: 150
          },
          tabindex: {
            type: Number,
            default: 0
          },
          disabled: {
            type: Boolean,
            default: false
          }
        },
        data: function data() {
          return {
            timeout: null,
            visible: false,
            triggerElm: null,
            menuItems: null,
            menuItemsArray: null,
            dropdownElm: null,
            focusing: false,
            listId: "dropdown-menu-" + Object(util_["generateId"])()
          };
        },
        computed: {
          dropdownSize: function dropdownSize() {
            return this.size || (this.$ELEMENT || {}).size;
          }
        },
        mounted: function mounted2() {
          this.$on("menu-item-click", this.handleMenuItemClick);
        },
        watch: {
          visible: function visible(val) {
            this.broadcast("ElDropdownMenu", "visible", val);
            this.$emit("visible-change", val);
          },
          focusing: function focusing(val) {
            var selfDefine = this.$el.querySelector(".el-dropdown-selfdefine");
            if (selfDefine) {
              if (val) {
                selfDefine.className += " focusing";
              } else {
                selfDefine.className = selfDefine.className.replace("focusing", "");
              }
            }
          }
        },
        methods: {
          getMigratingConfig: function getMigratingConfig() {
            return {
              props: {
                "menu-align": "menu-align is renamed to placement."
              }
            };
          },
          show: function show2() {
            var _this = this;
            if (this.disabled)
              return;
            clearTimeout(this.timeout);
            this.timeout = setTimeout(function() {
              _this.visible = true;
            }, this.trigger === "click" ? 0 : this.showTimeout);
          },
          hide: function hide2() {
            var _this2 = this;
            if (this.disabled)
              return;
            this.removeTabindex();
            if (this.tabindex >= 0) {
              this.resetTabindex(this.triggerElm);
            }
            clearTimeout(this.timeout);
            this.timeout = setTimeout(function() {
              _this2.visible = false;
            }, this.trigger === "click" ? 0 : this.hideTimeout);
          },
          handleClick: function handleClick() {
            if (this.disabled)
              return;
            if (this.visible) {
              this.hide();
            } else {
              this.show();
            }
          },
          handleTriggerKeyDown: function handleTriggerKeyDown(ev) {
            var keyCode2 = ev.keyCode;
            if ([38, 40].indexOf(keyCode2) > -1) {
              this.removeTabindex();
              this.resetTabindex(this.menuItems[0]);
              this.menuItems[0].focus();
              ev.preventDefault();
              ev.stopPropagation();
            } else if (keyCode2 === 13) {
              this.handleClick();
            } else if ([9, 27].indexOf(keyCode2) > -1) {
              this.hide();
            }
          },
          handleItemKeyDown: function handleItemKeyDown(ev) {
            var keyCode2 = ev.keyCode;
            var target2 = ev.target;
            var currentIndex = this.menuItemsArray.indexOf(target2);
            var max2 = this.menuItemsArray.length - 1;
            var nextIndex = void 0;
            if ([38, 40].indexOf(keyCode2) > -1) {
              if (keyCode2 === 38) {
                nextIndex = currentIndex !== 0 ? currentIndex - 1 : 0;
              } else {
                nextIndex = currentIndex < max2 ? currentIndex + 1 : max2;
              }
              this.removeTabindex();
              this.resetTabindex(this.menuItems[nextIndex]);
              this.menuItems[nextIndex].focus();
              ev.preventDefault();
              ev.stopPropagation();
            } else if (keyCode2 === 13) {
              this.triggerElmFocus();
              target2.click();
              if (this.hideOnClick) {
                this.visible = false;
              }
            } else if ([9, 27].indexOf(keyCode2) > -1) {
              this.hide();
              this.triggerElmFocus();
            }
          },
          resetTabindex: function resetTabindex(ele) {
            this.removeTabindex();
            ele.setAttribute("tabindex", "0");
          },
          removeTabindex: function removeTabindex() {
            this.triggerElm.setAttribute("tabindex", "-1");
            this.menuItemsArray.forEach(function(item) {
              item.setAttribute("tabindex", "-1");
            });
          },
          initAria: function initAria() {
            this.dropdownElm.setAttribute("id", this.listId);
            this.triggerElm.setAttribute("aria-haspopup", "list");
            this.triggerElm.setAttribute("aria-controls", this.listId);
            if (!this.splitButton) {
              this.triggerElm.setAttribute("role", "button");
              this.triggerElm.setAttribute("tabindex", this.tabindex);
              this.triggerElm.setAttribute("class", (this.triggerElm.getAttribute("class") || "") + " el-dropdown-selfdefine");
            }
          },
          initEvent: function initEvent() {
            var _this3 = this;
            var trigger2 = this.trigger, show2 = this.show, hide2 = this.hide, handleClick = this.handleClick, splitButton = this.splitButton, handleTriggerKeyDown = this.handleTriggerKeyDown, handleItemKeyDown = this.handleItemKeyDown;
            this.triggerElm = splitButton ? this.$refs.trigger.$el : this.$slots.default[0].elm;
            var dropdownElm = this.dropdownElm;
            this.triggerElm.addEventListener("keydown", handleTriggerKeyDown);
            dropdownElm.addEventListener("keydown", handleItemKeyDown, true);
            if (!splitButton) {
              this.triggerElm.addEventListener("focus", function() {
                _this3.focusing = true;
              });
              this.triggerElm.addEventListener("blur", function() {
                _this3.focusing = false;
              });
              this.triggerElm.addEventListener("click", function() {
                _this3.focusing = false;
              });
            }
            if (trigger2 === "hover") {
              this.triggerElm.addEventListener("mouseenter", show2);
              this.triggerElm.addEventListener("mouseleave", hide2);
              dropdownElm.addEventListener("mouseenter", show2);
              dropdownElm.addEventListener("mouseleave", hide2);
            } else if (trigger2 === "click") {
              this.triggerElm.addEventListener("click", handleClick);
            }
          },
          handleMenuItemClick: function handleMenuItemClick(command, instance) {
            if (this.hideOnClick) {
              this.visible = false;
            }
            this.$emit("command", command, instance);
          },
          triggerElmFocus: function triggerElmFocus() {
            this.triggerElm.focus && this.triggerElm.focus();
          },
          initDomOperation: function initDomOperation() {
            this.dropdownElm = this.popperElm;
            this.menuItems = this.dropdownElm.querySelectorAll("[tabindex='-1']");
            this.menuItemsArray = [].slice.call(this.menuItems);
            this.initEvent();
            this.initAria();
          }
        },
        render: function render6(h2) {
          var _this4 = this;
          var hide2 = this.hide, splitButton = this.splitButton, type2 = this.type, dropdownSize = this.dropdownSize, disabled = this.disabled;
          var handleMainButtonClick = function handleMainButtonClick2(event) {
            _this4.$emit("click", event);
            hide2();
          };
          var triggerElm = null;
          if (splitButton) {
            triggerElm = h2("el-button-group", [h2(
              "el-button",
              {
                attrs: { type: type2, size: dropdownSize, disabled },
                nativeOn: {
                  "click": handleMainButtonClick
                }
              },
              [this.$slots.default]
            ), h2(
              "el-button",
              {
                ref: "trigger",
                attrs: { type: type2, size: dropdownSize, disabled },
                "class": "el-dropdown__caret-button"
              },
              [h2("i", { "class": "el-dropdown__icon el-icon-arrow-down" })]
            )]);
          } else {
            triggerElm = this.$slots.default;
            var vnodeData = triggerElm[0].data || {};
            var _vnodeData$attrs = vnodeData.attrs, attrs2 = _vnodeData$attrs === void 0 ? {} : _vnodeData$attrs;
            if (disabled && !attrs2.disabled) {
              attrs2.disabled = true;
              vnodeData.attrs = attrs2;
            }
          }
          var menuElm = disabled ? null : this.$slots.dropdown;
          return h2(
            "div",
            {
              "class": "el-dropdown",
              directives: [{
                name: "clickoutside",
                value: hide2
              }],
              attrs: { "aria-disabled": disabled }
            },
            [triggerElm, menuElm]
          );
        }
      };
      var src_dropdownvue_type_script_lang_js_ = dropdownvue_type_script_lang_js_;
      var dropdown_render, dropdown_staticRenderFns;
      var dropdown_component = normalizeComponent2(
        src_dropdownvue_type_script_lang_js_,
        dropdown_render,
        dropdown_staticRenderFns,
        false,
        null,
        null,
        null
      );
      dropdown_component.options.__file = "packages/dropdown/src/dropdown.vue";
      var dropdown = dropdown_component.exports;
      dropdown.install = function(Vue2) {
        Vue2.component(dropdown.name, dropdown);
      };
      var packages_dropdown = dropdown;
      var dropdown_menuvue_type_template_id_0da6b714_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "transition",
          { attrs: { name: "el-zoom-in-top" }, on: { "after-leave": _vm.doDestroy } },
          [
            _c(
              "ul",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.showPopper,
                    expression: "showPopper"
                  }
                ],
                staticClass: "el-dropdown-menu el-popper",
                class: [_vm.size && "el-dropdown-menu--" + _vm.size]
              },
              [_vm._t("default")],
              2
            )
          ]
        );
      };
      var dropdown_menuvue_type_template_id_0da6b714_staticRenderFns = [];
      dropdown_menuvue_type_template_id_0da6b714_render._withStripped = true;
      var dropdown_menuvue_type_script_lang_js_ = {
        name: "ElDropdownMenu",
        componentName: "ElDropdownMenu",
        mixins: [vue_popper_default.a],
        props: {
          visibleArrow: {
            type: Boolean,
            default: true
          },
          arrowOffset: {
            type: Number,
            default: 0
          }
        },
        data: function data() {
          return {
            size: this.dropdown.dropdownSize
          };
        },
        inject: ["dropdown"],
        created: function created() {
          var _this = this;
          this.$on("updatePopper", function() {
            if (_this.showPopper)
              _this.updatePopper();
          });
          this.$on("visible", function(val) {
            _this.showPopper = val;
          });
        },
        mounted: function mounted2() {
          this.dropdown.popperElm = this.popperElm = this.$el;
          this.referenceElm = this.dropdown.$el;
          this.dropdown.initDomOperation();
        },
        watch: {
          "dropdown.placement": {
            immediate: true,
            handler: function handler(val) {
              this.currentPlacement = val;
            }
          }
        }
      };
      var src_dropdown_menuvue_type_script_lang_js_ = dropdown_menuvue_type_script_lang_js_;
      var dropdown_menu_component = normalizeComponent2(
        src_dropdown_menuvue_type_script_lang_js_,
        dropdown_menuvue_type_template_id_0da6b714_render,
        dropdown_menuvue_type_template_id_0da6b714_staticRenderFns,
        false,
        null,
        null,
        null
      );
      dropdown_menu_component.options.__file = "packages/dropdown/src/dropdown-menu.vue";
      var dropdown_menu = dropdown_menu_component.exports;
      dropdown_menu.install = function(Vue2) {
        Vue2.component(dropdown_menu.name, dropdown_menu);
      };
      var packages_dropdown_menu = dropdown_menu;
      var dropdown_itemvue_type_template_id_6359102a_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "li",
          {
            staticClass: "el-dropdown-menu__item",
            class: {
              "is-disabled": _vm.disabled,
              "el-dropdown-menu__item--divided": _vm.divided
            },
            attrs: {
              "aria-disabled": _vm.disabled,
              tabindex: _vm.disabled ? null : -1
            },
            on: { click: _vm.handleClick }
          },
          [_vm.icon ? _c("i", { class: _vm.icon }) : _vm._e(), _vm._t("default")],
          2
        );
      };
      var dropdown_itemvue_type_template_id_6359102a_staticRenderFns = [];
      dropdown_itemvue_type_template_id_6359102a_render._withStripped = true;
      var dropdown_itemvue_type_script_lang_js_ = {
        name: "ElDropdownItem",
        mixins: [emitter_default.a],
        props: {
          command: {},
          disabled: Boolean,
          divided: Boolean,
          icon: String
        },
        methods: {
          handleClick: function handleClick(e) {
            this.dispatch("ElDropdown", "menu-item-click", [this.command, this]);
          }
        }
      };
      var src_dropdown_itemvue_type_script_lang_js_ = dropdown_itemvue_type_script_lang_js_;
      var dropdown_item_component = normalizeComponent2(
        src_dropdown_itemvue_type_script_lang_js_,
        dropdown_itemvue_type_template_id_6359102a_render,
        dropdown_itemvue_type_template_id_6359102a_staticRenderFns,
        false,
        null,
        null,
        null
      );
      dropdown_item_component.options.__file = "packages/dropdown/src/dropdown-item.vue";
      var dropdown_item = dropdown_item_component.exports;
      dropdown_item.install = function(Vue2) {
        Vue2.component(dropdown_item.name, dropdown_item);
      };
      var packages_dropdown_item = dropdown_item;
      var aria = aria || {};
      aria.Utils = aria.Utils || {};
      aria.Utils.focusFirstDescendant = function(element) {
        for (var i = 0; i < element.childNodes.length; i++) {
          var child = element.childNodes[i];
          if (aria.Utils.attemptFocus(child) || aria.Utils.focusFirstDescendant(child)) {
            return true;
          }
        }
        return false;
      };
      aria.Utils.focusLastDescendant = function(element) {
        for (var i = element.childNodes.length - 1; i >= 0; i--) {
          var child = element.childNodes[i];
          if (aria.Utils.attemptFocus(child) || aria.Utils.focusLastDescendant(child)) {
            return true;
          }
        }
        return false;
      };
      aria.Utils.attemptFocus = function(element) {
        if (!aria.Utils.isFocusable(element)) {
          return false;
        }
        aria.Utils.IgnoreUtilFocusChanges = true;
        try {
          element.focus();
        } catch (e) {
        }
        aria.Utils.IgnoreUtilFocusChanges = false;
        return document.activeElement === element;
      };
      aria.Utils.isFocusable = function(element) {
        if (element.tabIndex > 0 || element.tabIndex === 0 && element.getAttribute("tabIndex") !== null) {
          return true;
        }
        if (element.disabled) {
          return false;
        }
        switch (element.nodeName) {
          case "A":
            return !!element.href && element.rel !== "ignore";
          case "INPUT":
            return element.type !== "hidden" && element.type !== "file";
          case "BUTTON":
          case "SELECT":
          case "TEXTAREA":
            return true;
          default:
            return false;
        }
      };
      aria.Utils.triggerEvent = function(elm, name) {
        var eventName = void 0;
        if (/^mouse|click/.test(name)) {
          eventName = "MouseEvents";
        } else if (/^key/.test(name)) {
          eventName = "KeyboardEvent";
        } else {
          eventName = "HTMLEvents";
        }
        var evt = document.createEvent(eventName);
        for (var _len = arguments.length, opts = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          opts[_key - 2] = arguments[_key];
        }
        evt.initEvent.apply(evt, [name].concat(opts));
        elm.dispatchEvent ? elm.dispatchEvent(evt) : elm.fireEvent("on" + name, evt);
        return elm;
      };
      aria.Utils.keys = {
        tab: 9,
        enter: 13,
        space: 32,
        left: 37,
        up: 38,
        right: 39,
        down: 40,
        esc: 27
      };
      var aria_utils = aria.Utils;
      var SubMenu = function SubMenu2(parent, domNode) {
        this.domNode = domNode;
        this.parent = parent;
        this.subMenuItems = [];
        this.subIndex = 0;
        this.init();
      };
      SubMenu.prototype.init = function() {
        this.subMenuItems = this.domNode.querySelectorAll("li");
        this.addListeners();
      };
      SubMenu.prototype.gotoSubIndex = function(idx) {
        if (idx === this.subMenuItems.length) {
          idx = 0;
        } else if (idx < 0) {
          idx = this.subMenuItems.length - 1;
        }
        this.subMenuItems[idx].focus();
        this.subIndex = idx;
      };
      SubMenu.prototype.addListeners = function() {
        var _this = this;
        var keys2 = aria_utils.keys;
        var parentNode2 = this.parent.domNode;
        Array.prototype.forEach.call(this.subMenuItems, function(el) {
          el.addEventListener("keydown", function(event) {
            var prevDef = false;
            switch (event.keyCode) {
              case keys2.down:
                _this.gotoSubIndex(_this.subIndex + 1);
                prevDef = true;
                break;
              case keys2.up:
                _this.gotoSubIndex(_this.subIndex - 1);
                prevDef = true;
                break;
              case keys2.tab:
                aria_utils.triggerEvent(parentNode2, "mouseleave");
                break;
              case keys2.enter:
              case keys2.space:
                prevDef = true;
                event.currentTarget.click();
                break;
            }
            if (prevDef) {
              event.preventDefault();
              event.stopPropagation();
            }
            return false;
          });
        });
      };
      var aria_submenu = SubMenu;
      var MenuItem = function MenuItem2(domNode) {
        this.domNode = domNode;
        this.submenu = null;
        this.init();
      };
      MenuItem.prototype.init = function() {
        this.domNode.setAttribute("tabindex", "0");
        var menuChild = this.domNode.querySelector(".el-menu");
        if (menuChild) {
          this.submenu = new aria_submenu(this, menuChild);
        }
        this.addListeners();
      };
      MenuItem.prototype.addListeners = function() {
        var _this = this;
        var keys2 = aria_utils.keys;
        this.domNode.addEventListener("keydown", function(event) {
          var prevDef = false;
          switch (event.keyCode) {
            case keys2.down:
              aria_utils.triggerEvent(event.currentTarget, "mouseenter");
              _this.submenu && _this.submenu.gotoSubIndex(0);
              prevDef = true;
              break;
            case keys2.up:
              aria_utils.triggerEvent(event.currentTarget, "mouseenter");
              _this.submenu && _this.submenu.gotoSubIndex(_this.submenu.subMenuItems.length - 1);
              prevDef = true;
              break;
            case keys2.tab:
              aria_utils.triggerEvent(event.currentTarget, "mouseleave");
              break;
            case keys2.enter:
            case keys2.space:
              prevDef = true;
              event.currentTarget.click();
              break;
          }
          if (prevDef) {
            event.preventDefault();
          }
        });
      };
      var aria_menuitem = MenuItem;
      var Menu = function Menu2(domNode) {
        this.domNode = domNode;
        this.init();
      };
      Menu.prototype.init = function() {
        var menuChildren = this.domNode.childNodes;
        [].filter.call(menuChildren, function(child) {
          return child.nodeType === 1;
        }).forEach(function(child) {
          new aria_menuitem(child);
        });
      };
      var aria_menubar = Menu;
      var dom_ = __webpack_require__(1);
      var menuvue_type_script_lang_js_ = {
        name: "ElMenu",
        render: function render6(h2) {
          var component2 = h2(
            "ul",
            {
              attrs: {
                role: "menubar"
              },
              key: +this.collapse,
              style: { backgroundColor: this.backgroundColor || "" },
              "class": {
                "el-menu--horizontal": this.mode === "horizontal",
                "el-menu--collapse": this.collapse,
                "el-menu": true
              }
            },
            [this.$slots.default]
          );
          if (this.collapseTransition) {
            return h2("el-menu-collapse-transition", [component2]);
          } else {
            return component2;
          }
        },
        componentName: "ElMenu",
        mixins: [emitter_default.a, migrating_default.a],
        provide: function provide2() {
          return {
            rootMenu: this
          };
        },
        components: {
          "el-menu-collapse-transition": {
            functional: true,
            render: function render6(createElement2, context) {
              var data = {
                props: {
                  mode: "out-in"
                },
                on: {
                  beforeEnter: function beforeEnter(el) {
                    el.style.opacity = 0.2;
                  },
                  enter: function enter2(el) {
                    Object(dom_["addClass"])(el, "el-opacity-transition");
                    el.style.opacity = 1;
                  },
                  afterEnter: function afterEnter(el) {
                    Object(dom_["removeClass"])(el, "el-opacity-transition");
                    el.style.opacity = "";
                  },
                  beforeLeave: function beforeLeave(el) {
                    if (!el.dataset)
                      el.dataset = {};
                    if (Object(dom_["hasClass"])(el, "el-menu--collapse")) {
                      Object(dom_["removeClass"])(el, "el-menu--collapse");
                      el.dataset.oldOverflow = el.style.overflow;
                      el.dataset.scrollWidth = el.clientWidth;
                      Object(dom_["addClass"])(el, "el-menu--collapse");
                    } else {
                      Object(dom_["addClass"])(el, "el-menu--collapse");
                      el.dataset.oldOverflow = el.style.overflow;
                      el.dataset.scrollWidth = el.clientWidth;
                      Object(dom_["removeClass"])(el, "el-menu--collapse");
                    }
                    el.style.width = el.scrollWidth + "px";
                    el.style.overflow = "hidden";
                  },
                  leave: function leave2(el) {
                    Object(dom_["addClass"])(el, "horizontal-collapse-transition");
                    el.style.width = el.dataset.scrollWidth + "px";
                  }
                }
              };
              return createElement2("transition", data, context.children);
            }
          }
        },
        props: {
          mode: {
            type: String,
            default: "vertical"
          },
          defaultActive: {
            type: String,
            default: ""
          },
          defaultOpeneds: Array,
          uniqueOpened: Boolean,
          router: Boolean,
          menuTrigger: {
            type: String,
            default: "hover"
          },
          collapse: Boolean,
          backgroundColor: String,
          textColor: String,
          activeTextColor: String,
          collapseTransition: {
            type: Boolean,
            default: true
          }
        },
        data: function data() {
          return {
            activeIndex: this.defaultActive,
            openedMenus: this.defaultOpeneds && !this.collapse ? this.defaultOpeneds.slice(0) : [],
            items: {},
            submenus: {}
          };
        },
        computed: {
          hoverBackground: function hoverBackground() {
            return this.backgroundColor ? this.mixColor(this.backgroundColor, 0.2) : "";
          },
          isMenuPopup: function isMenuPopup() {
            return this.mode === "horizontal" || this.mode === "vertical" && this.collapse;
          }
        },
        watch: {
          defaultActive: function defaultActive(value) {
            if (!this.items[value]) {
              this.activeIndex = null;
            }
            this.updateActiveIndex(value);
          },
          defaultOpeneds: function defaultOpeneds(value) {
            if (!this.collapse) {
              this.openedMenus = value;
            }
          },
          collapse: function collapse2(value) {
            if (value)
              this.openedMenus = [];
            this.broadcast("ElSubmenu", "toggle-collapse", value);
          }
        },
        methods: {
          updateActiveIndex: function updateActiveIndex(val) {
            var item = this.items[val] || this.items[this.activeIndex] || this.items[this.defaultActive];
            if (item) {
              this.activeIndex = item.index;
              this.initOpenedMenu();
            } else {
              this.activeIndex = null;
            }
          },
          getMigratingConfig: function getMigratingConfig() {
            return {
              props: {
                "theme": "theme is removed."
              }
            };
          },
          getColorChannels: function getColorChannels(color) {
            color = color.replace("#", "");
            if (/^[0-9a-fA-F]{3}$/.test(color)) {
              color = color.split("");
              for (var i = 2; i >= 0; i--) {
                color.splice(i, 0, color[i]);
              }
              color = color.join("");
            }
            if (/^[0-9a-fA-F]{6}$/.test(color)) {
              return {
                red: parseInt(color.slice(0, 2), 16),
                green: parseInt(color.slice(2, 4), 16),
                blue: parseInt(color.slice(4, 6), 16)
              };
            } else {
              return {
                red: 255,
                green: 255,
                blue: 255
              };
            }
          },
          mixColor: function mixColor(color, percent) {
            var _getColorChannels = this.getColorChannels(color), red = _getColorChannels.red, green = _getColorChannels.green, blue = _getColorChannels.blue;
            if (percent > 0) {
              red *= 1 - percent;
              green *= 1 - percent;
              blue *= 1 - percent;
            } else {
              red += (255 - red) * percent;
              green += (255 - green) * percent;
              blue += (255 - blue) * percent;
            }
            return "rgb(" + Math.round(red) + ", " + Math.round(green) + ", " + Math.round(blue) + ")";
          },
          addItem: function addItem(item) {
            this.$set(this.items, item.index, item);
          },
          removeItem: function removeItem(item) {
            delete this.items[item.index];
          },
          addSubmenu: function addSubmenu(item) {
            this.$set(this.submenus, item.index, item);
          },
          removeSubmenu: function removeSubmenu(item) {
            delete this.submenus[item.index];
          },
          openMenu: function openMenu(index2, indexPath) {
            var openedMenus = this.openedMenus;
            if (openedMenus.indexOf(index2) !== -1)
              return;
            if (this.uniqueOpened) {
              this.openedMenus = openedMenus.filter(function(index3) {
                return indexPath.indexOf(index3) !== -1;
              });
            }
            this.openedMenus.push(index2);
          },
          closeMenu: function closeMenu(index2) {
            var i = this.openedMenus.indexOf(index2);
            if (i !== -1) {
              this.openedMenus.splice(i, 1);
            }
          },
          handleSubmenuClick: function handleSubmenuClick(submenu2) {
            var index2 = submenu2.index, indexPath = submenu2.indexPath;
            var isOpened = this.openedMenus.indexOf(index2) !== -1;
            if (isOpened) {
              this.closeMenu(index2);
              this.$emit("close", index2, indexPath);
            } else {
              this.openMenu(index2, indexPath);
              this.$emit("open", index2, indexPath);
            }
          },
          handleItemClick: function handleItemClick(item) {
            var _this = this;
            var index2 = item.index, indexPath = item.indexPath;
            var oldActiveIndex = this.activeIndex;
            var hasIndex = item.index !== null;
            if (hasIndex) {
              this.activeIndex = item.index;
            }
            this.$emit("select", index2, indexPath, item);
            if (this.mode === "horizontal" || this.collapse) {
              this.openedMenus = [];
            }
            if (this.router && hasIndex) {
              this.routeToItem(item, function(error) {
                _this.activeIndex = oldActiveIndex;
                if (error) {
                  if (error.name === "NavigationDuplicated")
                    return;
                  console.error(error);
                }
              });
            }
          },
          // 初始化展开菜单
          // initialize opened menu
          initOpenedMenu: function initOpenedMenu() {
            var _this2 = this;
            var index2 = this.activeIndex;
            var activeItem = this.items[index2];
            if (!activeItem || this.mode === "horizontal" || this.collapse)
              return;
            var indexPath = activeItem.indexPath;
            indexPath.forEach(function(index3) {
              var submenu2 = _this2.submenus[index3];
              submenu2 && _this2.openMenu(index3, submenu2.indexPath);
            });
          },
          routeToItem: function routeToItem(item, onError) {
            var route = item.route || item.index;
            try {
              this.$router.push(route, function() {
              }, onError);
            } catch (e) {
              console.error(e);
            }
          },
          open: function open(index2) {
            var _this3 = this;
            var indexPath = this.submenus[index2.toString()].indexPath;
            indexPath.forEach(function(i) {
              return _this3.openMenu(i, indexPath);
            });
          },
          close: function close(index2) {
            this.closeMenu(index2);
          }
        },
        mounted: function mounted2() {
          this.initOpenedMenu();
          this.$on("item-click", this.handleItemClick);
          this.$on("submenu-click", this.handleSubmenuClick);
          if (this.mode === "horizontal") {
            new aria_menubar(this.$el);
          }
          this.$watch("items", this.updateActiveIndex);
        }
      };
      var src_menuvue_type_script_lang_js_ = menuvue_type_script_lang_js_;
      var menu_render, menu_staticRenderFns;
      var menu_component = normalizeComponent2(
        src_menuvue_type_script_lang_js_,
        menu_render,
        menu_staticRenderFns,
        false,
        null,
        null,
        null
      );
      menu_component.options.__file = "packages/menu/src/menu.vue";
      var src_menu = menu_component.exports;
      src_menu.install = function(Vue2) {
        Vue2.component(src_menu.name, src_menu);
      };
      var packages_menu = src_menu;
      var collapse_transition_ = __webpack_require__(21);
      var collapse_transition_default = /* @__PURE__ */ __webpack_require__.n(collapse_transition_);
      var menu_mixin = {
        inject: ["rootMenu"],
        computed: {
          indexPath: function indexPath() {
            var path = [this.index];
            var parent = this.$parent;
            while (parent.$options.componentName !== "ElMenu") {
              if (parent.index) {
                path.unshift(parent.index);
              }
              parent = parent.$parent;
            }
            return path;
          },
          parentMenu: function parentMenu() {
            var parent = this.$parent;
            while (parent && ["ElMenu", "ElSubmenu"].indexOf(parent.$options.componentName) === -1) {
              parent = parent.$parent;
            }
            return parent;
          },
          paddingStyle: function paddingStyle() {
            if (this.rootMenu.mode !== "vertical")
              return {};
            var padding = 20;
            var parent = this.$parent;
            if (this.rootMenu.collapse) {
              padding = 20;
            } else {
              while (parent && parent.$options.componentName !== "ElMenu") {
                if (parent.$options.componentName === "ElSubmenu") {
                  padding += 20;
                }
                parent = parent.$parent;
              }
            }
            return { paddingLeft: padding + "px" };
          }
        }
      };
      var poperMixins = {
        props: {
          transformOrigin: {
            type: [Boolean, String],
            default: false
          },
          offset: vue_popper_default.a.props.offset,
          boundariesPadding: vue_popper_default.a.props.boundariesPadding,
          popperOptions: vue_popper_default.a.props.popperOptions
        },
        data: vue_popper_default.a.data,
        methods: vue_popper_default.a.methods,
        beforeDestroy: vue_popper_default.a.beforeDestroy,
        deactivated: vue_popper_default.a.deactivated
      };
      var submenuvue_type_script_lang_js_ = {
        name: "ElSubmenu",
        componentName: "ElSubmenu",
        mixins: [menu_mixin, emitter_default.a, poperMixins],
        components: { ElCollapseTransition: collapse_transition_default.a },
        props: {
          index: {
            type: String,
            required: true
          },
          showTimeout: {
            type: Number,
            default: 300
          },
          hideTimeout: {
            type: Number,
            default: 300
          },
          popperClass: String,
          disabled: Boolean,
          popperAppendToBody: {
            type: Boolean,
            default: void 0
          }
        },
        data: function data() {
          return {
            popperJS: null,
            timeout: null,
            items: {},
            submenus: {},
            mouseInChild: false
          };
        },
        watch: {
          opened: function opened(val) {
            var _this = this;
            if (this.isMenuPopup) {
              this.$nextTick(function(_) {
                _this.updatePopper();
              });
            }
          }
        },
        computed: {
          // popper option
          appendToBody: function appendToBody() {
            return this.popperAppendToBody === void 0 ? this.isFirstLevel : this.popperAppendToBody;
          },
          menuTransitionName: function menuTransitionName() {
            return this.rootMenu.collapse ? "el-zoom-in-left" : "el-zoom-in-top";
          },
          opened: function opened() {
            return this.rootMenu.openedMenus.indexOf(this.index) > -1;
          },
          active: function active() {
            var isActive = false;
            var submenus = this.submenus;
            var items = this.items;
            Object.keys(items).forEach(function(index2) {
              if (items[index2].active) {
                isActive = true;
              }
            });
            Object.keys(submenus).forEach(function(index2) {
              if (submenus[index2].active) {
                isActive = true;
              }
            });
            return isActive;
          },
          hoverBackground: function hoverBackground() {
            return this.rootMenu.hoverBackground;
          },
          backgroundColor: function backgroundColor() {
            return this.rootMenu.backgroundColor || "";
          },
          activeTextColor: function activeTextColor() {
            return this.rootMenu.activeTextColor || "";
          },
          textColor: function textColor() {
            return this.rootMenu.textColor || "";
          },
          mode: function mode() {
            return this.rootMenu.mode;
          },
          isMenuPopup: function isMenuPopup() {
            return this.rootMenu.isMenuPopup;
          },
          titleStyle: function titleStyle() {
            if (this.mode !== "horizontal") {
              return {
                color: this.textColor
              };
            }
            return {
              borderBottomColor: this.active ? this.rootMenu.activeTextColor ? this.activeTextColor : "" : "transparent",
              color: this.active ? this.activeTextColor : this.textColor
            };
          },
          isFirstLevel: function isFirstLevel() {
            var isFirstLevel2 = true;
            var parent = this.$parent;
            while (parent && parent !== this.rootMenu) {
              if (["ElSubmenu", "ElMenuItemGroup"].indexOf(parent.$options.componentName) > -1) {
                isFirstLevel2 = false;
                break;
              } else {
                parent = parent.$parent;
              }
            }
            return isFirstLevel2;
          }
        },
        methods: {
          handleCollapseToggle: function handleCollapseToggle(value) {
            if (value) {
              this.initPopper();
            } else {
              this.doDestroy();
            }
          },
          addItem: function addItem(item) {
            this.$set(this.items, item.index, item);
          },
          removeItem: function removeItem(item) {
            delete this.items[item.index];
          },
          addSubmenu: function addSubmenu(item) {
            this.$set(this.submenus, item.index, item);
          },
          removeSubmenu: function removeSubmenu(item) {
            delete this.submenus[item.index];
          },
          handleClick: function handleClick() {
            var rootMenu = this.rootMenu, disabled = this.disabled;
            if (rootMenu.menuTrigger === "hover" && rootMenu.mode === "horizontal" || rootMenu.collapse && rootMenu.mode === "vertical" || disabled) {
              return;
            }
            this.dispatch("ElMenu", "submenu-click", this);
          },
          handleMouseenter: function handleMouseenter(event) {
            var _this2 = this;
            var showTimeout = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.showTimeout;
            if (!("ActiveXObject" in window) && event.type === "focus" && !event.relatedTarget) {
              return;
            }
            var rootMenu = this.rootMenu, disabled = this.disabled;
            if (rootMenu.menuTrigger === "click" && rootMenu.mode === "horizontal" || !rootMenu.collapse && rootMenu.mode === "vertical" || disabled) {
              return;
            }
            this.dispatch("ElSubmenu", "mouse-enter-child");
            clearTimeout(this.timeout);
            this.timeout = setTimeout(function() {
              _this2.rootMenu.openMenu(_this2.index, _this2.indexPath);
            }, showTimeout);
            if (this.appendToBody) {
              this.$parent.$el.dispatchEvent(new MouseEvent("mouseenter"));
            }
          },
          handleMouseleave: function handleMouseleave() {
            var _this3 = this;
            var deepDispatch = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
            var rootMenu = this.rootMenu;
            if (rootMenu.menuTrigger === "click" && rootMenu.mode === "horizontal" || !rootMenu.collapse && rootMenu.mode === "vertical") {
              return;
            }
            this.dispatch("ElSubmenu", "mouse-leave-child");
            clearTimeout(this.timeout);
            this.timeout = setTimeout(function() {
              !_this3.mouseInChild && _this3.rootMenu.closeMenu(_this3.index);
            }, this.hideTimeout);
            if (this.appendToBody && deepDispatch) {
              if (this.$parent.$options.name === "ElSubmenu") {
                this.$parent.handleMouseleave(true);
              }
            }
          },
          handleTitleMouseenter: function handleTitleMouseenter() {
            if (this.mode === "horizontal" && !this.rootMenu.backgroundColor)
              return;
            var title = this.$refs["submenu-title"];
            title && (title.style.backgroundColor = this.rootMenu.hoverBackground);
          },
          handleTitleMouseleave: function handleTitleMouseleave() {
            if (this.mode === "horizontal" && !this.rootMenu.backgroundColor)
              return;
            var title = this.$refs["submenu-title"];
            title && (title.style.backgroundColor = this.rootMenu.backgroundColor || "");
          },
          updatePlacement: function updatePlacement() {
            this.currentPlacement = this.mode === "horizontal" && this.isFirstLevel ? "bottom-start" : "right-start";
          },
          initPopper: function initPopper() {
            this.referenceElm = this.$el;
            this.popperElm = this.$refs.menu;
            this.updatePlacement();
          }
        },
        created: function created() {
          var _this4 = this;
          this.$on("toggle-collapse", this.handleCollapseToggle);
          this.$on("mouse-enter-child", function() {
            _this4.mouseInChild = true;
            clearTimeout(_this4.timeout);
          });
          this.$on("mouse-leave-child", function() {
            _this4.mouseInChild = false;
            clearTimeout(_this4.timeout);
          });
        },
        mounted: function mounted2() {
          this.parentMenu.addSubmenu(this);
          this.rootMenu.addSubmenu(this);
          this.initPopper();
        },
        beforeDestroy: function beforeDestroy2() {
          this.parentMenu.removeSubmenu(this);
          this.rootMenu.removeSubmenu(this);
        },
        render: function render6(h2) {
          var _this5 = this;
          var active = this.active, opened = this.opened, paddingStyle = this.paddingStyle, titleStyle = this.titleStyle, backgroundColor = this.backgroundColor, rootMenu = this.rootMenu, currentPlacement = this.currentPlacement, menuTransitionName = this.menuTransitionName, mode = this.mode, disabled = this.disabled, popperClass = this.popperClass, $slots = this.$slots, isFirstLevel = this.isFirstLevel;
          var popupMenu = h2(
            "transition",
            {
              attrs: { name: menuTransitionName }
            },
            [h2(
              "div",
              {
                ref: "menu",
                directives: [{
                  name: "show",
                  value: opened
                }],
                "class": ["el-menu--" + mode, popperClass],
                on: {
                  "mouseenter": function mouseenter($event) {
                    return _this5.handleMouseenter($event, 100);
                  },
                  "mouseleave": function mouseleave() {
                    return _this5.handleMouseleave(true);
                  },
                  "focus": function focus2($event) {
                    return _this5.handleMouseenter($event, 100);
                  }
                }
              },
              [h2(
                "ul",
                {
                  attrs: {
                    role: "menu"
                  },
                  "class": ["el-menu el-menu--popup", "el-menu--popup-" + currentPlacement],
                  style: { backgroundColor: rootMenu.backgroundColor || "" }
                },
                [$slots.default]
              )]
            )]
          );
          var inlineMenu = h2("el-collapse-transition", [h2(
            "ul",
            {
              attrs: {
                role: "menu"
              },
              "class": "el-menu el-menu--inline",
              directives: [{
                name: "show",
                value: opened
              }],
              style: { backgroundColor: rootMenu.backgroundColor || "" }
            },
            [$slots.default]
          )]);
          var submenuTitleIcon = rootMenu.mode === "horizontal" && isFirstLevel || rootMenu.mode === "vertical" && !rootMenu.collapse ? "el-icon-arrow-down" : "el-icon-arrow-right";
          return h2(
            "li",
            {
              "class": {
                "el-submenu": true,
                "is-active": active,
                "is-opened": opened,
                "is-disabled": disabled
              },
              attrs: {
                role: "menuitem",
                "aria-haspopup": "true",
                "aria-expanded": opened
              },
              on: {
                "mouseenter": this.handleMouseenter,
                "mouseleave": function mouseleave() {
                  return _this5.handleMouseleave(false);
                },
                "focus": this.handleMouseenter
              }
            },
            [h2(
              "div",
              {
                "class": "el-submenu__title",
                ref: "submenu-title",
                on: {
                  "click": this.handleClick,
                  "mouseenter": this.handleTitleMouseenter,
                  "mouseleave": this.handleTitleMouseleave
                },
                style: [paddingStyle, titleStyle, { backgroundColor }]
              },
              [$slots.title, h2("i", { "class": ["el-submenu__icon-arrow", submenuTitleIcon] })]
            ), this.isMenuPopup ? popupMenu : inlineMenu]
          );
        }
      };
      var src_submenuvue_type_script_lang_js_ = submenuvue_type_script_lang_js_;
      var submenu_render, submenu_staticRenderFns;
      var submenu_component = normalizeComponent2(
        src_submenuvue_type_script_lang_js_,
        submenu_render,
        submenu_staticRenderFns,
        false,
        null,
        null,
        null
      );
      submenu_component.options.__file = "packages/menu/src/submenu.vue";
      var submenu = submenu_component.exports;
      submenu.install = function(Vue2) {
        Vue2.component(submenu.name, submenu);
      };
      var packages_submenu = submenu;
      var menu_itemvue_type_template_id_2a5dbfea_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "li",
          {
            staticClass: "el-menu-item",
            class: {
              "is-active": _vm.active,
              "is-disabled": _vm.disabled
            },
            style: [
              _vm.paddingStyle,
              _vm.itemStyle,
              { backgroundColor: _vm.backgroundColor }
            ],
            attrs: { role: "menuitem", tabindex: "-1" },
            on: {
              click: _vm.handleClick,
              mouseenter: _vm.onMouseEnter,
              focus: _vm.onMouseEnter,
              blur: _vm.onMouseLeave,
              mouseleave: _vm.onMouseLeave
            }
          },
          [
            _vm.parentMenu.$options.componentName === "ElMenu" && _vm.rootMenu.collapse && _vm.$slots.title ? _c("el-tooltip", { attrs: { effect: "dark", placement: "right" } }, [
              _c(
                "div",
                { attrs: { slot: "content" }, slot: "content" },
                [_vm._t("title")],
                2
              ),
              _c(
                "div",
                {
                  staticStyle: {
                    position: "absolute",
                    left: "0",
                    top: "0",
                    height: "100%",
                    width: "100%",
                    display: "inline-block",
                    "box-sizing": "border-box",
                    padding: "0 20px"
                  }
                },
                [_vm._t("default")],
                2
              )
            ]) : [_vm._t("default"), _vm._t("title")]
          ],
          2
        );
      };
      var menu_itemvue_type_template_id_2a5dbfea_staticRenderFns = [];
      menu_itemvue_type_template_id_2a5dbfea_render._withStripped = true;
      var tooltip_ = __webpack_require__(26);
      var tooltip_default = /* @__PURE__ */ __webpack_require__.n(tooltip_);
      var menu_itemvue_type_script_lang_js_ = {
        name: "ElMenuItem",
        componentName: "ElMenuItem",
        mixins: [menu_mixin, emitter_default.a],
        components: { ElTooltip: tooltip_default.a },
        props: {
          index: {
            default: null,
            validator: function validator(val) {
              return typeof val === "string" || val === null;
            }
          },
          route: [String, Object],
          disabled: Boolean
        },
        computed: {
          active: function active() {
            return this.index === this.rootMenu.activeIndex;
          },
          hoverBackground: function hoverBackground() {
            return this.rootMenu.hoverBackground;
          },
          backgroundColor: function backgroundColor() {
            return this.rootMenu.backgroundColor || "";
          },
          activeTextColor: function activeTextColor() {
            return this.rootMenu.activeTextColor || "";
          },
          textColor: function textColor() {
            return this.rootMenu.textColor || "";
          },
          mode: function mode() {
            return this.rootMenu.mode;
          },
          itemStyle: function itemStyle() {
            var style2 = {
              color: this.active ? this.activeTextColor : this.textColor
            };
            if (this.mode === "horizontal" && !this.isNested) {
              style2.borderBottomColor = this.active ? this.rootMenu.activeTextColor ? this.activeTextColor : "" : "transparent";
            }
            return style2;
          },
          isNested: function isNested() {
            return this.parentMenu !== this.rootMenu;
          }
        },
        methods: {
          onMouseEnter: function onMouseEnter() {
            if (this.mode === "horizontal" && !this.rootMenu.backgroundColor)
              return;
            this.$el.style.backgroundColor = this.hoverBackground;
          },
          onMouseLeave: function onMouseLeave() {
            if (this.mode === "horizontal" && !this.rootMenu.backgroundColor)
              return;
            this.$el.style.backgroundColor = this.backgroundColor;
          },
          handleClick: function handleClick() {
            if (!this.disabled) {
              this.dispatch("ElMenu", "item-click", this);
              this.$emit("click", this);
            }
          }
        },
        mounted: function mounted2() {
          this.parentMenu.addItem(this);
          this.rootMenu.addItem(this);
        },
        beforeDestroy: function beforeDestroy2() {
          this.parentMenu.removeItem(this);
          this.rootMenu.removeItem(this);
        }
      };
      var src_menu_itemvue_type_script_lang_js_ = menu_itemvue_type_script_lang_js_;
      var menu_item_component = normalizeComponent2(
        src_menu_itemvue_type_script_lang_js_,
        menu_itemvue_type_template_id_2a5dbfea_render,
        menu_itemvue_type_template_id_2a5dbfea_staticRenderFns,
        false,
        null,
        null,
        null
      );
      menu_item_component.options.__file = "packages/menu/src/menu-item.vue";
      var menu_item = menu_item_component.exports;
      menu_item.install = function(Vue2) {
        Vue2.component(menu_item.name, menu_item);
      };
      var packages_menu_item = menu_item;
      var menu_item_groupvue_type_template_id_543b7bdc_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("li", { staticClass: "el-menu-item-group" }, [
          _c(
            "div",
            {
              staticClass: "el-menu-item-group__title",
              style: { paddingLeft: _vm.levelPadding + "px" }
            },
            [!_vm.$slots.title ? [_vm._v(_vm._s(_vm.title))] : _vm._t("title")],
            2
          ),
          _c("ul", [_vm._t("default")], 2)
        ]);
      };
      var menu_item_groupvue_type_template_id_543b7bdc_staticRenderFns = [];
      menu_item_groupvue_type_template_id_543b7bdc_render._withStripped = true;
      var menu_item_groupvue_type_script_lang_js_ = {
        name: "ElMenuItemGroup",
        componentName: "ElMenuItemGroup",
        inject: ["rootMenu"],
        props: {
          title: {
            type: String
          }
        },
        data: function data() {
          return {
            paddingLeft: 20
          };
        },
        computed: {
          levelPadding: function levelPadding() {
            var padding = 20;
            var parent = this.$parent;
            if (this.rootMenu.collapse)
              return 20;
            while (parent && parent.$options.componentName !== "ElMenu") {
              if (parent.$options.componentName === "ElSubmenu") {
                padding += 20;
              }
              parent = parent.$parent;
            }
            return padding;
          }
        }
      };
      var src_menu_item_groupvue_type_script_lang_js_ = menu_item_groupvue_type_script_lang_js_;
      var menu_item_group_component = normalizeComponent2(
        src_menu_item_groupvue_type_script_lang_js_,
        menu_item_groupvue_type_template_id_543b7bdc_render,
        menu_item_groupvue_type_template_id_543b7bdc_staticRenderFns,
        false,
        null,
        null,
        null
      );
      menu_item_group_component.options.__file = "packages/menu/src/menu-item-group.vue";
      var menu_item_group = menu_item_group_component.exports;
      menu_item_group.install = function(Vue2) {
        Vue2.component(menu_item_group.name, menu_item_group);
      };
      var packages_menu_item_group = menu_item_group;
      var inputvue_type_template_id_343dd774_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            class: [
              _vm.type === "textarea" ? "el-textarea" : "el-input",
              _vm.inputSize ? "el-input--" + _vm.inputSize : "",
              {
                "is-disabled": _vm.inputDisabled,
                "is-exceed": _vm.inputExceed,
                "el-input-group": _vm.$slots.prepend || _vm.$slots.append,
                "el-input-group--append": _vm.$slots.append,
                "el-input-group--prepend": _vm.$slots.prepend,
                "el-input--prefix": _vm.$slots.prefix || _vm.prefixIcon,
                "el-input--suffix": _vm.$slots.suffix || _vm.suffixIcon || _vm.clearable || _vm.showPassword
              }
            ],
            on: {
              mouseenter: function($event) {
                _vm.hovering = true;
              },
              mouseleave: function($event) {
                _vm.hovering = false;
              }
            }
          },
          [
            _vm.type !== "textarea" ? [
              _vm.$slots.prepend ? _c(
                "div",
                { staticClass: "el-input-group__prepend" },
                [_vm._t("prepend")],
                2
              ) : _vm._e(),
              _vm.type !== "textarea" ? _c(
                "input",
                _vm._b(
                  {
                    ref: "input",
                    staticClass: "el-input__inner",
                    attrs: {
                      tabindex: _vm.tabindex,
                      type: _vm.showPassword ? _vm.passwordVisible ? "text" : "password" : _vm.type,
                      disabled: _vm.inputDisabled,
                      readonly: _vm.readonly,
                      autocomplete: _vm.autoComplete || _vm.autocomplete,
                      "aria-label": _vm.label
                    },
                    on: {
                      compositionstart: _vm.handleCompositionStart,
                      compositionupdate: _vm.handleCompositionUpdate,
                      compositionend: _vm.handleCompositionEnd,
                      input: _vm.handleInput,
                      focus: _vm.handleFocus,
                      blur: _vm.handleBlur,
                      change: _vm.handleChange
                    }
                  },
                  "input",
                  _vm.$attrs,
                  false
                )
              ) : _vm._e(),
              _vm.$slots.prefix || _vm.prefixIcon ? _c(
                "span",
                { staticClass: "el-input__prefix" },
                [
                  _vm._t("prefix"),
                  _vm.prefixIcon ? _c("i", {
                    staticClass: "el-input__icon",
                    class: _vm.prefixIcon
                  }) : _vm._e()
                ],
                2
              ) : _vm._e(),
              _vm.getSuffixVisible() ? _c("span", { staticClass: "el-input__suffix" }, [
                _c(
                  "span",
                  { staticClass: "el-input__suffix-inner" },
                  [
                    !_vm.showClear || !_vm.showPwdVisible || !_vm.isWordLimitVisible ? [
                      _vm._t("suffix"),
                      _vm.suffixIcon ? _c("i", {
                        staticClass: "el-input__icon",
                        class: _vm.suffixIcon
                      }) : _vm._e()
                    ] : _vm._e(),
                    _vm.showClear ? _c("i", {
                      staticClass: "el-input__icon el-icon-circle-close el-input__clear",
                      on: {
                        mousedown: function($event) {
                          $event.preventDefault();
                        },
                        click: _vm.clear
                      }
                    }) : _vm._e(),
                    _vm.showPwdVisible ? _c("i", {
                      staticClass: "el-input__icon el-icon-view el-input__clear",
                      on: { click: _vm.handlePasswordVisible }
                    }) : _vm._e(),
                    _vm.isWordLimitVisible ? _c("span", { staticClass: "el-input__count" }, [
                      _c(
                        "span",
                        { staticClass: "el-input__count-inner" },
                        [
                          _vm._v(
                            "\n            " + _vm._s(_vm.textLength) + "/" + _vm._s(_vm.upperLimit) + "\n          "
                          )
                        ]
                      )
                    ]) : _vm._e()
                  ],
                  2
                ),
                _vm.validateState ? _c("i", {
                  staticClass: "el-input__icon",
                  class: ["el-input__validateIcon", _vm.validateIcon]
                }) : _vm._e()
              ]) : _vm._e(),
              _vm.$slots.append ? _c(
                "div",
                { staticClass: "el-input-group__append" },
                [_vm._t("append")],
                2
              ) : _vm._e()
            ] : _c(
              "textarea",
              _vm._b(
                {
                  ref: "textarea",
                  staticClass: "el-textarea__inner",
                  style: _vm.textareaStyle,
                  attrs: {
                    tabindex: _vm.tabindex,
                    disabled: _vm.inputDisabled,
                    readonly: _vm.readonly,
                    autocomplete: _vm.autoComplete || _vm.autocomplete,
                    "aria-label": _vm.label
                  },
                  on: {
                    compositionstart: _vm.handleCompositionStart,
                    compositionupdate: _vm.handleCompositionUpdate,
                    compositionend: _vm.handleCompositionEnd,
                    input: _vm.handleInput,
                    focus: _vm.handleFocus,
                    blur: _vm.handleBlur,
                    change: _vm.handleChange
                  }
                },
                "textarea",
                _vm.$attrs,
                false
              )
            ),
            _vm.isWordLimitVisible && _vm.type === "textarea" ? _c("span", { staticClass: "el-input__count" }, [
              _vm._v(_vm._s(_vm.textLength) + "/" + _vm._s(_vm.upperLimit))
            ]) : _vm._e()
          ],
          2
        );
      };
      var inputvue_type_template_id_343dd774_staticRenderFns = [];
      inputvue_type_template_id_343dd774_render._withStripped = true;
      var hiddenTextarea = void 0;
      var HIDDEN_STYLE = "\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important\n";
      var CONTEXT_STYLE = ["letter-spacing", "line-height", "padding-top", "padding-bottom", "font-family", "font-weight", "font-size", "text-rendering", "text-transform", "width", "text-indent", "padding-left", "padding-right", "border-width", "box-sizing"];
      function calculateNodeStyling(targetElement) {
        var style2 = window.getComputedStyle(targetElement);
        var boxSizing = style2.getPropertyValue("box-sizing");
        var paddingSize = parseFloat(style2.getPropertyValue("padding-bottom")) + parseFloat(style2.getPropertyValue("padding-top"));
        var borderSize = parseFloat(style2.getPropertyValue("border-bottom-width")) + parseFloat(style2.getPropertyValue("border-top-width"));
        var contextStyle = CONTEXT_STYLE.map(function(name) {
          return name + ":" + style2.getPropertyValue(name);
        }).join(";");
        return { contextStyle, paddingSize, borderSize, boxSizing };
      }
      function calcTextareaHeight(targetElement) {
        var minRows = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
        var maxRows = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
        if (!hiddenTextarea) {
          hiddenTextarea = document.createElement("textarea");
          document.body.appendChild(hiddenTextarea);
        }
        var _calculateNodeStyling = calculateNodeStyling(targetElement), paddingSize = _calculateNodeStyling.paddingSize, borderSize = _calculateNodeStyling.borderSize, boxSizing = _calculateNodeStyling.boxSizing, contextStyle = _calculateNodeStyling.contextStyle;
        hiddenTextarea.setAttribute("style", contextStyle + ";" + HIDDEN_STYLE);
        hiddenTextarea.value = targetElement.value || targetElement.placeholder || "";
        var height = hiddenTextarea.scrollHeight;
        var result = {};
        if (boxSizing === "border-box") {
          height = height + borderSize;
        } else if (boxSizing === "content-box") {
          height = height - paddingSize;
        }
        hiddenTextarea.value = "";
        var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
        if (minRows !== null) {
          var minHeight = singleRowHeight * minRows;
          if (boxSizing === "border-box") {
            minHeight = minHeight + paddingSize + borderSize;
          }
          height = Math.max(minHeight, height);
          result.minHeight = minHeight + "px";
        }
        if (maxRows !== null) {
          var maxHeight = singleRowHeight * maxRows;
          if (boxSizing === "border-box") {
            maxHeight = maxHeight + paddingSize + borderSize;
          }
          height = Math.min(maxHeight, height);
        }
        result.height = height + "px";
        hiddenTextarea.parentNode && hiddenTextarea.parentNode.removeChild(hiddenTextarea);
        hiddenTextarea = null;
        return result;
      }
      var merge_ = __webpack_require__(7);
      var merge_default = /* @__PURE__ */ __webpack_require__.n(merge_);
      var shared_ = __webpack_require__(19);
      var inputvue_type_script_lang_js_ = {
        name: "ElInput",
        componentName: "ElInput",
        mixins: [emitter_default.a, migrating_default.a],
        inheritAttrs: false,
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        data: function data() {
          return {
            textareaCalcStyle: {},
            hovering: false,
            focused: false,
            isComposing: false,
            passwordVisible: false
          };
        },
        props: {
          value: [String, Number],
          size: String,
          resize: String,
          form: String,
          disabled: Boolean,
          readonly: Boolean,
          type: {
            type: String,
            default: "text"
          },
          autosize: {
            type: [Boolean, Object],
            default: false
          },
          autocomplete: {
            type: String,
            default: "off"
          },
          /** @Deprecated in next major version */
          autoComplete: {
            type: String,
            validator: function validator(val) {
              return true;
            }
          },
          validateEvent: {
            type: Boolean,
            default: true
          },
          suffixIcon: String,
          prefixIcon: String,
          label: String,
          clearable: {
            type: Boolean,
            default: false
          },
          showPassword: {
            type: Boolean,
            default: false
          },
          showWordLimit: {
            type: Boolean,
            default: false
          },
          tabindex: String
        },
        computed: {
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          validateState: function validateState() {
            return this.elFormItem ? this.elFormItem.validateState : "";
          },
          needStatusIcon: function needStatusIcon() {
            return this.elForm ? this.elForm.statusIcon : false;
          },
          validateIcon: function validateIcon() {
            return {
              validating: "el-icon-loading",
              success: "el-icon-circle-check",
              error: "el-icon-circle-close"
            }[this.validateState];
          },
          textareaStyle: function textareaStyle() {
            return merge_default()({}, this.textareaCalcStyle, { resize: this.resize });
          },
          inputSize: function inputSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          },
          inputDisabled: function inputDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
          },
          nativeInputValue: function nativeInputValue() {
            return this.value === null || this.value === void 0 ? "" : String(this.value);
          },
          showClear: function showClear() {
            return this.clearable && !this.inputDisabled && !this.readonly && this.nativeInputValue && (this.focused || this.hovering);
          },
          showPwdVisible: function showPwdVisible() {
            return this.showPassword && !this.inputDisabled && !this.readonly && (!!this.nativeInputValue || this.focused);
          },
          isWordLimitVisible: function isWordLimitVisible() {
            return this.showWordLimit && this.$attrs.maxlength && (this.type === "text" || this.type === "textarea") && !this.inputDisabled && !this.readonly && !this.showPassword;
          },
          upperLimit: function upperLimit() {
            return this.$attrs.maxlength;
          },
          textLength: function textLength() {
            if (typeof this.value === "number") {
              return String(this.value).length;
            }
            return (this.value || "").length;
          },
          inputExceed: function inputExceed() {
            return this.isWordLimitVisible && this.textLength > this.upperLimit;
          }
        },
        watch: {
          value: function value(val) {
            this.$nextTick(this.resizeTextarea);
            if (this.validateEvent) {
              this.dispatch("ElFormItem", "el.form.change", [val]);
            }
          },
          // native input value is set explicitly
          // do not use v-model / :value in template
          // see: https://github.com/ElemeFE/element/issues/14521
          nativeInputValue: function nativeInputValue() {
            this.setNativeInputValue();
          },
          // when change between <input> and <textarea>,
          // update DOM dependent value and styles
          // https://github.com/ElemeFE/element/issues/14857
          type: function type2() {
            var _this = this;
            this.$nextTick(function() {
              _this.setNativeInputValue();
              _this.resizeTextarea();
              _this.updateIconOffset();
            });
          }
        },
        methods: {
          focus: function focus2() {
            this.getInput().focus();
          },
          blur: function blur() {
            this.getInput().blur();
          },
          getMigratingConfig: function getMigratingConfig() {
            return {
              props: {
                "icon": "icon is removed, use suffix-icon / prefix-icon instead.",
                "on-icon-click": "on-icon-click is removed."
              },
              events: {
                "click": "click is removed."
              }
            };
          },
          handleBlur: function handleBlur(event) {
            this.focused = false;
            this.$emit("blur", event);
            if (this.validateEvent) {
              this.dispatch("ElFormItem", "el.form.blur", [this.value]);
            }
          },
          select: function select2() {
            this.getInput().select();
          },
          resizeTextarea: function resizeTextarea() {
            if (this.$isServer)
              return;
            var autosize = this.autosize, type2 = this.type;
            if (type2 !== "textarea")
              return;
            if (!autosize) {
              this.textareaCalcStyle = {
                minHeight: calcTextareaHeight(this.$refs.textarea).minHeight
              };
              return;
            }
            var minRows = autosize.minRows;
            var maxRows = autosize.maxRows;
            this.textareaCalcStyle = calcTextareaHeight(this.$refs.textarea, minRows, maxRows);
          },
          setNativeInputValue: function setNativeInputValue() {
            var input2 = this.getInput();
            if (!input2)
              return;
            if (input2.value === this.nativeInputValue)
              return;
            input2.value = this.nativeInputValue;
          },
          handleFocus: function handleFocus(event) {
            this.focused = true;
            this.$emit("focus", event);
          },
          handleCompositionStart: function handleCompositionStart(event) {
            this.$emit("compositionstart", event);
            this.isComposing = true;
          },
          handleCompositionUpdate: function handleCompositionUpdate(event) {
            this.$emit("compositionupdate", event);
            var text = event.target.value;
            var lastCharacter = text[text.length - 1] || "";
            this.isComposing = !Object(shared_["isKorean"])(lastCharacter);
          },
          handleCompositionEnd: function handleCompositionEnd(event) {
            this.$emit("compositionend", event);
            if (this.isComposing) {
              this.isComposing = false;
              this.handleInput(event);
            }
          },
          handleInput: function handleInput(event) {
            if (this.isComposing)
              return;
            if (event.target.value === this.nativeInputValue)
              return;
            this.$emit("input", event.target.value);
            this.$nextTick(this.setNativeInputValue);
          },
          handleChange: function handleChange(event) {
            this.$emit("change", event.target.value);
          },
          calcIconOffset: function calcIconOffset(place) {
            var elList = [].slice.call(this.$el.querySelectorAll(".el-input__" + place) || []);
            if (!elList.length)
              return;
            var el = null;
            for (var i = 0; i < elList.length; i++) {
              if (elList[i].parentNode === this.$el) {
                el = elList[i];
                break;
              }
            }
            if (!el)
              return;
            var pendantMap = {
              suffix: "append",
              prefix: "prepend"
            };
            var pendant = pendantMap[place];
            if (this.$slots[pendant]) {
              el.style.transform = "translateX(" + (place === "suffix" ? "-" : "") + this.$el.querySelector(".el-input-group__" + pendant).offsetWidth + "px)";
            } else {
              el.removeAttribute("style");
            }
          },
          updateIconOffset: function updateIconOffset() {
            this.calcIconOffset("prefix");
            this.calcIconOffset("suffix");
          },
          clear: function clear() {
            this.$emit("input", "");
            this.$emit("change", "");
            this.$emit("clear");
          },
          handlePasswordVisible: function handlePasswordVisible() {
            var _this2 = this;
            this.passwordVisible = !this.passwordVisible;
            this.$nextTick(function() {
              _this2.focus();
            });
          },
          getInput: function getInput() {
            return this.$refs.input || this.$refs.textarea;
          },
          getSuffixVisible: function getSuffixVisible() {
            return this.$slots.suffix || this.suffixIcon || this.showClear || this.showPassword || this.isWordLimitVisible || this.validateState && this.needStatusIcon;
          }
        },
        created: function created() {
          this.$on("inputSelect", this.select);
        },
        mounted: function mounted2() {
          this.setNativeInputValue();
          this.resizeTextarea();
          this.updateIconOffset();
        },
        updated: function updated() {
          this.$nextTick(this.updateIconOffset);
        }
      };
      var src_inputvue_type_script_lang_js_ = inputvue_type_script_lang_js_;
      var input_component = normalizeComponent2(
        src_inputvue_type_script_lang_js_,
        inputvue_type_template_id_343dd774_render,
        inputvue_type_template_id_343dd774_staticRenderFns,
        false,
        null,
        null,
        null
      );
      input_component.options.__file = "packages/input/src/input.vue";
      var src_input = input_component.exports;
      src_input.install = function(Vue2) {
        Vue2.component(src_input.name, src_input);
      };
      var packages_input = src_input;
      var input_numbervue_type_template_id_42f8cf66_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            class: [
              "el-input-number",
              _vm.inputNumberSize ? "el-input-number--" + _vm.inputNumberSize : "",
              { "is-disabled": _vm.inputNumberDisabled },
              { "is-without-controls": !_vm.controls },
              { "is-controls-right": _vm.controlsAtRight }
            ],
            on: {
              dragstart: function($event) {
                $event.preventDefault();
              }
            }
          },
          [
            _vm.controls ? _c(
              "span",
              {
                directives: [
                  {
                    name: "repeat-click",
                    rawName: "v-repeat-click",
                    value: _vm.decrease,
                    expression: "decrease"
                  }
                ],
                staticClass: "el-input-number__decrease",
                class: { "is-disabled": _vm.minDisabled },
                attrs: { role: "button" },
                on: {
                  keydown: function($event) {
                    if (!("button" in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                      return null;
                    }
                    return _vm.decrease($event);
                  }
                }
              },
              [
                _c("i", {
                  class: "el-icon-" + (_vm.controlsAtRight ? "arrow-down" : "minus")
                })
              ]
            ) : _vm._e(),
            _vm.controls ? _c(
              "span",
              {
                directives: [
                  {
                    name: "repeat-click",
                    rawName: "v-repeat-click",
                    value: _vm.increase,
                    expression: "increase"
                  }
                ],
                staticClass: "el-input-number__increase",
                class: { "is-disabled": _vm.maxDisabled },
                attrs: { role: "button" },
                on: {
                  keydown: function($event) {
                    if (!("button" in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                      return null;
                    }
                    return _vm.increase($event);
                  }
                }
              },
              [
                _c("i", {
                  class: "el-icon-" + (_vm.controlsAtRight ? "arrow-up" : "plus")
                })
              ]
            ) : _vm._e(),
            _c("el-input", {
              ref: "input",
              attrs: {
                value: _vm.displayValue,
                placeholder: _vm.placeholder,
                disabled: _vm.inputNumberDisabled,
                size: _vm.inputNumberSize,
                max: _vm.max,
                min: _vm.min,
                name: _vm.name,
                label: _vm.label
              },
              on: {
                blur: _vm.handleBlur,
                focus: _vm.handleFocus,
                input: _vm.handleInput,
                change: _vm.handleInputChange
              },
              nativeOn: {
                keydown: [
                  function($event) {
                    if (!("button" in $event) && _vm._k($event.keyCode, "up", 38, $event.key, ["Up", "ArrowUp"])) {
                      return null;
                    }
                    $event.preventDefault();
                    return _vm.increase($event);
                  },
                  function($event) {
                    if (!("button" in $event) && _vm._k($event.keyCode, "down", 40, $event.key, [
                      "Down",
                      "ArrowDown"
                    ])) {
                      return null;
                    }
                    $event.preventDefault();
                    return _vm.decrease($event);
                  }
                ]
              }
            })
          ],
          1
        );
      };
      var input_numbervue_type_template_id_42f8cf66_staticRenderFns = [];
      input_numbervue_type_template_id_42f8cf66_render._withStripped = true;
      var repeat_click = {
        bind: function bind2(el, binding, vnode) {
          var interval = null;
          var startTime = void 0;
          var maxIntervals = Object(util_["isMac"])() ? 100 : 200;
          var handler = function handler2() {
            return vnode.context[binding.expression].apply();
          };
          var clear = function clear2() {
            if (Date.now() - startTime < maxIntervals) {
              handler();
            }
            clearInterval(interval);
            interval = null;
          };
          Object(dom_["on"])(el, "mousedown", function(e) {
            if (e.button !== 0)
              return;
            startTime = Date.now();
            Object(dom_["once"])(document, "mouseup", clear);
            clearInterval(interval);
            interval = setInterval(handler, maxIntervals);
          });
        }
      };
      var input_numbervue_type_script_lang_js_ = {
        name: "ElInputNumber",
        mixins: [focus_default()("input")],
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        directives: {
          repeatClick: repeat_click
        },
        components: {
          ElInput: input_default.a
        },
        props: {
          step: {
            type: Number,
            default: 1
          },
          stepStrictly: {
            type: Boolean,
            default: false
          },
          max: {
            type: Number,
            default: Infinity
          },
          min: {
            type: Number,
            default: -Infinity
          },
          value: {},
          disabled: Boolean,
          size: String,
          controls: {
            type: Boolean,
            default: true
          },
          controlsPosition: {
            type: String,
            default: ""
          },
          name: String,
          label: String,
          placeholder: String,
          precision: {
            type: Number,
            validator: function validator(val) {
              return val >= 0 && val === parseInt(val, 10);
            }
          }
        },
        data: function data() {
          return {
            currentValue: 0,
            userInput: null
          };
        },
        watch: {
          value: {
            immediate: true,
            handler: function handler(value) {
              var newVal = value === void 0 ? value : Number(value);
              if (newVal !== void 0) {
                if (isNaN(newVal)) {
                  return;
                }
                if (this.stepStrictly) {
                  var stepPrecision = this.getPrecision(this.step);
                  var precisionFactor = Math.pow(10, stepPrecision);
                  newVal = Math.round(newVal / this.step) * precisionFactor * this.step / precisionFactor;
                }
                if (this.precision !== void 0) {
                  newVal = this.toPrecision(newVal, this.precision);
                }
              }
              if (newVal >= this.max)
                newVal = this.max;
              if (newVal <= this.min)
                newVal = this.min;
              this.currentValue = newVal;
              this.userInput = null;
              this.$emit("input", newVal);
            }
          }
        },
        computed: {
          minDisabled: function minDisabled() {
            return this._decrease(this.value, this.step) < this.min;
          },
          maxDisabled: function maxDisabled() {
            return this._increase(this.value, this.step) > this.max;
          },
          numPrecision: function numPrecision() {
            var value = this.value, step3 = this.step, getPrecision = this.getPrecision, precision = this.precision;
            var stepPrecision = getPrecision(step3);
            if (precision !== void 0) {
              if (stepPrecision > precision) {
                console.warn("[Element Warn][InputNumber]precision should not be less than the decimal places of step");
              }
              return precision;
            } else {
              return Math.max(getPrecision(value), stepPrecision);
            }
          },
          controlsAtRight: function controlsAtRight() {
            return this.controls && this.controlsPosition === "right";
          },
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          inputNumberSize: function inputNumberSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          },
          inputNumberDisabled: function inputNumberDisabled() {
            return this.disabled || !!(this.elForm || {}).disabled;
          },
          displayValue: function displayValue() {
            if (this.userInput !== null) {
              return this.userInput;
            }
            var currentValue = this.currentValue;
            if (typeof currentValue === "number") {
              if (this.stepStrictly) {
                var stepPrecision = this.getPrecision(this.step);
                var precisionFactor = Math.pow(10, stepPrecision);
                currentValue = Math.round(currentValue / this.step) * precisionFactor * this.step / precisionFactor;
              }
              if (this.precision !== void 0) {
                currentValue = currentValue.toFixed(this.precision);
              }
            }
            return currentValue;
          }
        },
        methods: {
          toPrecision: function toPrecision(num, precision) {
            if (precision === void 0)
              precision = this.numPrecision;
            return parseFloat(Math.round(num * Math.pow(10, precision)) / Math.pow(10, precision));
          },
          getPrecision: function getPrecision(value) {
            if (value === void 0)
              return 0;
            var valueString = value.toString();
            var dotPosition = valueString.indexOf(".");
            var precision = 0;
            if (dotPosition !== -1) {
              precision = valueString.length - dotPosition - 1;
            }
            return precision;
          },
          _increase: function _increase(val, step3) {
            if (typeof val !== "number" && val !== void 0)
              return this.currentValue;
            var precisionFactor = Math.pow(10, this.numPrecision);
            return this.toPrecision((precisionFactor * val + precisionFactor * step3) / precisionFactor);
          },
          _decrease: function _decrease(val, step3) {
            if (typeof val !== "number" && val !== void 0)
              return this.currentValue;
            var precisionFactor = Math.pow(10, this.numPrecision);
            return this.toPrecision((precisionFactor * val - precisionFactor * step3) / precisionFactor);
          },
          increase: function increase() {
            if (this.inputNumberDisabled || this.maxDisabled)
              return;
            var value = this.value || 0;
            var newVal = this._increase(value, this.step);
            this.setCurrentValue(newVal);
          },
          decrease: function decrease() {
            if (this.inputNumberDisabled || this.minDisabled)
              return;
            var value = this.value || 0;
            var newVal = this._decrease(value, this.step);
            this.setCurrentValue(newVal);
          },
          handleBlur: function handleBlur(event) {
            this.$emit("blur", event);
          },
          handleFocus: function handleFocus(event) {
            this.$emit("focus", event);
          },
          setCurrentValue: function setCurrentValue(newVal) {
            var oldVal = this.currentValue;
            if (typeof newVal === "number" && this.precision !== void 0) {
              newVal = this.toPrecision(newVal, this.precision);
            }
            if (newVal >= this.max)
              newVal = this.max;
            if (newVal <= this.min)
              newVal = this.min;
            if (oldVal === newVal)
              return;
            this.userInput = null;
            this.$emit("input", newVal);
            this.$emit("change", newVal, oldVal);
            this.currentValue = newVal;
          },
          handleInput: function handleInput(value) {
            this.userInput = value;
          },
          handleInputChange: function handleInputChange(value) {
            var newVal = value === "" ? void 0 : Number(value);
            if (!isNaN(newVal) || value === "") {
              this.setCurrentValue(newVal);
            }
            this.userInput = null;
          },
          select: function select2() {
            this.$refs.input.select();
          }
        },
        mounted: function mounted2() {
          var innerInput = this.$refs.input.$refs.input;
          innerInput.setAttribute("role", "spinbutton");
          innerInput.setAttribute("aria-valuemax", this.max);
          innerInput.setAttribute("aria-valuemin", this.min);
          innerInput.setAttribute("aria-valuenow", this.currentValue);
          innerInput.setAttribute("aria-disabled", this.inputNumberDisabled);
        },
        updated: function updated() {
          if (!this.$refs || !this.$refs.input)
            return;
          var innerInput = this.$refs.input.$refs.input;
          innerInput.setAttribute("aria-valuenow", this.currentValue);
        }
      };
      var src_input_numbervue_type_script_lang_js_ = input_numbervue_type_script_lang_js_;
      var input_number_component = normalizeComponent2(
        src_input_numbervue_type_script_lang_js_,
        input_numbervue_type_template_id_42f8cf66_render,
        input_numbervue_type_template_id_42f8cf66_staticRenderFns,
        false,
        null,
        null,
        null
      );
      input_number_component.options.__file = "packages/input-number/src/input-number.vue";
      var input_number = input_number_component.exports;
      input_number.install = function(Vue2) {
        Vue2.component(input_number.name, input_number);
      };
      var packages_input_number = input_number;
      var radiovue_type_template_id_69cd6268_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "label",
          {
            staticClass: "el-radio",
            class: [
              _vm.border && _vm.radioSize ? "el-radio--" + _vm.radioSize : "",
              { "is-disabled": _vm.isDisabled },
              { "is-focus": _vm.focus },
              { "is-bordered": _vm.border },
              { "is-checked": _vm.model === _vm.label }
            ],
            attrs: {
              role: "radio",
              "aria-checked": _vm.model === _vm.label,
              "aria-disabled": _vm.isDisabled,
              tabindex: _vm.tabIndex
            },
            on: {
              keydown: function($event) {
                if (!("button" in $event) && _vm._k($event.keyCode, "space", 32, $event.key, [" ", "Spacebar"])) {
                  return null;
                }
                $event.stopPropagation();
                $event.preventDefault();
                _vm.model = _vm.isDisabled ? _vm.model : _vm.label;
              }
            }
          },
          [
            _c(
              "span",
              {
                staticClass: "el-radio__input",
                class: {
                  "is-disabled": _vm.isDisabled,
                  "is-checked": _vm.model === _vm.label
                }
              },
              [
                _c("span", { staticClass: "el-radio__inner" }),
                _c("input", {
                  directives: [
                    {
                      name: "model",
                      rawName: "v-model",
                      value: _vm.model,
                      expression: "model"
                    }
                  ],
                  ref: "radio",
                  staticClass: "el-radio__original",
                  attrs: {
                    type: "radio",
                    "aria-hidden": "true",
                    name: _vm.name,
                    disabled: _vm.isDisabled,
                    tabindex: "-1",
                    autocomplete: "off"
                  },
                  domProps: {
                    value: _vm.label,
                    checked: _vm._q(_vm.model, _vm.label)
                  },
                  on: {
                    focus: function($event) {
                      _vm.focus = true;
                    },
                    blur: function($event) {
                      _vm.focus = false;
                    },
                    change: [
                      function($event) {
                        _vm.model = _vm.label;
                      },
                      _vm.handleChange
                    ]
                  }
                })
              ]
            ),
            _c(
              "span",
              {
                staticClass: "el-radio__label",
                on: {
                  keydown: function($event) {
                    $event.stopPropagation();
                  }
                }
              },
              [
                _vm._t("default"),
                !_vm.$slots.default ? [_vm._v(_vm._s(_vm.label))] : _vm._e()
              ],
              2
            )
          ]
        );
      };
      var radiovue_type_template_id_69cd6268_staticRenderFns = [];
      radiovue_type_template_id_69cd6268_render._withStripped = true;
      var radiovue_type_script_lang_js_ = {
        name: "ElRadio",
        mixins: [emitter_default.a],
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        componentName: "ElRadio",
        props: {
          value: {},
          label: {},
          disabled: Boolean,
          name: String,
          border: Boolean,
          size: String
        },
        data: function data() {
          return {
            focus: false
          };
        },
        computed: {
          isGroup: function isGroup() {
            var parent = this.$parent;
            while (parent) {
              if (parent.$options.componentName !== "ElRadioGroup") {
                parent = parent.$parent;
              } else {
                this._radioGroup = parent;
                return true;
              }
            }
            return false;
          },
          model: {
            get: function get() {
              return this.isGroup ? this._radioGroup.value : this.value;
            },
            set: function set2(val) {
              if (this.isGroup) {
                this.dispatch("ElRadioGroup", "input", [val]);
              } else {
                this.$emit("input", val);
              }
              this.$refs.radio && (this.$refs.radio.checked = this.model === this.label);
            }
          },
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          radioSize: function radioSize() {
            var temRadioSize = this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
            return this.isGroup ? this._radioGroup.radioGroupSize || temRadioSize : temRadioSize;
          },
          isDisabled: function isDisabled() {
            return this.isGroup ? this._radioGroup.disabled || this.disabled || (this.elForm || {}).disabled : this.disabled || (this.elForm || {}).disabled;
          },
          tabIndex: function tabIndex() {
            return this.isDisabled || this.isGroup && this.model !== this.label ? -1 : 0;
          }
        },
        methods: {
          handleChange: function handleChange() {
            var _this = this;
            this.$nextTick(function() {
              _this.$emit("change", _this.model);
              _this.isGroup && _this.dispatch("ElRadioGroup", "handleChange", _this.model);
            });
          }
        }
      };
      var src_radiovue_type_script_lang_js_ = radiovue_type_script_lang_js_;
      var radio_component = normalizeComponent2(
        src_radiovue_type_script_lang_js_,
        radiovue_type_template_id_69cd6268_render,
        radiovue_type_template_id_69cd6268_staticRenderFns,
        false,
        null,
        null,
        null
      );
      radio_component.options.__file = "packages/radio/src/radio.vue";
      var src_radio = radio_component.exports;
      src_radio.install = function(Vue2) {
        Vue2.component(src_radio.name, src_radio);
      };
      var packages_radio = src_radio;
      var radio_groupvue_type_template_id_818a704c_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          _vm._elTag,
          {
            tag: "component",
            staticClass: "el-radio-group",
            attrs: { role: "radiogroup" },
            on: { keydown: _vm.handleKeydown }
          },
          [_vm._t("default")],
          2
        );
      };
      var radio_groupvue_type_template_id_818a704c_staticRenderFns = [];
      radio_groupvue_type_template_id_818a704c_render._withStripped = true;
      var keyCode = Object.freeze({
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40
      });
      var radio_groupvue_type_script_lang_js_ = {
        name: "ElRadioGroup",
        componentName: "ElRadioGroup",
        inject: {
          elFormItem: {
            default: ""
          }
        },
        mixins: [emitter_default.a],
        props: {
          value: {},
          size: String,
          fill: String,
          textColor: String,
          disabled: Boolean
        },
        computed: {
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          _elTag: function _elTag() {
            var tag2 = (this.$vnode.data || {}).tag;
            if (!tag2 || tag2 === "component")
              tag2 = "div";
            return tag2;
          },
          radioGroupSize: function radioGroupSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          }
        },
        created: function created() {
          var _this = this;
          this.$on("handleChange", function(value) {
            _this.$emit("change", value);
          });
        },
        mounted: function mounted2() {
          var radios = this.$el.querySelectorAll("[type=radio]");
          var firstLabel = this.$el.querySelectorAll("[role=radio]")[0];
          if (![].some.call(radios, function(radio2) {
            return radio2.checked;
          }) && firstLabel) {
            firstLabel.tabIndex = 0;
          }
        },
        methods: {
          handleKeydown: function handleKeydown(e) {
            var target2 = e.target;
            var className = target2.nodeName === "INPUT" ? "[type=radio]" : "[role=radio]";
            var radios = this.$el.querySelectorAll(className);
            var length = radios.length;
            var index2 = [].indexOf.call(radios, target2);
            var roleRadios = this.$el.querySelectorAll("[role=radio]");
            switch (e.keyCode) {
              case keyCode.LEFT:
              case keyCode.UP:
                e.stopPropagation();
                e.preventDefault();
                if (index2 === 0) {
                  roleRadios[length - 1].click();
                  roleRadios[length - 1].focus();
                } else {
                  roleRadios[index2 - 1].click();
                  roleRadios[index2 - 1].focus();
                }
                break;
              case keyCode.RIGHT:
              case keyCode.DOWN:
                if (index2 === length - 1) {
                  e.stopPropagation();
                  e.preventDefault();
                  roleRadios[0].click();
                  roleRadios[0].focus();
                } else {
                  roleRadios[index2 + 1].click();
                  roleRadios[index2 + 1].focus();
                }
                break;
            }
          }
        },
        watch: {
          value: function value(_value) {
            this.dispatch("ElFormItem", "el.form.change", [this.value]);
          }
        }
      };
      var src_radio_groupvue_type_script_lang_js_ = radio_groupvue_type_script_lang_js_;
      var radio_group_component = normalizeComponent2(
        src_radio_groupvue_type_script_lang_js_,
        radio_groupvue_type_template_id_818a704c_render,
        radio_groupvue_type_template_id_818a704c_staticRenderFns,
        false,
        null,
        null,
        null
      );
      radio_group_component.options.__file = "packages/radio/src/radio-group.vue";
      var radio_group = radio_group_component.exports;
      radio_group.install = function(Vue2) {
        Vue2.component(radio_group.name, radio_group);
      };
      var packages_radio_group = radio_group;
      var radio_buttonvue_type_template_id_18a77a32_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "label",
          {
            staticClass: "el-radio-button",
            class: [
              _vm.size ? "el-radio-button--" + _vm.size : "",
              { "is-active": _vm.value === _vm.label },
              { "is-disabled": _vm.isDisabled },
              { "is-focus": _vm.focus }
            ],
            attrs: {
              role: "radio",
              "aria-checked": _vm.value === _vm.label,
              "aria-disabled": _vm.isDisabled,
              tabindex: _vm.tabIndex
            },
            on: {
              keydown: function($event) {
                if (!("button" in $event) && _vm._k($event.keyCode, "space", 32, $event.key, [" ", "Spacebar"])) {
                  return null;
                }
                $event.stopPropagation();
                $event.preventDefault();
                _vm.value = _vm.isDisabled ? _vm.value : _vm.label;
              }
            }
          },
          [
            _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.value,
                  expression: "value"
                }
              ],
              staticClass: "el-radio-button__orig-radio",
              attrs: {
                type: "radio",
                name: _vm.name,
                disabled: _vm.isDisabled,
                tabindex: "-1",
                autocomplete: "off"
              },
              domProps: { value: _vm.label, checked: _vm._q(_vm.value, _vm.label) },
              on: {
                change: [
                  function($event) {
                    _vm.value = _vm.label;
                  },
                  _vm.handleChange
                ],
                focus: function($event) {
                  _vm.focus = true;
                },
                blur: function($event) {
                  _vm.focus = false;
                }
              }
            }),
            _c(
              "span",
              {
                staticClass: "el-radio-button__inner",
                style: _vm.value === _vm.label ? _vm.activeStyle : null,
                on: {
                  keydown: function($event) {
                    $event.stopPropagation();
                  }
                }
              },
              [
                _vm._t("default"),
                !_vm.$slots.default ? [_vm._v(_vm._s(_vm.label))] : _vm._e()
              ],
              2
            )
          ]
        );
      };
      var radio_buttonvue_type_template_id_18a77a32_staticRenderFns = [];
      radio_buttonvue_type_template_id_18a77a32_render._withStripped = true;
      var radio_buttonvue_type_script_lang_js_ = {
        name: "ElRadioButton",
        mixins: [emitter_default.a],
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        props: {
          label: {},
          disabled: Boolean,
          name: String
        },
        data: function data() {
          return {
            focus: false
          };
        },
        computed: {
          value: {
            get: function get() {
              return this._radioGroup.value;
            },
            set: function set2(value) {
              this._radioGroup.$emit("input", value);
            }
          },
          _radioGroup: function _radioGroup() {
            var parent = this.$parent;
            while (parent) {
              if (parent.$options.componentName !== "ElRadioGroup") {
                parent = parent.$parent;
              } else {
                return parent;
              }
            }
            return false;
          },
          activeStyle: function activeStyle() {
            return {
              backgroundColor: this._radioGroup.fill || "",
              borderColor: this._radioGroup.fill || "",
              boxShadow: this._radioGroup.fill ? "-1px 0 0 0 " + this._radioGroup.fill : "",
              color: this._radioGroup.textColor || ""
            };
          },
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          size: function size() {
            return this._radioGroup.radioGroupSize || this._elFormItemSize || (this.$ELEMENT || {}).size;
          },
          isDisabled: function isDisabled() {
            return this.disabled || this._radioGroup.disabled || (this.elForm || {}).disabled;
          },
          tabIndex: function tabIndex() {
            return this.isDisabled || this._radioGroup && this.value !== this.label ? -1 : 0;
          }
        },
        methods: {
          handleChange: function handleChange() {
            var _this = this;
            this.$nextTick(function() {
              _this.dispatch("ElRadioGroup", "handleChange", _this.value);
            });
          }
        }
      };
      var src_radio_buttonvue_type_script_lang_js_ = radio_buttonvue_type_script_lang_js_;
      var radio_button_component = normalizeComponent2(
        src_radio_buttonvue_type_script_lang_js_,
        radio_buttonvue_type_template_id_18a77a32_render,
        radio_buttonvue_type_template_id_18a77a32_staticRenderFns,
        false,
        null,
        null,
        null
      );
      radio_button_component.options.__file = "packages/radio/src/radio-button.vue";
      var radio_button = radio_button_component.exports;
      radio_button.install = function(Vue2) {
        Vue2.component(radio_button.name, radio_button);
      };
      var packages_radio_button = radio_button;
      var checkboxvue_type_template_id_d0387074_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "label",
          {
            staticClass: "el-checkbox",
            class: [
              _vm.border && _vm.checkboxSize ? "el-checkbox--" + _vm.checkboxSize : "",
              { "is-disabled": _vm.isDisabled },
              { "is-bordered": _vm.border },
              { "is-checked": _vm.isChecked }
            ],
            attrs: { id: _vm.id }
          },
          [
            _c(
              "span",
              {
                staticClass: "el-checkbox__input",
                class: {
                  "is-disabled": _vm.isDisabled,
                  "is-checked": _vm.isChecked,
                  "is-indeterminate": _vm.indeterminate,
                  "is-focus": _vm.focus
                },
                attrs: {
                  tabindex: _vm.indeterminate ? 0 : false,
                  role: _vm.indeterminate ? "checkbox" : false,
                  "aria-checked": _vm.indeterminate ? "mixed" : false
                }
              },
              [
                _c("span", { staticClass: "el-checkbox__inner" }),
                _vm.trueLabel || _vm.falseLabel ? _c("input", {
                  directives: [
                    {
                      name: "model",
                      rawName: "v-model",
                      value: _vm.model,
                      expression: "model"
                    }
                  ],
                  staticClass: "el-checkbox__original",
                  attrs: {
                    type: "checkbox",
                    "aria-hidden": _vm.indeterminate ? "true" : "false",
                    name: _vm.name,
                    disabled: _vm.isDisabled,
                    "true-value": _vm.trueLabel,
                    "false-value": _vm.falseLabel
                  },
                  domProps: {
                    checked: Array.isArray(_vm.model) ? _vm._i(_vm.model, null) > -1 : _vm._q(_vm.model, _vm.trueLabel)
                  },
                  on: {
                    change: [
                      function($event) {
                        var $$a = _vm.model, $$el = $event.target, $$c = $$el.checked ? _vm.trueLabel : _vm.falseLabel;
                        if (Array.isArray($$a)) {
                          var $$v = null, $$i = _vm._i($$a, $$v);
                          if ($$el.checked) {
                            $$i < 0 && (_vm.model = $$a.concat([$$v]));
                          } else {
                            $$i > -1 && (_vm.model = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));
                          }
                        } else {
                          _vm.model = $$c;
                        }
                      },
                      _vm.handleChange
                    ],
                    focus: function($event) {
                      _vm.focus = true;
                    },
                    blur: function($event) {
                      _vm.focus = false;
                    }
                  }
                }) : _c("input", {
                  directives: [
                    {
                      name: "model",
                      rawName: "v-model",
                      value: _vm.model,
                      expression: "model"
                    }
                  ],
                  staticClass: "el-checkbox__original",
                  attrs: {
                    type: "checkbox",
                    "aria-hidden": _vm.indeterminate ? "true" : "false",
                    disabled: _vm.isDisabled,
                    name: _vm.name
                  },
                  domProps: {
                    value: _vm.label,
                    checked: Array.isArray(_vm.model) ? _vm._i(_vm.model, _vm.label) > -1 : _vm.model
                  },
                  on: {
                    change: [
                      function($event) {
                        var $$a = _vm.model, $$el = $event.target, $$c = $$el.checked ? true : false;
                        if (Array.isArray($$a)) {
                          var $$v = _vm.label, $$i = _vm._i($$a, $$v);
                          if ($$el.checked) {
                            $$i < 0 && (_vm.model = $$a.concat([$$v]));
                          } else {
                            $$i > -1 && (_vm.model = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));
                          }
                        } else {
                          _vm.model = $$c;
                        }
                      },
                      _vm.handleChange
                    ],
                    focus: function($event) {
                      _vm.focus = true;
                    },
                    blur: function($event) {
                      _vm.focus = false;
                    }
                  }
                })
              ]
            ),
            _vm.$slots.default || _vm.label ? _c(
              "span",
              { staticClass: "el-checkbox__label" },
              [
                _vm._t("default"),
                !_vm.$slots.default ? [_vm._v(_vm._s(_vm.label))] : _vm._e()
              ],
              2
            ) : _vm._e()
          ]
        );
      };
      var checkboxvue_type_template_id_d0387074_staticRenderFns = [];
      checkboxvue_type_template_id_d0387074_render._withStripped = true;
      var checkboxvue_type_script_lang_js_ = {
        name: "ElCheckbox",
        mixins: [emitter_default.a],
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        componentName: "ElCheckbox",
        data: function data() {
          return {
            selfModel: false,
            focus: false,
            isLimitExceeded: false
          };
        },
        computed: {
          model: {
            get: function get() {
              return this.isGroup ? this.store : this.value !== void 0 ? this.value : this.selfModel;
            },
            set: function set2(val) {
              if (this.isGroup) {
                this.isLimitExceeded = false;
                this._checkboxGroup.min !== void 0 && val.length < this._checkboxGroup.min && (this.isLimitExceeded = true);
                this._checkboxGroup.max !== void 0 && val.length > this._checkboxGroup.max && (this.isLimitExceeded = true);
                this.isLimitExceeded === false && this.dispatch("ElCheckboxGroup", "input", [val]);
              } else {
                this.$emit("input", val);
                this.selfModel = val;
              }
            }
          },
          isChecked: function isChecked() {
            if ({}.toString.call(this.model) === "[object Boolean]") {
              return this.model;
            } else if (Array.isArray(this.model)) {
              return this.model.indexOf(this.label) > -1;
            } else if (this.model !== null && this.model !== void 0) {
              return this.model === this.trueLabel;
            }
          },
          isGroup: function isGroup() {
            var parent = this.$parent;
            while (parent) {
              if (parent.$options.componentName !== "ElCheckboxGroup") {
                parent = parent.$parent;
              } else {
                this._checkboxGroup = parent;
                return true;
              }
            }
            return false;
          },
          store: function store2() {
            return this._checkboxGroup ? this._checkboxGroup.value : this.value;
          },
          /* used to make the isDisabled judgment under max/min props */
          isLimitDisabled: function isLimitDisabled() {
            var _checkboxGroup = this._checkboxGroup, max2 = _checkboxGroup.max, min2 = _checkboxGroup.min;
            return !!(max2 || min2) && this.model.length >= max2 && !this.isChecked || this.model.length <= min2 && this.isChecked;
          },
          isDisabled: function isDisabled() {
            return this.isGroup ? this._checkboxGroup.disabled || this.disabled || (this.elForm || {}).disabled || this.isLimitDisabled : this.disabled || (this.elForm || {}).disabled;
          },
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          checkboxSize: function checkboxSize() {
            var temCheckboxSize = this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
            return this.isGroup ? this._checkboxGroup.checkboxGroupSize || temCheckboxSize : temCheckboxSize;
          }
        },
        props: {
          value: {},
          label: {},
          indeterminate: Boolean,
          disabled: Boolean,
          checked: Boolean,
          name: String,
          trueLabel: [String, Number],
          falseLabel: [String, Number],
          id: String,
          /* 当indeterminate为真时，为controls提供相关连的checkbox的id，表明元素间的控制关系*/
          controls: String,
          /* 当indeterminate为真时，为controls提供相关连的checkbox的id，表明元素间的控制关系*/
          border: Boolean,
          size: String
        },
        methods: {
          addToStore: function addToStore() {
            if (Array.isArray(this.model) && this.model.indexOf(this.label) === -1) {
              this.model.push(this.label);
            } else {
              this.model = this.trueLabel || true;
            }
          },
          handleChange: function handleChange(ev) {
            var _this = this;
            if (this.isLimitExceeded)
              return;
            var value = void 0;
            if (ev.target.checked) {
              value = this.trueLabel === void 0 ? true : this.trueLabel;
            } else {
              value = this.falseLabel === void 0 ? false : this.falseLabel;
            }
            this.$emit("change", value, ev);
            this.$nextTick(function() {
              if (_this.isGroup) {
                _this.dispatch("ElCheckboxGroup", "change", [_this._checkboxGroup.value]);
              }
            });
          }
        },
        created: function created() {
          this.checked && this.addToStore();
        },
        mounted: function mounted2() {
          if (this.indeterminate) {
            this.$el.setAttribute("aria-controls", this.controls);
          }
        },
        watch: {
          value: function value(_value) {
            this.dispatch("ElFormItem", "el.form.change", _value);
          }
        }
      };
      var src_checkboxvue_type_script_lang_js_ = checkboxvue_type_script_lang_js_;
      var checkbox_component = normalizeComponent2(
        src_checkboxvue_type_script_lang_js_,
        checkboxvue_type_template_id_d0387074_render,
        checkboxvue_type_template_id_d0387074_staticRenderFns,
        false,
        null,
        null,
        null
      );
      checkbox_component.options.__file = "packages/checkbox/src/checkbox.vue";
      var src_checkbox = checkbox_component.exports;
      src_checkbox.install = function(Vue2) {
        Vue2.component(src_checkbox.name, src_checkbox);
      };
      var packages_checkbox = src_checkbox;
      var checkbox_buttonvue_type_template_id_478e906e_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "label",
          {
            staticClass: "el-checkbox-button",
            class: [
              _vm.size ? "el-checkbox-button--" + _vm.size : "",
              { "is-disabled": _vm.isDisabled },
              { "is-checked": _vm.isChecked },
              { "is-focus": _vm.focus }
            ],
            attrs: {
              role: "checkbox",
              "aria-checked": _vm.isChecked,
              "aria-disabled": _vm.isDisabled
            }
          },
          [
            _vm.trueLabel || _vm.falseLabel ? _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.model,
                  expression: "model"
                }
              ],
              staticClass: "el-checkbox-button__original",
              attrs: {
                type: "checkbox",
                name: _vm.name,
                disabled: _vm.isDisabled,
                "true-value": _vm.trueLabel,
                "false-value": _vm.falseLabel
              },
              domProps: {
                checked: Array.isArray(_vm.model) ? _vm._i(_vm.model, null) > -1 : _vm._q(_vm.model, _vm.trueLabel)
              },
              on: {
                change: [
                  function($event) {
                    var $$a = _vm.model, $$el = $event.target, $$c = $$el.checked ? _vm.trueLabel : _vm.falseLabel;
                    if (Array.isArray($$a)) {
                      var $$v = null, $$i = _vm._i($$a, $$v);
                      if ($$el.checked) {
                        $$i < 0 && (_vm.model = $$a.concat([$$v]));
                      } else {
                        $$i > -1 && (_vm.model = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));
                      }
                    } else {
                      _vm.model = $$c;
                    }
                  },
                  _vm.handleChange
                ],
                focus: function($event) {
                  _vm.focus = true;
                },
                blur: function($event) {
                  _vm.focus = false;
                }
              }
            }) : _c("input", {
              directives: [
                {
                  name: "model",
                  rawName: "v-model",
                  value: _vm.model,
                  expression: "model"
                }
              ],
              staticClass: "el-checkbox-button__original",
              attrs: {
                type: "checkbox",
                name: _vm.name,
                disabled: _vm.isDisabled
              },
              domProps: {
                value: _vm.label,
                checked: Array.isArray(_vm.model) ? _vm._i(_vm.model, _vm.label) > -1 : _vm.model
              },
              on: {
                change: [
                  function($event) {
                    var $$a = _vm.model, $$el = $event.target, $$c = $$el.checked ? true : false;
                    if (Array.isArray($$a)) {
                      var $$v = _vm.label, $$i = _vm._i($$a, $$v);
                      if ($$el.checked) {
                        $$i < 0 && (_vm.model = $$a.concat([$$v]));
                      } else {
                        $$i > -1 && (_vm.model = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));
                      }
                    } else {
                      _vm.model = $$c;
                    }
                  },
                  _vm.handleChange
                ],
                focus: function($event) {
                  _vm.focus = true;
                },
                blur: function($event) {
                  _vm.focus = false;
                }
              }
            }),
            _vm.$slots.default || _vm.label ? _c(
              "span",
              {
                staticClass: "el-checkbox-button__inner",
                style: _vm.isChecked ? _vm.activeStyle : null
              },
              [_vm._t("default", [_vm._v(_vm._s(_vm.label))])],
              2
            ) : _vm._e()
          ]
        );
      };
      var checkbox_buttonvue_type_template_id_478e906e_staticRenderFns = [];
      checkbox_buttonvue_type_template_id_478e906e_render._withStripped = true;
      var checkbox_buttonvue_type_script_lang_js_ = {
        name: "ElCheckboxButton",
        mixins: [emitter_default.a],
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        data: function data() {
          return {
            selfModel: false,
            focus: false,
            isLimitExceeded: false
          };
        },
        props: {
          value: {},
          label: {},
          disabled: Boolean,
          checked: Boolean,
          name: String,
          trueLabel: [String, Number],
          falseLabel: [String, Number]
        },
        computed: {
          model: {
            get: function get() {
              return this._checkboxGroup ? this.store : this.value !== void 0 ? this.value : this.selfModel;
            },
            set: function set2(val) {
              if (this._checkboxGroup) {
                this.isLimitExceeded = false;
                this._checkboxGroup.min !== void 0 && val.length < this._checkboxGroup.min && (this.isLimitExceeded = true);
                this._checkboxGroup.max !== void 0 && val.length > this._checkboxGroup.max && (this.isLimitExceeded = true);
                this.isLimitExceeded === false && this.dispatch("ElCheckboxGroup", "input", [val]);
              } else if (this.value !== void 0) {
                this.$emit("input", val);
              } else {
                this.selfModel = val;
              }
            }
          },
          isChecked: function isChecked() {
            if ({}.toString.call(this.model) === "[object Boolean]") {
              return this.model;
            } else if (Array.isArray(this.model)) {
              return this.model.indexOf(this.label) > -1;
            } else if (this.model !== null && this.model !== void 0) {
              return this.model === this.trueLabel;
            }
          },
          _checkboxGroup: function _checkboxGroup() {
            var parent = this.$parent;
            while (parent) {
              if (parent.$options.componentName !== "ElCheckboxGroup") {
                parent = parent.$parent;
              } else {
                return parent;
              }
            }
            return false;
          },
          store: function store2() {
            return this._checkboxGroup ? this._checkboxGroup.value : this.value;
          },
          activeStyle: function activeStyle() {
            return {
              backgroundColor: this._checkboxGroup.fill || "",
              borderColor: this._checkboxGroup.fill || "",
              color: this._checkboxGroup.textColor || "",
              "box-shadow": "-1px 0 0 0 " + this._checkboxGroup.fill
            };
          },
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          size: function size() {
            return this._checkboxGroup.checkboxGroupSize || this._elFormItemSize || (this.$ELEMENT || {}).size;
          },
          /* used to make the isDisabled judgment under max/min props */
          isLimitDisabled: function isLimitDisabled() {
            var _checkboxGroup2 = this._checkboxGroup, max2 = _checkboxGroup2.max, min2 = _checkboxGroup2.min;
            return !!(max2 || min2) && this.model.length >= max2 && !this.isChecked || this.model.length <= min2 && this.isChecked;
          },
          isDisabled: function isDisabled() {
            return this._checkboxGroup ? this._checkboxGroup.disabled || this.disabled || (this.elForm || {}).disabled || this.isLimitDisabled : this.disabled || (this.elForm || {}).disabled;
          }
        },
        methods: {
          addToStore: function addToStore() {
            if (Array.isArray(this.model) && this.model.indexOf(this.label) === -1) {
              this.model.push(this.label);
            } else {
              this.model = this.trueLabel || true;
            }
          },
          handleChange: function handleChange(ev) {
            var _this = this;
            if (this.isLimitExceeded)
              return;
            var value = void 0;
            if (ev.target.checked) {
              value = this.trueLabel === void 0 ? true : this.trueLabel;
            } else {
              value = this.falseLabel === void 0 ? false : this.falseLabel;
            }
            this.$emit("change", value, ev);
            this.$nextTick(function() {
              if (_this._checkboxGroup) {
                _this.dispatch("ElCheckboxGroup", "change", [_this._checkboxGroup.value]);
              }
            });
          }
        },
        created: function created() {
          this.checked && this.addToStore();
        }
      };
      var src_checkbox_buttonvue_type_script_lang_js_ = checkbox_buttonvue_type_script_lang_js_;
      var checkbox_button_component = normalizeComponent2(
        src_checkbox_buttonvue_type_script_lang_js_,
        checkbox_buttonvue_type_template_id_478e906e_render,
        checkbox_buttonvue_type_template_id_478e906e_staticRenderFns,
        false,
        null,
        null,
        null
      );
      checkbox_button_component.options.__file = "packages/checkbox/src/checkbox-button.vue";
      var checkbox_button = checkbox_button_component.exports;
      checkbox_button.install = function(Vue2) {
        Vue2.component(checkbox_button.name, checkbox_button);
      };
      var packages_checkbox_button = checkbox_button;
      var checkbox_groupvue_type_template_id_7289a290_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-checkbox-group",
            attrs: { role: "group", "aria-label": "checkbox-group" }
          },
          [_vm._t("default")],
          2
        );
      };
      var checkbox_groupvue_type_template_id_7289a290_staticRenderFns = [];
      checkbox_groupvue_type_template_id_7289a290_render._withStripped = true;
      var checkbox_groupvue_type_script_lang_js_ = {
        name: "ElCheckboxGroup",
        componentName: "ElCheckboxGroup",
        mixins: [emitter_default.a],
        inject: {
          elFormItem: {
            default: ""
          }
        },
        props: {
          value: {},
          disabled: Boolean,
          min: Number,
          max: Number,
          size: String,
          fill: String,
          textColor: String
        },
        computed: {
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          checkboxGroupSize: function checkboxGroupSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          }
        },
        watch: {
          value: function value(_value) {
            this.dispatch("ElFormItem", "el.form.change", [_value]);
          }
        }
      };
      var src_checkbox_groupvue_type_script_lang_js_ = checkbox_groupvue_type_script_lang_js_;
      var checkbox_group_component = normalizeComponent2(
        src_checkbox_groupvue_type_script_lang_js_,
        checkbox_groupvue_type_template_id_7289a290_render,
        checkbox_groupvue_type_template_id_7289a290_staticRenderFns,
        false,
        null,
        null,
        null
      );
      checkbox_group_component.options.__file = "packages/checkbox/src/checkbox-group.vue";
      var checkbox_group = checkbox_group_component.exports;
      checkbox_group.install = function(Vue2) {
        Vue2.component(checkbox_group.name, checkbox_group);
      };
      var packages_checkbox_group = checkbox_group;
      var componentvue_type_template_id_2dcd8fbb_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-switch",
            class: { "is-disabled": _vm.switchDisabled, "is-checked": _vm.checked },
            attrs: {
              role: "switch",
              "aria-checked": _vm.checked,
              "aria-disabled": _vm.switchDisabled
            },
            on: {
              click: function($event) {
                $event.preventDefault();
                return _vm.switchValue($event);
              }
            }
          },
          [
            _c("input", {
              ref: "input",
              staticClass: "el-switch__input",
              attrs: {
                type: "checkbox",
                id: _vm.id,
                name: _vm.name,
                "true-value": _vm.activeValue,
                "false-value": _vm.inactiveValue,
                disabled: _vm.switchDisabled
              },
              on: {
                change: _vm.handleChange,
                keydown: function($event) {
                  if (!("button" in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                    return null;
                  }
                  return _vm.switchValue($event);
                }
              }
            }),
            _vm.inactiveIconClass || _vm.inactiveText ? _c(
              "span",
              {
                class: [
                  "el-switch__label",
                  "el-switch__label--left",
                  !_vm.checked ? "is-active" : ""
                ]
              },
              [
                _vm.inactiveIconClass ? _c("i", { class: [_vm.inactiveIconClass] }) : _vm._e(),
                !_vm.inactiveIconClass && _vm.inactiveText ? _c("span", { attrs: { "aria-hidden": _vm.checked } }, [
                  _vm._v(_vm._s(_vm.inactiveText))
                ]) : _vm._e()
              ]
            ) : _vm._e(),
            _c("span", {
              ref: "core",
              staticClass: "el-switch__core",
              style: { width: _vm.coreWidth + "px" }
            }),
            _vm.activeIconClass || _vm.activeText ? _c(
              "span",
              {
                class: [
                  "el-switch__label",
                  "el-switch__label--right",
                  _vm.checked ? "is-active" : ""
                ]
              },
              [
                _vm.activeIconClass ? _c("i", { class: [_vm.activeIconClass] }) : _vm._e(),
                !_vm.activeIconClass && _vm.activeText ? _c("span", { attrs: { "aria-hidden": !_vm.checked } }, [
                  _vm._v(_vm._s(_vm.activeText))
                ]) : _vm._e()
              ]
            ) : _vm._e()
          ]
        );
      };
      var componentvue_type_template_id_2dcd8fbb_staticRenderFns = [];
      componentvue_type_template_id_2dcd8fbb_render._withStripped = true;
      var switch_src_componentvue_type_script_lang_js_ = {
        name: "ElSwitch",
        mixins: [focus_default()("input"), migrating_default.a, emitter_default.a],
        inject: {
          elForm: {
            default: ""
          }
        },
        props: {
          value: {
            type: [Boolean, String, Number],
            default: false
          },
          disabled: {
            type: Boolean,
            default: false
          },
          width: {
            type: Number,
            default: 40
          },
          activeIconClass: {
            type: String,
            default: ""
          },
          inactiveIconClass: {
            type: String,
            default: ""
          },
          activeText: String,
          inactiveText: String,
          activeColor: {
            type: String,
            default: ""
          },
          inactiveColor: {
            type: String,
            default: ""
          },
          activeValue: {
            type: [Boolean, String, Number],
            default: true
          },
          inactiveValue: {
            type: [Boolean, String, Number],
            default: false
          },
          name: {
            type: String,
            default: ""
          },
          validateEvent: {
            type: Boolean,
            default: true
          },
          id: String
        },
        data: function data() {
          return {
            coreWidth: this.width
          };
        },
        created: function created() {
          if (!~[this.activeValue, this.inactiveValue].indexOf(this.value)) {
            this.$emit("input", this.inactiveValue);
          }
        },
        computed: {
          checked: function checked() {
            return this.value === this.activeValue;
          },
          switchDisabled: function switchDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
          }
        },
        watch: {
          checked: function checked() {
            this.$refs.input.checked = this.checked;
            if (this.activeColor || this.inactiveColor) {
              this.setBackgroundColor();
            }
            if (this.validateEvent) {
              this.dispatch("ElFormItem", "el.form.change", [this.value]);
            }
          }
        },
        methods: {
          handleChange: function handleChange(event) {
            var _this = this;
            var val = this.checked ? this.inactiveValue : this.activeValue;
            this.$emit("input", val);
            this.$emit("change", val);
            this.$nextTick(function() {
              if (_this.$refs.input) {
                _this.$refs.input.checked = _this.checked;
              }
            });
          },
          setBackgroundColor: function setBackgroundColor() {
            var newColor = this.checked ? this.activeColor : this.inactiveColor;
            this.$refs.core.style.borderColor = newColor;
            this.$refs.core.style.backgroundColor = newColor;
          },
          switchValue: function switchValue() {
            !this.switchDisabled && this.handleChange();
          },
          getMigratingConfig: function getMigratingConfig() {
            return {
              props: {
                "on-color": "on-color is renamed to active-color.",
                "off-color": "off-color is renamed to inactive-color.",
                "on-text": "on-text is renamed to active-text.",
                "off-text": "off-text is renamed to inactive-text.",
                "on-value": "on-value is renamed to active-value.",
                "off-value": "off-value is renamed to inactive-value.",
                "on-icon-class": "on-icon-class is renamed to active-icon-class.",
                "off-icon-class": "off-icon-class is renamed to inactive-icon-class."
              }
            };
          }
        },
        mounted: function mounted2() {
          this.coreWidth = this.width || 40;
          if (this.activeColor || this.inactiveColor) {
            this.setBackgroundColor();
          }
          this.$refs.input.checked = this.checked;
        }
      };
      var packages_switch_src_componentvue_type_script_lang_js_ = switch_src_componentvue_type_script_lang_js_;
      var src_component_component = normalizeComponent2(
        packages_switch_src_componentvue_type_script_lang_js_,
        componentvue_type_template_id_2dcd8fbb_render,
        componentvue_type_template_id_2dcd8fbb_staticRenderFns,
        false,
        null,
        null,
        null
      );
      src_component_component.options.__file = "packages/switch/src/component.vue";
      var switch_src_component = src_component_component.exports;
      switch_src_component.install = function(Vue2) {
        Vue2.component(switch_src_component.name, switch_src_component);
      };
      var packages_switch = switch_src_component;
      var selectvue_type_template_id_0e4aade6_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            directives: [
              {
                name: "clickoutside",
                rawName: "v-clickoutside",
                value: _vm.handleClose,
                expression: "handleClose"
              }
            ],
            staticClass: "el-select",
            class: [_vm.selectSize ? "el-select--" + _vm.selectSize : ""],
            on: {
              click: function($event) {
                $event.stopPropagation();
                return _vm.toggleMenu($event);
              }
            }
          },
          [
            _vm.multiple ? _c(
              "div",
              {
                ref: "tags",
                staticClass: "el-select__tags",
                style: { "max-width": _vm.inputWidth - 32 + "px", width: "100%" }
              },
              [
                _vm.collapseTags && _vm.selected.length ? _c(
                  "span",
                  [
                    _c(
                      "el-tag",
                      {
                        attrs: {
                          closable: !_vm.selectDisabled,
                          size: _vm.collapseTagSize,
                          hit: _vm.selected[0].hitState,
                          type: "info",
                          "disable-transitions": ""
                        },
                        on: {
                          close: function($event) {
                            _vm.deleteTag($event, _vm.selected[0]);
                          }
                        }
                      },
                      [
                        _c("span", { staticClass: "el-select__tags-text" }, [
                          _vm._v(_vm._s(_vm.selected[0].currentLabel))
                        ])
                      ]
                    ),
                    _vm.selected.length > 1 ? _c(
                      "el-tag",
                      {
                        attrs: {
                          closable: false,
                          size: _vm.collapseTagSize,
                          type: "info",
                          "disable-transitions": ""
                        }
                      },
                      [
                        _c(
                          "span",
                          { staticClass: "el-select__tags-text" },
                          [_vm._v("+ " + _vm._s(_vm.selected.length - 1))]
                        )
                      ]
                    ) : _vm._e()
                  ],
                  1
                ) : _vm._e(),
                !_vm.collapseTags ? _c(
                  "transition-group",
                  { on: { "after-leave": _vm.resetInputHeight } },
                  _vm._l(_vm.selected, function(item) {
                    return _c(
                      "el-tag",
                      {
                        key: _vm.getValueKey(item),
                        attrs: {
                          closable: !_vm.selectDisabled,
                          size: _vm.collapseTagSize,
                          hit: item.hitState,
                          type: "info",
                          "disable-transitions": ""
                        },
                        on: {
                          close: function($event) {
                            _vm.deleteTag($event, item);
                          }
                        }
                      },
                      [
                        _c("span", { staticClass: "el-select__tags-text" }, [
                          _vm._v(_vm._s(item.currentLabel))
                        ])
                      ]
                    );
                  }),
                  1
                ) : _vm._e(),
                _vm.filterable ? _c("input", {
                  directives: [
                    {
                      name: "model",
                      rawName: "v-model",
                      value: _vm.query,
                      expression: "query"
                    }
                  ],
                  ref: "input",
                  staticClass: "el-select__input",
                  class: [_vm.selectSize ? "is-" + _vm.selectSize : ""],
                  style: {
                    "flex-grow": "1",
                    width: _vm.inputLength / (_vm.inputWidth - 32) + "%",
                    "max-width": _vm.inputWidth - 42 + "px"
                  },
                  attrs: {
                    type: "text",
                    disabled: _vm.selectDisabled,
                    autocomplete: _vm.autoComplete || _vm.autocomplete
                  },
                  domProps: { value: _vm.query },
                  on: {
                    focus: _vm.handleFocus,
                    blur: function($event) {
                      _vm.softFocus = false;
                    },
                    keyup: _vm.managePlaceholder,
                    keydown: [
                      _vm.resetInputState,
                      function($event) {
                        if (!("button" in $event) && _vm._k($event.keyCode, "down", 40, $event.key, [
                          "Down",
                          "ArrowDown"
                        ])) {
                          return null;
                        }
                        $event.preventDefault();
                        _vm.handleNavigate("next");
                      },
                      function($event) {
                        if (!("button" in $event) && _vm._k($event.keyCode, "up", 38, $event.key, [
                          "Up",
                          "ArrowUp"
                        ])) {
                          return null;
                        }
                        $event.preventDefault();
                        _vm.handleNavigate("prev");
                      },
                      function($event) {
                        if (!("button" in $event) && _vm._k(
                          $event.keyCode,
                          "enter",
                          13,
                          $event.key,
                          "Enter"
                        )) {
                          return null;
                        }
                        $event.preventDefault();
                        return _vm.selectOption($event);
                      },
                      function($event) {
                        if (!("button" in $event) && _vm._k($event.keyCode, "esc", 27, $event.key, [
                          "Esc",
                          "Escape"
                        ])) {
                          return null;
                        }
                        $event.stopPropagation();
                        $event.preventDefault();
                        _vm.visible = false;
                      },
                      function($event) {
                        if (!("button" in $event) && _vm._k(
                          $event.keyCode,
                          "delete",
                          [8, 46],
                          $event.key,
                          ["Backspace", "Delete", "Del"]
                        )) {
                          return null;
                        }
                        return _vm.deletePrevTag($event);
                      },
                      function($event) {
                        if (!("button" in $event) && _vm._k($event.keyCode, "tab", 9, $event.key, "Tab")) {
                          return null;
                        }
                        _vm.visible = false;
                      }
                    ],
                    compositionstart: _vm.handleComposition,
                    compositionupdate: _vm.handleComposition,
                    compositionend: _vm.handleComposition,
                    input: [
                      function($event) {
                        if ($event.target.composing) {
                          return;
                        }
                        _vm.query = $event.target.value;
                      },
                      _vm.debouncedQueryChange
                    ]
                  }
                }) : _vm._e()
              ],
              1
            ) : _vm._e(),
            _c(
              "el-input",
              {
                ref: "reference",
                class: { "is-focus": _vm.visible },
                attrs: {
                  type: "text",
                  placeholder: _vm.currentPlaceholder,
                  name: _vm.name,
                  id: _vm.id,
                  autocomplete: _vm.autoComplete || _vm.autocomplete,
                  size: _vm.selectSize,
                  disabled: _vm.selectDisabled,
                  readonly: _vm.readonly,
                  "validate-event": false,
                  tabindex: _vm.multiple && _vm.filterable ? "-1" : null
                },
                on: {
                  focus: _vm.handleFocus,
                  blur: _vm.handleBlur,
                  input: _vm.debouncedOnInputChange,
                  compositionstart: _vm.handleComposition,
                  compositionupdate: _vm.handleComposition,
                  compositionend: _vm.handleComposition
                },
                nativeOn: {
                  keydown: [
                    function($event) {
                      if (!("button" in $event) && _vm._k($event.keyCode, "down", 40, $event.key, [
                        "Down",
                        "ArrowDown"
                      ])) {
                        return null;
                      }
                      $event.stopPropagation();
                      $event.preventDefault();
                      _vm.handleNavigate("next");
                    },
                    function($event) {
                      if (!("button" in $event) && _vm._k($event.keyCode, "up", 38, $event.key, [
                        "Up",
                        "ArrowUp"
                      ])) {
                        return null;
                      }
                      $event.stopPropagation();
                      $event.preventDefault();
                      _vm.handleNavigate("prev");
                    },
                    function($event) {
                      if (!("button" in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                        return null;
                      }
                      $event.preventDefault();
                      return _vm.selectOption($event);
                    },
                    function($event) {
                      if (!("button" in $event) && _vm._k($event.keyCode, "esc", 27, $event.key, [
                        "Esc",
                        "Escape"
                      ])) {
                        return null;
                      }
                      $event.stopPropagation();
                      $event.preventDefault();
                      _vm.visible = false;
                    },
                    function($event) {
                      if (!("button" in $event) && _vm._k($event.keyCode, "tab", 9, $event.key, "Tab")) {
                        return null;
                      }
                      _vm.visible = false;
                    }
                  ],
                  mouseenter: function($event) {
                    _vm.inputHovering = true;
                  },
                  mouseleave: function($event) {
                    _vm.inputHovering = false;
                  }
                },
                model: {
                  value: _vm.selectedLabel,
                  callback: function($$v) {
                    _vm.selectedLabel = $$v;
                  },
                  expression: "selectedLabel"
                }
              },
              [
                _vm.$slots.prefix ? _c("template", { slot: "prefix" }, [_vm._t("prefix")], 2) : _vm._e(),
                _c("template", { slot: "suffix" }, [
                  _c("i", {
                    directives: [
                      {
                        name: "show",
                        rawName: "v-show",
                        value: !_vm.showClose,
                        expression: "!showClose"
                      }
                    ],
                    class: [
                      "el-select__caret",
                      "el-input__icon",
                      "el-icon-" + _vm.iconClass
                    ]
                  }),
                  _vm.showClose ? _c("i", {
                    staticClass: "el-select__caret el-input__icon el-icon-circle-close",
                    on: { click: _vm.handleClearClick }
                  }) : _vm._e()
                ])
              ],
              2
            ),
            _c(
              "transition",
              {
                attrs: { name: "el-zoom-in-top" },
                on: {
                  "before-enter": _vm.handleMenuEnter,
                  "after-leave": _vm.doDestroy
                }
              },
              [
                _c(
                  "el-select-menu",
                  {
                    directives: [
                      {
                        name: "show",
                        rawName: "v-show",
                        value: _vm.visible && _vm.emptyText !== false,
                        expression: "visible && emptyText !== false"
                      }
                    ],
                    ref: "popper",
                    attrs: { "append-to-body": _vm.popperAppendToBody }
                  },
                  [
                    _c(
                      "el-scrollbar",
                      {
                        directives: [
                          {
                            name: "show",
                            rawName: "v-show",
                            value: _vm.options.length > 0 && !_vm.loading,
                            expression: "options.length > 0 && !loading"
                          }
                        ],
                        ref: "scrollbar",
                        class: {
                          "is-empty": !_vm.allowCreate && _vm.query && _vm.filteredOptionsCount === 0
                        },
                        attrs: {
                          tag: "ul",
                          "wrap-class": "el-select-dropdown__wrap",
                          "view-class": "el-select-dropdown__list"
                        }
                      },
                      [
                        _vm.showNewOption ? _c("el-option", {
                          attrs: { value: _vm.query, created: "" }
                        }) : _vm._e(),
                        _vm._t("default")
                      ],
                      2
                    ),
                    _vm.emptyText && (!_vm.allowCreate || _vm.loading || _vm.allowCreate && _vm.options.length === 0) ? [
                      _vm.$slots.empty ? _vm._t("empty") : _c("p", { staticClass: "el-select-dropdown__empty" }, [
                        _vm._v(
                          "\n          " + _vm._s(_vm.emptyText) + "\n        "
                        )
                      ])
                    ] : _vm._e()
                  ],
                  2
                )
              ],
              1
            )
          ],
          1
        );
      };
      var selectvue_type_template_id_0e4aade6_staticRenderFns = [];
      selectvue_type_template_id_0e4aade6_render._withStripped = true;
      var select_dropdownvue_type_template_id_06828748_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-select-dropdown el-popper",
            class: [{ "is-multiple": _vm.$parent.multiple }, _vm.popperClass],
            style: { minWidth: _vm.minWidth }
          },
          [_vm._t("default")],
          2
        );
      };
      var select_dropdownvue_type_template_id_06828748_staticRenderFns = [];
      select_dropdownvue_type_template_id_06828748_render._withStripped = true;
      var select_dropdownvue_type_script_lang_js_ = {
        name: "ElSelectDropdown",
        componentName: "ElSelectDropdown",
        mixins: [vue_popper_default.a],
        props: {
          placement: {
            default: "bottom-start"
          },
          boundariesPadding: {
            default: 0
          },
          popperOptions: {
            default: function _default2() {
              return {
                gpuAcceleration: false
              };
            }
          },
          visibleArrow: {
            default: true
          },
          appendToBody: {
            type: Boolean,
            default: true
          }
        },
        data: function data() {
          return {
            minWidth: ""
          };
        },
        computed: {
          popperClass: function popperClass() {
            return this.$parent.popperClass;
          }
        },
        watch: {
          "$parent.inputWidth": function $parentInputWidth() {
            this.minWidth = this.$parent.$el.getBoundingClientRect().width + "px";
          }
        },
        mounted: function mounted2() {
          var _this = this;
          this.referenceElm = this.$parent.$refs.reference.$el;
          this.$parent.popperElm = this.popperElm = this.$el;
          this.$on("updatePopper", function() {
            if (_this.$parent.visible)
              _this.updatePopper();
          });
          this.$on("destroyPopper", this.destroyPopper);
        }
      };
      var src_select_dropdownvue_type_script_lang_js_ = select_dropdownvue_type_script_lang_js_;
      var select_dropdown_component = normalizeComponent2(
        src_select_dropdownvue_type_script_lang_js_,
        select_dropdownvue_type_template_id_06828748_render,
        select_dropdownvue_type_template_id_06828748_staticRenderFns,
        false,
        null,
        null,
        null
      );
      select_dropdown_component.options.__file = "packages/select/src/select-dropdown.vue";
      var select_dropdown = select_dropdown_component.exports;
      var optionvue_type_template_id_7a44c642_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "li",
          {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.visible,
                expression: "visible"
              }
            ],
            staticClass: "el-select-dropdown__item",
            class: {
              selected: _vm.itemSelected,
              "is-disabled": _vm.disabled || _vm.groupDisabled || _vm.limitReached,
              hover: _vm.hover
            },
            on: {
              mouseenter: _vm.hoverItem,
              click: function($event) {
                $event.stopPropagation();
                return _vm.selectOptionClick($event);
              }
            }
          },
          [_vm._t("default", [_c("span", [_vm._v(_vm._s(_vm.currentLabel))])])],
          2
        );
      };
      var optionvue_type_template_id_7a44c642_staticRenderFns = [];
      optionvue_type_template_id_7a44c642_render._withStripped = true;
      var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var optionvue_type_script_lang_js_ = {
        mixins: [emitter_default.a],
        name: "ElOption",
        componentName: "ElOption",
        inject: ["select"],
        props: {
          value: {
            required: true
          },
          label: [String, Number],
          created: Boolean,
          disabled: {
            type: Boolean,
            default: false
          }
        },
        data: function data() {
          return {
            index: -1,
            groupDisabled: false,
            visible: true,
            hitState: false,
            hover: false
          };
        },
        computed: {
          isObject: function isObject2() {
            return Object.prototype.toString.call(this.value).toLowerCase() === "[object object]";
          },
          currentLabel: function currentLabel() {
            return this.label || (this.isObject ? "" : this.value);
          },
          currentValue: function currentValue() {
            return this.value || this.label || "";
          },
          itemSelected: function itemSelected() {
            if (!this.select.multiple) {
              return this.isEqual(this.value, this.select.value);
            } else {
              return this.contains(this.select.value, this.value);
            }
          },
          limitReached: function limitReached() {
            if (this.select.multiple) {
              return !this.itemSelected && (this.select.value || []).length >= this.select.multipleLimit && this.select.multipleLimit > 0;
            } else {
              return false;
            }
          }
        },
        watch: {
          currentLabel: function currentLabel() {
            if (!this.created && !this.select.remote)
              this.dispatch("ElSelect", "setSelected");
          },
          value: function value(val, oldVal) {
            var _select = this.select, remote = _select.remote, valueKey = _select.valueKey;
            if (!this.created && !remote) {
              if (valueKey && (typeof val === "undefined" ? "undefined" : _typeof2(val)) === "object" && (typeof oldVal === "undefined" ? "undefined" : _typeof2(oldVal)) === "object" && val[valueKey] === oldVal[valueKey]) {
                return;
              }
              this.dispatch("ElSelect", "setSelected");
            }
          }
        },
        methods: {
          isEqual: function isEqual(a, b) {
            if (!this.isObject) {
              return a === b;
            } else {
              var valueKey = this.select.valueKey;
              return Object(util_["getValueByPath"])(a, valueKey) === Object(util_["getValueByPath"])(b, valueKey);
            }
          },
          contains: function contains() {
            var arr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
            var target2 = arguments[1];
            if (!this.isObject) {
              return arr && arr.indexOf(target2) > -1;
            } else {
              var valueKey = this.select.valueKey;
              return arr && arr.some(function(item) {
                return Object(util_["getValueByPath"])(item, valueKey) === Object(util_["getValueByPath"])(target2, valueKey);
              });
            }
          },
          handleGroupDisabled: function handleGroupDisabled(val) {
            this.groupDisabled = val;
          },
          hoverItem: function hoverItem() {
            if (!this.disabled && !this.groupDisabled) {
              this.select.hoverIndex = this.select.options.indexOf(this);
            }
          },
          selectOptionClick: function selectOptionClick() {
            if (this.disabled !== true && this.groupDisabled !== true) {
              this.dispatch("ElSelect", "handleOptionClick", [this, true]);
            }
          },
          queryChange: function queryChange(query2) {
            this.visible = new RegExp(Object(util_["escapeRegexpString"])(query2), "i").test(this.currentLabel) || this.created;
            if (!this.visible) {
              this.select.filteredOptionsCount--;
            }
          }
        },
        created: function created() {
          this.select.options.push(this);
          this.select.cachedOptions.push(this);
          this.select.optionsCount++;
          this.select.filteredOptionsCount++;
          this.$on("queryChange", this.queryChange);
          this.$on("handleGroupDisabled", this.handleGroupDisabled);
        },
        beforeDestroy: function beforeDestroy2() {
          var _select2 = this.select, selected = _select2.selected, multiple = _select2.multiple;
          var selectedOptions = multiple ? selected : [selected];
          var index2 = this.select.cachedOptions.indexOf(this);
          var selectedIndex = selectedOptions.indexOf(this);
          if (index2 > -1 && selectedIndex < 0) {
            this.select.cachedOptions.splice(index2, 1);
          }
          this.select.onOptionDestroy(this.select.options.indexOf(this));
        }
      };
      var src_optionvue_type_script_lang_js_ = optionvue_type_script_lang_js_;
      var option_component = normalizeComponent2(
        src_optionvue_type_script_lang_js_,
        optionvue_type_template_id_7a44c642_render,
        optionvue_type_template_id_7a44c642_staticRenderFns,
        false,
        null,
        null,
        null
      );
      option_component.options.__file = "packages/select/src/option.vue";
      var src_option = option_component.exports;
      var tag_ = __webpack_require__(30);
      var tag_default = /* @__PURE__ */ __webpack_require__.n(tag_);
      var resize_event_ = __webpack_require__(15);
      var scroll_into_view_ = __webpack_require__(27);
      var scroll_into_view_default = /* @__PURE__ */ __webpack_require__.n(scroll_into_view_);
      var navigation_mixin = {
        data: function data() {
          return {
            hoverOption: -1
          };
        },
        computed: {
          optionsAllDisabled: function optionsAllDisabled() {
            return this.options.filter(function(option2) {
              return option2.visible;
            }).every(function(option2) {
              return option2.disabled;
            });
          }
        },
        watch: {
          hoverIndex: function hoverIndex(val) {
            var _this = this;
            if (typeof val === "number" && val > -1) {
              this.hoverOption = this.options[val] || {};
            }
            this.options.forEach(function(option2) {
              option2.hover = _this.hoverOption === option2;
            });
          }
        },
        methods: {
          navigateOptions: function navigateOptions(direction) {
            var _this2 = this;
            if (!this.visible) {
              this.visible = true;
              return;
            }
            if (this.options.length === 0 || this.filteredOptionsCount === 0)
              return;
            if (!this.optionsAllDisabled) {
              if (direction === "next") {
                this.hoverIndex++;
                if (this.hoverIndex === this.options.length) {
                  this.hoverIndex = 0;
                }
              } else if (direction === "prev") {
                this.hoverIndex--;
                if (this.hoverIndex < 0) {
                  this.hoverIndex = this.options.length - 1;
                }
              }
              var option2 = this.options[this.hoverIndex];
              if (option2.disabled === true || option2.groupDisabled === true || !option2.visible) {
                this.navigateOptions(direction);
              }
              this.$nextTick(function() {
                return _this2.scrollToOption(_this2.hoverOption);
              });
            }
          }
        }
      };
      var selectvue_type_script_lang_js_ = {
        mixins: [emitter_default.a, locale_default.a, focus_default()("reference"), navigation_mixin],
        name: "ElSelect",
        componentName: "ElSelect",
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        provide: function provide2() {
          return {
            "select": this
          };
        },
        computed: {
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          readonly: function readonly2() {
            return !this.filterable || this.multiple || !Object(util_["isIE"])() && !Object(util_["isEdge"])() && !this.visible;
          },
          showClose: function showClose() {
            var hasValue = this.multiple ? Array.isArray(this.value) && this.value.length > 0 : this.value !== void 0 && this.value !== null && this.value !== "";
            var criteria = this.clearable && !this.selectDisabled && this.inputHovering && hasValue;
            return criteria;
          },
          iconClass: function iconClass() {
            return this.remote && this.filterable ? "" : this.visible ? "arrow-up is-reverse" : "arrow-up";
          },
          debounce: function debounce2() {
            return this.remote ? 300 : 0;
          },
          emptyText: function emptyText() {
            if (this.loading) {
              return this.loadingText || this.t("el.select.loading");
            } else {
              if (this.remote && this.query === "" && this.options.length === 0)
                return false;
              if (this.filterable && this.query && this.options.length > 0 && this.filteredOptionsCount === 0) {
                return this.noMatchText || this.t("el.select.noMatch");
              }
              if (this.options.length === 0) {
                return this.noDataText || this.t("el.select.noData");
              }
            }
            return null;
          },
          showNewOption: function showNewOption() {
            var _this = this;
            var hasExistingOption = this.options.filter(function(option2) {
              return !option2.created;
            }).some(function(option2) {
              return option2.currentLabel === _this.query;
            });
            return this.filterable && this.allowCreate && this.query !== "" && !hasExistingOption;
          },
          selectSize: function selectSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          },
          selectDisabled: function selectDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
          },
          collapseTagSize: function collapseTagSize() {
            return ["small", "mini"].indexOf(this.selectSize) > -1 ? "mini" : "small";
          },
          propPlaceholder: function propPlaceholder() {
            return typeof this.placeholder !== "undefined" ? this.placeholder : this.t("el.select.placeholder");
          }
        },
        components: {
          ElInput: input_default.a,
          ElSelectMenu: select_dropdown,
          ElOption: src_option,
          ElTag: tag_default.a,
          ElScrollbar: scrollbar_default.a
        },
        directives: { Clickoutside: clickoutside_default.a },
        props: {
          name: String,
          id: String,
          value: {
            required: true
          },
          autocomplete: {
            type: String,
            default: "off"
          },
          /** @Deprecated in next major version */
          autoComplete: {
            type: String,
            validator: function validator(val) {
              return true;
            }
          },
          automaticDropdown: Boolean,
          size: String,
          disabled: Boolean,
          clearable: Boolean,
          filterable: Boolean,
          allowCreate: Boolean,
          loading: Boolean,
          popperClass: String,
          remote: Boolean,
          loadingText: String,
          noMatchText: String,
          noDataText: String,
          remoteMethod: Function,
          filterMethod: Function,
          multiple: Boolean,
          multipleLimit: {
            type: Number,
            default: 0
          },
          placeholder: {
            type: String,
            required: false
          },
          defaultFirstOption: Boolean,
          reserveKeyword: Boolean,
          valueKey: {
            type: String,
            default: "value"
          },
          collapseTags: Boolean,
          popperAppendToBody: {
            type: Boolean,
            default: true
          }
        },
        data: function data() {
          return {
            options: [],
            cachedOptions: [],
            createdLabel: null,
            createdSelected: false,
            selected: this.multiple ? [] : {},
            inputLength: 20,
            inputWidth: 0,
            initialInputHeight: 0,
            cachedPlaceHolder: "",
            optionsCount: 0,
            filteredOptionsCount: 0,
            visible: false,
            softFocus: false,
            selectedLabel: "",
            hoverIndex: -1,
            query: "",
            previousQuery: null,
            inputHovering: false,
            currentPlaceholder: "",
            menuVisibleOnFocus: false,
            isOnComposition: false,
            isSilentBlur: false
          };
        },
        watch: {
          selectDisabled: function selectDisabled() {
            var _this2 = this;
            this.$nextTick(function() {
              _this2.resetInputHeight();
            });
          },
          propPlaceholder: function propPlaceholder(val) {
            this.cachedPlaceHolder = this.currentPlaceholder = val;
          },
          value: function value(val, oldVal) {
            if (this.multiple) {
              this.resetInputHeight();
              if (val && val.length > 0 || this.$refs.input && this.query !== "") {
                this.currentPlaceholder = "";
              } else {
                this.currentPlaceholder = this.cachedPlaceHolder;
              }
              if (this.filterable && !this.reserveKeyword) {
                this.query = "";
                this.handleQueryChange(this.query);
              }
            }
            this.setSelected();
            if (this.filterable && !this.multiple) {
              this.inputLength = 20;
            }
            if (!Object(util_["valueEquals"])(val, oldVal)) {
              this.dispatch("ElFormItem", "el.form.change", val);
            }
          },
          visible: function visible(val) {
            var _this3 = this;
            if (!val) {
              this.broadcast("ElSelectDropdown", "destroyPopper");
              if (this.$refs.input) {
                this.$refs.input.blur();
              }
              this.query = "";
              this.previousQuery = null;
              this.selectedLabel = "";
              this.inputLength = 20;
              this.menuVisibleOnFocus = false;
              this.resetHoverIndex();
              this.$nextTick(function() {
                if (_this3.$refs.input && _this3.$refs.input.value === "" && _this3.selected.length === 0) {
                  _this3.currentPlaceholder = _this3.cachedPlaceHolder;
                }
              });
              if (!this.multiple) {
                if (this.selected) {
                  if (this.filterable && this.allowCreate && this.createdSelected && this.createdLabel) {
                    this.selectedLabel = this.createdLabel;
                  } else {
                    this.selectedLabel = this.selected.currentLabel;
                  }
                  if (this.filterable)
                    this.query = this.selectedLabel;
                }
                if (this.filterable) {
                  this.currentPlaceholder = this.cachedPlaceHolder;
                }
              }
            } else {
              this.broadcast("ElSelectDropdown", "updatePopper");
              if (this.filterable) {
                this.query = this.remote ? "" : this.selectedLabel;
                this.handleQueryChange(this.query);
                if (this.multiple) {
                  this.$refs.input.focus();
                } else {
                  if (!this.remote) {
                    this.broadcast("ElOption", "queryChange", "");
                    this.broadcast("ElOptionGroup", "queryChange");
                  }
                  if (this.selectedLabel) {
                    this.currentPlaceholder = this.selectedLabel;
                    this.selectedLabel = "";
                  }
                }
              }
            }
            this.$emit("visible-change", val);
          },
          options: function options() {
            var _this4 = this;
            if (this.$isServer)
              return;
            this.$nextTick(function() {
              _this4.broadcast("ElSelectDropdown", "updatePopper");
            });
            if (this.multiple) {
              this.resetInputHeight();
            }
            var inputs = this.$el.querySelectorAll("input");
            if ([].indexOf.call(inputs, document.activeElement) === -1) {
              this.setSelected();
            }
            if (this.defaultFirstOption && (this.filterable || this.remote) && this.filteredOptionsCount) {
              this.checkDefaultFirstOption();
            }
          }
        },
        methods: {
          handleNavigate: function handleNavigate(direction) {
            if (this.isOnComposition)
              return;
            this.navigateOptions(direction);
          },
          handleComposition: function handleComposition(event) {
            var _this5 = this;
            var text = event.target.value;
            if (event.type === "compositionend") {
              this.isOnComposition = false;
              this.$nextTick(function(_) {
                return _this5.handleQueryChange(text);
              });
            } else {
              var lastCharacter = text[text.length - 1] || "";
              this.isOnComposition = !Object(shared_["isKorean"])(lastCharacter);
            }
          },
          handleQueryChange: function handleQueryChange(val) {
            var _this6 = this;
            if (this.previousQuery === val || this.isOnComposition)
              return;
            if (this.previousQuery === null && (typeof this.filterMethod === "function" || typeof this.remoteMethod === "function")) {
              this.previousQuery = val;
              return;
            }
            this.previousQuery = val;
            this.$nextTick(function() {
              if (_this6.visible)
                _this6.broadcast("ElSelectDropdown", "updatePopper");
            });
            this.hoverIndex = -1;
            if (this.multiple && this.filterable) {
              this.$nextTick(function() {
                var length = _this6.$refs.input.value.length * 15 + 20;
                _this6.inputLength = _this6.collapseTags ? Math.min(50, length) : length;
                _this6.managePlaceholder();
                _this6.resetInputHeight();
              });
            }
            if (this.remote && typeof this.remoteMethod === "function") {
              this.hoverIndex = -1;
              this.remoteMethod(val);
            } else if (typeof this.filterMethod === "function") {
              this.filterMethod(val);
              this.broadcast("ElOptionGroup", "queryChange");
            } else {
              this.filteredOptionsCount = this.optionsCount;
              this.broadcast("ElOption", "queryChange", val);
              this.broadcast("ElOptionGroup", "queryChange");
            }
            if (this.defaultFirstOption && (this.filterable || this.remote) && this.filteredOptionsCount) {
              this.checkDefaultFirstOption();
            }
          },
          scrollToOption: function scrollToOption(option2) {
            var target2 = Array.isArray(option2) && option2[0] ? option2[0].$el : option2.$el;
            if (this.$refs.popper && target2) {
              var menu = this.$refs.popper.$el.querySelector(".el-select-dropdown__wrap");
              scroll_into_view_default()(menu, target2);
            }
            this.$refs.scrollbar && this.$refs.scrollbar.handleScroll();
          },
          handleMenuEnter: function handleMenuEnter() {
            var _this7 = this;
            this.$nextTick(function() {
              return _this7.scrollToOption(_this7.selected);
            });
          },
          emitChange: function emitChange(val) {
            if (!Object(util_["valueEquals"])(this.value, val)) {
              this.$emit("change", val);
            }
          },
          getOption: function getOption(value) {
            var option2 = void 0;
            var isObject2 = Object.prototype.toString.call(value).toLowerCase() === "[object object]";
            var isNull = Object.prototype.toString.call(value).toLowerCase() === "[object null]";
            var isUndefined = Object.prototype.toString.call(value).toLowerCase() === "[object undefined]";
            for (var i = this.cachedOptions.length - 1; i >= 0; i--) {
              var cachedOption = this.cachedOptions[i];
              var isEqual = isObject2 ? Object(util_["getValueByPath"])(cachedOption.value, this.valueKey) === Object(util_["getValueByPath"])(value, this.valueKey) : cachedOption.value === value;
              if (isEqual) {
                option2 = cachedOption;
                break;
              }
            }
            if (option2)
              return option2;
            var label = !isObject2 && !isNull && !isUndefined ? String(value) : "";
            var newOption = {
              value,
              currentLabel: label
            };
            if (this.multiple) {
              newOption.hitState = false;
            }
            return newOption;
          },
          setSelected: function setSelected2() {
            var _this8 = this;
            if (!this.multiple) {
              var option2 = this.getOption(this.value);
              if (option2.created) {
                this.createdLabel = option2.currentLabel;
                this.createdSelected = true;
              } else {
                this.createdSelected = false;
              }
              this.selectedLabel = option2.currentLabel;
              this.selected = option2;
              if (this.filterable)
                this.query = this.selectedLabel;
              return;
            }
            var result = [];
            if (Array.isArray(this.value)) {
              this.value.forEach(function(value) {
                result.push(_this8.getOption(value));
              });
            }
            this.selected = result;
            this.$nextTick(function() {
              _this8.resetInputHeight();
            });
          },
          handleFocus: function handleFocus(event) {
            if (!this.softFocus) {
              if (this.automaticDropdown || this.filterable) {
                if (this.filterable && !this.visible) {
                  this.menuVisibleOnFocus = true;
                }
                this.visible = true;
              }
              this.$emit("focus", event);
            } else {
              this.softFocus = false;
            }
          },
          blur: function blur() {
            this.visible = false;
            this.$refs.reference.blur();
          },
          handleBlur: function handleBlur(event) {
            var _this9 = this;
            setTimeout(function() {
              if (_this9.isSilentBlur) {
                _this9.isSilentBlur = false;
              } else {
                _this9.$emit("blur", event);
              }
            }, 50);
            this.softFocus = false;
          },
          handleClearClick: function handleClearClick(event) {
            this.deleteSelected(event);
          },
          doDestroy: function doDestroy() {
            this.$refs.popper && this.$refs.popper.doDestroy();
          },
          handleClose: function handleClose() {
            this.visible = false;
          },
          toggleLastOptionHitState: function toggleLastOptionHitState(hit) {
            if (!Array.isArray(this.selected))
              return;
            var option2 = this.selected[this.selected.length - 1];
            if (!option2)
              return;
            if (hit === true || hit === false) {
              option2.hitState = hit;
              return hit;
            }
            option2.hitState = !option2.hitState;
            return option2.hitState;
          },
          deletePrevTag: function deletePrevTag(e) {
            if (e.target.value.length <= 0 && !this.toggleLastOptionHitState()) {
              var value = this.value.slice();
              value.pop();
              this.$emit("input", value);
              this.emitChange(value);
            }
          },
          managePlaceholder: function managePlaceholder() {
            if (this.currentPlaceholder !== "") {
              this.currentPlaceholder = this.$refs.input.value ? "" : this.cachedPlaceHolder;
            }
          },
          resetInputState: function resetInputState(e) {
            if (e.keyCode !== 8)
              this.toggleLastOptionHitState(false);
            this.inputLength = this.$refs.input.value.length * 15 + 20;
            this.resetInputHeight();
          },
          resetInputHeight: function resetInputHeight() {
            var _this10 = this;
            if (this.collapseTags && !this.filterable)
              return;
            this.$nextTick(function() {
              if (!_this10.$refs.reference)
                return;
              var inputChildNodes = _this10.$refs.reference.$el.childNodes;
              var input2 = [].filter.call(inputChildNodes, function(item) {
                return item.tagName === "INPUT";
              })[0];
              var tags = _this10.$refs.tags;
              var tagsHeight = tags ? Math.round(tags.getBoundingClientRect().height) : 0;
              var sizeInMap = _this10.initialInputHeight || 40;
              input2.style.height = _this10.selected.length === 0 ? sizeInMap + "px" : Math.max(tags ? tagsHeight + (tagsHeight > sizeInMap ? 6 : 0) : 0, sizeInMap) + "px";
              if (_this10.visible && _this10.emptyText !== false) {
                _this10.broadcast("ElSelectDropdown", "updatePopper");
              }
            });
          },
          resetHoverIndex: function resetHoverIndex() {
            var _this11 = this;
            setTimeout(function() {
              if (!_this11.multiple) {
                _this11.hoverIndex = _this11.options.indexOf(_this11.selected);
              } else {
                if (_this11.selected.length > 0) {
                  _this11.hoverIndex = Math.min.apply(null, _this11.selected.map(function(item) {
                    return _this11.options.indexOf(item);
                  }));
                } else {
                  _this11.hoverIndex = -1;
                }
              }
            }, 300);
          },
          handleOptionSelect: function handleOptionSelect(option2, byClick) {
            var _this12 = this;
            if (this.multiple) {
              var value = (this.value || []).slice();
              var optionIndex = this.getValueIndex(value, option2.value);
              if (optionIndex > -1) {
                value.splice(optionIndex, 1);
              } else if (this.multipleLimit <= 0 || value.length < this.multipleLimit) {
                value.push(option2.value);
              }
              this.$emit("input", value);
              this.emitChange(value);
              if (option2.created) {
                this.query = "";
                this.handleQueryChange("");
                this.inputLength = 20;
              }
              if (this.filterable)
                this.$refs.input.focus();
            } else {
              this.$emit("input", option2.value);
              this.emitChange(option2.value);
              this.visible = false;
            }
            this.isSilentBlur = byClick;
            this.setSoftFocus();
            if (this.visible)
              return;
            this.$nextTick(function() {
              _this12.scrollToOption(option2);
            });
          },
          setSoftFocus: function setSoftFocus() {
            this.softFocus = true;
            var input2 = this.$refs.input || this.$refs.reference;
            if (input2) {
              input2.focus();
            }
          },
          getValueIndex: function getValueIndex() {
            var arr = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
            var value = arguments[1];
            var isObject2 = Object.prototype.toString.call(value).toLowerCase() === "[object object]";
            if (!isObject2) {
              return arr.indexOf(value);
            } else {
              var valueKey = this.valueKey;
              var index2 = -1;
              arr.some(function(item, i) {
                if (Object(util_["getValueByPath"])(item, valueKey) === Object(util_["getValueByPath"])(value, valueKey)) {
                  index2 = i;
                  return true;
                }
                return false;
              });
              return index2;
            }
          },
          toggleMenu: function toggleMenu() {
            if (!this.selectDisabled) {
              if (this.menuVisibleOnFocus) {
                this.menuVisibleOnFocus = false;
              } else {
                this.visible = !this.visible;
              }
              if (this.visible) {
                (this.$refs.input || this.$refs.reference).focus();
              }
            }
          },
          selectOption: function selectOption() {
            if (!this.visible) {
              this.toggleMenu();
            } else {
              if (this.options[this.hoverIndex]) {
                this.handleOptionSelect(this.options[this.hoverIndex]);
              }
            }
          },
          deleteSelected: function deleteSelected(event) {
            event.stopPropagation();
            var value = this.multiple ? [] : "";
            this.$emit("input", value);
            this.emitChange(value);
            this.visible = false;
            this.$emit("clear");
          },
          deleteTag: function deleteTag(event, tag2) {
            var index2 = this.selected.indexOf(tag2);
            if (index2 > -1 && !this.selectDisabled) {
              var value = this.value.slice();
              value.splice(index2, 1);
              this.$emit("input", value);
              this.emitChange(value);
              this.$emit("remove-tag", tag2.value);
            }
            event.stopPropagation();
          },
          onInputChange: function onInputChange() {
            if (this.filterable && this.query !== this.selectedLabel) {
              this.query = this.selectedLabel;
              this.handleQueryChange(this.query);
            }
          },
          onOptionDestroy: function onOptionDestroy(index2) {
            if (index2 > -1) {
              this.optionsCount--;
              this.filteredOptionsCount--;
              this.options.splice(index2, 1);
            }
          },
          resetInputWidth: function resetInputWidth() {
            this.inputWidth = this.$refs.reference.$el.getBoundingClientRect().width;
          },
          handleResize: function handleResize() {
            this.resetInputWidth();
            if (this.multiple)
              this.resetInputHeight();
          },
          checkDefaultFirstOption: function checkDefaultFirstOption() {
            this.hoverIndex = -1;
            var hasCreated = false;
            for (var i = this.options.length - 1; i >= 0; i--) {
              if (this.options[i].created) {
                hasCreated = true;
                this.hoverIndex = i;
                break;
              }
            }
            if (hasCreated)
              return;
            for (var _i = 0; _i !== this.options.length; ++_i) {
              var option2 = this.options[_i];
              if (this.query) {
                if (!option2.disabled && !option2.groupDisabled && option2.visible) {
                  this.hoverIndex = _i;
                  break;
                }
              } else {
                if (option2.itemSelected) {
                  this.hoverIndex = _i;
                  break;
                }
              }
            }
          },
          getValueKey: function getValueKey(item) {
            if (Object.prototype.toString.call(item.value).toLowerCase() !== "[object object]") {
              return item.value;
            } else {
              return Object(util_["getValueByPath"])(item.value, this.valueKey);
            }
          }
        },
        created: function created() {
          var _this13 = this;
          this.cachedPlaceHolder = this.currentPlaceholder = this.propPlaceholder;
          if (this.multiple && !Array.isArray(this.value)) {
            this.$emit("input", []);
          }
          if (!this.multiple && Array.isArray(this.value)) {
            this.$emit("input", "");
          }
          this.debouncedOnInputChange = debounce_default()(this.debounce, function() {
            _this13.onInputChange();
          });
          this.debouncedQueryChange = debounce_default()(this.debounce, function(e) {
            _this13.handleQueryChange(e.target.value);
          });
          this.$on("handleOptionClick", this.handleOptionSelect);
          this.$on("setSelected", this.setSelected);
        },
        mounted: function mounted2() {
          var _this14 = this;
          if (this.multiple && Array.isArray(this.value) && this.value.length > 0) {
            this.currentPlaceholder = "";
          }
          Object(resize_event_["addResizeListener"])(this.$el, this.handleResize);
          var reference = this.$refs.reference;
          if (reference && reference.$el) {
            var sizeMap = {
              medium: 36,
              small: 32,
              mini: 28
            };
            var input2 = reference.$el.querySelector("input");
            this.initialInputHeight = input2.getBoundingClientRect().height || sizeMap[this.selectSize];
          }
          if (this.remote && this.multiple) {
            this.resetInputHeight();
          }
          this.$nextTick(function() {
            if (reference && reference.$el) {
              _this14.inputWidth = reference.$el.getBoundingClientRect().width;
            }
          });
          this.setSelected();
        },
        beforeDestroy: function beforeDestroy2() {
          if (this.$el && this.handleResize)
            Object(resize_event_["removeResizeListener"])(this.$el, this.handleResize);
        }
      };
      var src_selectvue_type_script_lang_js_ = selectvue_type_script_lang_js_;
      var select_component = normalizeComponent2(
        src_selectvue_type_script_lang_js_,
        selectvue_type_template_id_0e4aade6_render,
        selectvue_type_template_id_0e4aade6_staticRenderFns,
        false,
        null,
        null,
        null
      );
      select_component.options.__file = "packages/select/src/select.vue";
      var src_select = select_component.exports;
      src_select.install = function(Vue2) {
        Vue2.component(src_select.name, src_select);
      };
      var packages_select = src_select;
      src_option.install = function(Vue2) {
        Vue2.component(src_option.name, src_option);
      };
      var packages_option = src_option;
      var option_groupvue_type_template_id_6685e5de_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "ul",
          {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.visible,
                expression: "visible"
              }
            ],
            staticClass: "el-select-group__wrap"
          },
          [
            _c("li", { staticClass: "el-select-group__title" }, [
              _vm._v(_vm._s(_vm.label))
            ]),
            _c("li", [
              _c("ul", { staticClass: "el-select-group" }, [_vm._t("default")], 2)
            ])
          ]
        );
      };
      var option_groupvue_type_template_id_6685e5de_staticRenderFns = [];
      option_groupvue_type_template_id_6685e5de_render._withStripped = true;
      var option_groupvue_type_script_lang_js_ = {
        mixins: [emitter_default.a],
        name: "ElOptionGroup",
        componentName: "ElOptionGroup",
        props: {
          label: String,
          disabled: {
            type: Boolean,
            default: false
          }
        },
        data: function data() {
          return {
            visible: true
          };
        },
        watch: {
          disabled: function disabled(val) {
            this.broadcast("ElOption", "handleGroupDisabled", val);
          }
        },
        methods: {
          queryChange: function queryChange() {
            this.visible = this.$children && Array.isArray(this.$children) && this.$children.some(function(option2) {
              return option2.visible === true;
            });
          }
        },
        created: function created() {
          this.$on("queryChange", this.queryChange);
        },
        mounted: function mounted2() {
          if (this.disabled) {
            this.broadcast("ElOption", "handleGroupDisabled", this.disabled);
          }
        }
      };
      var src_option_groupvue_type_script_lang_js_ = option_groupvue_type_script_lang_js_;
      var option_group_component = normalizeComponent2(
        src_option_groupvue_type_script_lang_js_,
        option_groupvue_type_template_id_6685e5de_render,
        option_groupvue_type_template_id_6685e5de_staticRenderFns,
        false,
        null,
        null,
        null
      );
      option_group_component.options.__file = "packages/select/src/option-group.vue";
      var option_group = option_group_component.exports;
      option_group.install = function(Vue2) {
        Vue2.component(option_group.name, option_group);
      };
      var packages_option_group = option_group;
      var buttonvue_type_template_id_ca859fb4_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "button",
          {
            staticClass: "el-button",
            class: [
              _vm.type ? "el-button--" + _vm.type : "",
              _vm.buttonSize ? "el-button--" + _vm.buttonSize : "",
              {
                "is-disabled": _vm.buttonDisabled,
                "is-loading": _vm.loading,
                "is-plain": _vm.plain,
                "is-round": _vm.round,
                "is-circle": _vm.circle
              }
            ],
            attrs: {
              disabled: _vm.buttonDisabled || _vm.loading,
              autofocus: _vm.autofocus,
              type: _vm.nativeType
            },
            on: { click: _vm.handleClick }
          },
          [
            _vm.loading ? _c("i", { staticClass: "el-icon-loading" }) : _vm._e(),
            _vm.icon && !_vm.loading ? _c("i", { class: _vm.icon }) : _vm._e(),
            _vm.$slots.default ? _c("span", [_vm._t("default")], 2) : _vm._e()
          ]
        );
      };
      var buttonvue_type_template_id_ca859fb4_staticRenderFns = [];
      buttonvue_type_template_id_ca859fb4_render._withStripped = true;
      var buttonvue_type_script_lang_js_ = {
        name: "ElButton",
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        props: {
          type: {
            type: String,
            default: "default"
          },
          size: String,
          icon: {
            type: String,
            default: ""
          },
          nativeType: {
            type: String,
            default: "button"
          },
          loading: Boolean,
          disabled: Boolean,
          plain: Boolean,
          autofocus: Boolean,
          round: Boolean,
          circle: Boolean
        },
        computed: {
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          buttonSize: function buttonSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          },
          buttonDisabled: function buttonDisabled() {
            return this.$options.propsData.hasOwnProperty("disabled") ? this.disabled : (this.elForm || {}).disabled;
          }
        },
        methods: {
          handleClick: function handleClick(evt) {
            this.$emit("click", evt);
          }
        }
      };
      var src_buttonvue_type_script_lang_js_ = buttonvue_type_script_lang_js_;
      var button_component = normalizeComponent2(
        src_buttonvue_type_script_lang_js_,
        buttonvue_type_template_id_ca859fb4_render,
        buttonvue_type_template_id_ca859fb4_staticRenderFns,
        false,
        null,
        null,
        null
      );
      button_component.options.__file = "packages/button/src/button.vue";
      var src_button = button_component.exports;
      src_button.install = function(Vue2) {
        Vue2.component(src_button.name, src_button);
      };
      var packages_button = src_button;
      var button_groupvue_type_template_id_3d8661d0_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", { staticClass: "el-button-group" }, [_vm._t("default")], 2);
      };
      var button_groupvue_type_template_id_3d8661d0_staticRenderFns = [];
      button_groupvue_type_template_id_3d8661d0_render._withStripped = true;
      var button_groupvue_type_script_lang_js_ = {
        name: "ElButtonGroup"
      };
      var src_button_groupvue_type_script_lang_js_ = button_groupvue_type_script_lang_js_;
      var button_group_component = normalizeComponent2(
        src_button_groupvue_type_script_lang_js_,
        button_groupvue_type_template_id_3d8661d0_render,
        button_groupvue_type_template_id_3d8661d0_staticRenderFns,
        false,
        null,
        null,
        null
      );
      button_group_component.options.__file = "packages/button/src/button-group.vue";
      var button_group = button_group_component.exports;
      button_group.install = function(Vue2) {
        Vue2.component(button_group.name, button_group);
      };
      var packages_button_group = button_group;
      var tablevue_type_template_id_493fe34e_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-table",
            class: [
              {
                "el-table--fit": _vm.fit,
                "el-table--striped": _vm.stripe,
                "el-table--border": _vm.border || _vm.isGroup,
                "el-table--hidden": _vm.isHidden,
                "el-table--group": _vm.isGroup,
                "el-table--fluid-height": _vm.maxHeight,
                "el-table--scrollable-x": _vm.layout.scrollX,
                "el-table--scrollable-y": _vm.layout.scrollY,
                "el-table--enable-row-hover": !_vm.store.states.isComplex,
                "el-table--enable-row-transition": (_vm.store.states.data || []).length !== 0 && (_vm.store.states.data || []).length < 100
              },
              _vm.tableSize ? "el-table--" + _vm.tableSize : ""
            ],
            on: {
              mouseleave: function($event) {
                _vm.handleMouseLeave($event);
              }
            }
          },
          [
            _c(
              "div",
              { ref: "hiddenColumns", staticClass: "hidden-columns" },
              [_vm._t("default")],
              2
            ),
            _vm.showHeader ? _c(
              "div",
              {
                directives: [
                  {
                    name: "mousewheel",
                    rawName: "v-mousewheel",
                    value: _vm.handleHeaderFooterMousewheel,
                    expression: "handleHeaderFooterMousewheel"
                  }
                ],
                ref: "headerWrapper",
                staticClass: "el-table__header-wrapper"
              },
              [
                _c("table-header", {
                  ref: "tableHeader",
                  style: {
                    width: _vm.layout.bodyWidth ? _vm.layout.bodyWidth + "px" : ""
                  },
                  attrs: {
                    store: _vm.store,
                    border: _vm.border,
                    "default-sort": _vm.defaultSort
                  }
                })
              ],
              1
            ) : _vm._e(),
            _c(
              "div",
              {
                ref: "bodyWrapper",
                staticClass: "el-table__body-wrapper",
                class: [
                  _vm.layout.scrollX ? "is-scrolling-" + _vm.scrollPosition : "is-scrolling-none"
                ],
                style: [_vm.bodyHeight]
              },
              [
                _c("table-body", {
                  style: {
                    width: _vm.bodyWidth
                  },
                  attrs: {
                    context: _vm.context,
                    store: _vm.store,
                    stripe: _vm.stripe,
                    "row-class-name": _vm.rowClassName,
                    "row-style": _vm.rowStyle,
                    highlight: _vm.highlightCurrentRow
                  }
                }),
                !_vm.data || _vm.data.length === 0 ? _c(
                  "div",
                  {
                    ref: "emptyBlock",
                    staticClass: "el-table__empty-block",
                    style: _vm.emptyBlockStyle
                  },
                  [
                    _c(
                      "span",
                      { staticClass: "el-table__empty-text" },
                      [
                        _vm._t("empty", [
                          _vm._v(
                            _vm._s(_vm.emptyText || _vm.t("el.table.emptyText"))
                          )
                        ])
                      ],
                      2
                    )
                  ]
                ) : _vm._e(),
                _vm.$slots.append ? _c(
                  "div",
                  {
                    ref: "appendWrapper",
                    staticClass: "el-table__append-wrapper"
                  },
                  [_vm._t("append")],
                  2
                ) : _vm._e()
              ],
              1
            ),
            _vm.showSummary ? _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.data && _vm.data.length > 0,
                    expression: "data && data.length > 0"
                  },
                  {
                    name: "mousewheel",
                    rawName: "v-mousewheel",
                    value: _vm.handleHeaderFooterMousewheel,
                    expression: "handleHeaderFooterMousewheel"
                  }
                ],
                ref: "footerWrapper",
                staticClass: "el-table__footer-wrapper"
              },
              [
                _c("table-footer", {
                  style: {
                    width: _vm.layout.bodyWidth ? _vm.layout.bodyWidth + "px" : ""
                  },
                  attrs: {
                    store: _vm.store,
                    border: _vm.border,
                    "sum-text": _vm.sumText || _vm.t("el.table.sumText"),
                    "summary-method": _vm.summaryMethod,
                    "default-sort": _vm.defaultSort
                  }
                })
              ],
              1
            ) : _vm._e(),
            _vm.fixedColumns.length > 0 ? _c(
              "div",
              {
                directives: [
                  {
                    name: "mousewheel",
                    rawName: "v-mousewheel",
                    value: _vm.handleFixedMousewheel,
                    expression: "handleFixedMousewheel"
                  }
                ],
                ref: "fixedWrapper",
                staticClass: "el-table__fixed",
                style: [
                  {
                    width: _vm.layout.fixedWidth ? _vm.layout.fixedWidth + "px" : ""
                  },
                  _vm.fixedHeight
                ]
              },
              [
                _vm.showHeader ? _c(
                  "div",
                  {
                    ref: "fixedHeaderWrapper",
                    staticClass: "el-table__fixed-header-wrapper"
                  },
                  [
                    _c("table-header", {
                      ref: "fixedTableHeader",
                      style: {
                        width: _vm.bodyWidth
                      },
                      attrs: {
                        fixed: "left",
                        border: _vm.border,
                        store: _vm.store
                      }
                    })
                  ],
                  1
                ) : _vm._e(),
                _c(
                  "div",
                  {
                    ref: "fixedBodyWrapper",
                    staticClass: "el-table__fixed-body-wrapper",
                    style: [
                      {
                        top: _vm.layout.headerHeight + "px"
                      },
                      _vm.fixedBodyHeight
                    ]
                  },
                  [
                    _c("table-body", {
                      style: {
                        width: _vm.bodyWidth
                      },
                      attrs: {
                        fixed: "left",
                        store: _vm.store,
                        stripe: _vm.stripe,
                        highlight: _vm.highlightCurrentRow,
                        "row-class-name": _vm.rowClassName,
                        "row-style": _vm.rowStyle
                      }
                    }),
                    _vm.$slots.append ? _c("div", {
                      staticClass: "el-table__append-gutter",
                      style: { height: _vm.layout.appendHeight + "px" }
                    }) : _vm._e()
                  ],
                  1
                ),
                _vm.showSummary ? _c(
                  "div",
                  {
                    directives: [
                      {
                        name: "show",
                        rawName: "v-show",
                        value: _vm.data && _vm.data.length > 0,
                        expression: "data && data.length > 0"
                      }
                    ],
                    ref: "fixedFooterWrapper",
                    staticClass: "el-table__fixed-footer-wrapper"
                  },
                  [
                    _c("table-footer", {
                      style: {
                        width: _vm.bodyWidth
                      },
                      attrs: {
                        fixed: "left",
                        border: _vm.border,
                        "sum-text": _vm.sumText || _vm.t("el.table.sumText"),
                        "summary-method": _vm.summaryMethod,
                        store: _vm.store
                      }
                    })
                  ],
                  1
                ) : _vm._e()
              ]
            ) : _vm._e(),
            _vm.rightFixedColumns.length > 0 ? _c(
              "div",
              {
                directives: [
                  {
                    name: "mousewheel",
                    rawName: "v-mousewheel",
                    value: _vm.handleFixedMousewheel,
                    expression: "handleFixedMousewheel"
                  }
                ],
                ref: "rightFixedWrapper",
                staticClass: "el-table__fixed-right",
                style: [
                  {
                    width: _vm.layout.rightFixedWidth ? _vm.layout.rightFixedWidth + "px" : "",
                    right: _vm.layout.scrollY ? (_vm.border ? _vm.layout.gutterWidth : _vm.layout.gutterWidth || 0) + "px" : ""
                  },
                  _vm.fixedHeight
                ]
              },
              [
                _vm.showHeader ? _c(
                  "div",
                  {
                    ref: "rightFixedHeaderWrapper",
                    staticClass: "el-table__fixed-header-wrapper"
                  },
                  [
                    _c("table-header", {
                      ref: "rightFixedTableHeader",
                      style: {
                        width: _vm.bodyWidth
                      },
                      attrs: {
                        fixed: "right",
                        border: _vm.border,
                        store: _vm.store
                      }
                    })
                  ],
                  1
                ) : _vm._e(),
                _c(
                  "div",
                  {
                    ref: "rightFixedBodyWrapper",
                    staticClass: "el-table__fixed-body-wrapper",
                    style: [
                      {
                        top: _vm.layout.headerHeight + "px"
                      },
                      _vm.fixedBodyHeight
                    ]
                  },
                  [
                    _c("table-body", {
                      style: {
                        width: _vm.bodyWidth
                      },
                      attrs: {
                        fixed: "right",
                        store: _vm.store,
                        stripe: _vm.stripe,
                        "row-class-name": _vm.rowClassName,
                        "row-style": _vm.rowStyle,
                        highlight: _vm.highlightCurrentRow
                      }
                    }),
                    _vm.$slots.append ? _c("div", {
                      staticClass: "el-table__append-gutter",
                      style: { height: _vm.layout.appendHeight + "px" }
                    }) : _vm._e()
                  ],
                  1
                ),
                _vm.showSummary ? _c(
                  "div",
                  {
                    directives: [
                      {
                        name: "show",
                        rawName: "v-show",
                        value: _vm.data && _vm.data.length > 0,
                        expression: "data && data.length > 0"
                      }
                    ],
                    ref: "rightFixedFooterWrapper",
                    staticClass: "el-table__fixed-footer-wrapper"
                  },
                  [
                    _c("table-footer", {
                      style: {
                        width: _vm.bodyWidth
                      },
                      attrs: {
                        fixed: "right",
                        border: _vm.border,
                        "sum-text": _vm.sumText || _vm.t("el.table.sumText"),
                        "summary-method": _vm.summaryMethod,
                        store: _vm.store
                      }
                    })
                  ],
                  1
                ) : _vm._e()
              ]
            ) : _vm._e(),
            _vm.rightFixedColumns.length > 0 ? _c("div", {
              ref: "rightFixedPatch",
              staticClass: "el-table__fixed-right-patch",
              style: {
                width: _vm.layout.scrollY ? _vm.layout.gutterWidth + "px" : "0",
                height: _vm.layout.headerHeight + "px"
              }
            }) : _vm._e(),
            _c("div", {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.resizeProxyVisible,
                  expression: "resizeProxyVisible"
                }
              ],
              ref: "resizeProxy",
              staticClass: "el-table__column-resize-proxy"
            })
          ]
        );
      };
      var tablevue_type_template_id_493fe34e_staticRenderFns = [];
      tablevue_type_template_id_493fe34e_render._withStripped = true;
      var checkbox_ = __webpack_require__(14);
      var checkbox_default = /* @__PURE__ */ __webpack_require__.n(checkbox_);
      var external_throttle_debounce_ = __webpack_require__(36);
      var external_normalize_wheel_ = __webpack_require__(39);
      var external_normalize_wheel_default = /* @__PURE__ */ __webpack_require__.n(external_normalize_wheel_);
      var isFirefox = typeof navigator !== "undefined" && navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
      var mousewheel_mousewheel = function mousewheel(element, callback) {
        if (element && element.addEventListener) {
          element.addEventListener(isFirefox ? "DOMMouseScroll" : "mousewheel", function(event) {
            var normalized = external_normalize_wheel_default()(event);
            callback && callback.apply(this, [event, normalized]);
          });
        }
      };
      var directives_mousewheel = {
        bind: function bind2(el, binding) {
          mousewheel_mousewheel(el, binding.value);
        }
      };
      var external_vue_ = __webpack_require__(6);
      var external_vue_default = /* @__PURE__ */ __webpack_require__.n(external_vue_);
      var util_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var getCell = function getCell2(event) {
        var cell = event.target;
        while (cell && cell.tagName.toUpperCase() !== "HTML") {
          if (cell.tagName.toUpperCase() === "TD") {
            return cell;
          }
          cell = cell.parentNode;
        }
        return null;
      };
      var util_isObject = function isObject2(obj) {
        return obj !== null && (typeof obj === "undefined" ? "undefined" : util_typeof(obj)) === "object";
      };
      var util_orderBy = function orderBy(array3, sortKey, reverse, sortMethod, sortBy) {
        if (!sortKey && !sortMethod && (!sortBy || Array.isArray(sortBy) && !sortBy.length)) {
          return array3;
        }
        if (typeof reverse === "string") {
          reverse = reverse === "descending" ? -1 : 1;
        } else {
          reverse = reverse && reverse < 0 ? -1 : 1;
        }
        var getKey = sortMethod ? null : function(value, index2) {
          if (sortBy) {
            if (!Array.isArray(sortBy)) {
              sortBy = [sortBy];
            }
            return sortBy.map(function(by) {
              if (typeof by === "string") {
                return Object(util_["getValueByPath"])(value, by);
              } else {
                return by(value, index2, array3);
              }
            });
          }
          if (sortKey !== "$key") {
            if (util_isObject(value) && "$value" in value)
              value = value.$value;
          }
          return [util_isObject(value) ? Object(util_["getValueByPath"])(value, sortKey) : value];
        };
        var compare = function compare2(a, b) {
          if (sortMethod) {
            return sortMethod(a.value, b.value);
          }
          for (var i = 0, len = a.key.length; i < len; i++) {
            if (a.key[i] < b.key[i]) {
              return -1;
            }
            if (a.key[i] > b.key[i]) {
              return 1;
            }
          }
          return 0;
        };
        return array3.map(function(value, index2) {
          return {
            value,
            index: index2,
            key: getKey ? getKey(value, index2) : null
          };
        }).sort(function(a, b) {
          var order = compare(a, b);
          if (!order) {
            order = a.index - b.index;
          }
          return order * reverse;
        }).map(function(item) {
          return item.value;
        });
      };
      var getColumnById = function getColumnById2(table, columnId) {
        var column = null;
        table.columns.forEach(function(item) {
          if (item.id === columnId) {
            column = item;
          }
        });
        return column;
      };
      var getColumnByKey = function getColumnByKey2(table, columnKey) {
        var column = null;
        for (var i = 0; i < table.columns.length; i++) {
          var item = table.columns[i];
          if (item.columnKey === columnKey) {
            column = item;
            break;
          }
        }
        return column;
      };
      var getColumnByCell = function getColumnByCell2(table, cell) {
        var matches2 = (cell.className || "").match(/el-table_[^\s]+/gm);
        if (matches2) {
          return getColumnById(table, matches2[0]);
        }
        return null;
      };
      var getRowIdentity = function getRowIdentity2(row, rowKey) {
        if (!row)
          throw new Error("row is required when get row identity");
        if (typeof rowKey === "string") {
          if (rowKey.indexOf(".") < 0) {
            return row[rowKey];
          }
          var key = rowKey.split(".");
          var current = row;
          for (var i = 0; i < key.length; i++) {
            current = current[key[i]];
          }
          return current;
        } else if (typeof rowKey === "function") {
          return rowKey.call(null, row);
        }
      };
      var getKeysMap = function getKeysMap2(array3, rowKey) {
        var arrayMap = {};
        (array3 || []).forEach(function(row, index2) {
          arrayMap[getRowIdentity(row, rowKey)] = { row, index: index2 };
        });
        return arrayMap;
      };
      function hasOwn2(obj, key) {
        return Object.prototype.hasOwnProperty.call(obj, key);
      }
      function mergeOptions2(defaults, config2) {
        var options = {};
        var key = void 0;
        for (key in defaults) {
          options[key] = defaults[key];
        }
        for (key in config2) {
          if (hasOwn2(config2, key)) {
            var value = config2[key];
            if (typeof value !== "undefined") {
              options[key] = value;
            }
          }
        }
        return options;
      }
      function parseWidth(width) {
        if (width !== void 0) {
          width = parseInt(width, 10);
          if (isNaN(width)) {
            width = null;
          }
        }
        return width;
      }
      function parseMinWidth(minWidth) {
        if (typeof minWidth !== "undefined") {
          minWidth = parseWidth(minWidth);
          if (isNaN(minWidth)) {
            minWidth = 80;
          }
        }
        return minWidth;
      }
      function parseHeight(height) {
        if (typeof height === "number") {
          return height;
        }
        if (typeof height === "string") {
          if (/^\d+(?:px)?$/.test(height)) {
            return parseInt(height, 10);
          } else {
            return height;
          }
        }
        return null;
      }
      function compose() {
        for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
          funcs[_key] = arguments[_key];
        }
        if (funcs.length === 0) {
          return function(arg) {
            return arg;
          };
        }
        if (funcs.length === 1) {
          return funcs[0];
        }
        return funcs.reduce(function(a, b) {
          return function() {
            return a(b.apply(void 0, arguments));
          };
        });
      }
      function toggleRowStatus(statusArr, row, newVal) {
        var changed = false;
        var index2 = statusArr.indexOf(row);
        var included = index2 !== -1;
        var addRow = function addRow2() {
          statusArr.push(row);
          changed = true;
        };
        var removeRow = function removeRow2() {
          statusArr.splice(index2, 1);
          changed = true;
        };
        if (typeof newVal === "boolean") {
          if (newVal && !included) {
            addRow();
          } else if (!newVal && included) {
            removeRow();
          }
        } else {
          if (included) {
            removeRow();
          } else {
            addRow();
          }
        }
        return changed;
      }
      function walkTreeNode(root2, cb) {
        var childrenKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "children";
        var lazyKey = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "hasChildren";
        var isNil = function isNil2(array3) {
          return !(Array.isArray(array3) && array3.length);
        };
        function _walker(parent, children, level) {
          cb(parent, children, level);
          children.forEach(function(item) {
            if (item[lazyKey]) {
              cb(item, null, level + 1);
              return;
            }
            var children2 = item[childrenKey];
            if (!isNil(children2)) {
              _walker(item, children2, level + 1);
            }
          });
        }
        root2.forEach(function(item) {
          if (item[lazyKey]) {
            cb(item, null, 0);
            return;
          }
          var children = item[childrenKey];
          if (!isNil(children)) {
            _walker(item, children, 0);
          }
        });
      }
      var expand = {
        data: function data() {
          return {
            states: {
              defaultExpandAll: false,
              expandRows: []
            }
          };
        },
        methods: {
          updateExpandRows: function updateExpandRows() {
            var _states = this.states, _states$data = _states.data, data = _states$data === void 0 ? [] : _states$data, rowKey = _states.rowKey, defaultExpandAll = _states.defaultExpandAll, expandRows = _states.expandRows;
            if (defaultExpandAll) {
              this.states.expandRows = data.slice();
            } else if (rowKey) {
              var expandRowsMap = getKeysMap(expandRows, rowKey);
              this.states.expandRows = data.reduce(function(prev, row) {
                var rowId = getRowIdentity(row, rowKey);
                var rowInfo = expandRowsMap[rowId];
                if (rowInfo) {
                  prev.push(row);
                }
                return prev;
              }, []);
            } else {
              this.states.expandRows = [];
            }
          },
          toggleRowExpansion: function toggleRowExpansion(row, expanded) {
            var changed = toggleRowStatus(this.states.expandRows, row, expanded);
            if (changed) {
              this.table.$emit("expand-change", row, this.states.expandRows.slice());
              this.scheduleLayout();
            }
          },
          setExpandRowKeys: function setExpandRowKeys(rowKeys) {
            this.assertRowKey();
            var _states2 = this.states, data = _states2.data, rowKey = _states2.rowKey;
            var keysMap = getKeysMap(data, rowKey);
            this.states.expandRows = rowKeys.reduce(function(prev, cur) {
              var info = keysMap[cur];
              if (info) {
                prev.push(info.row);
              }
              return prev;
            }, []);
          },
          isRowExpanded: function isRowExpanded(row) {
            var _states3 = this.states, _states3$expandRows = _states3.expandRows, expandRows = _states3$expandRows === void 0 ? [] : _states3$expandRows, rowKey = _states3.rowKey;
            if (rowKey) {
              var expandMap = getKeysMap(expandRows, rowKey);
              return !!expandMap[getRowIdentity(row, rowKey)];
            }
            return expandRows.indexOf(row) !== -1;
          }
        }
      };
      var store_current = {
        data: function data() {
          return {
            states: {
              // 不可响应的，设置 currentRowKey 时，data 不一定存在，也许无法算出正确的 currentRow
              // 把该值缓存一下，当用户点击修改 currentRow 时，把该值重置为 null
              _currentRowKey: null,
              currentRow: null
            }
          };
        },
        methods: {
          setCurrentRowKey: function setCurrentRowKey(key) {
            this.assertRowKey();
            this.states._currentRowKey = key;
            this.setCurrentRowByKey(key);
          },
          restoreCurrentRowKey: function restoreCurrentRowKey() {
            this.states._currentRowKey = null;
          },
          setCurrentRowByKey: function setCurrentRowByKey(key) {
            var states = this.states;
            var _states$data = states.data, data = _states$data === void 0 ? [] : _states$data, rowKey = states.rowKey;
            var currentRow = null;
            if (rowKey) {
              currentRow = Object(util_["arrayFind"])(data, function(item) {
                return getRowIdentity(item, rowKey) === key;
              });
            }
            states.currentRow = currentRow;
          },
          updateCurrentRow: function updateCurrentRow(currentRow) {
            var states = this.states, table = this.table;
            var oldCurrentRow = states.currentRow;
            if (currentRow && currentRow !== oldCurrentRow) {
              states.currentRow = currentRow;
              table.$emit("current-change", currentRow, oldCurrentRow);
              return;
            }
            if (!currentRow && oldCurrentRow) {
              states.currentRow = null;
              table.$emit("current-change", null, oldCurrentRow);
            }
          },
          updateCurrentRowData: function updateCurrentRowData() {
            var states = this.states, table = this.table;
            var rowKey = states.rowKey, _currentRowKey = states._currentRowKey;
            var data = states.data || [];
            var oldCurrentRow = states.currentRow;
            if (data.indexOf(oldCurrentRow) === -1 && oldCurrentRow) {
              if (rowKey) {
                var currentRowKey = getRowIdentity(oldCurrentRow, rowKey);
                this.setCurrentRowByKey(currentRowKey);
              } else {
                states.currentRow = null;
              }
              if (states.currentRow === null) {
                table.$emit("current-change", null, oldCurrentRow);
              }
            } else if (_currentRowKey) {
              this.setCurrentRowByKey(_currentRowKey);
              this.restoreCurrentRowKey();
            }
          }
        }
      };
      var _extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target2[key] = source[key];
            }
          }
        }
        return target2;
      };
      var tree = {
        data: function data() {
          return {
            states: {
              // defaultExpandAll 存在于 expand.js 中，这里不重复添加
              // 在展开行中，expandRowKeys 会被转化成 expandRows，expandRowKeys 这个属性只是记录了 TreeTable 行的展开
              // TODO: 拆分为独立的 TreeTable，统一用法
              expandRowKeys: [],
              treeData: {},
              indent: 16,
              lazy: false,
              lazyTreeNodeMap: {},
              lazyColumnIdentifier: "hasChildren",
              childrenColumnName: "children"
            }
          };
        },
        computed: {
          // 嵌入型的数据，watch 无法是检测到变化 https://github.com/ElemeFE/element/issues/14998
          // TODO: 使用 computed 解决该问题，是否会造成性能问题？
          // @return { id: { level, children } }
          normalizedData: function normalizedData() {
            if (!this.states.rowKey)
              return {};
            var data = this.states.data || [];
            return this.normalize(data);
          },
          // @return { id: { children } }
          // 针对懒加载的情形，不处理嵌套数据
          normalizedLazyNode: function normalizedLazyNode() {
            var _states = this.states, rowKey = _states.rowKey, lazyTreeNodeMap = _states.lazyTreeNodeMap, lazyColumnIdentifier = _states.lazyColumnIdentifier;
            var keys2 = Object.keys(lazyTreeNodeMap);
            var res = {};
            if (!keys2.length)
              return res;
            keys2.forEach(function(key) {
              if (lazyTreeNodeMap[key].length) {
                var item = { children: [] };
                lazyTreeNodeMap[key].forEach(function(row) {
                  var currentRowKey = getRowIdentity(row, rowKey);
                  item.children.push(currentRowKey);
                  if (row[lazyColumnIdentifier] && !res[currentRowKey]) {
                    res[currentRowKey] = { children: [] };
                  }
                });
                res[key] = item;
              }
            });
            return res;
          }
        },
        watch: {
          normalizedData: "updateTreeData",
          normalizedLazyNode: "updateTreeData"
        },
        methods: {
          normalize: function normalize2(data) {
            var _states2 = this.states, childrenColumnName = _states2.childrenColumnName, lazyColumnIdentifier = _states2.lazyColumnIdentifier, rowKey = _states2.rowKey, lazy = _states2.lazy;
            var res = {};
            walkTreeNode(data, function(parent, children, level) {
              var parentId = getRowIdentity(parent, rowKey);
              if (Array.isArray(children)) {
                res[parentId] = {
                  children: children.map(function(row) {
                    return getRowIdentity(row, rowKey);
                  }),
                  level
                };
              } else if (lazy) {
                res[parentId] = {
                  children: [],
                  lazy: true,
                  level
                };
              }
            }, childrenColumnName, lazyColumnIdentifier);
            return res;
          },
          updateTreeData: function updateTreeData() {
            var nested = this.normalizedData;
            var normalizedLazyNode = this.normalizedLazyNode;
            var keys2 = Object.keys(nested);
            var newTreeData = {};
            if (keys2.length) {
              var _states3 = this.states, oldTreeData = _states3.treeData, defaultExpandAll = _states3.defaultExpandAll, expandRowKeys = _states3.expandRowKeys, lazy = _states3.lazy;
              var rootLazyRowKeys = [];
              var getExpanded = function getExpanded2(oldValue, key) {
                var included = defaultExpandAll || expandRowKeys && expandRowKeys.indexOf(key) !== -1;
                return !!(oldValue && oldValue.expanded || included);
              };
              keys2.forEach(function(key) {
                var oldValue = oldTreeData[key];
                var newValue = _extends({}, nested[key]);
                newValue.expanded = getExpanded(oldValue, key);
                if (newValue.lazy) {
                  var _ref = oldValue || {}, _ref$loaded = _ref.loaded, loaded = _ref$loaded === void 0 ? false : _ref$loaded, _ref$loading = _ref.loading, loading2 = _ref$loading === void 0 ? false : _ref$loading;
                  newValue.loaded = !!loaded;
                  newValue.loading = !!loading2;
                  rootLazyRowKeys.push(key);
                }
                newTreeData[key] = newValue;
              });
              var lazyKeys = Object.keys(normalizedLazyNode);
              if (lazy && lazyKeys.length && rootLazyRowKeys.length) {
                lazyKeys.forEach(function(key) {
                  var oldValue = oldTreeData[key];
                  var lazyNodeChildren = normalizedLazyNode[key].children;
                  if (rootLazyRowKeys.indexOf(key) !== -1) {
                    if (newTreeData[key].children.length !== 0) {
                      throw new Error("[ElTable]children must be an empty array.");
                    }
                    newTreeData[key].children = lazyNodeChildren;
                  } else {
                    var _ref2 = oldValue || {}, _ref2$loaded = _ref2.loaded, loaded = _ref2$loaded === void 0 ? false : _ref2$loaded, _ref2$loading = _ref2.loading, loading2 = _ref2$loading === void 0 ? false : _ref2$loading;
                    newTreeData[key] = {
                      lazy: true,
                      loaded: !!loaded,
                      loading: !!loading2,
                      expanded: getExpanded(oldValue, key),
                      children: lazyNodeChildren,
                      level: ""
                    };
                  }
                });
              }
            }
            this.states.treeData = newTreeData;
            this.updateTableScrollY();
          },
          updateTreeExpandKeys: function updateTreeExpandKeys(value) {
            this.states.expandRowKeys = value;
            this.updateTreeData();
          },
          toggleTreeExpansion: function toggleTreeExpansion(row, expanded) {
            this.assertRowKey();
            var _states4 = this.states, rowKey = _states4.rowKey, treeData = _states4.treeData;
            var id2 = getRowIdentity(row, rowKey);
            var data = id2 && treeData[id2];
            if (id2 && data && "expanded" in data) {
              var oldExpanded = data.expanded;
              expanded = typeof expanded === "undefined" ? !data.expanded : expanded;
              treeData[id2].expanded = expanded;
              if (oldExpanded !== expanded) {
                this.table.$emit("expand-change", row, expanded);
              }
              this.updateTableScrollY();
            }
          },
          loadOrToggle: function loadOrToggle(row) {
            this.assertRowKey();
            var _states5 = this.states, lazy = _states5.lazy, treeData = _states5.treeData, rowKey = _states5.rowKey;
            var id2 = getRowIdentity(row, rowKey);
            var data = treeData[id2];
            if (lazy && data && "loaded" in data && !data.loaded) {
              this.loadData(row, id2, data);
            } else {
              this.toggleTreeExpansion(row);
            }
          },
          loadData: function loadData(row, key, treeNode) {
            var _this = this;
            var load = this.table.load;
            var rawTreeData = this.states.treeData;
            if (load && !rawTreeData[key].loaded) {
              rawTreeData[key].loading = true;
              load(row, treeNode, function(data) {
                if (!Array.isArray(data)) {
                  throw new Error("[ElTable] data must be an array");
                }
                var _states6 = _this.states, lazyTreeNodeMap = _states6.lazyTreeNodeMap, treeData = _states6.treeData;
                treeData[key].loading = false;
                treeData[key].loaded = true;
                treeData[key].expanded = true;
                if (data.length) {
                  _this.$set(lazyTreeNodeMap, key, data);
                }
                _this.table.$emit("expand-change", row, true);
              });
            }
          }
        }
      };
      var watcher_sortData = function sortData(data, states) {
        var sortingColumn = states.sortingColumn;
        if (!sortingColumn || typeof sortingColumn.sortable === "string") {
          return data;
        }
        return util_orderBy(data, states.sortProp, states.sortOrder, sortingColumn.sortMethod, sortingColumn.sortBy);
      };
      var doFlattenColumns = function doFlattenColumns2(columns) {
        var result = [];
        columns.forEach(function(column) {
          if (column.children) {
            result.push.apply(result, doFlattenColumns2(column.children));
          } else {
            result.push(column);
          }
        });
        return result;
      };
      var watcher = external_vue_default.a.extend({
        data: function data() {
          return {
            states: {
              // 3.0 版本后要求必须设置该属性
              rowKey: null,
              // 渲染的数据来源，是对 table 中的 data 过滤排序后的结果
              data: [],
              // 是否包含固定列
              isComplex: false,
              // 列
              _columns: [],
              // 不可响应的
              originColumns: [],
              columns: [],
              fixedColumns: [],
              rightFixedColumns: [],
              leafColumns: [],
              fixedLeafColumns: [],
              rightFixedLeafColumns: [],
              leafColumnsLength: 0,
              fixedLeafColumnsLength: 0,
              rightFixedLeafColumnsLength: 0,
              // 选择
              isAllSelected: false,
              selection: [],
              reserveSelection: false,
              selectOnIndeterminate: false,
              selectable: null,
              // 过滤
              filters: {},
              // 不可响应的
              filteredData: null,
              // 排序
              sortingColumn: null,
              sortProp: null,
              sortOrder: null,
              hoverRow: null
            }
          };
        },
        mixins: [expand, store_current, tree],
        methods: {
          // 检查 rowKey 是否存在
          assertRowKey: function assertRowKey() {
            var rowKey = this.states.rowKey;
            if (!rowKey)
              throw new Error("[ElTable] prop row-key is required");
          },
          // 更新列
          updateColumns: function updateColumns() {
            var states = this.states;
            var _columns = states._columns || [];
            states.fixedColumns = _columns.filter(function(column) {
              return column.fixed === true || column.fixed === "left";
            });
            states.rightFixedColumns = _columns.filter(function(column) {
              return column.fixed === "right";
            });
            if (states.fixedColumns.length > 0 && _columns[0] && _columns[0].type === "selection" && !_columns[0].fixed) {
              _columns[0].fixed = true;
              states.fixedColumns.unshift(_columns[0]);
            }
            var notFixedColumns = _columns.filter(function(column) {
              return !column.fixed;
            });
            states.originColumns = [].concat(states.fixedColumns).concat(notFixedColumns).concat(states.rightFixedColumns);
            var leafColumns = doFlattenColumns(notFixedColumns);
            var fixedLeafColumns = doFlattenColumns(states.fixedColumns);
            var rightFixedLeafColumns = doFlattenColumns(states.rightFixedColumns);
            states.leafColumnsLength = leafColumns.length;
            states.fixedLeafColumnsLength = fixedLeafColumns.length;
            states.rightFixedLeafColumnsLength = rightFixedLeafColumns.length;
            states.columns = [].concat(fixedLeafColumns).concat(leafColumns).concat(rightFixedLeafColumns);
            states.isComplex = states.fixedColumns.length > 0 || states.rightFixedColumns.length > 0;
          },
          // 更新 DOM
          scheduleLayout: function scheduleLayout(needUpdateColumns) {
            if (needUpdateColumns) {
              this.updateColumns();
            }
            this.table.debouncedUpdateLayout();
          },
          // 选择
          isSelected: function isSelected(row) {
            var _states$selection = this.states.selection, selection = _states$selection === void 0 ? [] : _states$selection;
            return selection.indexOf(row) > -1;
          },
          clearSelection: function clearSelection() {
            var states = this.states;
            states.isAllSelected = false;
            var oldSelection = states.selection;
            if (oldSelection.length) {
              states.selection = [];
              this.table.$emit("selection-change", []);
            }
          },
          cleanSelection: function cleanSelection() {
            var states = this.states;
            var data = states.data, rowKey = states.rowKey, selection = states.selection;
            var deleted = void 0;
            if (rowKey) {
              deleted = [];
              var selectedMap = getKeysMap(selection, rowKey);
              var dataMap = getKeysMap(data, rowKey);
              for (var key in selectedMap) {
                if (selectedMap.hasOwnProperty(key) && !dataMap[key]) {
                  deleted.push(selectedMap[key].row);
                }
              }
            } else {
              deleted = selection.filter(function(item) {
                return data.indexOf(item) === -1;
              });
            }
            if (deleted.length) {
              var newSelection = selection.filter(function(item) {
                return deleted.indexOf(item) === -1;
              });
              states.selection = newSelection;
              this.table.$emit("selection-change", newSelection.slice());
            }
          },
          toggleRowSelection: function toggleRowSelection(row, selected) {
            var emitChange = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
            var changed = toggleRowStatus(this.states.selection, row, selected);
            if (changed) {
              var newSelection = (this.states.selection || []).slice();
              if (emitChange) {
                this.table.$emit("select", newSelection, row);
              }
              this.table.$emit("selection-change", newSelection);
            }
          },
          _toggleAllSelection: function _toggleAllSelection() {
            var states = this.states;
            var _states$data = states.data, data = _states$data === void 0 ? [] : _states$data, selection = states.selection;
            var value = states.selectOnIndeterminate ? !states.isAllSelected : !(states.isAllSelected || selection.length);
            states.isAllSelected = value;
            var selectionChanged = false;
            data.forEach(function(row, index2) {
              if (states.selectable) {
                if (states.selectable.call(null, row, index2) && toggleRowStatus(selection, row, value)) {
                  selectionChanged = true;
                }
              } else {
                if (toggleRowStatus(selection, row, value)) {
                  selectionChanged = true;
                }
              }
            });
            if (selectionChanged) {
              this.table.$emit("selection-change", selection ? selection.slice() : []);
            }
            this.table.$emit("select-all", selection);
          },
          updateSelectionByRowKey: function updateSelectionByRowKey() {
            var states = this.states;
            var selection = states.selection, rowKey = states.rowKey, data = states.data;
            var selectedMap = getKeysMap(selection, rowKey);
            data.forEach(function(row) {
              var rowId = getRowIdentity(row, rowKey);
              var rowInfo = selectedMap[rowId];
              if (rowInfo) {
                selection[rowInfo.index] = row;
              }
            });
          },
          updateAllSelected: function updateAllSelected() {
            var states = this.states;
            var selection = states.selection, rowKey = states.rowKey, selectable = states.selectable;
            var data = states.data || [];
            if (data.length === 0) {
              states.isAllSelected = false;
              return;
            }
            var selectedMap = void 0;
            if (rowKey) {
              selectedMap = getKeysMap(selection, rowKey);
            }
            var isSelected = function isSelected2(row) {
              if (selectedMap) {
                return !!selectedMap[getRowIdentity(row, rowKey)];
              } else {
                return selection.indexOf(row) !== -1;
              }
            };
            var isAllSelected = true;
            var selectedCount = 0;
            for (var i = 0, j = data.length; i < j; i++) {
              var item = data[i];
              var isRowSelectable = selectable && selectable.call(null, item, i);
              if (!isSelected(item)) {
                if (!selectable || isRowSelectable) {
                  isAllSelected = false;
                  break;
                }
              } else {
                selectedCount++;
              }
            }
            if (selectedCount === 0)
              isAllSelected = false;
            states.isAllSelected = isAllSelected;
          },
          // 过滤与排序
          updateFilters: function updateFilters(columns, values) {
            if (!Array.isArray(columns)) {
              columns = [columns];
            }
            var states = this.states;
            var filters = {};
            columns.forEach(function(col2) {
              states.filters[col2.id] = values;
              filters[col2.columnKey || col2.id] = values;
            });
            return filters;
          },
          updateSort: function updateSort(column, prop, order) {
            if (this.states.sortingColumn && this.states.sortingColumn !== column) {
              this.states.sortingColumn.order = null;
            }
            this.states.sortingColumn = column;
            this.states.sortProp = prop;
            this.states.sortOrder = order;
          },
          execFilter: function execFilter() {
            var _this = this;
            var states = this.states;
            var _data = states._data, filters = states.filters;
            var data = _data;
            Object.keys(filters).forEach(function(columnId) {
              var values = states.filters[columnId];
              if (!values || values.length === 0)
                return;
              var column = getColumnById(_this.states, columnId);
              if (column && column.filterMethod) {
                data = data.filter(function(row) {
                  return values.some(function(value) {
                    return column.filterMethod.call(null, value, row, column);
                  });
                });
              }
            });
            states.filteredData = data;
          },
          execSort: function execSort() {
            var states = this.states;
            states.data = watcher_sortData(states.filteredData, states);
          },
          // 根据 filters 与 sort 去过滤 data
          execQuery: function execQuery(ignore) {
            if (!(ignore && ignore.filter)) {
              this.execFilter();
            }
            this.execSort();
          },
          clearFilter: function clearFilter(columnKeys) {
            var states = this.states;
            var _table$$refs = this.table.$refs, tableHeader = _table$$refs.tableHeader, fixedTableHeader = _table$$refs.fixedTableHeader, rightFixedTableHeader = _table$$refs.rightFixedTableHeader;
            var panels = {};
            if (tableHeader)
              panels = merge_default()(panels, tableHeader.filterPanels);
            if (fixedTableHeader)
              panels = merge_default()(panels, fixedTableHeader.filterPanels);
            if (rightFixedTableHeader)
              panels = merge_default()(panels, rightFixedTableHeader.filterPanels);
            var keys2 = Object.keys(panels);
            if (!keys2.length)
              return;
            if (typeof columnKeys === "string") {
              columnKeys = [columnKeys];
            }
            if (Array.isArray(columnKeys)) {
              var columns = columnKeys.map(function(key) {
                return getColumnByKey(states, key);
              });
              keys2.forEach(function(key) {
                var column = columns.find(function(col2) {
                  return col2.id === key;
                });
                if (column) {
                  panels[key].filteredValue = [];
                }
              });
              this.commit("filterChange", {
                column: columns,
                values: [],
                silent: true,
                multi: true
              });
            } else {
              keys2.forEach(function(key) {
                panels[key].filteredValue = [];
              });
              states.filters = {};
              this.commit("filterChange", {
                column: {},
                values: [],
                silent: true
              });
            }
          },
          clearSort: function clearSort() {
            var states = this.states;
            if (!states.sortingColumn)
              return;
            this.updateSort(null, null, null);
            this.commit("changeSortCondition", {
              silent: true
            });
          },
          // 适配层，expand-row-keys 在 Expand 与 TreeTable 中都有使用
          setExpandRowKeysAdapter: function setExpandRowKeysAdapter(val) {
            this.setExpandRowKeys(val);
            this.updateTreeExpandKeys(val);
          },
          // 展开行与 TreeTable 都要使用
          toggleRowExpansionAdapter: function toggleRowExpansionAdapter(row, expanded) {
            var hasExpandColumn = this.states.columns.some(function(_ref) {
              var type2 = _ref.type;
              return type2 === "expand";
            });
            if (hasExpandColumn) {
              this.toggleRowExpansion(row, expanded);
            } else {
              this.toggleTreeExpansion(row, expanded);
            }
          }
        }
      });
      watcher.prototype.mutations = {
        setData: function setData(states, data) {
          var dataInstanceChanged = states._data !== data;
          states._data = data;
          this.execQuery();
          this.updateCurrentRowData();
          this.updateExpandRows();
          if (states.reserveSelection) {
            this.assertRowKey();
            this.updateSelectionByRowKey();
          } else {
            if (dataInstanceChanged) {
              this.clearSelection();
            } else {
              this.cleanSelection();
            }
          }
          this.updateAllSelected();
          this.updateTableScrollY();
        },
        insertColumn: function insertColumn(states, column, index2, parent) {
          var array3 = states._columns;
          if (parent) {
            array3 = parent.children;
            if (!array3)
              array3 = parent.children = [];
          }
          if (typeof index2 !== "undefined") {
            array3.splice(index2, 0, column);
          } else {
            array3.push(column);
          }
          if (column.type === "selection") {
            states.selectable = column.selectable;
            states.reserveSelection = column.reserveSelection;
          }
          if (this.table.$ready) {
            this.updateColumns();
            this.scheduleLayout();
          }
        },
        removeColumn: function removeColumn(states, column, parent) {
          var array3 = states._columns;
          if (parent) {
            array3 = parent.children;
            if (!array3)
              array3 = parent.children = [];
          }
          if (array3) {
            array3.splice(array3.indexOf(column), 1);
          }
          if (this.table.$ready) {
            this.updateColumns();
            this.scheduleLayout();
          }
        },
        sort: function sort(states, options) {
          var prop = options.prop, order = options.order, init = options.init;
          if (prop) {
            var column = Object(util_["arrayFind"])(states.columns, function(column2) {
              return column2.property === prop;
            });
            if (column) {
              column.order = order;
              this.updateSort(column, prop, order);
              this.commit("changeSortCondition", { init });
            }
          }
        },
        changeSortCondition: function changeSortCondition(states, options) {
          var column = states.sortingColumn, prop = states.sortProp, order = states.sortOrder;
          if (order === null) {
            states.sortingColumn = null;
            states.sortProp = null;
          }
          var ingore = { filter: true };
          this.execQuery(ingore);
          if (!options || !(options.silent || options.init)) {
            this.table.$emit("sort-change", {
              column,
              prop,
              order
            });
          }
          this.updateTableScrollY();
        },
        filterChange: function filterChange(states, options) {
          var column = options.column, values = options.values, silent = options.silent;
          var newFilters = this.updateFilters(column, values);
          this.execQuery();
          if (!silent) {
            this.table.$emit("filter-change", newFilters);
          }
          this.updateTableScrollY();
        },
        toggleAllSelection: function toggleAllSelection() {
          this.toggleAllSelection();
        },
        rowSelectedChanged: function rowSelectedChanged(states, row) {
          this.toggleRowSelection(row);
          this.updateAllSelected();
        },
        setHoverRow: function setHoverRow(states, row) {
          states.hoverRow = row;
        },
        setCurrentRow: function setCurrentRow(states, row) {
          this.updateCurrentRow(row);
        }
      };
      watcher.prototype.commit = function(name) {
        var mutations = this.mutations;
        if (mutations[name]) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          mutations[name].apply(this, [this.states].concat(args));
        } else {
          throw new Error("Action not found: " + name);
        }
      };
      watcher.prototype.updateTableScrollY = function() {
        external_vue_default.a.nextTick(this.table.updateScrollY);
      };
      var src_store = watcher;
      function createStore(table) {
        var initialState = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        if (!table) {
          throw new Error("Table is required.");
        }
        var store2 = new src_store();
        store2.table = table;
        store2.toggleAllSelection = debounce_default()(10, store2._toggleAllSelection);
        Object.keys(initialState).forEach(function(key) {
          store2.states[key] = initialState[key];
        });
        return store2;
      }
      function mapStates(mapper) {
        var res = {};
        Object.keys(mapper).forEach(function(key) {
          var value = mapper[key];
          var fn = void 0;
          if (typeof value === "string") {
            fn = function fn2() {
              return this.store.states[value];
            };
          } else if (typeof value === "function") {
            fn = function fn2() {
              return value.call(this, this.store.states);
            };
          } else {
            console.error("invalid value type");
          }
          if (fn) {
            res[key] = fn;
          }
        });
        return res;
      }
      var scrollbar_width_ = __webpack_require__(31);
      var scrollbar_width_default = /* @__PURE__ */ __webpack_require__.n(scrollbar_width_);
      function _classCallCheck2(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var table_layout_TableLayout = function() {
        function TableLayout(options) {
          _classCallCheck2(this, TableLayout);
          this.observers = [];
          this.table = null;
          this.store = null;
          this.columns = null;
          this.fit = true;
          this.showHeader = true;
          this.height = null;
          this.scrollX = false;
          this.scrollY = false;
          this.bodyWidth = null;
          this.fixedWidth = null;
          this.rightFixedWidth = null;
          this.tableHeight = null;
          this.headerHeight = 44;
          this.appendHeight = 0;
          this.footerHeight = 44;
          this.viewportHeight = null;
          this.bodyHeight = null;
          this.fixedBodyHeight = null;
          this.gutterWidth = scrollbar_width_default()();
          for (var name in options) {
            if (options.hasOwnProperty(name)) {
              this[name] = options[name];
            }
          }
          if (!this.table) {
            throw new Error("table is required for Table Layout");
          }
          if (!this.store) {
            throw new Error("store is required for Table Layout");
          }
        }
        TableLayout.prototype.updateScrollY = function updateScrollY() {
          var height = this.height;
          if (height === null)
            return false;
          var bodyWrapper = this.table.bodyWrapper;
          if (this.table.$el && bodyWrapper) {
            var body = bodyWrapper.querySelector(".el-table__body");
            var prevScrollY = this.scrollY;
            var scrollY = body.offsetHeight > this.bodyHeight;
            this.scrollY = scrollY;
            return prevScrollY !== scrollY;
          }
          return false;
        };
        TableLayout.prototype.setHeight = function setHeight(value) {
          var _this = this;
          var prop = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "height";
          if (external_vue_default.a.prototype.$isServer)
            return;
          var el = this.table.$el;
          value = parseHeight(value);
          this.height = value;
          if (!el && (value || value === 0))
            return external_vue_default.a.nextTick(function() {
              return _this.setHeight(value, prop);
            });
          if (typeof value === "number") {
            el.style[prop] = value + "px";
            this.updateElsHeight();
          } else if (typeof value === "string") {
            el.style[prop] = value;
            this.updateElsHeight();
          }
        };
        TableLayout.prototype.setMaxHeight = function setMaxHeight(value) {
          this.setHeight(value, "max-height");
        };
        TableLayout.prototype.getFlattenColumns = function getFlattenColumns() {
          var flattenColumns = [];
          var columns = this.table.columns;
          columns.forEach(function(column) {
            if (column.isColumnGroup) {
              flattenColumns.push.apply(flattenColumns, column.columns);
            } else {
              flattenColumns.push(column);
            }
          });
          return flattenColumns;
        };
        TableLayout.prototype.updateElsHeight = function updateElsHeight() {
          var _this2 = this;
          if (!this.table.$ready)
            return external_vue_default.a.nextTick(function() {
              return _this2.updateElsHeight();
            });
          var _table$$refs = this.table.$refs, headerWrapper = _table$$refs.headerWrapper, appendWrapper = _table$$refs.appendWrapper, footerWrapper = _table$$refs.footerWrapper;
          this.appendHeight = appendWrapper ? appendWrapper.offsetHeight : 0;
          if (this.showHeader && !headerWrapper)
            return;
          var headerTrElm = headerWrapper ? headerWrapper.querySelector(".el-table__header tr") : null;
          var noneHeader = this.headerDisplayNone(headerTrElm);
          var headerHeight = this.headerHeight = !this.showHeader ? 0 : headerWrapper.offsetHeight;
          if (this.showHeader && !noneHeader && headerWrapper.offsetWidth > 0 && (this.table.columns || []).length > 0 && headerHeight < 2) {
            return external_vue_default.a.nextTick(function() {
              return _this2.updateElsHeight();
            });
          }
          var tableHeight = this.tableHeight = this.table.$el.clientHeight;
          var footerHeight = this.footerHeight = footerWrapper ? footerWrapper.offsetHeight : 0;
          if (this.height !== null) {
            this.bodyHeight = tableHeight - headerHeight - footerHeight + (footerWrapper ? 1 : 0);
          }
          this.fixedBodyHeight = this.scrollX ? this.bodyHeight - this.gutterWidth : this.bodyHeight;
          var noData = !(this.store.states.data && this.store.states.data.length);
          this.viewportHeight = this.scrollX ? tableHeight - (noData ? 0 : this.gutterWidth) : tableHeight;
          this.updateScrollY();
          this.notifyObservers("scrollable");
        };
        TableLayout.prototype.headerDisplayNone = function headerDisplayNone(elm) {
          if (!elm)
            return true;
          var headerChild = elm;
          while (headerChild.tagName !== "DIV") {
            if (getComputedStyle(headerChild).display === "none") {
              return true;
            }
            headerChild = headerChild.parentElement;
          }
          return false;
        };
        TableLayout.prototype.updateColumnsWidth = function updateColumnsWidth() {
          if (external_vue_default.a.prototype.$isServer)
            return;
          var fit = this.fit;
          var bodyWidth = this.table.$el.clientWidth;
          var bodyMinWidth = 0;
          var flattenColumns = this.getFlattenColumns();
          var flexColumns = flattenColumns.filter(function(column) {
            return typeof column.width !== "number";
          });
          flattenColumns.forEach(function(column) {
            if (typeof column.width === "number" && column.realWidth)
              column.realWidth = null;
          });
          if (flexColumns.length > 0 && fit) {
            flattenColumns.forEach(function(column) {
              bodyMinWidth += column.width || column.minWidth || 80;
            });
            var scrollYWidth = this.scrollY ? this.gutterWidth : 0;
            if (bodyMinWidth <= bodyWidth - scrollYWidth) {
              this.scrollX = false;
              var totalFlexWidth = bodyWidth - scrollYWidth - bodyMinWidth;
              if (flexColumns.length === 1) {
                flexColumns[0].realWidth = (flexColumns[0].minWidth || 80) + totalFlexWidth;
              } else {
                var allColumnsWidth = flexColumns.reduce(function(prev, column) {
                  return prev + (column.minWidth || 80);
                }, 0);
                var flexWidthPerPixel = totalFlexWidth / allColumnsWidth;
                var noneFirstWidth = 0;
                flexColumns.forEach(function(column, index2) {
                  if (index2 === 0)
                    return;
                  var flexWidth = Math.floor((column.minWidth || 80) * flexWidthPerPixel);
                  noneFirstWidth += flexWidth;
                  column.realWidth = (column.minWidth || 80) + flexWidth;
                });
                flexColumns[0].realWidth = (flexColumns[0].minWidth || 80) + totalFlexWidth - noneFirstWidth;
              }
            } else {
              this.scrollX = true;
              flexColumns.forEach(function(column) {
                column.realWidth = column.minWidth;
              });
            }
            this.bodyWidth = Math.max(bodyMinWidth, bodyWidth);
            this.table.resizeState.width = this.bodyWidth;
          } else {
            flattenColumns.forEach(function(column) {
              if (!column.width && !column.minWidth) {
                column.realWidth = 80;
              } else {
                column.realWidth = column.width || column.minWidth;
              }
              bodyMinWidth += column.realWidth;
            });
            this.scrollX = bodyMinWidth > bodyWidth;
            this.bodyWidth = bodyMinWidth;
          }
          var fixedColumns = this.store.states.fixedColumns;
          if (fixedColumns.length > 0) {
            var fixedWidth = 0;
            fixedColumns.forEach(function(column) {
              fixedWidth += column.realWidth || column.width;
            });
            this.fixedWidth = fixedWidth;
          }
          var rightFixedColumns = this.store.states.rightFixedColumns;
          if (rightFixedColumns.length > 0) {
            var rightFixedWidth = 0;
            rightFixedColumns.forEach(function(column) {
              rightFixedWidth += column.realWidth || column.width;
            });
            this.rightFixedWidth = rightFixedWidth;
          }
          this.notifyObservers("columns");
        };
        TableLayout.prototype.addObserver = function addObserver(observer) {
          this.observers.push(observer);
        };
        TableLayout.prototype.removeObserver = function removeObserver(observer) {
          var index2 = this.observers.indexOf(observer);
          if (index2 !== -1) {
            this.observers.splice(index2, 1);
          }
        };
        TableLayout.prototype.notifyObservers = function notifyObservers(event) {
          var _this3 = this;
          var observers2 = this.observers;
          observers2.forEach(function(observer) {
            switch (event) {
              case "columns":
                observer.onColumnsChange(_this3);
                break;
              case "scrollable":
                observer.onScrollableChange(_this3);
                break;
              default:
                throw new Error("Table Layout don't have event " + event + ".");
            }
          });
        };
        return TableLayout;
      }();
      var table_layout = table_layout_TableLayout;
      var layout_observer = {
        created: function created() {
          this.tableLayout.addObserver(this);
        },
        destroyed: function destroyed() {
          this.tableLayout.removeObserver(this);
        },
        computed: {
          tableLayout: function tableLayout() {
            var layout = this.layout;
            if (!layout && this.table) {
              layout = this.table.layout;
            }
            if (!layout) {
              throw new Error("Can not find table layout.");
            }
            return layout;
          }
        },
        mounted: function mounted2() {
          this.onColumnsChange(this.tableLayout);
          this.onScrollableChange(this.tableLayout);
        },
        updated: function updated() {
          if (this.__updated__)
            return;
          this.onColumnsChange(this.tableLayout);
          this.onScrollableChange(this.tableLayout);
          this.__updated__ = true;
        },
        methods: {
          onColumnsChange: function onColumnsChange(layout) {
            var cols = this.$el.querySelectorAll("colgroup > col");
            if (!cols.length)
              return;
            var flattenColumns = layout.getFlattenColumns();
            var columnsMap = {};
            flattenColumns.forEach(function(column2) {
              columnsMap[column2.id] = column2;
            });
            for (var i = 0, j = cols.length; i < j; i++) {
              var col2 = cols[i];
              var name = col2.getAttribute("name");
              var column = columnsMap[name];
              if (column) {
                col2.setAttribute("width", column.realWidth || column.width);
              }
            }
          },
          onScrollableChange: function onScrollableChange(layout) {
            var cols = this.$el.querySelectorAll("colgroup > col[name=gutter]");
            for (var i = 0, j = cols.length; i < j; i++) {
              var col2 = cols[i];
              col2.setAttribute("width", layout.scrollY ? layout.gutterWidth : "0");
            }
            var ths = this.$el.querySelectorAll("th.gutter");
            for (var _i = 0, _j = ths.length; _i < _j; _i++) {
              var th = ths[_i];
              th.style.width = layout.scrollY ? layout.gutterWidth + "px" : "0";
              th.style.display = layout.scrollY ? "" : "none";
            }
          }
        }
      };
      var table_row_extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target2[key] = source[key];
            }
          }
        }
        return target2;
      };
      var table_row = {
        name: "ElTableRow",
        props: ["columns", "row", "index", "isSelected", "isExpanded", "store", "context", "firstDefaultColumnIndex", "treeRowData", "treeIndent", "columnsHidden", "getSpan", "getColspanRealWidth", "getCellStyle", "getCellClass", "handleCellMouseLeave", "handleCellMouseEnter", "fixed"],
        components: {
          ElCheckbox: checkbox_default.a
        },
        render: function render6() {
          var _this = this;
          var h2 = arguments[0];
          var columns = this.columns, row = this.row, $index = this.index, store2 = this.store, context = this.context, firstDefaultColumnIndex = this.firstDefaultColumnIndex, treeRowData = this.treeRowData, treeIndent = this.treeIndent, _columnsHidden = this.columnsHidden, columnsHidden = _columnsHidden === void 0 ? [] : _columnsHidden, isSelected = this.isSelected, isExpanded = this.isExpanded;
          return h2("tr", [columns.map(function(column, cellIndex) {
            var _getSpan = _this.getSpan(row, column, $index, cellIndex), rowspan = _getSpan.rowspan, colspan = _getSpan.colspan;
            if (!rowspan || !colspan) {
              return null;
            }
            var columnData = table_row_extends({}, column);
            columnData.realWidth = _this.getColspanRealWidth(columns, colspan, cellIndex);
            var data = {
              store: store2,
              isSelected,
              isExpanded,
              _self: context,
              column: columnData,
              row,
              $index
            };
            if (cellIndex === firstDefaultColumnIndex && treeRowData) {
              data.treeNode = {
                indent: treeRowData.level * treeIndent,
                level: treeRowData.level
              };
              if (typeof treeRowData.expanded === "boolean") {
                data.treeNode.expanded = treeRowData.expanded;
                if ("loading" in treeRowData) {
                  data.treeNode.loading = treeRowData.loading;
                }
                if ("noLazyChildren" in treeRowData) {
                  data.treeNode.noLazyChildren = treeRowData.noLazyChildren;
                }
              }
            }
            return h2(
              "td",
              {
                style: _this.getCellStyle($index, cellIndex, row, column),
                "class": _this.getCellClass($index, cellIndex, row, column),
                attrs: {
                  rowspan,
                  colspan
                },
                on: {
                  "mouseenter": function mouseenter($event) {
                    return _this.handleCellMouseEnter($event, row);
                  },
                  "mouseleave": _this.handleCellMouseLeave
                }
              },
              [column.renderCell.call(_this._renderProxy, _this.$createElement, data, columnsHidden[cellIndex])]
            );
          })]);
        }
      };
      var table_body_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var table_body_extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target2[key] = source[key];
            }
          }
        }
        return target2;
      };
      var table_body = {
        name: "ElTableBody",
        mixins: [layout_observer],
        components: {
          ElCheckbox: checkbox_default.a,
          ElTooltip: tooltip_default.a,
          TableRow: table_row
        },
        props: {
          store: {
            required: true
          },
          stripe: Boolean,
          context: {},
          rowClassName: [String, Function],
          rowStyle: [Object, Function],
          fixed: String,
          highlight: Boolean
        },
        render: function render6(h2) {
          var _this = this;
          var data = this.data || [];
          return h2(
            "table",
            {
              "class": "el-table__body",
              attrs: {
                cellspacing: "0",
                cellpadding: "0",
                border: "0"
              }
            },
            [h2("colgroup", [this.columns.map(function(column) {
              return h2("col", {
                attrs: { name: column.id },
                key: column.id
              });
            })]), h2("tbody", [data.reduce(function(acc, row) {
              return acc.concat(_this.wrappedRowRender(row, acc.length));
            }, []), h2("el-tooltip", {
              attrs: { effect: this.table.tooltipEffect, placement: "top", content: this.tooltipContent },
              ref: "tooltip"
            })])]
          );
        },
        computed: table_body_extends({
          table: function table() {
            return this.$parent;
          }
        }, mapStates({
          data: "data",
          columns: "columns",
          treeIndent: "indent",
          leftFixedLeafCount: "fixedLeafColumnsLength",
          rightFixedLeafCount: "rightFixedLeafColumnsLength",
          columnsCount: function columnsCount(states) {
            return states.columns.length;
          },
          leftFixedCount: function leftFixedCount(states) {
            return states.fixedColumns.length;
          },
          rightFixedCount: function rightFixedCount(states) {
            return states.rightFixedColumns.length;
          },
          hasExpandColumn: function hasExpandColumn(states) {
            return states.columns.some(function(_ref) {
              var type2 = _ref.type;
              return type2 === "expand";
            });
          }
        }), {
          columnsHidden: function columnsHidden() {
            var _this2 = this;
            return this.columns.map(function(column, index2) {
              return _this2.isColumnHidden(index2);
            });
          },
          firstDefaultColumnIndex: function firstDefaultColumnIndex() {
            return Object(util_["arrayFindIndex"])(this.columns, function(_ref2) {
              var type2 = _ref2.type;
              return type2 === "default";
            });
          }
        }),
        watch: {
          // don't trigger getter of currentRow in getCellClass. see https://jsfiddle.net/oe2b4hqt/
          // update DOM manually. see https://github.com/ElemeFE/element/pull/13954/files#diff-9b450c00d0a9dec0ffad5a3176972e40
          "store.states.hoverRow": function storeStatesHoverRow(newVal, oldVal) {
            var _this3 = this;
            if (!this.store.states.isComplex || this.$isServer)
              return;
            var raf2 = window.requestAnimationFrame;
            if (!raf2) {
              raf2 = function raf3(fn) {
                return setTimeout(fn, 16);
              };
            }
            raf2(function() {
              var rows = _this3.$el.querySelectorAll(".el-table__row");
              var oldRow = rows[oldVal];
              var newRow = rows[newVal];
              if (oldRow) {
                Object(dom_["removeClass"])(oldRow, "hover-row");
              }
              if (newRow) {
                Object(dom_["addClass"])(newRow, "hover-row");
              }
            });
          }
        },
        data: function data() {
          return {
            tooltipContent: ""
          };
        },
        created: function created() {
          this.activateTooltip = debounce_default()(50, function(tooltip2) {
            return tooltip2.handleShowPopper();
          });
        },
        methods: {
          getKeyOfRow: function getKeyOfRow(row, index2) {
            var rowKey = this.table.rowKey;
            if (rowKey) {
              return getRowIdentity(row, rowKey);
            }
            return index2;
          },
          isColumnHidden: function isColumnHidden(index2) {
            if (this.fixed === true || this.fixed === "left") {
              return index2 >= this.leftFixedLeafCount;
            } else if (this.fixed === "right") {
              return index2 < this.columnsCount - this.rightFixedLeafCount;
            } else {
              return index2 < this.leftFixedLeafCount || index2 >= this.columnsCount - this.rightFixedLeafCount;
            }
          },
          getSpan: function getSpan(row, column, rowIndex, columnIndex) {
            var rowspan = 1;
            var colspan = 1;
            var fn = this.table.spanMethod;
            if (typeof fn === "function") {
              var result = fn({
                row,
                column,
                rowIndex,
                columnIndex
              });
              if (Array.isArray(result)) {
                rowspan = result[0];
                colspan = result[1];
              } else if ((typeof result === "undefined" ? "undefined" : table_body_typeof(result)) === "object") {
                rowspan = result.rowspan;
                colspan = result.colspan;
              }
            }
            return { rowspan, colspan };
          },
          getRowStyle: function getRowStyle(row, rowIndex) {
            var rowStyle = this.table.rowStyle;
            if (typeof rowStyle === "function") {
              return rowStyle.call(null, {
                row,
                rowIndex
              });
            }
            return rowStyle || null;
          },
          getRowClass: function getRowClass(row, rowIndex) {
            var classes = ["el-table__row"];
            if (this.table.highlightCurrentRow && row === this.store.states.currentRow) {
              classes.push("current-row");
            }
            if (this.stripe && rowIndex % 2 === 1) {
              classes.push("el-table__row--striped");
            }
            var rowClassName = this.table.rowClassName;
            if (typeof rowClassName === "string") {
              classes.push(rowClassName);
            } else if (typeof rowClassName === "function") {
              classes.push(rowClassName.call(null, {
                row,
                rowIndex
              }));
            }
            if (this.store.states.expandRows.indexOf(row) > -1) {
              classes.push("expanded");
            }
            return classes;
          },
          getCellStyle: function getCellStyle(rowIndex, columnIndex, row, column) {
            var cellStyle = this.table.cellStyle;
            if (typeof cellStyle === "function") {
              return cellStyle.call(null, {
                rowIndex,
                columnIndex,
                row,
                column
              });
            }
            return cellStyle;
          },
          getCellClass: function getCellClass(rowIndex, columnIndex, row, column) {
            var classes = [column.id, column.align, column.className];
            if (this.isColumnHidden(columnIndex)) {
              classes.push("is-hidden");
            }
            var cellClassName = this.table.cellClassName;
            if (typeof cellClassName === "string") {
              classes.push(cellClassName);
            } else if (typeof cellClassName === "function") {
              classes.push(cellClassName.call(null, {
                rowIndex,
                columnIndex,
                row,
                column
              }));
            }
            classes.push("el-table__cell");
            return classes.join(" ");
          },
          getColspanRealWidth: function getColspanRealWidth(columns, colspan, index2) {
            if (colspan < 1) {
              return columns[index2].realWidth;
            }
            var widthArr = columns.map(function(_ref3) {
              var realWidth = _ref3.realWidth;
              return realWidth;
            }).slice(index2, index2 + colspan);
            return widthArr.reduce(function(acc, width) {
              return acc + width;
            }, -1);
          },
          handleCellMouseEnter: function handleCellMouseEnter(event, row) {
            var table = this.table;
            var cell = getCell(event);
            if (cell) {
              var column = getColumnByCell(table, cell);
              var hoverState = table.hoverState = { cell, column, row };
              table.$emit("cell-mouse-enter", hoverState.row, hoverState.column, hoverState.cell, event);
            }
            var cellChild = event.target.querySelector(".cell");
            if (!(Object(dom_["hasClass"])(cellChild, "el-tooltip") && cellChild.childNodes.length)) {
              return;
            }
            var range2 = document.createRange();
            range2.setStart(cellChild, 0);
            range2.setEnd(cellChild, cellChild.childNodes.length);
            var rangeWidth = range2.getBoundingClientRect().width;
            var padding = (parseInt(Object(dom_["getStyle"])(cellChild, "paddingLeft"), 10) || 0) + (parseInt(Object(dom_["getStyle"])(cellChild, "paddingRight"), 10) || 0);
            if ((rangeWidth + padding > cellChild.offsetWidth || cellChild.scrollWidth > cellChild.offsetWidth) && this.$refs.tooltip) {
              var tooltip2 = this.$refs.tooltip;
              this.tooltipContent = cell.innerText || cell.textContent;
              tooltip2.referenceElm = cell;
              tooltip2.$refs.popper && (tooltip2.$refs.popper.style.display = "none");
              tooltip2.doDestroy();
              tooltip2.setExpectedState(true);
              this.activateTooltip(tooltip2);
            }
          },
          handleCellMouseLeave: function handleCellMouseLeave(event) {
            var tooltip2 = this.$refs.tooltip;
            if (tooltip2) {
              tooltip2.setExpectedState(false);
              tooltip2.handleClosePopper();
            }
            var cell = getCell(event);
            if (!cell)
              return;
            var oldHoverState = this.table.hoverState || {};
            this.table.$emit("cell-mouse-leave", oldHoverState.row, oldHoverState.column, oldHoverState.cell, event);
          },
          handleMouseEnter: debounce_default()(30, function(index2) {
            this.store.commit("setHoverRow", index2);
          }),
          handleMouseLeave: debounce_default()(30, function() {
            this.store.commit("setHoverRow", null);
          }),
          handleContextMenu: function handleContextMenu(event, row) {
            this.handleEvent(event, row, "contextmenu");
          },
          handleDoubleClick: function handleDoubleClick(event, row) {
            this.handleEvent(event, row, "dblclick");
          },
          handleClick: function handleClick(event, row) {
            this.store.commit("setCurrentRow", row);
            this.handleEvent(event, row, "click");
          },
          handleEvent: function handleEvent(event, row, name) {
            var table = this.table;
            var cell = getCell(event);
            var column = void 0;
            if (cell) {
              column = getColumnByCell(table, cell);
              if (column) {
                table.$emit("cell-" + name, row, column, cell, event);
              }
            }
            table.$emit("row-" + name, row, column, event);
          },
          rowRender: function rowRender(row, $index, treeRowData) {
            var _this4 = this;
            var h2 = this.$createElement;
            var treeIndent = this.treeIndent, columns = this.columns, firstDefaultColumnIndex = this.firstDefaultColumnIndex;
            var rowClasses = this.getRowClass(row, $index);
            var display = true;
            if (treeRowData) {
              rowClasses.push("el-table__row--level-" + treeRowData.level);
              display = treeRowData.display;
            }
            var displayStyle = display ? null : {
              display: "none"
            };
            return h2(table_row, {
              style: [displayStyle, this.getRowStyle(row, $index)],
              "class": rowClasses,
              key: this.getKeyOfRow(row, $index),
              nativeOn: {
                "dblclick": function dblclick($event) {
                  return _this4.handleDoubleClick($event, row);
                },
                "click": function click($event) {
                  return _this4.handleClick($event, row);
                },
                "contextmenu": function contextmenu($event) {
                  return _this4.handleContextMenu($event, row);
                },
                "mouseenter": function mouseenter(_) {
                  return _this4.handleMouseEnter($index);
                },
                "mouseleave": this.handleMouseLeave
              },
              attrs: {
                columns,
                row,
                index: $index,
                store: this.store,
                context: this.context || this.table.$vnode.context,
                firstDefaultColumnIndex,
                treeRowData,
                treeIndent,
                columnsHidden: this.columnsHidden,
                getSpan: this.getSpan,
                getColspanRealWidth: this.getColspanRealWidth,
                getCellStyle: this.getCellStyle,
                getCellClass: this.getCellClass,
                handleCellMouseEnter: this.handleCellMouseEnter,
                handleCellMouseLeave: this.handleCellMouseLeave,
                isSelected: this.store.isSelected(row),
                isExpanded: this.store.states.expandRows.indexOf(row) > -1,
                fixed: this.fixed
              }
            });
          },
          wrappedRowRender: function wrappedRowRender(row, $index) {
            var _this5 = this;
            var h2 = this.$createElement;
            var store2 = this.store;
            var isRowExpanded = store2.isRowExpanded, assertRowKey = store2.assertRowKey;
            var _store$states = store2.states, treeData = _store$states.treeData, lazyTreeNodeMap = _store$states.lazyTreeNodeMap, childrenColumnName = _store$states.childrenColumnName, rowKey = _store$states.rowKey;
            if (this.hasExpandColumn && isRowExpanded(row)) {
              var renderExpanded = this.table.renderExpanded;
              var tr = this.rowRender(row, $index);
              if (!renderExpanded) {
                console.error("[Element Error]renderExpanded is required.");
                return tr;
              }
              return [[tr, h2(
                "tr",
                { key: "expanded-row__" + tr.key },
                [h2(
                  "td",
                  {
                    attrs: { colspan: this.columnsCount },
                    "class": "el-table__cell el-table__expanded-cell"
                  },
                  [renderExpanded(this.$createElement, { row, $index, store: this.store })]
                )]
              )]];
            } else if (Object.keys(treeData).length) {
              assertRowKey();
              var key = getRowIdentity(row, rowKey);
              var cur = treeData[key];
              var treeRowData = null;
              if (cur) {
                treeRowData = {
                  expanded: cur.expanded,
                  level: cur.level,
                  display: true
                };
                if (typeof cur.lazy === "boolean") {
                  if (typeof cur.loaded === "boolean" && cur.loaded) {
                    treeRowData.noLazyChildren = !(cur.children && cur.children.length);
                  }
                  treeRowData.loading = cur.loading;
                }
              }
              var tmp = [this.rowRender(row, $index, treeRowData)];
              if (cur) {
                var i = 0;
                var traverse2 = function traverse3(children, parent) {
                  if (!(children && children.length && parent))
                    return;
                  children.forEach(function(node) {
                    var innerTreeRowData = {
                      display: parent.display && parent.expanded,
                      level: parent.level + 1
                    };
                    var childKey = getRowIdentity(node, rowKey);
                    if (childKey === void 0 || childKey === null) {
                      throw new Error("for nested data item, row-key is required.");
                    }
                    cur = table_body_extends({}, treeData[childKey]);
                    if (cur) {
                      innerTreeRowData.expanded = cur.expanded;
                      cur.level = cur.level || innerTreeRowData.level;
                      cur.display = !!(cur.expanded && innerTreeRowData.display);
                      if (typeof cur.lazy === "boolean") {
                        if (typeof cur.loaded === "boolean" && cur.loaded) {
                          innerTreeRowData.noLazyChildren = !(cur.children && cur.children.length);
                        }
                        innerTreeRowData.loading = cur.loading;
                      }
                    }
                    i++;
                    tmp.push(_this5.rowRender(node, $index + i, innerTreeRowData));
                    if (cur) {
                      var _nodes = lazyTreeNodeMap[childKey] || node[childrenColumnName];
                      traverse3(_nodes, cur);
                    }
                  });
                };
                cur.display = true;
                var nodes = lazyTreeNodeMap[key] || row[childrenColumnName];
                traverse2(nodes, cur);
              }
              return tmp;
            } else {
              return this.rowRender(row, $index);
            }
          }
        }
      };
      var filter_panelvue_type_template_id_7f2c919f_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", { attrs: { name: "el-zoom-in-top" } }, [
          _vm.multiple ? _c(
            "div",
            {
              directives: [
                {
                  name: "clickoutside",
                  rawName: "v-clickoutside",
                  value: _vm.handleOutsideClick,
                  expression: "handleOutsideClick"
                },
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.showPopper,
                  expression: "showPopper"
                }
              ],
              staticClass: "el-table-filter"
            },
            [
              _c(
                "div",
                { staticClass: "el-table-filter__content" },
                [
                  _c(
                    "el-scrollbar",
                    { attrs: { "wrap-class": "el-table-filter__wrap" } },
                    [
                      _c(
                        "el-checkbox-group",
                        {
                          staticClass: "el-table-filter__checkbox-group",
                          model: {
                            value: _vm.filteredValue,
                            callback: function($$v) {
                              _vm.filteredValue = $$v;
                            },
                            expression: "filteredValue"
                          }
                        },
                        _vm._l(_vm.filters, function(filter) {
                          return _c(
                            "el-checkbox",
                            { key: filter.value, attrs: { label: filter.value } },
                            [_vm._v(_vm._s(filter.text))]
                          );
                        }),
                        1
                      )
                    ],
                    1
                  )
                ],
                1
              ),
              _c("div", { staticClass: "el-table-filter__bottom" }, [
                _c(
                  "button",
                  {
                    class: { "is-disabled": _vm.filteredValue.length === 0 },
                    attrs: { disabled: _vm.filteredValue.length === 0 },
                    on: { click: _vm.handleConfirm }
                  },
                  [_vm._v(_vm._s(_vm.t("el.table.confirmFilter")))]
                ),
                _c("button", { on: { click: _vm.handleReset } }, [
                  _vm._v(_vm._s(_vm.t("el.table.resetFilter")))
                ])
              ])
            ]
          ) : _c(
            "div",
            {
              directives: [
                {
                  name: "clickoutside",
                  rawName: "v-clickoutside",
                  value: _vm.handleOutsideClick,
                  expression: "handleOutsideClick"
                },
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.showPopper,
                  expression: "showPopper"
                }
              ],
              staticClass: "el-table-filter"
            },
            [
              _c(
                "ul",
                { staticClass: "el-table-filter__list" },
                [
                  _c(
                    "li",
                    {
                      staticClass: "el-table-filter__list-item",
                      class: {
                        "is-active": _vm.filterValue === void 0 || _vm.filterValue === null
                      },
                      on: {
                        click: function($event) {
                          _vm.handleSelect(null);
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.t("el.table.clearFilter")))]
                  ),
                  _vm._l(_vm.filters, function(filter) {
                    return _c(
                      "li",
                      {
                        key: filter.value,
                        staticClass: "el-table-filter__list-item",
                        class: { "is-active": _vm.isActive(filter) },
                        attrs: { label: filter.value },
                        on: {
                          click: function($event) {
                            _vm.handleSelect(filter.value);
                          }
                        }
                      },
                      [_vm._v(_vm._s(filter.text))]
                    );
                  })
                ],
                2
              )
            ]
          )
        ]);
      };
      var filter_panelvue_type_template_id_7f2c919f_staticRenderFns = [];
      filter_panelvue_type_template_id_7f2c919f_render._withStripped = true;
      var dropdowns = [];
      !external_vue_default.a.prototype.$isServer && document.addEventListener("click", function(event) {
        dropdowns.forEach(function(dropdown2) {
          var target2 = event.target;
          if (!dropdown2 || !dropdown2.$el)
            return;
          if (target2 === dropdown2.$el || dropdown2.$el.contains(target2)) {
            return;
          }
          dropdown2.handleOutsideClick && dropdown2.handleOutsideClick(event);
        });
      });
      var src_dropdown = {
        open: function open(instance) {
          if (instance) {
            dropdowns.push(instance);
          }
        },
        close: function close(instance) {
          var index2 = dropdowns.indexOf(instance);
          if (index2 !== -1) {
            dropdowns.splice(instance, 1);
          }
        }
      };
      var checkbox_group_ = __webpack_require__(32);
      var checkbox_group_default = /* @__PURE__ */ __webpack_require__.n(checkbox_group_);
      var filter_panelvue_type_script_lang_js_ = {
        name: "ElTableFilterPanel",
        mixins: [vue_popper_default.a, locale_default.a],
        directives: {
          Clickoutside: clickoutside_default.a
        },
        components: {
          ElCheckbox: checkbox_default.a,
          ElCheckboxGroup: checkbox_group_default.a,
          ElScrollbar: scrollbar_default.a
        },
        props: {
          placement: {
            type: String,
            default: "bottom-end"
          }
        },
        methods: {
          isActive: function isActive(filter) {
            return filter.value === this.filterValue;
          },
          handleOutsideClick: function handleOutsideClick() {
            var _this = this;
            setTimeout(function() {
              _this.showPopper = false;
            }, 16);
          },
          handleConfirm: function handleConfirm() {
            this.confirmFilter(this.filteredValue);
            this.handleOutsideClick();
          },
          handleReset: function handleReset() {
            this.filteredValue = [];
            this.confirmFilter(this.filteredValue);
            this.handleOutsideClick();
          },
          handleSelect: function handleSelect(filterValue) {
            this.filterValue = filterValue;
            if (typeof filterValue !== "undefined" && filterValue !== null) {
              this.confirmFilter(this.filteredValue);
            } else {
              this.confirmFilter([]);
            }
            this.handleOutsideClick();
          },
          confirmFilter: function confirmFilter(filteredValue) {
            this.table.store.commit("filterChange", {
              column: this.column,
              values: filteredValue
            });
            this.table.store.updateAllSelected();
          }
        },
        data: function data() {
          return {
            table: null,
            cell: null,
            column: null
          };
        },
        computed: {
          filters: function filters() {
            return this.column && this.column.filters;
          },
          filterValue: {
            get: function get() {
              return (this.column.filteredValue || [])[0];
            },
            set: function set2(value) {
              if (this.filteredValue) {
                if (typeof value !== "undefined" && value !== null) {
                  this.filteredValue.splice(0, 1, value);
                } else {
                  this.filteredValue.splice(0, 1);
                }
              }
            }
          },
          filteredValue: {
            get: function get() {
              if (this.column) {
                return this.column.filteredValue || [];
              }
              return [];
            },
            set: function set2(value) {
              if (this.column) {
                this.column.filteredValue = value;
              }
            }
          },
          multiple: function multiple() {
            if (this.column) {
              return this.column.filterMultiple;
            }
            return true;
          }
        },
        mounted: function mounted2() {
          var _this2 = this;
          this.popperElm = this.$el;
          this.referenceElm = this.cell;
          this.table.bodyWrapper.addEventListener("scroll", function() {
            _this2.updatePopper();
          });
          this.$watch("showPopper", function(value) {
            if (_this2.column)
              _this2.column.filterOpened = value;
            if (value) {
              src_dropdown.open(_this2);
            } else {
              src_dropdown.close(_this2);
            }
          });
        },
        watch: {
          showPopper: function showPopper(val) {
            if (val === true && parseInt(this.popperJS._popper.style.zIndex, 10) < popup_["PopupManager"].zIndex) {
              this.popperJS._popper.style.zIndex = popup_["PopupManager"].nextZIndex();
            }
          }
        }
      };
      var src_filter_panelvue_type_script_lang_js_ = filter_panelvue_type_script_lang_js_;
      var filter_panel_component = normalizeComponent2(
        src_filter_panelvue_type_script_lang_js_,
        filter_panelvue_type_template_id_7f2c919f_render,
        filter_panelvue_type_template_id_7f2c919f_staticRenderFns,
        false,
        null,
        null,
        null
      );
      filter_panel_component.options.__file = "packages/table/src/filter-panel.vue";
      var filter_panel = filter_panel_component.exports;
      var table_header_extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target2[key] = source[key];
            }
          }
        }
        return target2;
      };
      var getAllColumns = function getAllColumns2(columns) {
        var result = [];
        columns.forEach(function(column) {
          if (column.children) {
            result.push(column);
            result.push.apply(result, getAllColumns2(column.children));
          } else {
            result.push(column);
          }
        });
        return result;
      };
      var convertToRows = function convertToRows2(originColumns) {
        var maxLevel = 1;
        var traverse2 = function traverse3(column, parent) {
          if (parent) {
            column.level = parent.level + 1;
            if (maxLevel < column.level) {
              maxLevel = column.level;
            }
          }
          if (column.children) {
            var colSpan = 0;
            column.children.forEach(function(subColumn) {
              traverse3(subColumn, column);
              colSpan += subColumn.colSpan;
            });
            column.colSpan = colSpan;
          } else {
            column.colSpan = 1;
          }
        };
        originColumns.forEach(function(column) {
          column.level = 1;
          traverse2(column);
        });
        var rows = [];
        for (var i = 0; i < maxLevel; i++) {
          rows.push([]);
        }
        var allColumns = getAllColumns(originColumns);
        allColumns.forEach(function(column) {
          if (!column.children) {
            column.rowSpan = maxLevel - column.level + 1;
          } else {
            column.rowSpan = 1;
          }
          rows[column.level - 1].push(column);
        });
        return rows;
      };
      var table_header = {
        name: "ElTableHeader",
        mixins: [layout_observer],
        render: function render6(h2) {
          var _this = this;
          var originColumns = this.store.states.originColumns;
          var columnRows = convertToRows(originColumns, this.columns);
          var isGroup = columnRows.length > 1;
          if (isGroup)
            this.$parent.isGroup = true;
          return h2(
            "table",
            {
              "class": "el-table__header",
              attrs: {
                cellspacing: "0",
                cellpadding: "0",
                border: "0"
              }
            },
            [h2("colgroup", [this.columns.map(function(column) {
              return h2("col", {
                attrs: { name: column.id },
                key: column.id
              });
            }), this.hasGutter ? h2("col", {
              attrs: { name: "gutter" }
            }) : ""]), h2(
              "thead",
              { "class": [{ "is-group": isGroup, "has-gutter": this.hasGutter }] },
              [this._l(columnRows, function(columns, rowIndex) {
                return h2(
                  "tr",
                  {
                    style: _this.getHeaderRowStyle(rowIndex),
                    "class": _this.getHeaderRowClass(rowIndex)
                  },
                  [columns.map(function(column, cellIndex) {
                    return h2(
                      "th",
                      {
                        attrs: {
                          colspan: column.colSpan,
                          rowspan: column.rowSpan
                        },
                        on: {
                          "mousemove": function mousemove($event) {
                            return _this.handleMouseMove($event, column);
                          },
                          "mouseout": _this.handleMouseOut,
                          "mousedown": function mousedown($event) {
                            return _this.handleMouseDown($event, column);
                          },
                          "click": function click($event) {
                            return _this.handleHeaderClick($event, column);
                          },
                          "contextmenu": function contextmenu($event) {
                            return _this.handleHeaderContextMenu($event, column);
                          }
                        },
                        style: _this.getHeaderCellStyle(rowIndex, cellIndex, columns, column),
                        "class": _this.getHeaderCellClass(rowIndex, cellIndex, columns, column),
                        key: column.id
                      },
                      [h2(
                        "div",
                        { "class": ["cell", column.filteredValue && column.filteredValue.length > 0 ? "highlight" : "", column.labelClassName] },
                        [column.renderHeader ? column.renderHeader.call(_this._renderProxy, h2, { column, $index: cellIndex, store: _this.store, _self: _this.$parent.$vnode.context }) : column.label, column.sortable ? h2(
                          "span",
                          {
                            "class": "caret-wrapper",
                            on: {
                              "click": function click($event) {
                                return _this.handleSortClick($event, column);
                              }
                            }
                          },
                          [h2("i", {
                            "class": "sort-caret ascending",
                            on: {
                              "click": function click($event) {
                                return _this.handleSortClick($event, column, "ascending");
                              }
                            }
                          }), h2("i", {
                            "class": "sort-caret descending",
                            on: {
                              "click": function click($event) {
                                return _this.handleSortClick($event, column, "descending");
                              }
                            }
                          })]
                        ) : "", column.filterable ? h2(
                          "span",
                          {
                            "class": "el-table__column-filter-trigger",
                            on: {
                              "click": function click($event) {
                                return _this.handleFilterClick($event, column);
                              }
                            }
                          },
                          [h2("i", { "class": ["el-icon-arrow-down", column.filterOpened ? "el-icon-arrow-up" : ""] })]
                        ) : ""]
                      )]
                    );
                  }), _this.hasGutter ? h2("th", { "class": "el-table__cell gutter" }) : ""]
                );
              })]
            )]
          );
        },
        props: {
          fixed: String,
          store: {
            required: true
          },
          border: Boolean,
          defaultSort: {
            type: Object,
            default: function _default2() {
              return {
                prop: "",
                order: ""
              };
            }
          }
        },
        components: {
          ElCheckbox: checkbox_default.a
        },
        computed: table_header_extends({
          table: function table() {
            return this.$parent;
          },
          hasGutter: function hasGutter() {
            return !this.fixed && this.tableLayout.gutterWidth;
          }
        }, mapStates({
          columns: "columns",
          isAllSelected: "isAllSelected",
          leftFixedLeafCount: "fixedLeafColumnsLength",
          rightFixedLeafCount: "rightFixedLeafColumnsLength",
          columnsCount: function columnsCount(states) {
            return states.columns.length;
          },
          leftFixedCount: function leftFixedCount(states) {
            return states.fixedColumns.length;
          },
          rightFixedCount: function rightFixedCount(states) {
            return states.rightFixedColumns.length;
          }
        })),
        created: function created() {
          this.filterPanels = {};
        },
        mounted: function mounted2() {
          var _this2 = this;
          this.$nextTick(function() {
            var _defaultSort = _this2.defaultSort, prop = _defaultSort.prop, order = _defaultSort.order;
            var init = true;
            _this2.store.commit("sort", { prop, order, init });
          });
        },
        beforeDestroy: function beforeDestroy2() {
          var panels = this.filterPanels;
          for (var prop in panels) {
            if (panels.hasOwnProperty(prop) && panels[prop]) {
              panels[prop].$destroy(true);
            }
          }
        },
        methods: {
          isCellHidden: function isCellHidden(index2, columns) {
            var start = 0;
            for (var i = 0; i < index2; i++) {
              start += columns[i].colSpan;
            }
            var after = start + columns[index2].colSpan - 1;
            if (this.fixed === true || this.fixed === "left") {
              return after >= this.leftFixedLeafCount;
            } else if (this.fixed === "right") {
              return start < this.columnsCount - this.rightFixedLeafCount;
            } else {
              return after < this.leftFixedLeafCount || start >= this.columnsCount - this.rightFixedLeafCount;
            }
          },
          getHeaderRowStyle: function getHeaderRowStyle(rowIndex) {
            var headerRowStyle = this.table.headerRowStyle;
            if (typeof headerRowStyle === "function") {
              return headerRowStyle.call(null, { rowIndex });
            }
            return headerRowStyle;
          },
          getHeaderRowClass: function getHeaderRowClass(rowIndex) {
            var classes = [];
            var headerRowClassName = this.table.headerRowClassName;
            if (typeof headerRowClassName === "string") {
              classes.push(headerRowClassName);
            } else if (typeof headerRowClassName === "function") {
              classes.push(headerRowClassName.call(null, { rowIndex }));
            }
            return classes.join(" ");
          },
          getHeaderCellStyle: function getHeaderCellStyle(rowIndex, columnIndex, row, column) {
            var headerCellStyle = this.table.headerCellStyle;
            if (typeof headerCellStyle === "function") {
              return headerCellStyle.call(null, {
                rowIndex,
                columnIndex,
                row,
                column
              });
            }
            return headerCellStyle;
          },
          getHeaderCellClass: function getHeaderCellClass(rowIndex, columnIndex, row, column) {
            var classes = [column.id, column.order, column.headerAlign, column.className, column.labelClassName];
            if (rowIndex === 0 && this.isCellHidden(columnIndex, row)) {
              classes.push("is-hidden");
            }
            if (!column.children) {
              classes.push("is-leaf");
            }
            if (column.sortable) {
              classes.push("is-sortable");
            }
            var headerCellClassName = this.table.headerCellClassName;
            if (typeof headerCellClassName === "string") {
              classes.push(headerCellClassName);
            } else if (typeof headerCellClassName === "function") {
              classes.push(headerCellClassName.call(null, {
                rowIndex,
                columnIndex,
                row,
                column
              }));
            }
            classes.push("el-table__cell");
            return classes.join(" ");
          },
          toggleAllSelection: function toggleAllSelection() {
            this.store.commit("toggleAllSelection");
          },
          handleFilterClick: function handleFilterClick(event, column) {
            event.stopPropagation();
            var target2 = event.target;
            var cell = target2.tagName === "TH" ? target2 : target2.parentNode;
            if (Object(dom_["hasClass"])(cell, "noclick"))
              return;
            cell = cell.querySelector(".el-table__column-filter-trigger") || cell;
            var table = this.$parent;
            var filterPanel = this.filterPanels[column.id];
            if (filterPanel && column.filterOpened) {
              filterPanel.showPopper = false;
              return;
            }
            if (!filterPanel) {
              filterPanel = new external_vue_default.a(filter_panel);
              this.filterPanels[column.id] = filterPanel;
              if (column.filterPlacement) {
                filterPanel.placement = column.filterPlacement;
              }
              filterPanel.table = table;
              filterPanel.cell = cell;
              filterPanel.column = column;
              !this.$isServer && filterPanel.$mount(document.createElement("div"));
            }
            setTimeout(function() {
              filterPanel.showPopper = true;
            }, 16);
          },
          handleHeaderClick: function handleHeaderClick(event, column) {
            if (!column.filters && column.sortable) {
              this.handleSortClick(event, column);
            } else if (column.filterable && !column.sortable) {
              this.handleFilterClick(event, column);
            }
            this.$parent.$emit("header-click", column, event);
          },
          handleHeaderContextMenu: function handleHeaderContextMenu(event, column) {
            this.$parent.$emit("header-contextmenu", column, event);
          },
          handleMouseDown: function handleMouseDown(event, column) {
            var _this3 = this;
            if (this.$isServer)
              return;
            if (column.children && column.children.length > 0)
              return;
            if (this.draggingColumn && this.border) {
              this.dragging = true;
              this.$parent.resizeProxyVisible = true;
              var table = this.$parent;
              var tableEl = table.$el;
              var tableLeft = tableEl.getBoundingClientRect().left;
              var columnEl = this.$el.querySelector("th." + column.id);
              var columnRect = columnEl.getBoundingClientRect();
              var minLeft = columnRect.left - tableLeft + 30;
              Object(dom_["addClass"])(columnEl, "noclick");
              this.dragState = {
                startMouseLeft: event.clientX,
                startLeft: columnRect.right - tableLeft,
                startColumnLeft: columnRect.left - tableLeft,
                tableLeft
              };
              var resizeProxy = table.$refs.resizeProxy;
              resizeProxy.style.left = this.dragState.startLeft + "px";
              document.onselectstart = function() {
                return false;
              };
              document.ondragstart = function() {
                return false;
              };
              var handleMouseMove = function handleMouseMove2(event2) {
                var deltaLeft = event2.clientX - _this3.dragState.startMouseLeft;
                var proxyLeft = _this3.dragState.startLeft + deltaLeft;
                resizeProxy.style.left = Math.max(minLeft, proxyLeft) + "px";
              };
              var handleMouseUp = function handleMouseUp2() {
                if (_this3.dragging) {
                  var _dragState = _this3.dragState, startColumnLeft = _dragState.startColumnLeft, startLeft = _dragState.startLeft;
                  var finalLeft = parseInt(resizeProxy.style.left, 10);
                  var columnWidth = finalLeft - startColumnLeft;
                  column.width = column.realWidth = columnWidth;
                  table.$emit("header-dragend", column.width, startLeft - startColumnLeft, column, event);
                  _this3.store.scheduleLayout();
                  document.body.style.cursor = "";
                  _this3.dragging = false;
                  _this3.draggingColumn = null;
                  _this3.dragState = {};
                  table.resizeProxyVisible = false;
                }
                document.removeEventListener("mousemove", handleMouseMove);
                document.removeEventListener("mouseup", handleMouseUp2);
                document.onselectstart = null;
                document.ondragstart = null;
                setTimeout(function() {
                  Object(dom_["removeClass"])(columnEl, "noclick");
                }, 0);
              };
              document.addEventListener("mousemove", handleMouseMove);
              document.addEventListener("mouseup", handleMouseUp);
            }
          },
          handleMouseMove: function handleMouseMove(event, column) {
            if (column.children && column.children.length > 0)
              return;
            var target2 = event.target;
            while (target2 && target2.tagName !== "TH") {
              target2 = target2.parentNode;
            }
            if (!column || !column.resizable)
              return;
            if (!this.dragging && this.border) {
              var rect = target2.getBoundingClientRect();
              var bodyStyle = document.body.style;
              if (rect.width > 12 && rect.right - event.pageX < 8) {
                bodyStyle.cursor = "col-resize";
                if (Object(dom_["hasClass"])(target2, "is-sortable")) {
                  target2.style.cursor = "col-resize";
                }
                this.draggingColumn = column;
              } else if (!this.dragging) {
                bodyStyle.cursor = "";
                if (Object(dom_["hasClass"])(target2, "is-sortable")) {
                  target2.style.cursor = "pointer";
                }
                this.draggingColumn = null;
              }
            }
          },
          handleMouseOut: function handleMouseOut() {
            if (this.$isServer)
              return;
            document.body.style.cursor = "";
          },
          toggleOrder: function toggleOrder(_ref) {
            var order = _ref.order, sortOrders = _ref.sortOrders;
            if (order === "")
              return sortOrders[0];
            var index2 = sortOrders.indexOf(order || null);
            return sortOrders[index2 > sortOrders.length - 2 ? 0 : index2 + 1];
          },
          handleSortClick: function handleSortClick(event, column, givenOrder) {
            event.stopPropagation();
            var order = column.order === givenOrder ? null : givenOrder || this.toggleOrder(column);
            var target2 = event.target;
            while (target2 && target2.tagName !== "TH") {
              target2 = target2.parentNode;
            }
            if (target2 && target2.tagName === "TH") {
              if (Object(dom_["hasClass"])(target2, "noclick")) {
                Object(dom_["removeClass"])(target2, "noclick");
                return;
              }
            }
            if (!column.sortable)
              return;
            var states = this.store.states;
            var sortProp = states.sortProp;
            var sortOrder = void 0;
            var sortingColumn = states.sortingColumn;
            if (sortingColumn !== column || sortingColumn === column && sortingColumn.order === null) {
              if (sortingColumn) {
                sortingColumn.order = null;
              }
              states.sortingColumn = column;
              sortProp = column.property;
            }
            if (!order) {
              sortOrder = column.order = null;
            } else {
              sortOrder = column.order = order;
            }
            states.sortProp = sortProp;
            states.sortOrder = sortOrder;
            this.store.commit("changeSortCondition");
          }
        },
        data: function data() {
          return {
            draggingColumn: null,
            dragging: false,
            dragState: {}
          };
        }
      };
      var table_footer_extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target2[key] = source[key];
            }
          }
        }
        return target2;
      };
      var table_footer = {
        name: "ElTableFooter",
        mixins: [layout_observer],
        render: function render6(h2) {
          var _this = this;
          var sums = [];
          if (this.summaryMethod) {
            sums = this.summaryMethod({ columns: this.columns, data: this.store.states.data });
          } else {
            this.columns.forEach(function(column, index2) {
              if (index2 === 0) {
                sums[index2] = _this.sumText;
                return;
              }
              var values = _this.store.states.data.map(function(item) {
                return Number(item[column.property]);
              });
              var precisions = [];
              var notNumber = true;
              values.forEach(function(value) {
                if (!isNaN(value)) {
                  notNumber = false;
                  var decimal = ("" + value).split(".")[1];
                  precisions.push(decimal ? decimal.length : 0);
                }
              });
              var precision = Math.max.apply(null, precisions);
              if (!notNumber) {
                sums[index2] = values.reduce(function(prev, curr) {
                  var value = Number(curr);
                  if (!isNaN(value)) {
                    return parseFloat((prev + curr).toFixed(Math.min(precision, 20)));
                  } else {
                    return prev;
                  }
                }, 0);
              } else {
                sums[index2] = "";
              }
            });
          }
          return h2(
            "table",
            {
              "class": "el-table__footer",
              attrs: {
                cellspacing: "0",
                cellpadding: "0",
                border: "0"
              }
            },
            [h2("colgroup", [this.columns.map(function(column) {
              return h2("col", {
                attrs: { name: column.id },
                key: column.id
              });
            }), this.hasGutter ? h2("col", {
              attrs: { name: "gutter" }
            }) : ""]), h2(
              "tbody",
              { "class": [{ "has-gutter": this.hasGutter }] },
              [h2("tr", [this.columns.map(function(column, cellIndex) {
                return h2(
                  "td",
                  {
                    key: cellIndex,
                    attrs: {
                      colspan: column.colSpan,
                      rowspan: column.rowSpan
                    },
                    "class": [].concat(_this.getRowClasses(column, cellIndex), ["el-table__cell"])
                  },
                  [h2(
                    "div",
                    { "class": ["cell", column.labelClassName] },
                    [sums[cellIndex]]
                  )]
                );
              }), this.hasGutter ? h2("th", { "class": "el-table__cell gutter" }) : ""])]
            )]
          );
        },
        props: {
          fixed: String,
          store: {
            required: true
          },
          summaryMethod: Function,
          sumText: String,
          border: Boolean,
          defaultSort: {
            type: Object,
            default: function _default2() {
              return {
                prop: "",
                order: ""
              };
            }
          }
        },
        computed: table_footer_extends({
          table: function table() {
            return this.$parent;
          },
          hasGutter: function hasGutter() {
            return !this.fixed && this.tableLayout.gutterWidth;
          }
        }, mapStates({
          columns: "columns",
          isAllSelected: "isAllSelected",
          leftFixedLeafCount: "fixedLeafColumnsLength",
          rightFixedLeafCount: "rightFixedLeafColumnsLength",
          columnsCount: function columnsCount(states) {
            return states.columns.length;
          },
          leftFixedCount: function leftFixedCount(states) {
            return states.fixedColumns.length;
          },
          rightFixedCount: function rightFixedCount(states) {
            return states.rightFixedColumns.length;
          }
        })),
        methods: {
          isCellHidden: function isCellHidden(index2, columns, column) {
            if (this.fixed === true || this.fixed === "left") {
              return index2 >= this.leftFixedLeafCount;
            } else if (this.fixed === "right") {
              var before = 0;
              for (var i = 0; i < index2; i++) {
                before += columns[i].colSpan;
              }
              return before < this.columnsCount - this.rightFixedLeafCount;
            } else if (!this.fixed && column.fixed) {
              return true;
            } else {
              return index2 < this.leftFixedCount || index2 >= this.columnsCount - this.rightFixedCount;
            }
          },
          getRowClasses: function getRowClasses(column, cellIndex) {
            var classes = [column.id, column.align, column.labelClassName];
            if (column.className) {
              classes.push(column.className);
            }
            if (this.isCellHidden(cellIndex, this.columns, column)) {
              classes.push("is-hidden");
            }
            if (!column.children) {
              classes.push("is-leaf");
            }
            return classes;
          }
        }
      };
      var tablevue_type_script_lang_js_extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target2[key] = source[key];
            }
          }
        }
        return target2;
      };
      var tableIdSeed = 1;
      var tablevue_type_script_lang_js_ = {
        name: "ElTable",
        mixins: [locale_default.a, migrating_default.a],
        directives: {
          Mousewheel: directives_mousewheel
        },
        props: {
          data: {
            type: Array,
            default: function _default2() {
              return [];
            }
          },
          size: String,
          width: [String, Number],
          height: [String, Number],
          maxHeight: [String, Number],
          fit: {
            type: Boolean,
            default: true
          },
          stripe: Boolean,
          border: Boolean,
          rowKey: [String, Function],
          context: {},
          showHeader: {
            type: Boolean,
            default: true
          },
          showSummary: Boolean,
          sumText: String,
          summaryMethod: Function,
          rowClassName: [String, Function],
          rowStyle: [Object, Function],
          cellClassName: [String, Function],
          cellStyle: [Object, Function],
          headerRowClassName: [String, Function],
          headerRowStyle: [Object, Function],
          headerCellClassName: [String, Function],
          headerCellStyle: [Object, Function],
          highlightCurrentRow: Boolean,
          currentRowKey: [String, Number],
          emptyText: String,
          expandRowKeys: Array,
          defaultExpandAll: Boolean,
          defaultSort: Object,
          tooltipEffect: String,
          spanMethod: Function,
          selectOnIndeterminate: {
            type: Boolean,
            default: true
          },
          indent: {
            type: Number,
            default: 16
          },
          treeProps: {
            type: Object,
            default: function _default2() {
              return {
                hasChildren: "hasChildren",
                children: "children"
              };
            }
          },
          lazy: Boolean,
          load: Function
        },
        components: {
          TableHeader: table_header,
          TableFooter: table_footer,
          TableBody: table_body,
          ElCheckbox: checkbox_default.a
        },
        methods: {
          getMigratingConfig: function getMigratingConfig() {
            return {
              events: {
                expand: "expand is renamed to expand-change"
              }
            };
          },
          setCurrentRow: function setCurrentRow(row) {
            this.store.commit("setCurrentRow", row);
          },
          toggleRowSelection: function toggleRowSelection(row, selected) {
            this.store.toggleRowSelection(row, selected, false);
            this.store.updateAllSelected();
          },
          toggleRowExpansion: function toggleRowExpansion(row, expanded) {
            this.store.toggleRowExpansionAdapter(row, expanded);
          },
          clearSelection: function clearSelection() {
            this.store.clearSelection();
          },
          clearFilter: function clearFilter(columnKeys) {
            this.store.clearFilter(columnKeys);
          },
          clearSort: function clearSort() {
            this.store.clearSort();
          },
          handleMouseLeave: function handleMouseLeave() {
            this.store.commit("setHoverRow", null);
            if (this.hoverState)
              this.hoverState = null;
          },
          updateScrollY: function updateScrollY() {
            var changed = this.layout.updateScrollY();
            if (changed) {
              this.layout.notifyObservers("scrollable");
              this.layout.updateColumnsWidth();
            }
          },
          handleFixedMousewheel: function handleFixedMousewheel(event, data) {
            var bodyWrapper = this.bodyWrapper;
            if (Math.abs(data.spinY) > 0) {
              var currentScrollTop = bodyWrapper.scrollTop;
              if (data.pixelY < 0 && currentScrollTop !== 0) {
                event.preventDefault();
              }
              if (data.pixelY > 0 && bodyWrapper.scrollHeight - bodyWrapper.clientHeight > currentScrollTop) {
                event.preventDefault();
              }
              bodyWrapper.scrollTop += Math.ceil(data.pixelY / 5);
            } else {
              bodyWrapper.scrollLeft += Math.ceil(data.pixelX / 5);
            }
          },
          handleHeaderFooterMousewheel: function handleHeaderFooterMousewheel(event, data) {
            var pixelX = data.pixelX, pixelY = data.pixelY;
            if (Math.abs(pixelX) >= Math.abs(pixelY)) {
              this.bodyWrapper.scrollLeft += data.pixelX / 5;
            }
          },
          // TODO 使用 CSS transform
          syncPostion: function syncPostion() {
            var _bodyWrapper = this.bodyWrapper, scrollLeft = _bodyWrapper.scrollLeft, scrollTop = _bodyWrapper.scrollTop, offsetWidth = _bodyWrapper.offsetWidth, scrollWidth = _bodyWrapper.scrollWidth;
            var _$refs = this.$refs, headerWrapper = _$refs.headerWrapper, footerWrapper = _$refs.footerWrapper, fixedBodyWrapper = _$refs.fixedBodyWrapper, rightFixedBodyWrapper = _$refs.rightFixedBodyWrapper;
            if (headerWrapper)
              headerWrapper.scrollLeft = scrollLeft;
            if (footerWrapper)
              footerWrapper.scrollLeft = scrollLeft;
            if (fixedBodyWrapper)
              fixedBodyWrapper.scrollTop = scrollTop;
            if (rightFixedBodyWrapper)
              rightFixedBodyWrapper.scrollTop = scrollTop;
            var maxScrollLeftPosition = scrollWidth - offsetWidth - 1;
            if (scrollLeft >= maxScrollLeftPosition) {
              this.scrollPosition = "right";
            } else if (scrollLeft === 0) {
              this.scrollPosition = "left";
            } else {
              this.scrollPosition = "middle";
            }
          },
          throttleSyncPostion: Object(external_throttle_debounce_["throttle"])(16, function() {
            this.syncPostion();
          }),
          onScroll: function onScroll(evt) {
            var raf2 = window.requestAnimationFrame;
            if (!raf2) {
              this.throttleSyncPostion();
            } else {
              raf2(this.syncPostion);
            }
          },
          bindEvents: function bindEvents() {
            this.bodyWrapper.addEventListener("scroll", this.onScroll, { passive: true });
            if (this.fit) {
              Object(resize_event_["addResizeListener"])(this.$el, this.resizeListener);
            }
          },
          unbindEvents: function unbindEvents() {
            this.bodyWrapper.removeEventListener("scroll", this.onScroll, { passive: true });
            if (this.fit) {
              Object(resize_event_["removeResizeListener"])(this.$el, this.resizeListener);
            }
          },
          resizeListener: function resizeListener() {
            if (!this.$ready)
              return;
            var shouldUpdateLayout = false;
            var el = this.$el;
            var _resizeState = this.resizeState, oldWidth = _resizeState.width, oldHeight = _resizeState.height;
            var width = el.offsetWidth;
            if (oldWidth !== width) {
              shouldUpdateLayout = true;
            }
            var height = el.offsetHeight;
            if ((this.height || this.shouldUpdateHeight) && oldHeight !== height) {
              shouldUpdateLayout = true;
            }
            if (shouldUpdateLayout) {
              this.resizeState.width = width;
              this.resizeState.height = height;
              this.doLayout();
            }
          },
          doLayout: function doLayout() {
            if (this.shouldUpdateHeight) {
              this.layout.updateElsHeight();
            }
            this.layout.updateColumnsWidth();
          },
          sort: function sort(prop, order) {
            this.store.commit("sort", { prop, order });
          },
          toggleAllSelection: function toggleAllSelection() {
            this.store.commit("toggleAllSelection");
          }
        },
        computed: tablevue_type_script_lang_js_extends({
          tableSize: function tableSize() {
            return this.size || (this.$ELEMENT || {}).size;
          },
          bodyWrapper: function bodyWrapper() {
            return this.$refs.bodyWrapper;
          },
          shouldUpdateHeight: function shouldUpdateHeight() {
            return this.height || this.maxHeight || this.fixedColumns.length > 0 || this.rightFixedColumns.length > 0;
          },
          bodyWidth: function bodyWidth() {
            var _layout = this.layout, bodyWidth2 = _layout.bodyWidth, scrollY = _layout.scrollY, gutterWidth = _layout.gutterWidth;
            return bodyWidth2 ? bodyWidth2 - (scrollY ? gutterWidth : 0) + "px" : "";
          },
          bodyHeight: function bodyHeight() {
            var _layout2 = this.layout, _layout2$headerHeight = _layout2.headerHeight, headerHeight = _layout2$headerHeight === void 0 ? 0 : _layout2$headerHeight, bodyHeight2 = _layout2.bodyHeight, _layout2$footerHeight = _layout2.footerHeight, footerHeight = _layout2$footerHeight === void 0 ? 0 : _layout2$footerHeight;
            if (this.height) {
              return {
                height: bodyHeight2 ? bodyHeight2 + "px" : ""
              };
            } else if (this.maxHeight) {
              var maxHeight = parseHeight(this.maxHeight);
              if (typeof maxHeight === "number") {
                return {
                  "max-height": maxHeight - footerHeight - (this.showHeader ? headerHeight : 0) + "px"
                };
              }
            }
            return {};
          },
          fixedBodyHeight: function fixedBodyHeight() {
            if (this.height) {
              return {
                height: this.layout.fixedBodyHeight ? this.layout.fixedBodyHeight + "px" : ""
              };
            } else if (this.maxHeight) {
              var maxHeight = parseHeight(this.maxHeight);
              if (typeof maxHeight === "number") {
                maxHeight = this.layout.scrollX ? maxHeight - this.layout.gutterWidth : maxHeight;
                if (this.showHeader) {
                  maxHeight -= this.layout.headerHeight;
                }
                maxHeight -= this.layout.footerHeight;
                return {
                  "max-height": maxHeight + "px"
                };
              }
            }
            return {};
          },
          fixedHeight: function fixedHeight() {
            if (this.maxHeight) {
              if (this.showSummary) {
                return {
                  bottom: 0
                };
              }
              return {
                bottom: this.layout.scrollX && this.data.length ? this.layout.gutterWidth + "px" : ""
              };
            } else {
              if (this.showSummary) {
                return {
                  height: this.layout.tableHeight ? this.layout.tableHeight + "px" : ""
                };
              }
              return {
                height: this.layout.viewportHeight ? this.layout.viewportHeight + "px" : ""
              };
            }
          },
          emptyBlockStyle: function emptyBlockStyle() {
            if (this.data && this.data.length)
              return null;
            var height = "100%";
            if (this.layout.appendHeight) {
              height = "calc(100% - " + this.layout.appendHeight + "px)";
            }
            return {
              width: this.bodyWidth,
              height
            };
          }
        }, mapStates({
          selection: "selection",
          columns: "columns",
          tableData: "data",
          fixedColumns: "fixedColumns",
          rightFixedColumns: "rightFixedColumns"
        })),
        watch: {
          height: {
            immediate: true,
            handler: function handler(value) {
              this.layout.setHeight(value);
            }
          },
          maxHeight: {
            immediate: true,
            handler: function handler(value) {
              this.layout.setMaxHeight(value);
            }
          },
          currentRowKey: {
            immediate: true,
            handler: function handler(value) {
              if (!this.rowKey)
                return;
              this.store.setCurrentRowKey(value);
            }
          },
          data: {
            immediate: true,
            handler: function handler(value) {
              this.store.commit("setData", value);
            }
          },
          expandRowKeys: {
            immediate: true,
            handler: function handler(newVal) {
              if (newVal) {
                this.store.setExpandRowKeysAdapter(newVal);
              }
            }
          }
        },
        created: function created() {
          var _this = this;
          this.tableId = "el-table_" + tableIdSeed++;
          this.debouncedUpdateLayout = Object(external_throttle_debounce_["debounce"])(50, function() {
            return _this.doLayout();
          });
        },
        mounted: function mounted2() {
          var _this2 = this;
          this.bindEvents();
          this.store.updateColumns();
          this.doLayout();
          this.resizeState = {
            width: this.$el.offsetWidth,
            height: this.$el.offsetHeight
          };
          this.store.states.columns.forEach(function(column) {
            if (column.filteredValue && column.filteredValue.length) {
              _this2.store.commit("filterChange", {
                column,
                values: column.filteredValue,
                silent: true
              });
            }
          });
          this.$ready = true;
        },
        destroyed: function destroyed() {
          this.unbindEvents();
        },
        data: function data() {
          var _treeProps = this.treeProps, _treeProps$hasChildre = _treeProps.hasChildren, hasChildren = _treeProps$hasChildre === void 0 ? "hasChildren" : _treeProps$hasChildre, _treeProps$children = _treeProps.children, children = _treeProps$children === void 0 ? "children" : _treeProps$children;
          this.store = createStore(this, {
            rowKey: this.rowKey,
            defaultExpandAll: this.defaultExpandAll,
            selectOnIndeterminate: this.selectOnIndeterminate,
            // TreeTable 的相关配置
            indent: this.indent,
            lazy: this.lazy,
            lazyColumnIdentifier: hasChildren,
            childrenColumnName: children
          });
          var layout = new table_layout({
            store: this.store,
            table: this,
            fit: this.fit,
            showHeader: this.showHeader
          });
          return {
            layout,
            isHidden: false,
            renderExpanded: null,
            resizeProxyVisible: false,
            resizeState: {
              width: null,
              height: null
            },
            // 是否拥有多级表头
            isGroup: false,
            scrollPosition: "left"
          };
        }
      };
      var src_tablevue_type_script_lang_js_ = tablevue_type_script_lang_js_;
      var table_component = normalizeComponent2(
        src_tablevue_type_script_lang_js_,
        tablevue_type_template_id_493fe34e_render,
        tablevue_type_template_id_493fe34e_staticRenderFns,
        false,
        null,
        null,
        null
      );
      table_component.options.__file = "packages/table/src/table.vue";
      var src_table = table_component.exports;
      src_table.install = function(Vue2) {
        Vue2.component(src_table.name, src_table);
      };
      var packages_table = src_table;
      var cellStarts = {
        default: {
          order: ""
        },
        selection: {
          width: 48,
          minWidth: 48,
          realWidth: 48,
          order: "",
          className: "el-table-column--selection"
        },
        expand: {
          width: 48,
          minWidth: 48,
          realWidth: 48,
          order: ""
        },
        index: {
          width: 48,
          minWidth: 48,
          realWidth: 48,
          order: ""
        }
      };
      var cellForced = {
        selection: {
          renderHeader: function renderHeader(h2, _ref) {
            var store2 = _ref.store;
            return h2("el-checkbox", {
              attrs: {
                disabled: store2.states.data && store2.states.data.length === 0,
                indeterminate: store2.states.selection.length > 0 && !this.isAllSelected,
                value: this.isAllSelected
              },
              on: {
                "input": this.toggleAllSelection
              }
            });
          },
          renderCell: function renderCell(h2, _ref2) {
            var row = _ref2.row, column = _ref2.column, isSelected = _ref2.isSelected, store2 = _ref2.store, $index = _ref2.$index;
            return h2("el-checkbox", {
              nativeOn: {
                "click": function click(event) {
                  return event.stopPropagation();
                }
              },
              attrs: {
                value: isSelected,
                disabled: column.selectable ? !column.selectable.call(null, row, $index) : false
              },
              on: {
                "input": function input2() {
                  store2.commit("rowSelectedChanged", row);
                }
              }
            });
          },
          sortable: false,
          resizable: false
        },
        index: {
          renderHeader: function renderHeader(h2, _ref3) {
            var column = _ref3.column;
            return column.label || "#";
          },
          renderCell: function renderCell(h2, _ref4) {
            var $index = _ref4.$index, column = _ref4.column;
            var i = $index + 1;
            var index2 = column.index;
            if (typeof index2 === "number") {
              i = $index + index2;
            } else if (typeof index2 === "function") {
              i = index2($index);
            }
            return h2("div", [i]);
          },
          sortable: false
        },
        expand: {
          renderHeader: function renderHeader(h2, _ref5) {
            var column = _ref5.column;
            return column.label || "";
          },
          renderCell: function renderCell(h2, _ref6) {
            var row = _ref6.row, store2 = _ref6.store, isExpanded = _ref6.isExpanded;
            var classes = ["el-table__expand-icon"];
            if (isExpanded) {
              classes.push("el-table__expand-icon--expanded");
            }
            var callback = function callback2(e) {
              e.stopPropagation();
              store2.toggleRowExpansion(row);
            };
            return h2(
              "div",
              {
                "class": classes,
                on: {
                  "click": callback
                }
              },
              [h2("i", { "class": "el-icon el-icon-arrow-right" })]
            );
          },
          sortable: false,
          resizable: false,
          className: "el-table__expand-column"
        }
      };
      function defaultRenderCell(h2, _ref7) {
        var row = _ref7.row, column = _ref7.column, $index = _ref7.$index;
        var property = column.property;
        var value = property && Object(util_["getPropByPath"])(row, property).v;
        if (column && column.formatter) {
          return column.formatter(row, column, value, $index);
        }
        return value;
      }
      function treeCellPrefix(h2, _ref8) {
        var row = _ref8.row, treeNode = _ref8.treeNode, store2 = _ref8.store;
        if (!treeNode)
          return null;
        var ele = [];
        var callback = function callback2(e) {
          e.stopPropagation();
          store2.loadOrToggle(row);
        };
        if (treeNode.indent) {
          ele.push(h2("span", { "class": "el-table__indent", style: { "padding-left": treeNode.indent + "px" } }));
        }
        if (typeof treeNode.expanded === "boolean" && !treeNode.noLazyChildren) {
          var expandClasses = ["el-table__expand-icon", treeNode.expanded ? "el-table__expand-icon--expanded" : ""];
          var iconClasses = ["el-icon-arrow-right"];
          if (treeNode.loading) {
            iconClasses = ["el-icon-loading"];
          }
          ele.push(h2(
            "div",
            {
              "class": expandClasses,
              on: {
                "click": callback
              }
            },
            [h2("i", { "class": iconClasses })]
          ));
        } else {
          ele.push(h2("span", { "class": "el-table__placeholder" }));
        }
        return ele;
      }
      var table_column_extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target2[key] = source[key];
            }
          }
        }
        return target2;
      };
      var columnIdSeed = 1;
      var table_column = {
        name: "ElTableColumn",
        props: {
          type: {
            type: String,
            default: "default"
          },
          label: String,
          className: String,
          labelClassName: String,
          property: String,
          prop: String,
          width: {},
          minWidth: {},
          renderHeader: Function,
          sortable: {
            type: [Boolean, String],
            default: false
          },
          sortMethod: Function,
          sortBy: [String, Function, Array],
          resizable: {
            type: Boolean,
            default: true
          },
          columnKey: String,
          align: String,
          headerAlign: String,
          showTooltipWhenOverflow: Boolean,
          showOverflowTooltip: Boolean,
          fixed: [Boolean, String],
          formatter: Function,
          selectable: Function,
          reserveSelection: Boolean,
          filterMethod: Function,
          filteredValue: Array,
          filters: Array,
          filterPlacement: String,
          filterMultiple: {
            type: Boolean,
            default: true
          },
          index: [Number, Function],
          sortOrders: {
            type: Array,
            default: function _default2() {
              return ["ascending", "descending", null];
            },
            validator: function validator(val) {
              return val.every(function(order) {
                return ["ascending", "descending", null].indexOf(order) > -1;
              });
            }
          }
        },
        data: function data() {
          return {
            isSubColumn: false,
            columns: []
          };
        },
        computed: {
          owner: function owner() {
            var parent = this.$parent;
            while (parent && !parent.tableId) {
              parent = parent.$parent;
            }
            return parent;
          },
          columnOrTableParent: function columnOrTableParent() {
            var parent = this.$parent;
            while (parent && !parent.tableId && !parent.columnId) {
              parent = parent.$parent;
            }
            return parent;
          },
          realWidth: function realWidth() {
            return parseWidth(this.width);
          },
          realMinWidth: function realMinWidth() {
            return parseMinWidth(this.minWidth);
          },
          realAlign: function realAlign() {
            return this.align ? "is-" + this.align : null;
          },
          realHeaderAlign: function realHeaderAlign() {
            return this.headerAlign ? "is-" + this.headerAlign : this.realAlign;
          }
        },
        methods: {
          getPropsData: function getPropsData() {
            var _this = this;
            for (var _len = arguments.length, props2 = Array(_len), _key = 0; _key < _len; _key++) {
              props2[_key] = arguments[_key];
            }
            return props2.reduce(function(prev, cur) {
              if (Array.isArray(cur)) {
                cur.forEach(function(key) {
                  prev[key] = _this[key];
                });
              }
              return prev;
            }, {});
          },
          getColumnElIndex: function getColumnElIndex(children, child) {
            return [].indexOf.call(children, child);
          },
          setColumnWidth: function setColumnWidth(column) {
            if (this.realWidth) {
              column.width = this.realWidth;
            }
            if (this.realMinWidth) {
              column.minWidth = this.realMinWidth;
            }
            if (!column.minWidth) {
              column.minWidth = 80;
            }
            column.realWidth = column.width === void 0 ? column.minWidth : column.width;
            return column;
          },
          setColumnForcedProps: function setColumnForcedProps(column) {
            var type2 = column.type;
            var source = cellForced[type2] || {};
            Object.keys(source).forEach(function(prop) {
              var value = source[prop];
              if (value !== void 0) {
                column[prop] = prop === "className" ? column[prop] + " " + value : value;
              }
            });
            return column;
          },
          setColumnRenders: function setColumnRenders(column) {
            var _this2 = this;
            this.$createElement;
            if (this.renderHeader) {
              console.warn("[Element Warn][TableColumn]Comparing to render-header, scoped-slot header is easier to use. We recommend users to use scoped-slot header.");
            } else if (column.type !== "selection") {
              column.renderHeader = function(h2, scope2) {
                var renderHeader = _this2.$scopedSlots.header;
                return renderHeader ? renderHeader(scope2) : column.label;
              };
            }
            var originRenderCell = column.renderCell;
            if (column.type === "expand") {
              column.renderCell = function(h2, data) {
                return h2(
                  "div",
                  { "class": "cell" },
                  [originRenderCell(h2, data)]
                );
              };
              this.owner.renderExpanded = function(h2, data) {
                return _this2.$scopedSlots.default ? _this2.$scopedSlots.default(data) : _this2.$slots.default;
              };
            } else {
              originRenderCell = originRenderCell || defaultRenderCell;
              column.renderCell = function(h2, data) {
                var children = null;
                if (_this2.$scopedSlots.default) {
                  children = _this2.$scopedSlots.default(data);
                } else {
                  children = originRenderCell(h2, data);
                }
                var prefix = treeCellPrefix(h2, data);
                var props2 = {
                  class: "cell",
                  style: {}
                };
                if (column.showOverflowTooltip) {
                  props2.class += " el-tooltip";
                  props2.style = { width: (data.column.realWidth || data.column.width) - 1 + "px" };
                }
                return h2(
                  "div",
                  props2,
                  [prefix, children]
                );
              };
            }
            return column;
          },
          registerNormalWatchers: function registerNormalWatchers() {
            var _this3 = this;
            var props2 = ["label", "property", "filters", "filterMultiple", "sortable", "index", "formatter", "className", "labelClassName", "showOverflowTooltip"];
            var aliases = {
              prop: "property",
              realAlign: "align",
              realHeaderAlign: "headerAlign",
              realWidth: "width"
            };
            var allAliases = props2.reduce(function(prev, cur) {
              prev[cur] = cur;
              return prev;
            }, aliases);
            Object.keys(allAliases).forEach(function(key) {
              var columnKey = aliases[key];
              _this3.$watch(key, function(newVal) {
                _this3.columnConfig[columnKey] = newVal;
              });
            });
          },
          registerComplexWatchers: function registerComplexWatchers() {
            var _this4 = this;
            var props2 = ["fixed"];
            var aliases = {
              realWidth: "width",
              realMinWidth: "minWidth"
            };
            var allAliases = props2.reduce(function(prev, cur) {
              prev[cur] = cur;
              return prev;
            }, aliases);
            Object.keys(allAliases).forEach(function(key) {
              var columnKey = aliases[key];
              _this4.$watch(key, function(newVal) {
                _this4.columnConfig[columnKey] = newVal;
                var updateColumns = columnKey === "fixed";
                _this4.owner.store.scheduleLayout(updateColumns);
              });
            });
          }
        },
        components: {
          ElCheckbox: checkbox_default.a
        },
        beforeCreate: function beforeCreate() {
          this.row = {};
          this.column = {};
          this.$index = 0;
          this.columnId = "";
        },
        created: function created() {
          var parent = this.columnOrTableParent;
          this.isSubColumn = this.owner !== parent;
          this.columnId = (parent.tableId || parent.columnId) + "_column_" + columnIdSeed++;
          var type2 = this.type || "default";
          var sortable = this.sortable === "" ? true : this.sortable;
          var defaults = table_column_extends({}, cellStarts[type2], {
            id: this.columnId,
            type: type2,
            property: this.prop || this.property,
            align: this.realAlign,
            headerAlign: this.realHeaderAlign,
            showOverflowTooltip: this.showOverflowTooltip || this.showTooltipWhenOverflow,
            // filter 相关属性
            filterable: this.filters || this.filterMethod,
            filteredValue: [],
            filterPlacement: "",
            isColumnGroup: false,
            filterOpened: false,
            // sort 相关属性
            sortable,
            // index 列
            index: this.index
          });
          var basicProps = ["columnKey", "label", "className", "labelClassName", "type", "renderHeader", "formatter", "fixed", "resizable"];
          var sortProps = ["sortMethod", "sortBy", "sortOrders"];
          var selectProps = ["selectable", "reserveSelection"];
          var filterProps = ["filterMethod", "filters", "filterMultiple", "filterOpened", "filteredValue", "filterPlacement"];
          var column = this.getPropsData(basicProps, sortProps, selectProps, filterProps);
          column = mergeOptions2(defaults, column);
          var chains = compose(this.setColumnRenders, this.setColumnWidth, this.setColumnForcedProps);
          column = chains(column);
          this.columnConfig = column;
          this.registerNormalWatchers();
          this.registerComplexWatchers();
        },
        mounted: function mounted2() {
          var owner = this.owner;
          var parent = this.columnOrTableParent;
          var children = this.isSubColumn ? parent.$el.children : parent.$refs.hiddenColumns.children;
          var columnIndex = this.getColumnElIndex(children, this.$el);
          owner.store.commit("insertColumn", this.columnConfig, columnIndex, this.isSubColumn ? parent.columnConfig : null);
        },
        destroyed: function destroyed() {
          if (!this.$parent)
            return;
          var parent = this.$parent;
          this.owner.store.commit("removeColumn", this.columnConfig, this.isSubColumn ? parent.columnConfig : null);
        },
        render: function render6(h2) {
          return h2("div", this.$slots.default);
        }
      };
      table_column.install = function(Vue2) {
        Vue2.component(table_column.name, table_column);
      };
      var packages_table_column = table_column;
      var pickervue_type_template_id_79ae069f_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return !_vm.ranged ? _c(
          "el-input",
          _vm._b(
            {
              directives: [
                {
                  name: "clickoutside",
                  rawName: "v-clickoutside",
                  value: _vm.handleClose,
                  expression: "handleClose"
                }
              ],
              ref: "reference",
              staticClass: "el-date-editor",
              class: "el-date-editor--" + _vm.type,
              attrs: {
                readonly: !_vm.editable || _vm.readonly || _vm.type === "dates" || _vm.type === "week" || _vm.type === "years" || _vm.type === "months",
                disabled: _vm.pickerDisabled,
                size: _vm.pickerSize,
                name: _vm.name,
                placeholder: _vm.placeholder,
                value: _vm.displayValue,
                validateEvent: false
              },
              on: {
                focus: _vm.handleFocus,
                input: function(value) {
                  return _vm.userInput = value;
                },
                change: _vm.handleChange
              },
              nativeOn: {
                keydown: function($event) {
                  return _vm.handleKeydown($event);
                },
                mouseenter: function($event) {
                  return _vm.handleMouseEnter($event);
                },
                mouseleave: function($event) {
                  _vm.showClose = false;
                }
              }
            },
            "el-input",
            _vm.firstInputId,
            false
          ),
          [
            _c("i", {
              staticClass: "el-input__icon",
              class: _vm.triggerClass,
              attrs: { slot: "prefix" },
              on: { click: _vm.handleFocus },
              slot: "prefix"
            }),
            _vm.haveTrigger ? _c("i", {
              staticClass: "el-input__icon",
              class: [_vm.showClose ? "" + _vm.clearIcon : ""],
              attrs: { slot: "suffix" },
              on: { click: _vm.handleClickIcon },
              slot: "suffix"
            }) : _vm._e()
          ]
        ) : _c(
          "div",
          {
            directives: [
              {
                name: "clickoutside",
                rawName: "v-clickoutside",
                value: _vm.handleClose,
                expression: "handleClose"
              }
            ],
            ref: "reference",
            staticClass: "el-date-editor el-range-editor el-input__inner",
            class: [
              "el-date-editor--" + _vm.type,
              _vm.pickerSize ? "el-range-editor--" + _vm.pickerSize : "",
              _vm.pickerDisabled ? "is-disabled" : "",
              _vm.pickerVisible ? "is-active" : ""
            ],
            on: {
              click: _vm.handleRangeClick,
              mouseenter: _vm.handleMouseEnter,
              mouseleave: function($event) {
                _vm.showClose = false;
              },
              keydown: _vm.handleKeydown
            }
          },
          [
            _c("i", {
              class: ["el-input__icon", "el-range__icon", _vm.triggerClass]
            }),
            _c(
              "input",
              _vm._b(
                {
                  staticClass: "el-range-input",
                  attrs: {
                    autocomplete: "off",
                    placeholder: _vm.startPlaceholder,
                    disabled: _vm.pickerDisabled,
                    readonly: !_vm.editable || _vm.readonly,
                    name: _vm.name && _vm.name[0]
                  },
                  domProps: { value: _vm.displayValue && _vm.displayValue[0] },
                  on: {
                    input: _vm.handleStartInput,
                    change: _vm.handleStartChange,
                    focus: _vm.handleFocus
                  }
                },
                "input",
                _vm.firstInputId,
                false
              )
            ),
            _vm._t("range-separator", [
              _c("span", { staticClass: "el-range-separator" }, [
                _vm._v(_vm._s(_vm.rangeSeparator))
              ])
            ]),
            _c(
              "input",
              _vm._b(
                {
                  staticClass: "el-range-input",
                  attrs: {
                    autocomplete: "off",
                    placeholder: _vm.endPlaceholder,
                    disabled: _vm.pickerDisabled,
                    readonly: !_vm.editable || _vm.readonly,
                    name: _vm.name && _vm.name[1]
                  },
                  domProps: { value: _vm.displayValue && _vm.displayValue[1] },
                  on: {
                    input: _vm.handleEndInput,
                    change: _vm.handleEndChange,
                    focus: _vm.handleFocus
                  }
                },
                "input",
                _vm.secondInputId,
                false
              )
            ),
            _vm.haveTrigger ? _c("i", {
              staticClass: "el-input__icon el-range__close-icon",
              class: [_vm.showClose ? "" + _vm.clearIcon : ""],
              on: { click: _vm.handleClickIcon }
            }) : _vm._e()
          ],
          2
        );
      };
      var pickervue_type_template_id_79ae069f_staticRenderFns = [];
      pickervue_type_template_id_79ae069f_render._withStripped = true;
      var date_util_ = __webpack_require__(0);
      var NewPopper = {
        props: {
          appendToBody: vue_popper_default.a.props.appendToBody,
          offset: vue_popper_default.a.props.offset,
          boundariesPadding: vue_popper_default.a.props.boundariesPadding,
          arrowOffset: vue_popper_default.a.props.arrowOffset,
          transformOrigin: vue_popper_default.a.props.transformOrigin
        },
        methods: vue_popper_default.a.methods,
        data: function data() {
          return merge_default()({ visibleArrow: true }, vue_popper_default.a.data);
        },
        beforeDestroy: vue_popper_default.a.beforeDestroy
      };
      var DEFAULT_FORMATS = {
        date: "yyyy-MM-dd",
        month: "yyyy-MM",
        months: "yyyy-MM",
        datetime: "yyyy-MM-dd HH:mm:ss",
        time: "HH:mm:ss",
        week: "yyyywWW",
        timerange: "HH:mm:ss",
        daterange: "yyyy-MM-dd",
        monthrange: "yyyy-MM",
        datetimerange: "yyyy-MM-dd HH:mm:ss",
        year: "yyyy",
        years: "yyyy"
      };
      var HAVE_TRIGGER_TYPES = ["date", "datetime", "time", "time-select", "week", "month", "year", "daterange", "monthrange", "timerange", "datetimerange", "dates", "months", "years"];
      var pickervue_type_script_lang_js_DATE_FORMATTER = function DATE_FORMATTER(value, format2) {
        if (format2 === "timestamp")
          return value.getTime();
        return Object(date_util_["formatDate"])(value, format2);
      };
      var pickervue_type_script_lang_js_DATE_PARSER = function DATE_PARSER(text, format2) {
        if (format2 === "timestamp")
          return new Date(Number(text));
        return Object(date_util_["parseDate"])(text, format2);
      };
      var RANGE_FORMATTER = function RANGE_FORMATTER2(value, format2) {
        if (Array.isArray(value) && value.length === 2) {
          var start = value[0];
          var end = value[1];
          if (start && end) {
            return [pickervue_type_script_lang_js_DATE_FORMATTER(start, format2), pickervue_type_script_lang_js_DATE_FORMATTER(end, format2)];
          }
        }
        return "";
      };
      var RANGE_PARSER = function RANGE_PARSER2(array3, format2, separator) {
        if (!Array.isArray(array3)) {
          array3 = array3.split(separator);
        }
        if (array3.length === 2) {
          var range1 = array3[0];
          var range2 = array3[1];
          return [pickervue_type_script_lang_js_DATE_PARSER(range1, format2), pickervue_type_script_lang_js_DATE_PARSER(range2, format2)];
        }
        return [];
      };
      var TYPE_VALUE_RESOLVER_MAP = {
        default: {
          formatter: function formatter(value) {
            if (!value)
              return "";
            return "" + value;
          },
          parser: function parser(text) {
            if (text === void 0 || text === "")
              return null;
            return text;
          }
        },
        week: {
          formatter: function formatter(value, format2) {
            var week = Object(date_util_["getWeekNumber"])(value);
            var month = value.getMonth();
            var trueDate = new Date(value);
            if (week === 1 && month === 11) {
              trueDate.setHours(0, 0, 0, 0);
              trueDate.setDate(trueDate.getDate() + 3 - (trueDate.getDay() + 6) % 7);
            }
            var date3 = Object(date_util_["formatDate"])(trueDate, format2);
            date3 = /WW/.test(date3) ? date3.replace(/WW/, week < 10 ? "0" + week : week) : date3.replace(/W/, week);
            return date3;
          },
          parser: function parser(text, format2) {
            return TYPE_VALUE_RESOLVER_MAP.date.parser(text, format2);
          }
        },
        date: {
          formatter: pickervue_type_script_lang_js_DATE_FORMATTER,
          parser: pickervue_type_script_lang_js_DATE_PARSER
        },
        datetime: {
          formatter: pickervue_type_script_lang_js_DATE_FORMATTER,
          parser: pickervue_type_script_lang_js_DATE_PARSER
        },
        daterange: {
          formatter: RANGE_FORMATTER,
          parser: RANGE_PARSER
        },
        monthrange: {
          formatter: RANGE_FORMATTER,
          parser: RANGE_PARSER
        },
        datetimerange: {
          formatter: RANGE_FORMATTER,
          parser: RANGE_PARSER
        },
        timerange: {
          formatter: RANGE_FORMATTER,
          parser: RANGE_PARSER
        },
        time: {
          formatter: pickervue_type_script_lang_js_DATE_FORMATTER,
          parser: pickervue_type_script_lang_js_DATE_PARSER
        },
        month: {
          formatter: pickervue_type_script_lang_js_DATE_FORMATTER,
          parser: pickervue_type_script_lang_js_DATE_PARSER
        },
        year: {
          formatter: pickervue_type_script_lang_js_DATE_FORMATTER,
          parser: pickervue_type_script_lang_js_DATE_PARSER
        },
        number: {
          formatter: function formatter(value) {
            if (!value)
              return "";
            return "" + value;
          },
          parser: function parser(text) {
            var result = Number(text);
            if (!isNaN(text)) {
              return result;
            } else {
              return null;
            }
          }
        },
        dates: {
          formatter: function formatter(value, format2) {
            return value.map(function(date3) {
              return pickervue_type_script_lang_js_DATE_FORMATTER(date3, format2);
            });
          },
          parser: function parser(value, format2) {
            return (typeof value === "string" ? value.split(", ") : value).map(function(date3) {
              return date3 instanceof Date ? date3 : pickervue_type_script_lang_js_DATE_PARSER(date3, format2);
            });
          }
        },
        months: {
          formatter: function formatter(value, format2) {
            return value.map(function(date3) {
              return pickervue_type_script_lang_js_DATE_FORMATTER(date3, format2);
            });
          },
          parser: function parser(value, format2) {
            return (typeof value === "string" ? value.split(", ") : value).map(function(date3) {
              return date3 instanceof Date ? date3 : pickervue_type_script_lang_js_DATE_PARSER(date3, format2);
            });
          }
        },
        years: {
          formatter: function formatter(value, format2) {
            return value.map(function(date3) {
              return pickervue_type_script_lang_js_DATE_FORMATTER(date3, format2);
            });
          },
          parser: function parser(value, format2) {
            return (typeof value === "string" ? value.split(", ") : value).map(function(date3) {
              return date3 instanceof Date ? date3 : pickervue_type_script_lang_js_DATE_PARSER(date3, format2);
            });
          }
        }
      };
      var PLACEMENT_MAP = {
        left: "bottom-start",
        center: "bottom",
        right: "bottom-end"
      };
      var parseAsFormatAndType = function parseAsFormatAndType2(value, customFormat, type2) {
        var rangeSeparator = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "-";
        if (!value)
          return null;
        var parser = (TYPE_VALUE_RESOLVER_MAP[type2] || TYPE_VALUE_RESOLVER_MAP["default"]).parser;
        var format2 = customFormat || DEFAULT_FORMATS[type2];
        return parser(value, format2, rangeSeparator);
      };
      var formatAsFormatAndType = function formatAsFormatAndType2(value, customFormat, type2) {
        if (!value)
          return null;
        var formatter = (TYPE_VALUE_RESOLVER_MAP[type2] || TYPE_VALUE_RESOLVER_MAP["default"]).formatter;
        var format2 = customFormat || DEFAULT_FORMATS[type2];
        return formatter(value, format2);
      };
      var valueEquals = function valueEquals2(a, b) {
        var dateEquals = function dateEquals2(a2, b2) {
          var aIsDate = a2 instanceof Date;
          var bIsDate = b2 instanceof Date;
          if (aIsDate && bIsDate) {
            return a2.getTime() === b2.getTime();
          }
          if (!aIsDate && !bIsDate) {
            return a2 === b2;
          }
          return false;
        };
        var aIsArray = a instanceof Array;
        var bIsArray = b instanceof Array;
        if (aIsArray && bIsArray) {
          if (a.length !== b.length) {
            return false;
          }
          return a.every(function(item, index2) {
            return dateEquals(item, b[index2]);
          });
        }
        if (!aIsArray && !bIsArray) {
          return dateEquals(a, b);
        }
        return false;
      };
      var isString = function isString2(val) {
        return typeof val === "string" || val instanceof String;
      };
      var pickervue_type_script_lang_js_validator = function validator(val) {
        return val === null || val === void 0 || isString(val) || Array.isArray(val) && val.length === 2 && val.every(isString);
      };
      var pickervue_type_script_lang_js_ = {
        mixins: [emitter_default.a, NewPopper],
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        props: {
          size: String,
          format: String,
          valueFormat: String,
          readonly: Boolean,
          placeholder: String,
          startPlaceholder: String,
          endPlaceholder: String,
          prefixIcon: String,
          clearIcon: {
            type: String,
            default: "el-icon-circle-close"
          },
          name: {
            default: "",
            validator: pickervue_type_script_lang_js_validator
          },
          disabled: Boolean,
          clearable: {
            type: Boolean,
            default: true
          },
          id: {
            default: "",
            validator: pickervue_type_script_lang_js_validator
          },
          popperClass: String,
          editable: {
            type: Boolean,
            default: true
          },
          align: {
            type: String,
            default: "left"
          },
          value: {},
          defaultValue: {},
          defaultTime: {},
          rangeSeparator: {
            default: "-"
          },
          pickerOptions: {},
          unlinkPanels: Boolean,
          validateEvent: {
            type: Boolean,
            default: true
          }
        },
        components: { ElInput: input_default.a },
        directives: { Clickoutside: clickoutside_default.a },
        data: function data() {
          return {
            pickerVisible: false,
            showClose: false,
            userInput: null,
            valueOnOpen: null,
            // value when picker opens, used to determine whether to emit change
            unwatchPickerOptions: null
          };
        },
        watch: {
          pickerVisible: function pickerVisible(val) {
            if (this.readonly || this.pickerDisabled)
              return;
            if (val) {
              this.showPicker();
              this.valueOnOpen = Array.isArray(this.value) ? [].concat(this.value) : this.value;
            } else {
              this.hidePicker();
              this.emitChange(this.value);
              this.userInput = null;
              if (this.validateEvent) {
                this.dispatch("ElFormItem", "el.form.blur");
              }
              this.$emit("blur", this);
              this.blur();
            }
          },
          parsedValue: {
            immediate: true,
            handler: function handler(val) {
              if (this.picker) {
                this.picker.value = val;
              }
            }
          },
          defaultValue: function defaultValue(val) {
            if (this.picker) {
              this.picker.defaultValue = val;
            }
          },
          value: function value(val, oldVal) {
            if (!valueEquals(val, oldVal) && !this.pickerVisible && this.validateEvent) {
              this.dispatch("ElFormItem", "el.form.change", val);
            }
          }
        },
        computed: {
          ranged: function ranged() {
            return this.type.indexOf("range") > -1;
          },
          reference: function reference() {
            var reference2 = this.$refs.reference;
            return reference2.$el || reference2;
          },
          refInput: function refInput() {
            if (this.reference) {
              return [].slice.call(this.reference.querySelectorAll("input"));
            }
            return [];
          },
          valueIsEmpty: function valueIsEmpty() {
            var val = this.value;
            if (Array.isArray(val)) {
              for (var i = 0, len = val.length; i < len; i++) {
                if (val[i]) {
                  return false;
                }
              }
            } else {
              if (val) {
                return false;
              }
            }
            return true;
          },
          triggerClass: function triggerClass() {
            return this.prefixIcon || (this.type.indexOf("time") !== -1 ? "el-icon-time" : "el-icon-date");
          },
          selectionMode: function selectionMode() {
            if (this.type === "week") {
              return "week";
            } else if (this.type === "month") {
              return "month";
            } else if (this.type === "year") {
              return "year";
            } else if (this.type === "dates") {
              return "dates";
            } else if (this.type === "months") {
              return "months";
            } else if (this.type === "years") {
              return "years";
            }
            return "day";
          },
          haveTrigger: function haveTrigger() {
            if (typeof this.showTrigger !== "undefined") {
              return this.showTrigger;
            }
            return HAVE_TRIGGER_TYPES.indexOf(this.type) !== -1;
          },
          displayValue: function displayValue() {
            var formattedValue = formatAsFormatAndType(this.parsedValue, this.format, this.type, this.rangeSeparator);
            if (Array.isArray(this.userInput)) {
              return [this.userInput[0] || formattedValue && formattedValue[0] || "", this.userInput[1] || formattedValue && formattedValue[1] || ""];
            } else if (this.userInput !== null) {
              return this.userInput;
            } else if (formattedValue) {
              return this.type === "dates" || this.type === "years" || this.type === "months" ? formattedValue.join(", ") : formattedValue;
            } else {
              return "";
            }
          },
          parsedValue: function parsedValue() {
            if (!this.value)
              return this.value;
            if (this.type === "time-select")
              return this.value;
            var valueIsDateObject = Object(date_util_["isDateObject"])(this.value) || Array.isArray(this.value) && this.value.every(date_util_["isDateObject"]);
            if (valueIsDateObject) {
              return this.value;
            }
            if (this.valueFormat) {
              return parseAsFormatAndType(this.value, this.valueFormat, this.type, this.rangeSeparator) || this.value;
            }
            return Array.isArray(this.value) ? this.value.map(function(val) {
              return new Date(val);
            }) : new Date(this.value);
          },
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          pickerSize: function pickerSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          },
          pickerDisabled: function pickerDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
          },
          firstInputId: function firstInputId() {
            var obj = {};
            var id2 = void 0;
            if (this.ranged) {
              id2 = this.id && this.id[0];
            } else {
              id2 = this.id;
            }
            if (id2)
              obj.id = id2;
            return obj;
          },
          secondInputId: function secondInputId() {
            var obj = {};
            var id2 = void 0;
            if (this.ranged) {
              id2 = this.id && this.id[1];
            }
            if (id2)
              obj.id = id2;
            return obj;
          }
        },
        created: function created() {
          this.popperOptions = {
            boundariesPadding: 0,
            gpuAcceleration: false
          };
          this.placement = PLACEMENT_MAP[this.align] || PLACEMENT_MAP.left;
          this.$on("fieldReset", this.handleFieldReset);
        },
        methods: {
          focus: function focus2() {
            if (!this.ranged) {
              this.$refs.reference.focus();
            } else {
              this.handleFocus();
            }
          },
          blur: function blur() {
            this.refInput.forEach(function(input2) {
              return input2.blur();
            });
          },
          // {parse, formatTo} Value deals maps component value with internal Date
          parseValue: function parseValue(value) {
            var isParsed = Object(date_util_["isDateObject"])(value) || Array.isArray(value) && value.every(date_util_["isDateObject"]);
            if (this.valueFormat && !isParsed) {
              return parseAsFormatAndType(value, this.valueFormat, this.type, this.rangeSeparator) || value;
            } else {
              return value;
            }
          },
          formatToValue: function formatToValue(date3) {
            var isFormattable = Object(date_util_["isDateObject"])(date3) || Array.isArray(date3) && date3.every(date_util_["isDateObject"]);
            if (this.valueFormat && isFormattable) {
              return formatAsFormatAndType(date3, this.valueFormat, this.type, this.rangeSeparator);
            } else {
              return date3;
            }
          },
          // {parse, formatTo} String deals with user input
          parseString: function parseString(value) {
            var type2 = Array.isArray(value) ? this.type : this.type.replace("range", "");
            return parseAsFormatAndType(value, this.format, type2);
          },
          formatToString: function formatToString(value) {
            var type2 = Array.isArray(value) ? this.type : this.type.replace("range", "");
            return formatAsFormatAndType(value, this.format, type2);
          },
          handleMouseEnter: function handleMouseEnter() {
            if (this.readonly || this.pickerDisabled)
              return;
            if (!this.valueIsEmpty && this.clearable) {
              this.showClose = true;
            }
          },
          handleChange: function handleChange() {
            if (this.userInput) {
              var value = this.parseString(this.displayValue);
              if (value) {
                this.picker.value = value;
                if (this.isValidValue(value)) {
                  this.emitInput(value);
                  this.userInput = null;
                }
              }
            }
            if (this.userInput === "") {
              this.emitInput(null);
              this.emitChange(null);
              this.userInput = null;
            }
          },
          handleStartInput: function handleStartInput(event) {
            if (this.userInput) {
              this.userInput = [event.target.value, this.userInput[1]];
            } else {
              this.userInput = [event.target.value, null];
            }
          },
          handleEndInput: function handleEndInput(event) {
            if (this.userInput) {
              this.userInput = [this.userInput[0], event.target.value];
            } else {
              this.userInput = [null, event.target.value];
            }
          },
          handleStartChange: function handleStartChange(event) {
            var value = this.parseString(this.userInput && this.userInput[0]);
            if (value) {
              this.userInput = [this.formatToString(value), this.displayValue[1]];
              var newValue = [value, this.picker.value && this.picker.value[1]];
              this.picker.value = newValue;
              if (this.isValidValue(newValue)) {
                this.emitInput(newValue);
                this.userInput = null;
              }
            }
          },
          handleEndChange: function handleEndChange(event) {
            var value = this.parseString(this.userInput && this.userInput[1]);
            if (value) {
              this.userInput = [this.displayValue[0], this.formatToString(value)];
              var newValue = [this.picker.value && this.picker.value[0], value];
              this.picker.value = newValue;
              if (this.isValidValue(newValue)) {
                this.emitInput(newValue);
                this.userInput = null;
              }
            }
          },
          handleClickIcon: function handleClickIcon(event) {
            if (this.readonly || this.pickerDisabled)
              return;
            if (this.showClose) {
              this.valueOnOpen = this.value;
              event.stopPropagation();
              this.emitInput(null);
              this.emitChange(null);
              this.showClose = false;
              if (this.picker && typeof this.picker.handleClear === "function") {
                this.picker.handleClear();
              }
            } else {
              this.pickerVisible = !this.pickerVisible;
            }
          },
          handleClose: function handleClose() {
            if (!this.pickerVisible)
              return;
            this.pickerVisible = false;
            if (this.type === "dates" || this.type === "years" || this.type === "months") {
              var oldValue = parseAsFormatAndType(this.valueOnOpen, this.valueFormat, this.type, this.rangeSeparator) || this.valueOnOpen;
              this.emitInput(oldValue);
            }
          },
          handleFieldReset: function handleFieldReset(initialValue) {
            this.userInput = initialValue === "" ? null : initialValue;
          },
          handleFocus: function handleFocus() {
            var type2 = this.type;
            if (HAVE_TRIGGER_TYPES.indexOf(type2) !== -1 && !this.pickerVisible) {
              this.pickerVisible = true;
            }
            this.$emit("focus", this);
          },
          handleKeydown: function handleKeydown(event) {
            var _this = this;
            var keyCode2 = event.keyCode;
            if (keyCode2 === 27) {
              this.pickerVisible = false;
              event.stopPropagation();
              return;
            }
            if (keyCode2 === 9) {
              if (!this.ranged) {
                this.handleChange();
                this.pickerVisible = this.picker.visible = false;
                this.blur();
                event.stopPropagation();
              } else {
                setTimeout(function() {
                  if (_this.refInput.indexOf(document.activeElement) === -1) {
                    _this.pickerVisible = false;
                    _this.blur();
                    event.stopPropagation();
                  }
                }, 0);
              }
              return;
            }
            if (keyCode2 === 13) {
              if (this.userInput === "" || this.isValidValue(this.parseString(this.displayValue))) {
                this.handleChange();
                this.pickerVisible = this.picker.visible = false;
                this.blur();
              }
              event.stopPropagation();
              return;
            }
            if (this.userInput) {
              event.stopPropagation();
              return;
            }
            if (this.picker && this.picker.handleKeydown) {
              this.picker.handleKeydown(event);
            }
          },
          handleRangeClick: function handleRangeClick() {
            var type2 = this.type;
            if (HAVE_TRIGGER_TYPES.indexOf(type2) !== -1 && !this.pickerVisible) {
              this.pickerVisible = true;
            }
            this.$emit("focus", this);
          },
          hidePicker: function hidePicker() {
            if (this.picker) {
              this.picker.resetView && this.picker.resetView();
              this.pickerVisible = this.picker.visible = false;
              this.destroyPopper();
            }
          },
          showPicker: function showPicker() {
            var _this2 = this;
            if (this.$isServer)
              return;
            if (!this.picker) {
              this.mountPicker();
            }
            this.pickerVisible = this.picker.visible = true;
            this.updatePopper();
            this.picker.value = this.parsedValue;
            this.picker.resetView && this.picker.resetView();
            this.$nextTick(function() {
              _this2.picker.adjustSpinners && _this2.picker.adjustSpinners();
            });
          },
          mountPicker: function mountPicker() {
            var _this3 = this;
            this.picker = new external_vue_default.a(this.panel).$mount();
            this.picker.defaultValue = this.defaultValue;
            this.picker.defaultTime = this.defaultTime;
            this.picker.popperClass = this.popperClass;
            this.popperElm = this.picker.$el;
            this.picker.width = this.reference.getBoundingClientRect().width;
            this.picker.showTime = this.type === "datetime" || this.type === "datetimerange";
            this.picker.selectionMode = this.selectionMode;
            this.picker.unlinkPanels = this.unlinkPanels;
            this.picker.arrowControl = this.arrowControl || this.timeArrowControl || false;
            this.$watch("format", function(format2) {
              _this3.picker.format = format2;
            });
            var updateOptions = function updateOptions2() {
              var options = _this3.pickerOptions;
              if (options && options.selectableRange) {
                var ranges = options.selectableRange;
                var parser = TYPE_VALUE_RESOLVER_MAP.datetimerange.parser;
                var format2 = DEFAULT_FORMATS.timerange;
                ranges = Array.isArray(ranges) ? ranges : [ranges];
                _this3.picker.selectableRange = ranges.map(function(range2) {
                  return parser(range2, format2, _this3.rangeSeparator);
                });
              }
              for (var option2 in options) {
                if (options.hasOwnProperty(option2) && // 忽略 time-picker 的该配置项
                option2 !== "selectableRange") {
                  _this3.picker[option2] = options[option2];
                }
              }
              if (_this3.format) {
                _this3.picker.format = _this3.format;
              }
            };
            updateOptions();
            this.unwatchPickerOptions = this.$watch("pickerOptions", function() {
              return updateOptions();
            }, { deep: true });
            this.$el.appendChild(this.picker.$el);
            this.picker.resetView && this.picker.resetView();
            this.picker.$on("dodestroy", this.doDestroy);
            this.picker.$on("pick", function() {
              var date3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
              var visible = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
              _this3.userInput = null;
              _this3.pickerVisible = _this3.picker.visible = visible;
              _this3.emitInput(date3);
              _this3.picker.resetView && _this3.picker.resetView();
            });
            this.picker.$on("select-range", function(start, end, pos) {
              if (_this3.refInput.length === 0)
                return;
              if (!pos || pos === "min") {
                _this3.refInput[0].setSelectionRange(start, end);
                _this3.refInput[0].focus();
              } else if (pos === "max") {
                _this3.refInput[1].setSelectionRange(start, end);
                _this3.refInput[1].focus();
              }
            });
          },
          unmountPicker: function unmountPicker() {
            if (this.picker) {
              this.picker.$destroy();
              this.picker.$off();
              if (typeof this.unwatchPickerOptions === "function") {
                this.unwatchPickerOptions();
              }
              this.picker.$el.parentNode.removeChild(this.picker.$el);
            }
          },
          emitChange: function emitChange(val) {
            if (!valueEquals(val, this.valueOnOpen)) {
              this.$emit("change", val);
              this.valueOnOpen = val;
              if (this.validateEvent) {
                this.dispatch("ElFormItem", "el.form.change", val);
              }
            }
          },
          emitInput: function emitInput(val) {
            var formatted = this.formatToValue(val);
            if (!valueEquals(this.value, formatted)) {
              this.$emit("input", formatted);
            }
          },
          isValidValue: function isValidValue(value) {
            if (!this.picker) {
              this.mountPicker();
            }
            if (this.picker.isValidValue) {
              return value && this.picker.isValidValue(value);
            } else {
              return true;
            }
          }
        }
      };
      var src_pickervue_type_script_lang_js_ = pickervue_type_script_lang_js_;
      var picker_component = normalizeComponent2(
        src_pickervue_type_script_lang_js_,
        pickervue_type_template_id_79ae069f_render,
        pickervue_type_template_id_79ae069f_staticRenderFns,
        false,
        null,
        null,
        null
      );
      picker_component.options.__file = "packages/date-picker/src/picker.vue";
      var picker = picker_component.exports;
      var datevue_type_template_id_2440d4ea_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "transition",
          {
            attrs: { name: "el-zoom-in-top" },
            on: { "after-enter": _vm.handleEnter, "after-leave": _vm.handleLeave }
          },
          [
            _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.visible,
                    expression: "visible"
                  }
                ],
                staticClass: "el-picker-panel el-date-picker el-popper",
                class: [
                  {
                    "has-sidebar": _vm.$slots.sidebar || _vm.shortcuts,
                    "has-time": _vm.showTime
                  },
                  _vm.popperClass
                ]
              },
              [
                _c(
                  "div",
                  { staticClass: "el-picker-panel__body-wrapper" },
                  [
                    _vm._t("sidebar"),
                    _vm.shortcuts ? _c(
                      "div",
                      { staticClass: "el-picker-panel__sidebar" },
                      _vm._l(_vm.shortcuts, function(shortcut, key) {
                        return _c(
                          "button",
                          {
                            key,
                            staticClass: "el-picker-panel__shortcut",
                            attrs: { type: "button" },
                            on: {
                              click: function($event) {
                                _vm.handleShortcutClick(shortcut);
                              }
                            }
                          },
                          [_vm._v(_vm._s(shortcut.text))]
                        );
                      }),
                      0
                    ) : _vm._e(),
                    _c("div", { staticClass: "el-picker-panel__body" }, [
                      _vm.showTime ? _c("div", { staticClass: "el-date-picker__time-header" }, [
                        _c(
                          "span",
                          { staticClass: "el-date-picker__editor-wrap" },
                          [
                            _c("el-input", {
                              attrs: {
                                placeholder: _vm.t("el.datepicker.selectDate"),
                                value: _vm.visibleDate,
                                size: "small"
                              },
                              on: {
                                input: function(val) {
                                  return _vm.userInputDate = val;
                                },
                                change: _vm.handleVisibleDateChange
                              }
                            })
                          ],
                          1
                        ),
                        _c(
                          "span",
                          {
                            directives: [
                              {
                                name: "clickoutside",
                                rawName: "v-clickoutside",
                                value: _vm.handleTimePickClose,
                                expression: "handleTimePickClose"
                              }
                            ],
                            staticClass: "el-date-picker__editor-wrap"
                          },
                          [
                            _c("el-input", {
                              ref: "input",
                              attrs: {
                                placeholder: _vm.t("el.datepicker.selectTime"),
                                value: _vm.visibleTime,
                                size: "small"
                              },
                              on: {
                                focus: function($event) {
                                  _vm.timePickerVisible = true;
                                },
                                input: function(val) {
                                  return _vm.userInputTime = val;
                                },
                                change: _vm.handleVisibleTimeChange
                              }
                            }),
                            _c("time-picker", {
                              ref: "timepicker",
                              attrs: {
                                "time-arrow-control": _vm.arrowControl,
                                visible: _vm.timePickerVisible
                              },
                              on: {
                                pick: _vm.handleTimePick,
                                mounted: _vm.proxyTimePickerDataProperties
                              }
                            })
                          ],
                          1
                        )
                      ]) : _vm._e(),
                      _c(
                        "div",
                        {
                          directives: [
                            {
                              name: "show",
                              rawName: "v-show",
                              value: _vm.currentView !== "time",
                              expression: "currentView !== 'time'"
                            }
                          ],
                          staticClass: "el-date-picker__header",
                          class: {
                            "el-date-picker__header--bordered": _vm.currentView === "year" || _vm.currentView === "month"
                          }
                        },
                        [
                          _c("button", {
                            staticClass: "el-picker-panel__icon-btn el-date-picker__prev-btn el-icon-d-arrow-left",
                            attrs: {
                              type: "button",
                              "aria-label": _vm.t("el.datepicker.prevYear")
                            },
                            on: { click: _vm.prevYear }
                          }),
                          _c("button", {
                            directives: [
                              {
                                name: "show",
                                rawName: "v-show",
                                value: _vm.currentView === "date",
                                expression: "currentView === 'date'"
                              }
                            ],
                            staticClass: "el-picker-panel__icon-btn el-date-picker__prev-btn el-icon-arrow-left",
                            attrs: {
                              type: "button",
                              "aria-label": _vm.t("el.datepicker.prevMonth")
                            },
                            on: { click: _vm.prevMonth }
                          }),
                          _c(
                            "span",
                            {
                              staticClass: "el-date-picker__header-label",
                              attrs: { role: "button" },
                              on: { click: _vm.showYearPicker }
                            },
                            [_vm._v(_vm._s(_vm.yearLabel))]
                          ),
                          _c(
                            "span",
                            {
                              directives: [
                                {
                                  name: "show",
                                  rawName: "v-show",
                                  value: _vm.currentView === "date",
                                  expression: "currentView === 'date'"
                                }
                              ],
                              staticClass: "el-date-picker__header-label",
                              class: { active: _vm.currentView === "month" },
                              attrs: { role: "button" },
                              on: { click: _vm.showMonthPicker }
                            },
                            [
                              _vm._v(
                                _vm._s(_vm.t("el.datepicker.month" + (_vm.month + 1)))
                              )
                            ]
                          ),
                          _c("button", {
                            staticClass: "el-picker-panel__icon-btn el-date-picker__next-btn el-icon-d-arrow-right",
                            attrs: {
                              type: "button",
                              "aria-label": _vm.t("el.datepicker.nextYear")
                            },
                            on: { click: _vm.nextYear }
                          }),
                          _c("button", {
                            directives: [
                              {
                                name: "show",
                                rawName: "v-show",
                                value: _vm.currentView === "date",
                                expression: "currentView === 'date'"
                              }
                            ],
                            staticClass: "el-picker-panel__icon-btn el-date-picker__next-btn el-icon-arrow-right",
                            attrs: {
                              type: "button",
                              "aria-label": _vm.t("el.datepicker.nextMonth")
                            },
                            on: { click: _vm.nextMonth }
                          })
                        ]
                      ),
                      _c(
                        "div",
                        { staticClass: "el-picker-panel__content" },
                        [
                          _c("date-table", {
                            directives: [
                              {
                                name: "show",
                                rawName: "v-show",
                                value: _vm.currentView === "date",
                                expression: "currentView === 'date'"
                              }
                            ],
                            attrs: {
                              "selection-mode": _vm.selectionMode,
                              "first-day-of-week": _vm.firstDayOfWeek,
                              value: _vm.value,
                              "default-value": _vm.defaultValue ? new Date(_vm.defaultValue) : null,
                              date: _vm.date,
                              "cell-class-name": _vm.cellClassName,
                              "disabled-date": _vm.disabledDate
                            },
                            on: { pick: _vm.handleDatePick }
                          }),
                          _c("year-table", {
                            directives: [
                              {
                                name: "show",
                                rawName: "v-show",
                                value: _vm.currentView === "year",
                                expression: "currentView === 'year'"
                              }
                            ],
                            attrs: {
                              "selection-mode": _vm.selectionMode,
                              value: _vm.value,
                              "default-value": _vm.defaultValue ? new Date(_vm.defaultValue) : null,
                              date: _vm.date,
                              "disabled-date": _vm.disabledDate
                            },
                            on: { pick: _vm.handleYearPick }
                          }),
                          _c("month-table", {
                            directives: [
                              {
                                name: "show",
                                rawName: "v-show",
                                value: _vm.currentView === "month",
                                expression: "currentView === 'month'"
                              }
                            ],
                            attrs: {
                              "selection-mode": _vm.selectionMode,
                              value: _vm.value,
                              "default-value": _vm.defaultValue ? new Date(_vm.defaultValue) : null,
                              date: _vm.date,
                              "disabled-date": _vm.disabledDate
                            },
                            on: { pick: _vm.handleMonthPick }
                          })
                        ],
                        1
                      )
                    ])
                  ],
                  2
                ),
                _c(
                  "div",
                  {
                    directives: [
                      {
                        name: "show",
                        rawName: "v-show",
                        value: _vm.footerVisible && (_vm.currentView === "date" || _vm.currentView === "month" || _vm.currentView === "year"),
                        expression: "footerVisible && (currentView === 'date' || currentView === 'month' || currentView === 'year')"
                      }
                    ],
                    staticClass: "el-picker-panel__footer"
                  },
                  [
                    _c(
                      "el-button",
                      {
                        directives: [
                          {
                            name: "show",
                            rawName: "v-show",
                            value: _vm.selectionMode !== "dates" && _vm.selectionMode !== "months" && _vm.selectionMode !== "years",
                            expression: "selectionMode !== 'dates' && selectionMode !== 'months' && selectionMode !== 'years'"
                          }
                        ],
                        staticClass: "el-picker-panel__link-btn",
                        attrs: { size: "mini", type: "text" },
                        on: { click: _vm.changeToNow }
                      },
                      [
                        _vm._v(
                          "\n        " + _vm._s(_vm.t("el.datepicker.now")) + "\n      "
                        )
                      ]
                    ),
                    _c(
                      "el-button",
                      {
                        staticClass: "el-picker-panel__link-btn",
                        attrs: { plain: "", size: "mini" },
                        on: { click: _vm.confirm }
                      },
                      [
                        _vm._v(
                          "\n        " + _vm._s(_vm.t("el.datepicker.confirm")) + "\n      "
                        )
                      ]
                    )
                  ],
                  1
                )
              ]
            )
          ]
        );
      };
      var datevue_type_template_id_2440d4ea_staticRenderFns = [];
      datevue_type_template_id_2440d4ea_render._withStripped = true;
      var timevue_type_template_id_3d939089_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "transition",
          {
            attrs: { name: "el-zoom-in-top" },
            on: {
              "after-leave": function($event) {
                _vm.$emit("dodestroy");
              }
            }
          },
          [
            _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.visible,
                    expression: "visible"
                  }
                ],
                staticClass: "el-time-panel el-popper",
                class: _vm.popperClass
              },
              [
                _c(
                  "div",
                  {
                    staticClass: "el-time-panel__content",
                    class: { "has-seconds": _vm.showSeconds }
                  },
                  [
                    _c("time-spinner", {
                      ref: "spinner",
                      attrs: {
                        "arrow-control": _vm.useArrow,
                        "show-seconds": _vm.showSeconds,
                        "am-pm-mode": _vm.amPmMode,
                        date: _vm.date
                      },
                      on: {
                        change: _vm.handleChange,
                        "select-range": _vm.setSelectionRange
                      }
                    })
                  ],
                  1
                ),
                _c("div", { staticClass: "el-time-panel__footer" }, [
                  _c(
                    "button",
                    {
                      staticClass: "el-time-panel__btn cancel",
                      attrs: { type: "button" },
                      on: { click: _vm.handleCancel }
                    },
                    [_vm._v(_vm._s(_vm.t("el.datepicker.cancel")))]
                  ),
                  _c(
                    "button",
                    {
                      staticClass: "el-time-panel__btn",
                      class: { confirm: !_vm.disabled },
                      attrs: { type: "button" },
                      on: {
                        click: function($event) {
                          _vm.handleConfirm();
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.t("el.datepicker.confirm")))]
                  )
                ])
              ]
            )
          ]
        );
      };
      var timevue_type_template_id_3d939089_staticRenderFns = [];
      timevue_type_template_id_3d939089_render._withStripped = true;
      var time_spinnervue_type_template_id_1facadeb_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-time-spinner",
            class: { "has-seconds": _vm.showSeconds }
          },
          [
            !_vm.arrowControl ? [
              _c(
                "el-scrollbar",
                {
                  ref: "hours",
                  staticClass: "el-time-spinner__wrapper",
                  attrs: {
                    "wrap-style": "max-height: inherit;",
                    "view-class": "el-time-spinner__list",
                    noresize: "",
                    tag: "ul"
                  },
                  nativeOn: {
                    mouseenter: function($event) {
                      _vm.emitSelectRange("hours");
                    },
                    mousemove: function($event) {
                      _vm.adjustCurrentSpinner("hours");
                    }
                  }
                },
                _vm._l(_vm.hoursList, function(disabled, hour) {
                  return _c(
                    "li",
                    {
                      key: hour,
                      staticClass: "el-time-spinner__item",
                      class: { active: hour === _vm.hours, disabled },
                      on: {
                        click: function($event) {
                          _vm.handleClick("hours", {
                            value: hour,
                            disabled
                          });
                        }
                      }
                    },
                    [
                      _vm._v(
                        _vm._s(
                          ("0" + (_vm.amPmMode ? hour % 12 || 12 : hour)).slice(
                            -2
                          )
                        ) + _vm._s(_vm.amPm(hour))
                      )
                    ]
                  );
                }),
                0
              ),
              _c(
                "el-scrollbar",
                {
                  ref: "minutes",
                  staticClass: "el-time-spinner__wrapper",
                  attrs: {
                    "wrap-style": "max-height: inherit;",
                    "view-class": "el-time-spinner__list",
                    noresize: "",
                    tag: "ul"
                  },
                  nativeOn: {
                    mouseenter: function($event) {
                      _vm.emitSelectRange("minutes");
                    },
                    mousemove: function($event) {
                      _vm.adjustCurrentSpinner("minutes");
                    }
                  }
                },
                _vm._l(_vm.minutesList, function(enabled, key) {
                  return _c(
                    "li",
                    {
                      key,
                      staticClass: "el-time-spinner__item",
                      class: { active: key === _vm.minutes, disabled: !enabled },
                      on: {
                        click: function($event) {
                          _vm.handleClick("minutes", {
                            value: key,
                            disabled: false
                          });
                        }
                      }
                    },
                    [_vm._v(_vm._s(("0" + key).slice(-2)))]
                  );
                }),
                0
              ),
              _c(
                "el-scrollbar",
                {
                  directives: [
                    {
                      name: "show",
                      rawName: "v-show",
                      value: _vm.showSeconds,
                      expression: "showSeconds"
                    }
                  ],
                  ref: "seconds",
                  staticClass: "el-time-spinner__wrapper",
                  attrs: {
                    "wrap-style": "max-height: inherit;",
                    "view-class": "el-time-spinner__list",
                    noresize: "",
                    tag: "ul"
                  },
                  nativeOn: {
                    mouseenter: function($event) {
                      _vm.emitSelectRange("seconds");
                    },
                    mousemove: function($event) {
                      _vm.adjustCurrentSpinner("seconds");
                    }
                  }
                },
                _vm._l(60, function(second, key) {
                  return _c(
                    "li",
                    {
                      key,
                      staticClass: "el-time-spinner__item",
                      class: { active: key === _vm.seconds },
                      on: {
                        click: function($event) {
                          _vm.handleClick("seconds", {
                            value: key,
                            disabled: false
                          });
                        }
                      }
                    },
                    [_vm._v(_vm._s(("0" + key).slice(-2)))]
                  );
                }),
                0
              )
            ] : _vm._e(),
            _vm.arrowControl ? [
              _c(
                "div",
                {
                  staticClass: "el-time-spinner__wrapper is-arrow",
                  on: {
                    mouseenter: function($event) {
                      _vm.emitSelectRange("hours");
                    }
                  }
                },
                [
                  _c("i", {
                    directives: [
                      {
                        name: "repeat-click",
                        rawName: "v-repeat-click",
                        value: _vm.decrease,
                        expression: "decrease"
                      }
                    ],
                    staticClass: "el-time-spinner__arrow el-icon-arrow-up"
                  }),
                  _c("i", {
                    directives: [
                      {
                        name: "repeat-click",
                        rawName: "v-repeat-click",
                        value: _vm.increase,
                        expression: "increase"
                      }
                    ],
                    staticClass: "el-time-spinner__arrow el-icon-arrow-down"
                  }),
                  _c(
                    "ul",
                    { ref: "hours", staticClass: "el-time-spinner__list" },
                    _vm._l(_vm.arrowHourList, function(hour, key) {
                      return _c(
                        "li",
                        {
                          key,
                          staticClass: "el-time-spinner__item",
                          class: {
                            active: hour === _vm.hours,
                            disabled: _vm.hoursList[hour]
                          }
                        },
                        [
                          _vm._v(
                            _vm._s(
                              hour === void 0 ? "" : ("0" + (_vm.amPmMode ? hour % 12 || 12 : hour)).slice(-2) + _vm.amPm(hour)
                            )
                          )
                        ]
                      );
                    }),
                    0
                  )
                ]
              ),
              _c(
                "div",
                {
                  staticClass: "el-time-spinner__wrapper is-arrow",
                  on: {
                    mouseenter: function($event) {
                      _vm.emitSelectRange("minutes");
                    }
                  }
                },
                [
                  _c("i", {
                    directives: [
                      {
                        name: "repeat-click",
                        rawName: "v-repeat-click",
                        value: _vm.decrease,
                        expression: "decrease"
                      }
                    ],
                    staticClass: "el-time-spinner__arrow el-icon-arrow-up"
                  }),
                  _c("i", {
                    directives: [
                      {
                        name: "repeat-click",
                        rawName: "v-repeat-click",
                        value: _vm.increase,
                        expression: "increase"
                      }
                    ],
                    staticClass: "el-time-spinner__arrow el-icon-arrow-down"
                  }),
                  _c(
                    "ul",
                    { ref: "minutes", staticClass: "el-time-spinner__list" },
                    _vm._l(_vm.arrowMinuteList, function(minute, key) {
                      return _c(
                        "li",
                        {
                          key,
                          staticClass: "el-time-spinner__item",
                          class: { active: minute === _vm.minutes }
                        },
                        [
                          _vm._v(
                            "\n          " + _vm._s(
                              minute === void 0 ? "" : ("0" + minute).slice(-2)
                            ) + "\n        "
                          )
                        ]
                      );
                    }),
                    0
                  )
                ]
              ),
              _vm.showSeconds ? _c(
                "div",
                {
                  staticClass: "el-time-spinner__wrapper is-arrow",
                  on: {
                    mouseenter: function($event) {
                      _vm.emitSelectRange("seconds");
                    }
                  }
                },
                [
                  _c("i", {
                    directives: [
                      {
                        name: "repeat-click",
                        rawName: "v-repeat-click",
                        value: _vm.decrease,
                        expression: "decrease"
                      }
                    ],
                    staticClass: "el-time-spinner__arrow el-icon-arrow-up"
                  }),
                  _c("i", {
                    directives: [
                      {
                        name: "repeat-click",
                        rawName: "v-repeat-click",
                        value: _vm.increase,
                        expression: "increase"
                      }
                    ],
                    staticClass: "el-time-spinner__arrow el-icon-arrow-down"
                  }),
                  _c(
                    "ul",
                    { ref: "seconds", staticClass: "el-time-spinner__list" },
                    _vm._l(_vm.arrowSecondList, function(second, key) {
                      return _c(
                        "li",
                        {
                          key,
                          staticClass: "el-time-spinner__item",
                          class: { active: second === _vm.seconds }
                        },
                        [
                          _vm._v(
                            "\n          " + _vm._s(
                              second === void 0 ? "" : ("0" + second).slice(-2)
                            ) + "\n        "
                          )
                        ]
                      );
                    }),
                    0
                  )
                ]
              ) : _vm._e()
            ] : _vm._e()
          ],
          2
        );
      };
      var time_spinnervue_type_template_id_1facadeb_staticRenderFns = [];
      time_spinnervue_type_template_id_1facadeb_render._withStripped = true;
      var time_spinnervue_type_script_lang_js_ = {
        components: { ElScrollbar: scrollbar_default.a },
        directives: {
          repeatClick: repeat_click
        },
        props: {
          date: {},
          defaultValue: {},
          // reserved for future use
          showSeconds: {
            type: Boolean,
            default: true
          },
          arrowControl: Boolean,
          amPmMode: {
            type: String,
            default: ""
            // 'a': am/pm; 'A': AM/PM
          }
        },
        computed: {
          hours: function hours() {
            return this.date.getHours();
          },
          minutes: function minutes() {
            return this.date.getMinutes();
          },
          seconds: function seconds() {
            return this.date.getSeconds();
          },
          hoursList: function hoursList() {
            return Object(date_util_["getRangeHours"])(this.selectableRange);
          },
          minutesList: function minutesList() {
            return Object(date_util_["getRangeMinutes"])(this.selectableRange, this.hours);
          },
          arrowHourList: function arrowHourList() {
            var hours = this.hours;
            return [hours > 0 ? hours - 1 : void 0, hours, hours < 23 ? hours + 1 : void 0];
          },
          arrowMinuteList: function arrowMinuteList() {
            var minutes = this.minutes;
            return [minutes > 0 ? minutes - 1 : void 0, minutes, minutes < 59 ? minutes + 1 : void 0];
          },
          arrowSecondList: function arrowSecondList() {
            var seconds = this.seconds;
            return [seconds > 0 ? seconds - 1 : void 0, seconds, seconds < 59 ? seconds + 1 : void 0];
          }
        },
        data: function data() {
          return {
            selectableRange: [],
            currentScrollbar: null
          };
        },
        mounted: function mounted2() {
          var _this = this;
          this.$nextTick(function() {
            !_this.arrowControl && _this.bindScrollEvent();
          });
        },
        methods: {
          increase: function increase() {
            this.scrollDown(1);
          },
          decrease: function decrease() {
            this.scrollDown(-1);
          },
          modifyDateField: function modifyDateField(type2, value) {
            switch (type2) {
              case "hours":
                this.$emit("change", Object(date_util_["modifyTime"])(this.date, value, this.minutes, this.seconds));
                break;
              case "minutes":
                this.$emit("change", Object(date_util_["modifyTime"])(this.date, this.hours, value, this.seconds));
                break;
              case "seconds":
                this.$emit("change", Object(date_util_["modifyTime"])(this.date, this.hours, this.minutes, value));
                break;
            }
          },
          handleClick: function handleClick(type2, _ref) {
            var value = _ref.value, disabled = _ref.disabled;
            if (!disabled) {
              this.modifyDateField(type2, value);
              this.emitSelectRange(type2);
              this.adjustSpinner(type2, value);
            }
          },
          emitSelectRange: function emitSelectRange(type2) {
            if (type2 === "hours") {
              this.$emit("select-range", 0, 2);
            } else if (type2 === "minutes") {
              this.$emit("select-range", 3, 5);
            } else if (type2 === "seconds") {
              this.$emit("select-range", 6, 8);
            }
            this.currentScrollbar = type2;
          },
          bindScrollEvent: function bindScrollEvent() {
            var _this2 = this;
            var bindFunction = function bindFunction2(type2) {
              _this2.$refs[type2].wrap.onscroll = function(e) {
                _this2.handleScroll(type2, e);
              };
            };
            bindFunction("hours");
            bindFunction("minutes");
            bindFunction("seconds");
          },
          handleScroll: function handleScroll(type2) {
            var value = Math.min(Math.round((this.$refs[type2].wrap.scrollTop - (this.scrollBarHeight(type2) * 0.5 - 10) / this.typeItemHeight(type2) + 3) / this.typeItemHeight(type2)), type2 === "hours" ? 23 : 59);
            this.modifyDateField(type2, value);
          },
          // NOTE: used by datetime / date-range panel
          //       renamed from adjustScrollTop
          //       should try to refactory it
          adjustSpinners: function adjustSpinners() {
            this.adjustSpinner("hours", this.hours);
            this.adjustSpinner("minutes", this.minutes);
            this.adjustSpinner("seconds", this.seconds);
          },
          adjustCurrentSpinner: function adjustCurrentSpinner(type2) {
            this.adjustSpinner(type2, this[type2]);
          },
          adjustSpinner: function adjustSpinner(type2, value) {
            if (this.arrowControl)
              return;
            var el = this.$refs[type2].wrap;
            if (el) {
              el.scrollTop = Math.max(0, value * this.typeItemHeight(type2));
            }
          },
          scrollDown: function scrollDown(step3) {
            var _this3 = this;
            if (!this.currentScrollbar) {
              this.emitSelectRange("hours");
            }
            var label = this.currentScrollbar;
            var hoursList = this.hoursList;
            var now2 = this[label];
            if (this.currentScrollbar === "hours") {
              var total = Math.abs(step3);
              step3 = step3 > 0 ? 1 : -1;
              var length = hoursList.length;
              while (length-- && total) {
                now2 = (now2 + step3 + hoursList.length) % hoursList.length;
                if (hoursList[now2]) {
                  continue;
                }
                total--;
              }
              if (hoursList[now2])
                return;
            } else {
              now2 = (now2 + step3 + 60) % 60;
            }
            this.modifyDateField(label, now2);
            this.adjustSpinner(label, now2);
            this.$nextTick(function() {
              return _this3.emitSelectRange(_this3.currentScrollbar);
            });
          },
          amPm: function amPm(hour) {
            var shouldShowAmPm = this.amPmMode.toLowerCase() === "a";
            if (!shouldShowAmPm)
              return "";
            var isCapital = this.amPmMode === "A";
            var content = hour < 12 ? " am" : " pm";
            if (isCapital)
              content = content.toUpperCase();
            return content;
          },
          typeItemHeight: function typeItemHeight(type2) {
            return this.$refs[type2].$el.querySelector("li").offsetHeight;
          },
          scrollBarHeight: function scrollBarHeight(type2) {
            return this.$refs[type2].$el.offsetHeight;
          }
        }
      };
      var basic_time_spinnervue_type_script_lang_js_ = time_spinnervue_type_script_lang_js_;
      var time_spinner_component = normalizeComponent2(
        basic_time_spinnervue_type_script_lang_js_,
        time_spinnervue_type_template_id_1facadeb_render,
        time_spinnervue_type_template_id_1facadeb_staticRenderFns,
        false,
        null,
        null,
        null
      );
      time_spinner_component.options.__file = "packages/date-picker/src/basic/time-spinner.vue";
      var time_spinner = time_spinner_component.exports;
      var timevue_type_script_lang_js_ = {
        mixins: [locale_default.a],
        components: {
          TimeSpinner: time_spinner
        },
        props: {
          visible: Boolean,
          timeArrowControl: Boolean
        },
        watch: {
          visible: function visible(val) {
            var _this = this;
            if (val) {
              this.oldValue = this.value;
              this.$nextTick(function() {
                return _this.$refs.spinner.emitSelectRange("hours");
              });
            } else {
              this.needInitAdjust = true;
            }
          },
          value: function value(newVal) {
            var _this2 = this;
            var date3 = void 0;
            if (newVal instanceof Date) {
              date3 = Object(date_util_["limitTimeRange"])(newVal, this.selectableRange, this.format);
            } else if (!newVal) {
              date3 = this.defaultValue ? new Date(this.defaultValue) : /* @__PURE__ */ new Date();
            }
            this.date = date3;
            if (this.visible && this.needInitAdjust) {
              this.$nextTick(function(_) {
                return _this2.adjustSpinners();
              });
              this.needInitAdjust = false;
            }
          },
          selectableRange: function selectableRange(val) {
            this.$refs.spinner.selectableRange = val;
          },
          defaultValue: function defaultValue(val) {
            if (!Object(date_util_["isDate"])(this.value)) {
              this.date = val ? new Date(val) : /* @__PURE__ */ new Date();
            }
          }
        },
        data: function data() {
          return {
            popperClass: "",
            format: "HH:mm:ss",
            value: "",
            defaultValue: null,
            date: /* @__PURE__ */ new Date(),
            oldValue: /* @__PURE__ */ new Date(),
            selectableRange: [],
            selectionRange: [0, 2],
            disabled: false,
            arrowControl: false,
            needInitAdjust: true
          };
        },
        computed: {
          showSeconds: function showSeconds() {
            return (this.format || "").indexOf("ss") !== -1;
          },
          useArrow: function useArrow() {
            return this.arrowControl || this.timeArrowControl || false;
          },
          amPmMode: function amPmMode() {
            if ((this.format || "").indexOf("A") !== -1)
              return "A";
            if ((this.format || "").indexOf("a") !== -1)
              return "a";
            return "";
          }
        },
        methods: {
          handleCancel: function handleCancel() {
            this.$emit("pick", this.oldValue, false);
          },
          handleChange: function handleChange(date3) {
            if (this.visible) {
              this.date = Object(date_util_["clearMilliseconds"])(date3);
              if (this.isValidValue(this.date)) {
                this.$emit("pick", this.date, true);
              }
            }
          },
          setSelectionRange: function setSelectionRange(start, end) {
            this.$emit("select-range", start, end);
            this.selectionRange = [start, end];
          },
          handleConfirm: function handleConfirm() {
            var visible = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
            var first = arguments[1];
            if (first)
              return;
            var date3 = Object(date_util_["clearMilliseconds"])(Object(date_util_["limitTimeRange"])(this.date, this.selectableRange, this.format));
            this.$emit("pick", date3, visible, first);
          },
          handleKeydown: function handleKeydown(event) {
            var keyCode2 = event.keyCode;
            var mapping = { 38: -1, 40: 1, 37: -1, 39: 1 };
            if (keyCode2 === 37 || keyCode2 === 39) {
              var step3 = mapping[keyCode2];
              this.changeSelectionRange(step3);
              event.preventDefault();
              return;
            }
            if (keyCode2 === 38 || keyCode2 === 40) {
              var _step = mapping[keyCode2];
              this.$refs.spinner.scrollDown(_step);
              event.preventDefault();
              return;
            }
          },
          isValidValue: function isValidValue(date3) {
            return Object(date_util_["timeWithinRange"])(date3, this.selectableRange, this.format);
          },
          adjustSpinners: function adjustSpinners() {
            return this.$refs.spinner.adjustSpinners();
          },
          changeSelectionRange: function changeSelectionRange(step3) {
            var list = [0, 3].concat(this.showSeconds ? [6] : []);
            var mapping = ["hours", "minutes"].concat(this.showSeconds ? ["seconds"] : []);
            var index2 = list.indexOf(this.selectionRange[0]);
            var next = (index2 + step3 + list.length) % list.length;
            this.$refs.spinner.emitSelectRange(mapping[next]);
          }
        },
        mounted: function mounted2() {
          var _this3 = this;
          this.$nextTick(function() {
            return _this3.handleConfirm(true, true);
          });
          this.$emit("mounted");
        }
      };
      var panel_timevue_type_script_lang_js_ = timevue_type_script_lang_js_;
      var time_component = normalizeComponent2(
        panel_timevue_type_script_lang_js_,
        timevue_type_template_id_3d939089_render,
        timevue_type_template_id_3d939089_staticRenderFns,
        false,
        null,
        null,
        null
      );
      time_component.options.__file = "packages/date-picker/src/panel/time.vue";
      var panel_time = time_component.exports;
      var year_tablevue_type_template_id_c86ab5e0_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "table",
          { staticClass: "el-year-table", on: { click: _vm.handleYearTableClick } },
          [
            _c("tbody", [
              _c("tr", [
                _c(
                  "td",
                  {
                    staticClass: "available",
                    class: _vm.getCellStyle(_vm.startYear + 0)
                  },
                  [_c("a", { staticClass: "cell" }, [_vm._v(_vm._s(_vm.startYear))])]
                ),
                _c(
                  "td",
                  {
                    staticClass: "available",
                    class: _vm.getCellStyle(_vm.startYear + 1)
                  },
                  [
                    _c("a", { staticClass: "cell" }, [
                      _vm._v(_vm._s(_vm.startYear + 1))
                    ])
                  ]
                ),
                _c(
                  "td",
                  {
                    staticClass: "available",
                    class: _vm.getCellStyle(_vm.startYear + 2)
                  },
                  [
                    _c("a", { staticClass: "cell" }, [
                      _vm._v(_vm._s(_vm.startYear + 2))
                    ])
                  ]
                ),
                _c(
                  "td",
                  {
                    staticClass: "available",
                    class: _vm.getCellStyle(_vm.startYear + 3)
                  },
                  [
                    _c("a", { staticClass: "cell" }, [
                      _vm._v(_vm._s(_vm.startYear + 3))
                    ])
                  ]
                )
              ]),
              _c("tr", [
                _c(
                  "td",
                  {
                    staticClass: "available",
                    class: _vm.getCellStyle(_vm.startYear + 4)
                  },
                  [
                    _c("a", { staticClass: "cell" }, [
                      _vm._v(_vm._s(_vm.startYear + 4))
                    ])
                  ]
                ),
                _c(
                  "td",
                  {
                    staticClass: "available",
                    class: _vm.getCellStyle(_vm.startYear + 5)
                  },
                  [
                    _c("a", { staticClass: "cell" }, [
                      _vm._v(_vm._s(_vm.startYear + 5))
                    ])
                  ]
                ),
                _c(
                  "td",
                  {
                    staticClass: "available",
                    class: _vm.getCellStyle(_vm.startYear + 6)
                  },
                  [
                    _c("a", { staticClass: "cell" }, [
                      _vm._v(_vm._s(_vm.startYear + 6))
                    ])
                  ]
                ),
                _c(
                  "td",
                  {
                    staticClass: "available",
                    class: _vm.getCellStyle(_vm.startYear + 7)
                  },
                  [
                    _c("a", { staticClass: "cell" }, [
                      _vm._v(_vm._s(_vm.startYear + 7))
                    ])
                  ]
                )
              ]),
              _c("tr", [
                _c(
                  "td",
                  {
                    staticClass: "available",
                    class: _vm.getCellStyle(_vm.startYear + 8)
                  },
                  [
                    _c("a", { staticClass: "cell" }, [
                      _vm._v(_vm._s(_vm.startYear + 8))
                    ])
                  ]
                ),
                _c(
                  "td",
                  {
                    staticClass: "available",
                    class: _vm.getCellStyle(_vm.startYear + 9)
                  },
                  [
                    _c("a", { staticClass: "cell" }, [
                      _vm._v(_vm._s(_vm.startYear + 9))
                    ])
                  ]
                ),
                _c("td"),
                _c("td")
              ])
            ])
          ]
        );
      };
      var year_tablevue_type_template_id_c86ab5e0_staticRenderFns = [];
      year_tablevue_type_template_id_c86ab5e0_render._withStripped = true;
      var year_tablevue_type_script_lang_js_datesInYear = function datesInYear(year) {
        var numOfDays = Object(date_util_["getDayCountOfYear"])(year);
        var firstDay = new Date(year, 0, 1);
        return Object(date_util_["range"])(numOfDays).map(function(n) {
          return Object(date_util_["nextDate"])(firstDay, n);
        });
      };
      var year_tablevue_type_script_lang_js_ = {
        props: {
          disabledDate: {},
          value: {},
          defaultValue: {
            validator: function validator(val) {
              return val === null || val instanceof Date && Object(date_util_["isDate"])(val);
            }
          },
          date: {},
          selectionMode: {}
        },
        computed: {
          startYear: function startYear() {
            return Math.floor(this.date.getFullYear() / 10) * 10;
          }
        },
        methods: {
          getCellStyle: function getCellStyle(year) {
            var style2 = {};
            var today = /* @__PURE__ */ new Date();
            style2.disabled = typeof this.disabledDate === "function" ? year_tablevue_type_script_lang_js_datesInYear(year).every(this.disabledDate) : false;
            style2.current = Object(util_["arrayFindIndex"])(Object(util_["coerceTruthyValueToArray"])(this.value), function(date3) {
              return date3.getFullYear() === year;
            }) >= 0;
            style2.today = today.getFullYear() === year;
            style2.default = this.defaultValue && this.defaultValue.getFullYear() === year;
            return style2;
          },
          handleYearTableClick: function handleYearTableClick(event) {
            var target2 = event.target;
            if (target2.tagName === "A") {
              if (Object(dom_["hasClass"])(target2.parentNode, "disabled"))
                return;
              var year = target2.textContent || target2.innerText;
              if (this.selectionMode === "years") {
                var value = this.value || [];
                var idx = Object(util_["arrayFindIndex"])(value, function(date3) {
                  return date3.getFullYear() === Number(year);
                });
                var newValue = idx > -1 ? [].concat(value.slice(0, idx), value.slice(idx + 1)) : [].concat(value, [new Date(year)]);
                this.$emit("pick", newValue);
              } else {
                this.$emit("pick", Number(year));
              }
            }
          }
        }
      };
      var basic_year_tablevue_type_script_lang_js_ = year_tablevue_type_script_lang_js_;
      var year_table_component = normalizeComponent2(
        basic_year_tablevue_type_script_lang_js_,
        year_tablevue_type_template_id_c86ab5e0_render,
        year_tablevue_type_template_id_c86ab5e0_staticRenderFns,
        false,
        null,
        null,
        null
      );
      year_table_component.options.__file = "packages/date-picker/src/basic/year-table.vue";
      var year_table = year_table_component.exports;
      var month_tablevue_type_template_id_654d4f42_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "table",
          {
            staticClass: "el-month-table",
            on: { click: _vm.handleMonthTableClick, mousemove: _vm.handleMouseMove }
          },
          [
            _c(
              "tbody",
              _vm._l(_vm.rows, function(row, key) {
                return _c(
                  "tr",
                  { key },
                  _vm._l(row, function(cell, key2) {
                    return _c("td", { key: key2, class: _vm.getCellStyle(cell) }, [
                      _c("div", [
                        _c("a", { staticClass: "cell" }, [
                          _vm._v(
                            _vm._s(
                              _vm.t("el.datepicker.months." + _vm.months[cell.text])
                            )
                          )
                        ])
                      ])
                    ]);
                  }),
                  0
                );
              }),
              0
            )
          ]
        );
      };
      var month_tablevue_type_template_id_654d4f42_staticRenderFns = [];
      month_tablevue_type_template_id_654d4f42_render._withStripped = true;
      var month_tablevue_type_script_lang_js_datesInMonth = function datesInMonth(year, month) {
        var numOfDays = Object(date_util_["getDayCountOfMonth"])(year, month);
        var firstDay = new Date(year, month, 1);
        return Object(date_util_["range"])(numOfDays).map(function(n) {
          return Object(date_util_["nextDate"])(firstDay, n);
        });
      };
      var clearDate = function clearDate2(date3) {
        return new Date(date3.getFullYear(), date3.getMonth());
      };
      var getMonthTimestamp = function getMonthTimestamp2(time) {
        if (typeof time === "number" || typeof time === "string") {
          return clearDate(new Date(time)).getTime();
        } else if (time instanceof Date) {
          return clearDate(time).getTime();
        } else {
          return NaN;
        }
      };
      var month_tablevue_type_script_lang_js_removeFromArray = function removeFromArray(arr, pred) {
        var idx = typeof pred === "function" ? Object(util_["arrayFindIndex"])(arr, pred) : arr.indexOf(pred);
        return idx >= 0 ? [].concat(arr.slice(0, idx), arr.slice(idx + 1)) : arr;
      };
      var month_tablevue_type_script_lang_js_ = {
        props: {
          disabledDate: {},
          value: {},
          selectionMode: {
            default: "month"
          },
          minDate: {},
          maxDate: {},
          defaultValue: {
            validator: function validator(val) {
              return val === null || Object(date_util_["isDate"])(val) || Array.isArray(val) && val.every(date_util_["isDate"]);
            }
          },
          date: {},
          rangeState: {
            default: function _default2() {
              return {
                endDate: null,
                selecting: false
              };
            }
          }
        },
        mixins: [locale_default.a],
        watch: {
          "rangeState.endDate": function rangeStateEndDate(newVal) {
            this.markRange(this.minDate, newVal);
          },
          minDate: function minDate(newVal, oldVal) {
            if (getMonthTimestamp(newVal) !== getMonthTimestamp(oldVal)) {
              this.markRange(this.minDate, this.maxDate);
            }
          },
          maxDate: function maxDate(newVal, oldVal) {
            if (getMonthTimestamp(newVal) !== getMonthTimestamp(oldVal)) {
              this.markRange(this.minDate, this.maxDate);
            }
          }
        },
        data: function data() {
          return {
            months: ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"],
            tableRows: [[], [], []],
            lastRow: null,
            lastColumn: null
          };
        },
        methods: {
          cellMatchesDate: function cellMatchesDate(cell, date3) {
            var value = new Date(date3);
            return this.date.getFullYear() === value.getFullYear() && Number(cell.text) === value.getMonth();
          },
          getCellStyle: function getCellStyle(cell) {
            var _this = this;
            var style2 = {};
            var year = this.date.getFullYear();
            var today = /* @__PURE__ */ new Date();
            var month = cell.text;
            var defaultValue = this.defaultValue ? Array.isArray(this.defaultValue) ? this.defaultValue : [this.defaultValue] : [];
            style2.disabled = typeof this.disabledDate === "function" ? month_tablevue_type_script_lang_js_datesInMonth(year, month).every(this.disabledDate) : false;
            style2.current = Object(util_["arrayFindIndex"])(Object(util_["coerceTruthyValueToArray"])(this.value), function(date3) {
              return date3.getFullYear() === year && date3.getMonth() === month;
            }) >= 0;
            style2.today = today.getFullYear() === year && today.getMonth() === month;
            style2.default = defaultValue.some(function(date3) {
              return _this.cellMatchesDate(cell, date3);
            });
            if (cell.inRange) {
              style2["in-range"] = true;
              if (cell.start) {
                style2["start-date"] = true;
              }
              if (cell.end) {
                style2["end-date"] = true;
              }
            }
            return style2;
          },
          getMonthOfCell: function getMonthOfCell(month) {
            var year = this.date.getFullYear();
            return new Date(year, month, 1);
          },
          markRange: function markRange(minDate, maxDate) {
            minDate = getMonthTimestamp(minDate);
            maxDate = getMonthTimestamp(maxDate) || minDate;
            var _ref = [Math.min(minDate, maxDate), Math.max(minDate, maxDate)];
            minDate = _ref[0];
            maxDate = _ref[1];
            var rows = this.rows;
            for (var i = 0, k = rows.length; i < k; i++) {
              var row = rows[i];
              for (var j = 0, l = row.length; j < l; j++) {
                var cell = row[j];
                var index2 = i * 4 + j;
                var time = new Date(this.date.getFullYear(), index2).getTime();
                cell.inRange = minDate && time >= minDate && time <= maxDate;
                cell.start = minDate && time === minDate;
                cell.end = maxDate && time === maxDate;
              }
            }
          },
          handleMouseMove: function handleMouseMove(event) {
            if (!this.rangeState.selecting)
              return;
            var target2 = event.target;
            if (target2.tagName === "A") {
              target2 = target2.parentNode.parentNode;
            }
            if (target2.tagName === "DIV") {
              target2 = target2.parentNode;
            }
            if (target2.tagName !== "TD")
              return;
            var row = target2.parentNode.rowIndex;
            var column = target2.cellIndex;
            if (this.rows[row][column].disabled)
              return;
            if (row !== this.lastRow || column !== this.lastColumn) {
              this.lastRow = row;
              this.lastColumn = column;
              this.$emit("changerange", {
                minDate: this.minDate,
                maxDate: this.maxDate,
                rangeState: {
                  selecting: true,
                  endDate: this.getMonthOfCell(row * 4 + column)
                }
              });
            }
          },
          handleMonthTableClick: function handleMonthTableClick(event) {
            var target2 = event.target;
            if (target2.tagName === "A") {
              target2 = target2.parentNode.parentNode;
            }
            if (target2.tagName === "DIV") {
              target2 = target2.parentNode;
            }
            if (target2.tagName !== "TD")
              return;
            if (Object(dom_["hasClass"])(target2, "disabled"))
              return;
            var column = target2.cellIndex;
            var row = target2.parentNode.rowIndex;
            var month = row * 4 + column;
            var newDate = this.getMonthOfCell(month);
            if (this.selectionMode === "range") {
              if (!this.rangeState.selecting) {
                this.$emit("pick", { minDate: newDate, maxDate: null });
                this.rangeState.selecting = true;
              } else {
                if (newDate >= this.minDate) {
                  this.$emit("pick", { minDate: this.minDate, maxDate: newDate });
                } else {
                  this.$emit("pick", { minDate: newDate, maxDate: this.minDate });
                }
                this.rangeState.selecting = false;
              }
            } else if (this.selectionMode === "months") {
              var value = this.value || [];
              var year = this.date.getFullYear();
              var newValue = Object(util_["arrayFindIndex"])(value, function(date3) {
                return date3.getFullYear() === year && date3.getMonth() === month;
              }) >= 0 ? month_tablevue_type_script_lang_js_removeFromArray(value, function(date3) {
                return date3.getTime() === newDate.getTime();
              }) : [].concat(value, [newDate]);
              this.$emit("pick", newValue);
            } else {
              this.$emit("pick", month);
            }
          }
        },
        computed: {
          rows: function rows() {
            var _this2 = this;
            var rows2 = this.tableRows;
            var disabledDate = this.disabledDate;
            var selectedDate = [];
            var now2 = getMonthTimestamp(/* @__PURE__ */ new Date());
            for (var i = 0; i < 3; i++) {
              var row = rows2[i];
              var _loop = function _loop2(j2) {
                var cell = row[j2];
                if (!cell) {
                  cell = { row: i, column: j2, type: "normal", inRange: false, start: false, end: false };
                }
                cell.type = "normal";
                var index2 = i * 4 + j2;
                var time = new Date(_this2.date.getFullYear(), index2).getTime();
                cell.inRange = time >= getMonthTimestamp(_this2.minDate) && time <= getMonthTimestamp(_this2.maxDate);
                cell.start = _this2.minDate && time === getMonthTimestamp(_this2.minDate);
                cell.end = _this2.maxDate && time === getMonthTimestamp(_this2.maxDate);
                var isToday = time === now2;
                if (isToday) {
                  cell.type = "today";
                }
                cell.text = index2;
                var cellDate = new Date(time);
                cell.disabled = typeof disabledDate === "function" && disabledDate(cellDate);
                cell.selected = Object(util_["arrayFind"])(selectedDate, function(date3) {
                  return date3.getTime() === cellDate.getTime();
                });
                _this2.$set(row, j2, cell);
              };
              for (var j = 0; j < 4; j++) {
                _loop(j);
              }
            }
            return rows2;
          }
        }
      };
      var basic_month_tablevue_type_script_lang_js_ = month_tablevue_type_script_lang_js_;
      var month_table_component = normalizeComponent2(
        basic_month_tablevue_type_script_lang_js_,
        month_tablevue_type_template_id_654d4f42_render,
        month_tablevue_type_template_id_654d4f42_staticRenderFns,
        false,
        null,
        null,
        null
      );
      month_table_component.options.__file = "packages/date-picker/src/basic/month-table.vue";
      var month_table = month_table_component.exports;
      var date_tablevue_type_template_id_5d1f3341_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "table",
          {
            staticClass: "el-date-table",
            class: { "is-week-mode": _vm.selectionMode === "week" },
            attrs: { cellspacing: "0", cellpadding: "0" },
            on: { click: _vm.handleClick, mousemove: _vm.handleMouseMove }
          },
          [
            _c(
              "tbody",
              [
                _c(
                  "tr",
                  [
                    _vm.showWeekNumber ? _c("th", [_vm._v(_vm._s(_vm.t("el.datepicker.week")))]) : _vm._e(),
                    _vm._l(_vm.WEEKS, function(week, key) {
                      return _c("th", { key }, [
                        _vm._v(_vm._s(_vm.t("el.datepicker.weeks." + week)))
                      ]);
                    })
                  ],
                  2
                ),
                _vm._l(_vm.rows, function(row, key) {
                  return _c(
                    "tr",
                    {
                      key,
                      staticClass: "el-date-table__row",
                      class: { current: _vm.isWeekActive(row[1]) }
                    },
                    _vm._l(row, function(cell, key2) {
                      return _c("td", { key: key2, class: _vm.getCellClasses(cell) }, [
                        _c("div", [
                          _c("span", [
                            _vm._v("\n          " + _vm._s(cell.text) + "\n        ")
                          ])
                        ])
                      ]);
                    }),
                    0
                  );
                })
              ],
              2
            )
          ]
        );
      };
      var date_tablevue_type_template_id_5d1f3341_staticRenderFns = [];
      date_tablevue_type_template_id_5d1f3341_render._withStripped = true;
      var _WEEKS = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
      var date_tablevue_type_script_lang_js_getDateTimestamp = function getDateTimestamp(time) {
        if (typeof time === "number" || typeof time === "string") {
          return Object(date_util_["clearTime"])(new Date(time)).getTime();
        } else if (time instanceof Date) {
          return Object(date_util_["clearTime"])(time).getTime();
        } else {
          return NaN;
        }
      };
      var date_tablevue_type_script_lang_js_removeFromArray = function removeFromArray(arr, pred) {
        var idx = typeof pred === "function" ? Object(util_["arrayFindIndex"])(arr, pred) : arr.indexOf(pred);
        return idx >= 0 ? [].concat(arr.slice(0, idx), arr.slice(idx + 1)) : arr;
      };
      var date_tablevue_type_script_lang_js_ = {
        mixins: [locale_default.a],
        props: {
          firstDayOfWeek: {
            default: 7,
            type: Number,
            validator: function validator(val) {
              return val >= 1 && val <= 7;
            }
          },
          value: {},
          defaultValue: {
            validator: function validator(val) {
              return val === null || Object(date_util_["isDate"])(val) || Array.isArray(val) && val.every(date_util_["isDate"]);
            }
          },
          date: {},
          selectionMode: {
            default: "day"
          },
          showWeekNumber: {
            type: Boolean,
            default: false
          },
          disabledDate: {},
          cellClassName: {},
          minDate: {},
          maxDate: {},
          rangeState: {
            default: function _default2() {
              return {
                endDate: null,
                selecting: false
              };
            }
          }
        },
        computed: {
          offsetDay: function offsetDay() {
            var week = this.firstDayOfWeek;
            return week > 3 ? 7 - week : -week;
          },
          WEEKS: function WEEKS() {
            var week = this.firstDayOfWeek;
            return _WEEKS.concat(_WEEKS).slice(week, week + 7);
          },
          year: function year() {
            return this.date.getFullYear();
          },
          month: function month() {
            return this.date.getMonth();
          },
          startDate: function startDate() {
            return Object(date_util_["getStartDateOfMonth"])(this.year, this.month);
          },
          rows: function rows() {
            var _this = this;
            var date3 = new Date(this.year, this.month, 1);
            var day = Object(date_util_["getFirstDayOfMonth"])(date3);
            var dateCountOfMonth = Object(date_util_["getDayCountOfMonth"])(date3.getFullYear(), date3.getMonth());
            var dateCountOfLastMonth = Object(date_util_["getDayCountOfMonth"])(date3.getFullYear(), date3.getMonth() === 0 ? 11 : date3.getMonth() - 1);
            day = day === 0 ? 7 : day;
            var offset = this.offsetDay;
            var rows2 = this.tableRows;
            var count = 1;
            var startDate = this.startDate;
            var disabledDate = this.disabledDate;
            var cellClassName = this.cellClassName;
            var selectedDate = this.selectionMode === "dates" ? Object(util_["coerceTruthyValueToArray"])(this.value) : [];
            var now2 = date_tablevue_type_script_lang_js_getDateTimestamp(/* @__PURE__ */ new Date());
            for (var i = 0; i < 6; i++) {
              var row = rows2[i];
              if (this.showWeekNumber) {
                if (!row[0]) {
                  row[0] = { type: "week", text: Object(date_util_["getWeekNumber"])(Object(date_util_["nextDate"])(startDate, i * 7 + 1)) };
                }
              }
              var _loop = function _loop2(j2) {
                var cell = row[_this.showWeekNumber ? j2 + 1 : j2];
                if (!cell) {
                  cell = { row: i, column: j2, type: "normal", inRange: false, start: false, end: false };
                }
                cell.type = "normal";
                var index2 = i * 7 + j2;
                var time = Object(date_util_["nextDate"])(startDate, index2 - offset).getTime();
                cell.inRange = time >= date_tablevue_type_script_lang_js_getDateTimestamp(_this.minDate) && time <= date_tablevue_type_script_lang_js_getDateTimestamp(_this.maxDate);
                cell.start = _this.minDate && time === date_tablevue_type_script_lang_js_getDateTimestamp(_this.minDate);
                cell.end = _this.maxDate && time === date_tablevue_type_script_lang_js_getDateTimestamp(_this.maxDate);
                var isToday = time === now2;
                if (isToday) {
                  cell.type = "today";
                }
                if (i >= 0 && i <= 1) {
                  var numberOfDaysFromPreviousMonth = day + offset < 0 ? 7 + day + offset : day + offset;
                  if (j2 + i * 7 >= numberOfDaysFromPreviousMonth) {
                    cell.text = count++;
                  } else {
                    cell.text = dateCountOfLastMonth - (numberOfDaysFromPreviousMonth - j2 % 7) + 1 + i * 7;
                    cell.type = "prev-month";
                  }
                } else {
                  if (count <= dateCountOfMonth) {
                    cell.text = count++;
                  } else {
                    cell.text = count++ - dateCountOfMonth;
                    cell.type = "next-month";
                  }
                }
                var cellDate = new Date(time);
                cell.disabled = typeof disabledDate === "function" && disabledDate(cellDate);
                cell.selected = Object(util_["arrayFind"])(selectedDate, function(date4) {
                  return date4.getTime() === cellDate.getTime();
                });
                cell.customClass = typeof cellClassName === "function" && cellClassName(cellDate);
                _this.$set(row, _this.showWeekNumber ? j2 + 1 : j2, cell);
              };
              for (var j = 0; j < 7; j++) {
                _loop(j);
              }
              if (this.selectionMode === "week") {
                var start = this.showWeekNumber ? 1 : 0;
                var end = this.showWeekNumber ? 7 : 6;
                var isWeekActive = this.isWeekActive(row[start + 1]);
                row[start].inRange = isWeekActive;
                row[start].start = isWeekActive;
                row[end].inRange = isWeekActive;
                row[end].end = isWeekActive;
              }
            }
            return rows2;
          }
        },
        watch: {
          "rangeState.endDate": function rangeStateEndDate(newVal) {
            this.markRange(this.minDate, newVal);
          },
          minDate: function minDate(newVal, oldVal) {
            if (date_tablevue_type_script_lang_js_getDateTimestamp(newVal) !== date_tablevue_type_script_lang_js_getDateTimestamp(oldVal)) {
              this.markRange(this.minDate, this.maxDate);
            }
          },
          maxDate: function maxDate(newVal, oldVal) {
            if (date_tablevue_type_script_lang_js_getDateTimestamp(newVal) !== date_tablevue_type_script_lang_js_getDateTimestamp(oldVal)) {
              this.markRange(this.minDate, this.maxDate);
            }
          }
        },
        data: function data() {
          return {
            tableRows: [[], [], [], [], [], []],
            lastRow: null,
            lastColumn: null
          };
        },
        methods: {
          cellMatchesDate: function cellMatchesDate(cell, date3) {
            var value = new Date(date3);
            return this.year === value.getFullYear() && this.month === value.getMonth() && Number(cell.text) === value.getDate();
          },
          getCellClasses: function getCellClasses(cell) {
            var _this2 = this;
            var selectionMode = this.selectionMode;
            var defaultValue = this.defaultValue ? Array.isArray(this.defaultValue) ? this.defaultValue : [this.defaultValue] : [];
            var classes = [];
            if ((cell.type === "normal" || cell.type === "today") && !cell.disabled) {
              classes.push("available");
              if (cell.type === "today") {
                classes.push("today");
              }
            } else {
              classes.push(cell.type);
            }
            if (cell.type === "normal" && defaultValue.some(function(date3) {
              return _this2.cellMatchesDate(cell, date3);
            })) {
              classes.push("default");
            }
            if (selectionMode === "day" && (cell.type === "normal" || cell.type === "today") && this.cellMatchesDate(cell, this.value)) {
              classes.push("current");
            }
            if (cell.inRange && (cell.type === "normal" || cell.type === "today" || this.selectionMode === "week")) {
              classes.push("in-range");
              if (cell.start) {
                classes.push("start-date");
              }
              if (cell.end) {
                classes.push("end-date");
              }
            }
            if (cell.disabled) {
              classes.push("disabled");
            }
            if (cell.selected) {
              classes.push("selected");
            }
            if (cell.customClass) {
              classes.push(cell.customClass);
            }
            return classes.join(" ");
          },
          getDateOfCell: function getDateOfCell(row, column) {
            var offsetFromStart = row * 7 + (column - (this.showWeekNumber ? 1 : 0)) - this.offsetDay;
            return Object(date_util_["nextDate"])(this.startDate, offsetFromStart);
          },
          isWeekActive: function isWeekActive(cell) {
            if (this.selectionMode !== "week")
              return false;
            var newDate = new Date(this.year, this.month, 1);
            var year = newDate.getFullYear();
            var month = newDate.getMonth();
            if (cell.type === "prev-month") {
              newDate.setMonth(month === 0 ? 11 : month - 1);
              newDate.setFullYear(month === 0 ? year - 1 : year);
            }
            if (cell.type === "next-month") {
              newDate.setMonth(month === 11 ? 0 : month + 1);
              newDate.setFullYear(month === 11 ? year + 1 : year);
            }
            newDate.setDate(parseInt(cell.text, 10));
            if (Object(date_util_["isDate"])(this.value)) {
              var dayOffset = (this.value.getDay() - this.firstDayOfWeek + 7) % 7 - 1;
              var weekDate = Object(date_util_["prevDate"])(this.value, dayOffset);
              return weekDate.getTime() === newDate.getTime();
            }
            return false;
          },
          markRange: function markRange(minDate, maxDate) {
            minDate = date_tablevue_type_script_lang_js_getDateTimestamp(minDate);
            maxDate = date_tablevue_type_script_lang_js_getDateTimestamp(maxDate) || minDate;
            var _ref = [Math.min(minDate, maxDate), Math.max(minDate, maxDate)];
            minDate = _ref[0];
            maxDate = _ref[1];
            var startDate = this.startDate;
            var rows = this.rows;
            for (var i = 0, k = rows.length; i < k; i++) {
              var row = rows[i];
              for (var j = 0, l = row.length; j < l; j++) {
                if (this.showWeekNumber && j === 0)
                  continue;
                var _cell = row[j];
                var index2 = i * 7 + j + (this.showWeekNumber ? -1 : 0);
                var time = Object(date_util_["nextDate"])(startDate, index2 - this.offsetDay).getTime();
                _cell.inRange = minDate && time >= minDate && time <= maxDate;
                _cell.start = minDate && time === minDate;
                _cell.end = maxDate && time === maxDate;
              }
            }
          },
          handleMouseMove: function handleMouseMove(event) {
            if (!this.rangeState.selecting)
              return;
            var target2 = event.target;
            if (target2.tagName === "SPAN") {
              target2 = target2.parentNode.parentNode;
            }
            if (target2.tagName === "DIV") {
              target2 = target2.parentNode;
            }
            if (target2.tagName !== "TD")
              return;
            var row = target2.parentNode.rowIndex - 1;
            var column = target2.cellIndex;
            if (this.rows[row][column].disabled)
              return;
            if (row !== this.lastRow || column !== this.lastColumn) {
              this.lastRow = row;
              this.lastColumn = column;
              this.$emit("changerange", {
                minDate: this.minDate,
                maxDate: this.maxDate,
                rangeState: {
                  selecting: true,
                  endDate: this.getDateOfCell(row, column)
                }
              });
            }
          },
          handleClick: function handleClick(event) {
            var target2 = event.target;
            if (target2.tagName === "SPAN") {
              target2 = target2.parentNode.parentNode;
            }
            if (target2.tagName === "DIV") {
              target2 = target2.parentNode;
            }
            if (target2.tagName !== "TD")
              return;
            var row = target2.parentNode.rowIndex - 1;
            var column = this.selectionMode === "week" ? 1 : target2.cellIndex;
            var cell = this.rows[row][column];
            if (cell.disabled || cell.type === "week")
              return;
            var newDate = this.getDateOfCell(row, column);
            if (this.selectionMode === "range") {
              if (!this.rangeState.selecting) {
                this.$emit("pick", { minDate: newDate, maxDate: null });
                this.rangeState.selecting = true;
              } else {
                if (newDate >= this.minDate) {
                  this.$emit("pick", { minDate: this.minDate, maxDate: newDate });
                } else {
                  this.$emit("pick", { minDate: newDate, maxDate: this.minDate });
                }
                this.rangeState.selecting = false;
              }
            } else if (this.selectionMode === "day") {
              this.$emit("pick", newDate);
            } else if (this.selectionMode === "week") {
              var weekNumber = Object(date_util_["getWeekNumber"])(newDate);
              var value = newDate.getFullYear() + "w" + weekNumber;
              this.$emit("pick", {
                year: newDate.getFullYear(),
                week: weekNumber,
                value,
                date: newDate
              });
            } else if (this.selectionMode === "dates") {
              var _value = this.value || [];
              var newValue = cell.selected ? date_tablevue_type_script_lang_js_removeFromArray(_value, function(date3) {
                return date3.getTime() === newDate.getTime();
              }) : [].concat(_value, [newDate]);
              this.$emit("pick", newValue);
            }
          }
        }
      };
      var basic_date_tablevue_type_script_lang_js_ = date_tablevue_type_script_lang_js_;
      var date_table_component = normalizeComponent2(
        basic_date_tablevue_type_script_lang_js_,
        date_tablevue_type_template_id_5d1f3341_render,
        date_tablevue_type_template_id_5d1f3341_staticRenderFns,
        false,
        null,
        null,
        null
      );
      date_table_component.options.__file = "packages/date-picker/src/basic/date-table.vue";
      var date_table = date_table_component.exports;
      var datevue_type_script_lang_js_ = {
        mixins: [locale_default.a],
        directives: { Clickoutside: clickoutside_default.a },
        watch: {
          showTime: function showTime(val) {
            var _this = this;
            if (!val)
              return;
            this.$nextTick(function(_) {
              var inputElm = _this.$refs.input.$el;
              if (inputElm) {
                _this.pickerWidth = inputElm.getBoundingClientRect().width + 10;
              }
            });
          },
          value: function value(val) {
            if (this.selectionMode === "dates" && this.value)
              return;
            if (this.selectionMode === "months" && this.value)
              return;
            if (this.selectionMode === "years" && this.value)
              return;
            if (Object(date_util_["isDate"])(val)) {
              this.date = new Date(val);
            } else {
              this.date = this.getDefaultValue();
            }
          },
          defaultValue: function defaultValue(val) {
            if (!Object(date_util_["isDate"])(this.value)) {
              this.date = val ? new Date(val) : /* @__PURE__ */ new Date();
            }
          },
          timePickerVisible: function timePickerVisible(val) {
            var _this2 = this;
            if (val)
              this.$nextTick(function() {
                return _this2.$refs.timepicker.adjustSpinners();
              });
          },
          selectionMode: function selectionMode(newVal) {
            if (newVal === "month") {
              if (this.currentView !== "year" || this.currentView !== "month") {
                this.currentView = "month";
              }
            } else if (newVal === "dates") {
              this.currentView = "date";
            } else if (newVal === "years") {
              this.currentView = "year";
            } else if (newVal === "months") {
              this.currentView = "month";
            }
          }
        },
        methods: {
          proxyTimePickerDataProperties: function proxyTimePickerDataProperties() {
            var _this3 = this;
            var format2 = function format3(timeFormat) {
              _this3.$refs.timepicker.format = timeFormat;
            };
            var value = function value2(_value) {
              _this3.$refs.timepicker.value = _value;
            };
            var date3 = function date4(_date) {
              _this3.$refs.timepicker.date = _date;
            };
            var selectableRange = function selectableRange2(_selectableRange) {
              _this3.$refs.timepicker.selectableRange = _selectableRange;
            };
            this.$watch("value", value);
            this.$watch("date", date3);
            this.$watch("selectableRange", selectableRange);
            format2(this.timeFormat);
            value(this.value);
            date3(this.date);
            selectableRange(this.selectableRange);
          },
          handleClear: function handleClear() {
            this.date = this.getDefaultValue();
            this.$emit("pick", null);
          },
          emit: function emit(value) {
            var _this4 = this;
            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            if (!value) {
              this.$emit.apply(this, ["pick", value].concat(args));
            } else if (Array.isArray(value)) {
              var dates = value.map(function(date3) {
                return _this4.showTime ? Object(date_util_["clearMilliseconds"])(date3) : Object(date_util_["clearTime"])(date3);
              });
              this.$emit.apply(this, ["pick", dates].concat(args));
            } else {
              this.$emit.apply(this, ["pick", this.showTime ? Object(date_util_["clearMilliseconds"])(value) : Object(date_util_["clearTime"])(value)].concat(args));
            }
            this.userInputDate = null;
            this.userInputTime = null;
          },
          // resetDate() {
          //   this.date = new Date(this.date);
          // },
          showMonthPicker: function showMonthPicker() {
            this.currentView = "month";
          },
          showYearPicker: function showYearPicker() {
            this.currentView = "year";
          },
          // XXX: 没用到
          // handleLabelClick() {
          //   if (this.currentView === 'date') {
          //     this.showMonthPicker();
          //   } else if (this.currentView === 'month') {
          //     this.showYearPicker();
          //   }
          // },
          prevMonth: function prevMonth() {
            this.date = Object(date_util_["prevMonth"])(this.date);
          },
          nextMonth: function nextMonth() {
            this.date = Object(date_util_["nextMonth"])(this.date);
          },
          prevYear: function prevYear() {
            if (this.currentView === "year") {
              this.date = Object(date_util_["prevYear"])(this.date, 10);
            } else {
              this.date = Object(date_util_["prevYear"])(this.date);
            }
          },
          nextYear: function nextYear() {
            if (this.currentView === "year") {
              this.date = Object(date_util_["nextYear"])(this.date, 10);
            } else {
              this.date = Object(date_util_["nextYear"])(this.date);
            }
          },
          handleShortcutClick: function handleShortcutClick(shortcut) {
            if (shortcut.onClick) {
              shortcut.onClick(this);
            }
          },
          handleTimePick: function handleTimePick(value, visible, first) {
            if (Object(date_util_["isDate"])(value)) {
              var newDate = this.value ? Object(date_util_["modifyTime"])(this.value, value.getHours(), value.getMinutes(), value.getSeconds()) : Object(date_util_["modifyWithTimeString"])(this.getDefaultValue(), this.defaultTime);
              this.date = newDate;
              this.emit(this.date, true);
            } else {
              this.emit(value, true);
            }
            if (!first) {
              this.timePickerVisible = visible;
            }
          },
          handleTimePickClose: function handleTimePickClose() {
            this.timePickerVisible = false;
          },
          handleMonthPick: function handleMonthPick(month) {
            if (this.selectionMode === "month") {
              this.date = Object(date_util_["modifyDate"])(this.date, this.year, month, 1);
              this.emit(this.date);
            } else if (this.selectionMode === "months") {
              this.emit(month, true);
            } else {
              this.date = Object(date_util_["changeYearMonthAndClampDate"])(this.date, this.year, month);
              this.currentView = "date";
            }
          },
          handleDatePick: function handleDatePick(value) {
            if (this.selectionMode === "day") {
              var newDate = this.value ? Object(date_util_["modifyDate"])(this.value, value.getFullYear(), value.getMonth(), value.getDate()) : Object(date_util_["modifyWithTimeString"])(value, this.defaultTime);
              if (!this.checkDateWithinRange(newDate)) {
                newDate = Object(date_util_["modifyDate"])(this.selectableRange[0][0], value.getFullYear(), value.getMonth(), value.getDate());
              }
              this.date = newDate;
              this.emit(this.date, this.showTime);
            } else if (this.selectionMode === "week") {
              this.emit(value.date);
            } else if (this.selectionMode === "dates") {
              this.emit(value, true);
            }
          },
          handleYearPick: function handleYearPick(year) {
            if (this.selectionMode === "year") {
              this.date = Object(date_util_["modifyDate"])(this.date, year, 0, 1);
              this.emit(this.date);
            } else if (this.selectionMode === "years") {
              this.emit(year, true);
            } else {
              this.date = Object(date_util_["changeYearMonthAndClampDate"])(this.date, year, this.month);
              this.currentView = "month";
            }
          },
          changeToNow: function changeToNow() {
            if ((!this.disabledDate || !this.disabledDate(/* @__PURE__ */ new Date())) && this.checkDateWithinRange(/* @__PURE__ */ new Date())) {
              this.date = /* @__PURE__ */ new Date();
              this.emit(this.date);
            }
          },
          confirm: function confirm() {
            if (this.selectionMode === "dates" || this.selectionMode === "months" || this.selectionMode === "years") {
              this.emit(this.value);
            } else {
              var value = this.value ? this.value : Object(date_util_["modifyWithTimeString"])(this.getDefaultValue(), this.defaultTime);
              this.date = new Date(value);
              this.emit(value);
            }
          },
          resetView: function resetView() {
            if (this.selectionMode === "month" || this.selectionMode === "months") {
              this.currentView = "month";
            } else if (this.selectionMode === "year" || this.selectionMode === "years") {
              this.currentView = "year";
            } else {
              this.currentView = "date";
            }
          },
          handleEnter: function handleEnter() {
            document.body.addEventListener("keydown", this.handleKeydown);
          },
          handleLeave: function handleLeave() {
            this.$emit("dodestroy");
            document.body.removeEventListener("keydown", this.handleKeydown);
          },
          handleKeydown: function handleKeydown(event) {
            var keyCode2 = event.keyCode;
            var list = [38, 40, 37, 39];
            if (this.visible && !this.timePickerVisible) {
              if (list.indexOf(keyCode2) !== -1) {
                this.handleKeyControl(keyCode2);
                event.stopPropagation();
                event.preventDefault();
              }
              if (keyCode2 === 13 && this.userInputDate === null && this.userInputTime === null) {
                this.emit(this.date, false);
              }
            }
          },
          handleKeyControl: function handleKeyControl(keyCode2) {
            var mapping = {
              "year": {
                38: -4,
                40: 4,
                37: -1,
                39: 1,
                offset: function offset(date3, step3) {
                  return date3.setFullYear(date3.getFullYear() + step3);
                }
              },
              "month": {
                38: -4,
                40: 4,
                37: -1,
                39: 1,
                offset: function offset(date3, step3) {
                  return date3.setMonth(date3.getMonth() + step3);
                }
              },
              "week": {
                38: -1,
                40: 1,
                37: -1,
                39: 1,
                offset: function offset(date3, step3) {
                  return date3.setDate(date3.getDate() + step3 * 7);
                }
              },
              "day": {
                38: -7,
                40: 7,
                37: -1,
                39: 1,
                offset: function offset(date3, step3) {
                  return date3.setDate(date3.getDate() + step3);
                }
              }
            };
            var mode = this.selectionMode;
            var year = 31536e6;
            var now2 = this.date.getTime();
            var newDate = new Date(this.date.getTime());
            while (Math.abs(now2 - newDate.getTime()) <= year) {
              var map = mapping[mode];
              map.offset(newDate, map[keyCode2]);
              if (typeof this.disabledDate === "function" && this.disabledDate(newDate)) {
                continue;
              }
              this.date = newDate;
              this.$emit("pick", newDate, true);
              break;
            }
          },
          handleVisibleTimeChange: function handleVisibleTimeChange(value) {
            var time = Object(date_util_["parseDate"])(value, this.timeFormat);
            if (time && this.checkDateWithinRange(time)) {
              this.date = Object(date_util_["modifyDate"])(time, this.year, this.month, this.monthDate);
              this.userInputTime = null;
              this.$refs.timepicker.value = this.date;
              this.timePickerVisible = false;
              this.emit(this.date, true);
            }
          },
          handleVisibleDateChange: function handleVisibleDateChange(value) {
            var date3 = Object(date_util_["parseDate"])(value, this.dateFormat);
            if (date3) {
              if (typeof this.disabledDate === "function" && this.disabledDate(date3)) {
                return;
              }
              this.date = Object(date_util_["modifyTime"])(date3, this.date.getHours(), this.date.getMinutes(), this.date.getSeconds());
              this.userInputDate = null;
              this.resetView();
              this.emit(this.date, true);
            }
          },
          isValidValue: function isValidValue(value) {
            return value && !isNaN(value) && (typeof this.disabledDate === "function" ? !this.disabledDate(value) : true) && this.checkDateWithinRange(value);
          },
          getDefaultValue: function getDefaultValue() {
            return this.defaultValue ? new Date(this.defaultValue) : /* @__PURE__ */ new Date();
          },
          checkDateWithinRange: function checkDateWithinRange(date3) {
            return this.selectableRange.length > 0 ? Object(date_util_["timeWithinRange"])(date3, this.selectableRange, this.format || "HH:mm:ss") : true;
          }
        },
        components: {
          TimePicker: panel_time,
          YearTable: year_table,
          MonthTable: month_table,
          DateTable: date_table,
          ElInput: input_default.a,
          ElButton: button_default.a
        },
        data: function data() {
          return {
            popperClass: "",
            date: /* @__PURE__ */ new Date(),
            value: "",
            defaultValue: null,
            // use getDefaultValue() for time computation
            defaultTime: null,
            showTime: false,
            selectionMode: "day",
            shortcuts: "",
            visible: false,
            currentView: "date",
            disabledDate: "",
            cellClassName: "",
            selectableRange: [],
            firstDayOfWeek: 7,
            showWeekNumber: false,
            timePickerVisible: false,
            format: "",
            arrowControl: false,
            userInputDate: null,
            userInputTime: null
          };
        },
        computed: {
          year: function year() {
            return this.date.getFullYear();
          },
          month: function month() {
            return this.date.getMonth();
          },
          week: function week() {
            return Object(date_util_["getWeekNumber"])(this.date);
          },
          monthDate: function monthDate() {
            return this.date.getDate();
          },
          footerVisible: function footerVisible() {
            return this.showTime || this.selectionMode === "dates" || this.selectionMode === "months" || this.selectionMode === "years";
          },
          visibleTime: function visibleTime() {
            if (this.userInputTime !== null) {
              return this.userInputTime;
            } else {
              return Object(date_util_["formatDate"])(this.value || this.defaultValue, this.timeFormat);
            }
          },
          visibleDate: function visibleDate() {
            if (this.userInputDate !== null) {
              return this.userInputDate;
            } else {
              return Object(date_util_["formatDate"])(this.value || this.defaultValue, this.dateFormat);
            }
          },
          yearLabel: function yearLabel() {
            var yearTranslation = this.t("el.datepicker.year");
            if (this.currentView === "year") {
              var startYear = Math.floor(this.year / 10) * 10;
              if (yearTranslation) {
                return startYear + " " + yearTranslation + " - " + (startYear + 9) + " " + yearTranslation;
              }
              return startYear + " - " + (startYear + 9);
            }
            return this.year + " " + yearTranslation;
          },
          timeFormat: function timeFormat() {
            if (this.format) {
              return Object(date_util_["extractTimeFormat"])(this.format);
            } else {
              return "HH:mm:ss";
            }
          },
          dateFormat: function dateFormat() {
            if (this.format) {
              return Object(date_util_["extractDateFormat"])(this.format);
            } else {
              return "yyyy-MM-dd";
            }
          }
        }
      };
      var panel_datevue_type_script_lang_js_ = datevue_type_script_lang_js_;
      var date_component = normalizeComponent2(
        panel_datevue_type_script_lang_js_,
        datevue_type_template_id_2440d4ea_render,
        datevue_type_template_id_2440d4ea_staticRenderFns,
        false,
        null,
        null,
        null
      );
      date_component.options.__file = "packages/date-picker/src/panel/date.vue";
      var panel_date = date_component.exports;
      var date_rangevue_type_template_id_2652849a_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "transition",
          {
            attrs: { name: "el-zoom-in-top" },
            on: {
              "after-leave": function($event) {
                _vm.$emit("dodestroy");
              }
            }
          },
          [
            _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.visible,
                    expression: "visible"
                  }
                ],
                staticClass: "el-picker-panel el-date-range-picker el-popper",
                class: [
                  {
                    "has-sidebar": _vm.$slots.sidebar || _vm.shortcuts,
                    "has-time": _vm.showTime
                  },
                  _vm.popperClass
                ]
              },
              [
                _c(
                  "div",
                  { staticClass: "el-picker-panel__body-wrapper" },
                  [
                    _vm._t("sidebar"),
                    _vm.shortcuts ? _c(
                      "div",
                      { staticClass: "el-picker-panel__sidebar" },
                      _vm._l(_vm.shortcuts, function(shortcut, key) {
                        return _c(
                          "button",
                          {
                            key,
                            staticClass: "el-picker-panel__shortcut",
                            attrs: { type: "button" },
                            on: {
                              click: function($event) {
                                _vm.handleShortcutClick(shortcut);
                              }
                            }
                          },
                          [_vm._v(_vm._s(shortcut.text))]
                        );
                      }),
                      0
                    ) : _vm._e(),
                    _c("div", { staticClass: "el-picker-panel__body" }, [
                      _vm.showTime ? _c(
                        "div",
                        { staticClass: "el-date-range-picker__time-header" },
                        [
                          _c(
                            "span",
                            { staticClass: "el-date-range-picker__editors-wrap" },
                            [
                              _c(
                                "span",
                                {
                                  staticClass: "el-date-range-picker__time-picker-wrap"
                                },
                                [
                                  _c("el-input", {
                                    ref: "minInput",
                                    staticClass: "el-date-range-picker__editor",
                                    attrs: {
                                      size: "small",
                                      disabled: _vm.rangeState.selecting,
                                      placeholder: _vm.t(
                                        "el.datepicker.startDate"
                                      ),
                                      value: _vm.minVisibleDate
                                    },
                                    on: {
                                      input: function(val) {
                                        return _vm.handleDateInput(val, "min");
                                      },
                                      change: function(val) {
                                        return _vm.handleDateChange(val, "min");
                                      }
                                    }
                                  })
                                ],
                                1
                              ),
                              _c(
                                "span",
                                {
                                  directives: [
                                    {
                                      name: "clickoutside",
                                      rawName: "v-clickoutside",
                                      value: _vm.handleMinTimeClose,
                                      expression: "handleMinTimeClose"
                                    }
                                  ],
                                  staticClass: "el-date-range-picker__time-picker-wrap"
                                },
                                [
                                  _c("el-input", {
                                    staticClass: "el-date-range-picker__editor",
                                    attrs: {
                                      size: "small",
                                      disabled: _vm.rangeState.selecting,
                                      placeholder: _vm.t(
                                        "el.datepicker.startTime"
                                      ),
                                      value: _vm.minVisibleTime
                                    },
                                    on: {
                                      focus: function($event) {
                                        _vm.minTimePickerVisible = true;
                                      },
                                      input: function(val) {
                                        return _vm.handleTimeInput(val, "min");
                                      },
                                      change: function(val) {
                                        return _vm.handleTimeChange(val, "min");
                                      }
                                    }
                                  }),
                                  _c("time-picker", {
                                    ref: "minTimePicker",
                                    attrs: {
                                      "time-arrow-control": _vm.arrowControl,
                                      visible: _vm.minTimePickerVisible
                                    },
                                    on: {
                                      pick: _vm.handleMinTimePick,
                                      mounted: function($event) {
                                        _vm.$refs.minTimePicker.format = _vm.timeFormat;
                                      }
                                    }
                                  })
                                ],
                                1
                              )
                            ]
                          ),
                          _c("span", { staticClass: "el-icon-arrow-right" }),
                          _c(
                            "span",
                            {
                              staticClass: "el-date-range-picker__editors-wrap is-right"
                            },
                            [
                              _c(
                                "span",
                                {
                                  staticClass: "el-date-range-picker__time-picker-wrap"
                                },
                                [
                                  _c("el-input", {
                                    staticClass: "el-date-range-picker__editor",
                                    attrs: {
                                      size: "small",
                                      disabled: _vm.rangeState.selecting,
                                      placeholder: _vm.t("el.datepicker.endDate"),
                                      value: _vm.maxVisibleDate,
                                      readonly: !_vm.minDate
                                    },
                                    on: {
                                      input: function(val) {
                                        return _vm.handleDateInput(val, "max");
                                      },
                                      change: function(val) {
                                        return _vm.handleDateChange(val, "max");
                                      }
                                    }
                                  })
                                ],
                                1
                              ),
                              _c(
                                "span",
                                {
                                  directives: [
                                    {
                                      name: "clickoutside",
                                      rawName: "v-clickoutside",
                                      value: _vm.handleMaxTimeClose,
                                      expression: "handleMaxTimeClose"
                                    }
                                  ],
                                  staticClass: "el-date-range-picker__time-picker-wrap"
                                },
                                [
                                  _c("el-input", {
                                    staticClass: "el-date-range-picker__editor",
                                    attrs: {
                                      size: "small",
                                      disabled: _vm.rangeState.selecting,
                                      placeholder: _vm.t("el.datepicker.endTime"),
                                      value: _vm.maxVisibleTime,
                                      readonly: !_vm.minDate
                                    },
                                    on: {
                                      focus: function($event) {
                                        _vm.minDate && (_vm.maxTimePickerVisible = true);
                                      },
                                      input: function(val) {
                                        return _vm.handleTimeInput(val, "max");
                                      },
                                      change: function(val) {
                                        return _vm.handleTimeChange(val, "max");
                                      }
                                    }
                                  }),
                                  _c("time-picker", {
                                    ref: "maxTimePicker",
                                    attrs: {
                                      "time-arrow-control": _vm.arrowControl,
                                      visible: _vm.maxTimePickerVisible
                                    },
                                    on: {
                                      pick: _vm.handleMaxTimePick,
                                      mounted: function($event) {
                                        _vm.$refs.maxTimePicker.format = _vm.timeFormat;
                                      }
                                    }
                                  })
                                ],
                                1
                              )
                            ]
                          )
                        ]
                      ) : _vm._e(),
                      _c(
                        "div",
                        {
                          staticClass: "el-picker-panel__content el-date-range-picker__content is-left"
                        },
                        [
                          _c("div", { staticClass: "el-date-range-picker__header" }, [
                            _c("button", {
                              staticClass: "el-picker-panel__icon-btn el-icon-d-arrow-left",
                              attrs: { type: "button" },
                              on: { click: _vm.leftPrevYear }
                            }),
                            _c("button", {
                              staticClass: "el-picker-panel__icon-btn el-icon-arrow-left",
                              attrs: { type: "button" },
                              on: { click: _vm.leftPrevMonth }
                            }),
                            _vm.unlinkPanels ? _c("button", {
                              staticClass: "el-picker-panel__icon-btn el-icon-d-arrow-right",
                              class: { "is-disabled": !_vm.enableYearArrow },
                              attrs: {
                                type: "button",
                                disabled: !_vm.enableYearArrow
                              },
                              on: { click: _vm.leftNextYear }
                            }) : _vm._e(),
                            _vm.unlinkPanels ? _c("button", {
                              staticClass: "el-picker-panel__icon-btn el-icon-arrow-right",
                              class: { "is-disabled": !_vm.enableMonthArrow },
                              attrs: {
                                type: "button",
                                disabled: !_vm.enableMonthArrow
                              },
                              on: { click: _vm.leftNextMonth }
                            }) : _vm._e(),
                            _c("div", [_vm._v(_vm._s(_vm.leftLabel))])
                          ]),
                          _c("date-table", {
                            attrs: {
                              "selection-mode": "range",
                              date: _vm.leftDate,
                              "default-value": _vm.defaultValue,
                              "min-date": _vm.minDate,
                              "max-date": _vm.maxDate,
                              "range-state": _vm.rangeState,
                              "disabled-date": _vm.disabledDate,
                              "cell-class-name": _vm.cellClassName,
                              "first-day-of-week": _vm.firstDayOfWeek
                            },
                            on: {
                              changerange: _vm.handleChangeRange,
                              pick: _vm.handleRangePick
                            }
                          })
                        ],
                        1
                      ),
                      _c(
                        "div",
                        {
                          staticClass: "el-picker-panel__content el-date-range-picker__content is-right"
                        },
                        [
                          _c("div", { staticClass: "el-date-range-picker__header" }, [
                            _vm.unlinkPanels ? _c("button", {
                              staticClass: "el-picker-panel__icon-btn el-icon-d-arrow-left",
                              class: { "is-disabled": !_vm.enableYearArrow },
                              attrs: {
                                type: "button",
                                disabled: !_vm.enableYearArrow
                              },
                              on: { click: _vm.rightPrevYear }
                            }) : _vm._e(),
                            _vm.unlinkPanels ? _c("button", {
                              staticClass: "el-picker-panel__icon-btn el-icon-arrow-left",
                              class: { "is-disabled": !_vm.enableMonthArrow },
                              attrs: {
                                type: "button",
                                disabled: !_vm.enableMonthArrow
                              },
                              on: { click: _vm.rightPrevMonth }
                            }) : _vm._e(),
                            _c("button", {
                              staticClass: "el-picker-panel__icon-btn el-icon-d-arrow-right",
                              attrs: { type: "button" },
                              on: { click: _vm.rightNextYear }
                            }),
                            _c("button", {
                              staticClass: "el-picker-panel__icon-btn el-icon-arrow-right",
                              attrs: { type: "button" },
                              on: { click: _vm.rightNextMonth }
                            }),
                            _c("div", [_vm._v(_vm._s(_vm.rightLabel))])
                          ]),
                          _c("date-table", {
                            attrs: {
                              "selection-mode": "range",
                              date: _vm.rightDate,
                              "default-value": _vm.defaultValue,
                              "min-date": _vm.minDate,
                              "max-date": _vm.maxDate,
                              "range-state": _vm.rangeState,
                              "disabled-date": _vm.disabledDate,
                              "cell-class-name": _vm.cellClassName,
                              "first-day-of-week": _vm.firstDayOfWeek
                            },
                            on: {
                              changerange: _vm.handleChangeRange,
                              pick: _vm.handleRangePick
                            }
                          })
                        ],
                        1
                      )
                    ])
                  ],
                  2
                ),
                _vm.showTime ? _c(
                  "div",
                  { staticClass: "el-picker-panel__footer" },
                  [
                    _c(
                      "el-button",
                      {
                        staticClass: "el-picker-panel__link-btn",
                        attrs: { size: "mini", type: "text" },
                        on: { click: _vm.handleClear }
                      },
                      [
                        _vm._v(
                          "\n        " + _vm._s(_vm.t("el.datepicker.clear")) + "\n      "
                        )
                      ]
                    ),
                    _c(
                      "el-button",
                      {
                        staticClass: "el-picker-panel__link-btn",
                        attrs: {
                          plain: "",
                          size: "mini",
                          disabled: _vm.btnDisabled
                        },
                        on: {
                          click: function($event) {
                            _vm.handleConfirm(false);
                          }
                        }
                      },
                      [
                        _vm._v(
                          "\n        " + _vm._s(_vm.t("el.datepicker.confirm")) + "\n      "
                        )
                      ]
                    )
                  ],
                  1
                ) : _vm._e()
              ]
            )
          ]
        );
      };
      var date_rangevue_type_template_id_2652849a_staticRenderFns = [];
      date_rangevue_type_template_id_2652849a_render._withStripped = true;
      var date_rangevue_type_script_lang_js_calcDefaultValue = function calcDefaultValue(defaultValue) {
        if (Array.isArray(defaultValue)) {
          return [new Date(defaultValue[0]), new Date(defaultValue[1])];
        } else if (defaultValue) {
          return [new Date(defaultValue), Object(date_util_["nextDate"])(new Date(defaultValue), 1)];
        } else {
          return [/* @__PURE__ */ new Date(), Object(date_util_["nextDate"])(/* @__PURE__ */ new Date(), 1)];
        }
      };
      var date_rangevue_type_script_lang_js_ = {
        mixins: [locale_default.a],
        directives: { Clickoutside: clickoutside_default.a },
        computed: {
          btnDisabled: function btnDisabled() {
            return !(this.minDate && this.maxDate && !this.selecting && this.isValidValue([this.minDate, this.maxDate]));
          },
          leftLabel: function leftLabel() {
            return this.leftDate.getFullYear() + " " + this.t("el.datepicker.year") + " " + this.t("el.datepicker.month" + (this.leftDate.getMonth() + 1));
          },
          rightLabel: function rightLabel() {
            return this.rightDate.getFullYear() + " " + this.t("el.datepicker.year") + " " + this.t("el.datepicker.month" + (this.rightDate.getMonth() + 1));
          },
          leftYear: function leftYear() {
            return this.leftDate.getFullYear();
          },
          leftMonth: function leftMonth() {
            return this.leftDate.getMonth();
          },
          leftMonthDate: function leftMonthDate() {
            return this.leftDate.getDate();
          },
          rightYear: function rightYear() {
            return this.rightDate.getFullYear();
          },
          rightMonth: function rightMonth() {
            return this.rightDate.getMonth();
          },
          rightMonthDate: function rightMonthDate() {
            return this.rightDate.getDate();
          },
          minVisibleDate: function minVisibleDate() {
            if (this.dateUserInput.min !== null)
              return this.dateUserInput.min;
            if (this.minDate)
              return Object(date_util_["formatDate"])(this.minDate, this.dateFormat);
            return "";
          },
          maxVisibleDate: function maxVisibleDate() {
            if (this.dateUserInput.max !== null)
              return this.dateUserInput.max;
            if (this.maxDate || this.minDate)
              return Object(date_util_["formatDate"])(this.maxDate || this.minDate, this.dateFormat);
            return "";
          },
          minVisibleTime: function minVisibleTime() {
            if (this.timeUserInput.min !== null)
              return this.timeUserInput.min;
            if (this.minDate)
              return Object(date_util_["formatDate"])(this.minDate, this.timeFormat);
            return "";
          },
          maxVisibleTime: function maxVisibleTime() {
            if (this.timeUserInput.max !== null)
              return this.timeUserInput.max;
            if (this.maxDate || this.minDate)
              return Object(date_util_["formatDate"])(this.maxDate || this.minDate, this.timeFormat);
            return "";
          },
          timeFormat: function timeFormat() {
            if (this.format) {
              return Object(date_util_["extractTimeFormat"])(this.format);
            } else {
              return "HH:mm:ss";
            }
          },
          dateFormat: function dateFormat() {
            if (this.format) {
              return Object(date_util_["extractDateFormat"])(this.format);
            } else {
              return "yyyy-MM-dd";
            }
          },
          enableMonthArrow: function enableMonthArrow() {
            var nextMonth = (this.leftMonth + 1) % 12;
            var yearOffset = this.leftMonth + 1 >= 12 ? 1 : 0;
            return this.unlinkPanels && new Date(this.leftYear + yearOffset, nextMonth) < new Date(this.rightYear, this.rightMonth);
          },
          enableYearArrow: function enableYearArrow() {
            return this.unlinkPanels && this.rightYear * 12 + this.rightMonth - (this.leftYear * 12 + this.leftMonth + 1) >= 12;
          }
        },
        data: function data() {
          return {
            popperClass: "",
            value: [],
            defaultValue: null,
            defaultTime: null,
            minDate: "",
            maxDate: "",
            leftDate: /* @__PURE__ */ new Date(),
            rightDate: Object(date_util_["nextMonth"])(/* @__PURE__ */ new Date()),
            rangeState: {
              endDate: null,
              selecting: false,
              row: null,
              column: null
            },
            showTime: false,
            shortcuts: "",
            visible: "",
            disabledDate: "",
            cellClassName: "",
            firstDayOfWeek: 7,
            minTimePickerVisible: false,
            maxTimePickerVisible: false,
            format: "",
            arrowControl: false,
            unlinkPanels: false,
            dateUserInput: {
              min: null,
              max: null
            },
            timeUserInput: {
              min: null,
              max: null
            }
          };
        },
        watch: {
          minDate: function minDate(val) {
            var _this = this;
            this.dateUserInput.min = null;
            this.timeUserInput.min = null;
            this.$nextTick(function() {
              if (_this.$refs.maxTimePicker && _this.maxDate && _this.maxDate < _this.minDate) {
                var format2 = "HH:mm:ss";
                _this.$refs.maxTimePicker.selectableRange = [[Object(date_util_["parseDate"])(Object(date_util_["formatDate"])(_this.minDate, format2), format2), Object(date_util_["parseDate"])("23:59:59", format2)]];
              }
            });
            if (val && this.$refs.minTimePicker) {
              this.$refs.minTimePicker.date = val;
              this.$refs.minTimePicker.value = val;
            }
          },
          maxDate: function maxDate(val) {
            this.dateUserInput.max = null;
            this.timeUserInput.max = null;
            if (val && this.$refs.maxTimePicker) {
              this.$refs.maxTimePicker.date = val;
              this.$refs.maxTimePicker.value = val;
            }
          },
          minTimePickerVisible: function minTimePickerVisible(val) {
            var _this2 = this;
            if (val) {
              this.$nextTick(function() {
                _this2.$refs.minTimePicker.date = _this2.minDate;
                _this2.$refs.minTimePicker.value = _this2.minDate;
                _this2.$refs.minTimePicker.adjustSpinners();
              });
            }
          },
          maxTimePickerVisible: function maxTimePickerVisible(val) {
            var _this3 = this;
            if (val) {
              this.$nextTick(function() {
                _this3.$refs.maxTimePicker.date = _this3.maxDate;
                _this3.$refs.maxTimePicker.value = _this3.maxDate;
                _this3.$refs.maxTimePicker.adjustSpinners();
              });
            }
          },
          value: function value(newVal) {
            if (!newVal) {
              this.minDate = null;
              this.maxDate = null;
            } else if (Array.isArray(newVal)) {
              this.minDate = Object(date_util_["isDate"])(newVal[0]) ? new Date(newVal[0]) : null;
              this.maxDate = Object(date_util_["isDate"])(newVal[1]) ? new Date(newVal[1]) : null;
              if (this.minDate) {
                this.leftDate = this.minDate;
                if (this.unlinkPanels && this.maxDate) {
                  var minDateYear = this.minDate.getFullYear();
                  var minDateMonth = this.minDate.getMonth();
                  var maxDateYear = this.maxDate.getFullYear();
                  var maxDateMonth = this.maxDate.getMonth();
                  this.rightDate = minDateYear === maxDateYear && minDateMonth === maxDateMonth ? Object(date_util_["nextMonth"])(this.maxDate) : this.maxDate;
                } else {
                  this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
                }
              } else {
                this.leftDate = date_rangevue_type_script_lang_js_calcDefaultValue(this.defaultValue)[0];
                this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
              }
            }
          },
          defaultValue: function defaultValue(val) {
            if (!Array.isArray(this.value)) {
              var _calcDefaultValue = date_rangevue_type_script_lang_js_calcDefaultValue(val), left = _calcDefaultValue[0], right = _calcDefaultValue[1];
              this.leftDate = left;
              this.rightDate = val && val[1] && this.unlinkPanels ? right : Object(date_util_["nextMonth"])(this.leftDate);
            }
          }
        },
        methods: {
          handleClear: function handleClear() {
            this.minDate = null;
            this.maxDate = null;
            this.leftDate = date_rangevue_type_script_lang_js_calcDefaultValue(this.defaultValue)[0];
            this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
            this.$emit("pick", null);
          },
          handleChangeRange: function handleChangeRange(val) {
            this.minDate = val.minDate;
            this.maxDate = val.maxDate;
            this.rangeState = val.rangeState;
          },
          handleDateInput: function handleDateInput(value, type2) {
            this.dateUserInput[type2] = value;
            if (value.length !== this.dateFormat.length)
              return;
            var parsedValue = Object(date_util_["parseDate"])(value, this.dateFormat);
            if (parsedValue) {
              if (typeof this.disabledDate === "function" && this.disabledDate(new Date(parsedValue))) {
                return;
              }
              if (type2 === "min") {
                this.minDate = Object(date_util_["modifyDate"])(this.minDate || /* @__PURE__ */ new Date(), parsedValue.getFullYear(), parsedValue.getMonth(), parsedValue.getDate());
                this.leftDate = new Date(parsedValue);
                if (!this.unlinkPanels) {
                  this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
                }
              } else {
                this.maxDate = Object(date_util_["modifyDate"])(this.maxDate || /* @__PURE__ */ new Date(), parsedValue.getFullYear(), parsedValue.getMonth(), parsedValue.getDate());
                this.rightDate = new Date(parsedValue);
                if (!this.unlinkPanels) {
                  this.leftDate = Object(date_util_["prevMonth"])(parsedValue);
                }
              }
            }
          },
          handleDateChange: function handleDateChange(value, type2) {
            var parsedValue = Object(date_util_["parseDate"])(value, this.dateFormat);
            if (parsedValue) {
              if (type2 === "min") {
                this.minDate = Object(date_util_["modifyDate"])(this.minDate, parsedValue.getFullYear(), parsedValue.getMonth(), parsedValue.getDate());
                if (this.minDate > this.maxDate) {
                  this.maxDate = this.minDate;
                }
              } else {
                this.maxDate = Object(date_util_["modifyDate"])(this.maxDate, parsedValue.getFullYear(), parsedValue.getMonth(), parsedValue.getDate());
                if (this.maxDate < this.minDate) {
                  this.minDate = this.maxDate;
                }
              }
            }
          },
          handleTimeInput: function handleTimeInput(value, type2) {
            var _this4 = this;
            this.timeUserInput[type2] = value;
            if (value.length !== this.timeFormat.length)
              return;
            var parsedValue = Object(date_util_["parseDate"])(value, this.timeFormat);
            if (parsedValue) {
              if (type2 === "min") {
                this.minDate = Object(date_util_["modifyTime"])(this.minDate, parsedValue.getHours(), parsedValue.getMinutes(), parsedValue.getSeconds());
                this.$nextTick(function(_) {
                  return _this4.$refs.minTimePicker.adjustSpinners();
                });
              } else {
                this.maxDate = Object(date_util_["modifyTime"])(this.maxDate, parsedValue.getHours(), parsedValue.getMinutes(), parsedValue.getSeconds());
                this.$nextTick(function(_) {
                  return _this4.$refs.maxTimePicker.adjustSpinners();
                });
              }
            }
          },
          handleTimeChange: function handleTimeChange(value, type2) {
            var parsedValue = Object(date_util_["parseDate"])(value, this.timeFormat);
            if (parsedValue) {
              if (type2 === "min") {
                this.minDate = Object(date_util_["modifyTime"])(this.minDate, parsedValue.getHours(), parsedValue.getMinutes(), parsedValue.getSeconds());
                if (this.minDate > this.maxDate) {
                  this.maxDate = this.minDate;
                }
                this.$refs.minTimePicker.value = this.minDate;
                this.minTimePickerVisible = false;
              } else {
                this.maxDate = Object(date_util_["modifyTime"])(this.maxDate, parsedValue.getHours(), parsedValue.getMinutes(), parsedValue.getSeconds());
                if (this.maxDate < this.minDate) {
                  this.minDate = this.maxDate;
                }
                this.$refs.maxTimePicker.value = this.minDate;
                this.maxTimePickerVisible = false;
              }
            }
          },
          handleRangePick: function handleRangePick(val) {
            var _this5 = this;
            var close = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
            var defaultTime = this.defaultTime || [];
            var minDate = Object(date_util_["modifyWithTimeString"])(val.minDate, defaultTime[0]);
            var maxDate = Object(date_util_["modifyWithTimeString"])(val.maxDate, defaultTime[1]);
            if (this.maxDate === maxDate && this.minDate === minDate) {
              return;
            }
            this.onPick && this.onPick(val);
            this.maxDate = maxDate;
            this.minDate = minDate;
            setTimeout(function() {
              _this5.maxDate = maxDate;
              _this5.minDate = minDate;
            }, 10);
            if (!close || this.showTime)
              return;
            this.handleConfirm();
          },
          handleShortcutClick: function handleShortcutClick(shortcut) {
            if (shortcut.onClick) {
              shortcut.onClick(this);
            }
          },
          handleMinTimePick: function handleMinTimePick(value, visible, first) {
            this.minDate = this.minDate || /* @__PURE__ */ new Date();
            if (value) {
              this.minDate = Object(date_util_["modifyTime"])(this.minDate, value.getHours(), value.getMinutes(), value.getSeconds());
            }
            if (!first) {
              this.minTimePickerVisible = visible;
            }
            if (!this.maxDate || this.maxDate && this.maxDate.getTime() < this.minDate.getTime()) {
              this.maxDate = new Date(this.minDate);
            }
          },
          handleMinTimeClose: function handleMinTimeClose() {
            this.minTimePickerVisible = false;
          },
          handleMaxTimePick: function handleMaxTimePick(value, visible, first) {
            if (this.maxDate && value) {
              this.maxDate = Object(date_util_["modifyTime"])(this.maxDate, value.getHours(), value.getMinutes(), value.getSeconds());
            }
            if (!first) {
              this.maxTimePickerVisible = visible;
            }
            if (this.maxDate && this.minDate && this.minDate.getTime() > this.maxDate.getTime()) {
              this.minDate = new Date(this.maxDate);
            }
          },
          handleMaxTimeClose: function handleMaxTimeClose() {
            this.maxTimePickerVisible = false;
          },
          // leftPrev*, rightNext* need to take care of `unlinkPanels`
          leftPrevYear: function leftPrevYear() {
            this.leftDate = Object(date_util_["prevYear"])(this.leftDate);
            if (!this.unlinkPanels) {
              this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
            }
          },
          leftPrevMonth: function leftPrevMonth() {
            this.leftDate = Object(date_util_["prevMonth"])(this.leftDate);
            if (!this.unlinkPanels) {
              this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
            }
          },
          rightNextYear: function rightNextYear() {
            if (!this.unlinkPanels) {
              this.leftDate = Object(date_util_["nextYear"])(this.leftDate);
              this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
            } else {
              this.rightDate = Object(date_util_["nextYear"])(this.rightDate);
            }
          },
          rightNextMonth: function rightNextMonth() {
            if (!this.unlinkPanels) {
              this.leftDate = Object(date_util_["nextMonth"])(this.leftDate);
              this.rightDate = Object(date_util_["nextMonth"])(this.leftDate);
            } else {
              this.rightDate = Object(date_util_["nextMonth"])(this.rightDate);
            }
          },
          // leftNext*, rightPrev* are called when `unlinkPanels` is true
          leftNextYear: function leftNextYear() {
            this.leftDate = Object(date_util_["nextYear"])(this.leftDate);
          },
          leftNextMonth: function leftNextMonth() {
            this.leftDate = Object(date_util_["nextMonth"])(this.leftDate);
          },
          rightPrevYear: function rightPrevYear() {
            this.rightDate = Object(date_util_["prevYear"])(this.rightDate);
          },
          rightPrevMonth: function rightPrevMonth() {
            this.rightDate = Object(date_util_["prevMonth"])(this.rightDate);
          },
          handleConfirm: function handleConfirm() {
            var visible = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
            if (this.isValidValue([this.minDate, this.maxDate])) {
              this.$emit("pick", [this.minDate, this.maxDate], visible);
            }
          },
          isValidValue: function isValidValue(value) {
            return Array.isArray(value) && value && value[0] && value[1] && Object(date_util_["isDate"])(value[0]) && Object(date_util_["isDate"])(value[1]) && value[0].getTime() <= value[1].getTime() && (typeof this.disabledDate === "function" ? !this.disabledDate(value[0]) && !this.disabledDate(value[1]) : true);
          },
          resetView: function resetView() {
            if (this.minDate && this.maxDate == null)
              this.rangeState.selecting = false;
            this.minDate = this.value && Object(date_util_["isDate"])(this.value[0]) ? new Date(this.value[0]) : null;
            this.maxDate = this.value && Object(date_util_["isDate"])(this.value[0]) ? new Date(this.value[1]) : null;
          }
        },
        components: { TimePicker: panel_time, DateTable: date_table, ElInput: input_default.a, ElButton: button_default.a }
      };
      var panel_date_rangevue_type_script_lang_js_ = date_rangevue_type_script_lang_js_;
      var date_range_component = normalizeComponent2(
        panel_date_rangevue_type_script_lang_js_,
        date_rangevue_type_template_id_2652849a_render,
        date_rangevue_type_template_id_2652849a_staticRenderFns,
        false,
        null,
        null,
        null
      );
      date_range_component.options.__file = "packages/date-picker/src/panel/date-range.vue";
      var date_range = date_range_component.exports;
      var month_rangevue_type_template_id_f2645fb8_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "transition",
          {
            attrs: { name: "el-zoom-in-top" },
            on: {
              "after-leave": function($event) {
                _vm.$emit("dodestroy");
              }
            }
          },
          [
            _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.visible,
                    expression: "visible"
                  }
                ],
                staticClass: "el-picker-panel el-date-range-picker el-popper",
                class: [
                  {
                    "has-sidebar": _vm.$slots.sidebar || _vm.shortcuts
                  },
                  _vm.popperClass
                ]
              },
              [
                _c(
                  "div",
                  { staticClass: "el-picker-panel__body-wrapper" },
                  [
                    _vm._t("sidebar"),
                    _vm.shortcuts ? _c(
                      "div",
                      { staticClass: "el-picker-panel__sidebar" },
                      _vm._l(_vm.shortcuts, function(shortcut, key) {
                        return _c(
                          "button",
                          {
                            key,
                            staticClass: "el-picker-panel__shortcut",
                            attrs: { type: "button" },
                            on: {
                              click: function($event) {
                                _vm.handleShortcutClick(shortcut);
                              }
                            }
                          },
                          [_vm._v(_vm._s(shortcut.text))]
                        );
                      }),
                      0
                    ) : _vm._e(),
                    _c("div", { staticClass: "el-picker-panel__body" }, [
                      _c(
                        "div",
                        {
                          staticClass: "el-picker-panel__content el-date-range-picker__content is-left"
                        },
                        [
                          _c("div", { staticClass: "el-date-range-picker__header" }, [
                            _c("button", {
                              staticClass: "el-picker-panel__icon-btn el-icon-d-arrow-left",
                              attrs: { type: "button" },
                              on: { click: _vm.leftPrevYear }
                            }),
                            _vm.unlinkPanels ? _c("button", {
                              staticClass: "el-picker-panel__icon-btn el-icon-d-arrow-right",
                              class: { "is-disabled": !_vm.enableYearArrow },
                              attrs: {
                                type: "button",
                                disabled: !_vm.enableYearArrow
                              },
                              on: { click: _vm.leftNextYear }
                            }) : _vm._e(),
                            _c("div", [_vm._v(_vm._s(_vm.leftLabel))])
                          ]),
                          _c("month-table", {
                            attrs: {
                              "selection-mode": "range",
                              date: _vm.leftDate,
                              "default-value": _vm.defaultValue,
                              "min-date": _vm.minDate,
                              "max-date": _vm.maxDate,
                              "range-state": _vm.rangeState,
                              "disabled-date": _vm.disabledDate
                            },
                            on: {
                              changerange: _vm.handleChangeRange,
                              pick: _vm.handleRangePick
                            }
                          })
                        ],
                        1
                      ),
                      _c(
                        "div",
                        {
                          staticClass: "el-picker-panel__content el-date-range-picker__content is-right"
                        },
                        [
                          _c("div", { staticClass: "el-date-range-picker__header" }, [
                            _vm.unlinkPanels ? _c("button", {
                              staticClass: "el-picker-panel__icon-btn el-icon-d-arrow-left",
                              class: { "is-disabled": !_vm.enableYearArrow },
                              attrs: {
                                type: "button",
                                disabled: !_vm.enableYearArrow
                              },
                              on: { click: _vm.rightPrevYear }
                            }) : _vm._e(),
                            _c("button", {
                              staticClass: "el-picker-panel__icon-btn el-icon-d-arrow-right",
                              attrs: { type: "button" },
                              on: { click: _vm.rightNextYear }
                            }),
                            _c("div", [_vm._v(_vm._s(_vm.rightLabel))])
                          ]),
                          _c("month-table", {
                            attrs: {
                              "selection-mode": "range",
                              date: _vm.rightDate,
                              "default-value": _vm.defaultValue,
                              "min-date": _vm.minDate,
                              "max-date": _vm.maxDate,
                              "range-state": _vm.rangeState,
                              "disabled-date": _vm.disabledDate
                            },
                            on: {
                              changerange: _vm.handleChangeRange,
                              pick: _vm.handleRangePick
                            }
                          })
                        ],
                        1
                      )
                    ])
                  ],
                  2
                )
              ]
            )
          ]
        );
      };
      var month_rangevue_type_template_id_f2645fb8_staticRenderFns = [];
      month_rangevue_type_template_id_f2645fb8_render._withStripped = true;
      var month_rangevue_type_script_lang_js_calcDefaultValue = function calcDefaultValue(defaultValue) {
        if (Array.isArray(defaultValue)) {
          return [new Date(defaultValue[0]), new Date(defaultValue[1])];
        } else if (defaultValue) {
          return [new Date(defaultValue), Object(date_util_["nextMonth"])(new Date(defaultValue))];
        } else {
          return [/* @__PURE__ */ new Date(), Object(date_util_["nextMonth"])(/* @__PURE__ */ new Date())];
        }
      };
      var month_rangevue_type_script_lang_js_ = {
        mixins: [locale_default.a],
        directives: { Clickoutside: clickoutside_default.a },
        computed: {
          btnDisabled: function btnDisabled() {
            return !(this.minDate && this.maxDate && !this.selecting && this.isValidValue([this.minDate, this.maxDate]));
          },
          leftLabel: function leftLabel() {
            return this.leftDate.getFullYear() + " " + this.t("el.datepicker.year");
          },
          rightLabel: function rightLabel() {
            return this.rightDate.getFullYear() + " " + this.t("el.datepicker.year");
          },
          leftYear: function leftYear() {
            return this.leftDate.getFullYear();
          },
          rightYear: function rightYear() {
            return this.rightDate.getFullYear() === this.leftDate.getFullYear() ? this.leftDate.getFullYear() + 1 : this.rightDate.getFullYear();
          },
          enableYearArrow: function enableYearArrow() {
            return this.unlinkPanels && this.rightYear > this.leftYear + 1;
          }
        },
        data: function data() {
          return {
            popperClass: "",
            value: [],
            defaultValue: null,
            defaultTime: null,
            minDate: "",
            maxDate: "",
            leftDate: /* @__PURE__ */ new Date(),
            rightDate: Object(date_util_["nextYear"])(/* @__PURE__ */ new Date()),
            rangeState: {
              endDate: null,
              selecting: false,
              row: null,
              column: null
            },
            shortcuts: "",
            visible: "",
            disabledDate: "",
            format: "",
            arrowControl: false,
            unlinkPanels: false
          };
        },
        watch: {
          value: function value(newVal) {
            if (!newVal) {
              this.minDate = null;
              this.maxDate = null;
            } else if (Array.isArray(newVal)) {
              this.minDate = Object(date_util_["isDate"])(newVal[0]) ? new Date(newVal[0]) : null;
              this.maxDate = Object(date_util_["isDate"])(newVal[1]) ? new Date(newVal[1]) : null;
              if (this.minDate) {
                this.leftDate = this.minDate;
                if (this.unlinkPanels && this.maxDate) {
                  var minDateYear = this.minDate.getFullYear();
                  var maxDateYear = this.maxDate.getFullYear();
                  this.rightDate = minDateYear === maxDateYear ? Object(date_util_["nextYear"])(this.maxDate) : this.maxDate;
                } else {
                  this.rightDate = Object(date_util_["nextYear"])(this.leftDate);
                }
              } else {
                this.leftDate = month_rangevue_type_script_lang_js_calcDefaultValue(this.defaultValue)[0];
                this.rightDate = Object(date_util_["nextYear"])(this.leftDate);
              }
            }
          },
          defaultValue: function defaultValue(val) {
            if (!Array.isArray(this.value)) {
              var _calcDefaultValue = month_rangevue_type_script_lang_js_calcDefaultValue(val), left = _calcDefaultValue[0], right = _calcDefaultValue[1];
              this.leftDate = left;
              this.rightDate = val && val[1] && left.getFullYear() !== right.getFullYear() && this.unlinkPanels ? right : Object(date_util_["nextYear"])(this.leftDate);
            }
          }
        },
        methods: {
          handleClear: function handleClear() {
            this.minDate = null;
            this.maxDate = null;
            this.leftDate = month_rangevue_type_script_lang_js_calcDefaultValue(this.defaultValue)[0];
            this.rightDate = Object(date_util_["nextYear"])(this.leftDate);
            this.$emit("pick", null);
          },
          handleChangeRange: function handleChangeRange(val) {
            this.minDate = val.minDate;
            this.maxDate = val.maxDate;
            this.rangeState = val.rangeState;
          },
          handleRangePick: function handleRangePick(val) {
            var _this = this;
            var close = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
            var defaultTime = this.defaultTime || [];
            var minDate = Object(date_util_["modifyWithTimeString"])(val.minDate, defaultTime[0]);
            var maxDate = Object(date_util_["modifyWithTimeString"])(val.maxDate, defaultTime[1]);
            if (this.maxDate === maxDate && this.minDate === minDate) {
              return;
            }
            this.onPick && this.onPick(val);
            this.maxDate = maxDate;
            this.minDate = minDate;
            setTimeout(function() {
              _this.maxDate = maxDate;
              _this.minDate = minDate;
            }, 10);
            if (!close)
              return;
            this.handleConfirm();
          },
          handleShortcutClick: function handleShortcutClick(shortcut) {
            if (shortcut.onClick) {
              shortcut.onClick(this);
            }
          },
          // leftPrev*, rightNext* need to take care of `unlinkPanels`
          leftPrevYear: function leftPrevYear() {
            this.leftDate = Object(date_util_["prevYear"])(this.leftDate);
            if (!this.unlinkPanels) {
              this.rightDate = Object(date_util_["prevYear"])(this.rightDate);
            }
          },
          rightNextYear: function rightNextYear() {
            if (!this.unlinkPanels) {
              this.leftDate = Object(date_util_["nextYear"])(this.leftDate);
            }
            this.rightDate = Object(date_util_["nextYear"])(this.rightDate);
          },
          // leftNext*, rightPrev* are called when `unlinkPanels` is true
          leftNextYear: function leftNextYear() {
            this.leftDate = Object(date_util_["nextYear"])(this.leftDate);
          },
          rightPrevYear: function rightPrevYear() {
            this.rightDate = Object(date_util_["prevYear"])(this.rightDate);
          },
          handleConfirm: function handleConfirm() {
            var visible = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
            if (this.isValidValue([this.minDate, this.maxDate])) {
              this.$emit("pick", [this.minDate, this.maxDate], visible);
            }
          },
          isValidValue: function isValidValue(value) {
            return Array.isArray(value) && value && value[0] && value[1] && Object(date_util_["isDate"])(value[0]) && Object(date_util_["isDate"])(value[1]) && value[0].getTime() <= value[1].getTime() && (typeof this.disabledDate === "function" ? !this.disabledDate(value[0]) && !this.disabledDate(value[1]) : true);
          },
          resetView: function resetView() {
            this.minDate = this.value && Object(date_util_["isDate"])(this.value[0]) ? new Date(this.value[0]) : null;
            this.maxDate = this.value && Object(date_util_["isDate"])(this.value[0]) ? new Date(this.value[1]) : null;
          }
        },
        components: { MonthTable: month_table, ElInput: input_default.a, ElButton: button_default.a }
      };
      var panel_month_rangevue_type_script_lang_js_ = month_rangevue_type_script_lang_js_;
      var month_range_component = normalizeComponent2(
        panel_month_rangevue_type_script_lang_js_,
        month_rangevue_type_template_id_f2645fb8_render,
        month_rangevue_type_template_id_f2645fb8_staticRenderFns,
        false,
        null,
        null,
        null
      );
      month_range_component.options.__file = "packages/date-picker/src/panel/month-range.vue";
      var month_range = month_range_component.exports;
      var date_picker_getPanel = function getPanel(type2) {
        if (type2 === "daterange" || type2 === "datetimerange") {
          return date_range;
        } else if (type2 === "monthrange") {
          return month_range;
        }
        return panel_date;
      };
      var date_picker = {
        mixins: [picker],
        name: "ElDatePicker",
        props: {
          type: {
            type: String,
            default: "date"
          },
          timeArrowControl: Boolean
        },
        watch: {
          type: function type2(_type) {
            if (this.picker) {
              this.unmountPicker();
              this.panel = date_picker_getPanel(_type);
              this.mountPicker();
            } else {
              this.panel = date_picker_getPanel(_type);
            }
          }
        },
        created: function created() {
          this.panel = date_picker_getPanel(this.type);
        }
      };
      date_picker.install = function install2(Vue2) {
        Vue2.component(date_picker.name, date_picker);
      };
      var packages_date_picker = date_picker;
      var time_selectvue_type_template_id_51ab9320_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "transition",
          {
            attrs: { name: "el-zoom-in-top" },
            on: {
              "before-enter": _vm.handleMenuEnter,
              "after-leave": function($event) {
                _vm.$emit("dodestroy");
              }
            }
          },
          [
            _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.visible,
                    expression: "visible"
                  }
                ],
                ref: "popper",
                staticClass: "el-picker-panel time-select el-popper",
                class: _vm.popperClass,
                style: { width: _vm.width + "px" }
              },
              [
                _c(
                  "el-scrollbar",
                  {
                    attrs: { noresize: "", "wrap-class": "el-picker-panel__content" }
                  },
                  _vm._l(_vm.items, function(item) {
                    return _c(
                      "div",
                      {
                        key: item.value,
                        staticClass: "time-select-item",
                        class: {
                          selected: _vm.value === item.value,
                          disabled: item.disabled,
                          default: item.value === _vm.defaultValue
                        },
                        attrs: { disabled: item.disabled },
                        on: {
                          click: function($event) {
                            _vm.handleClick(item);
                          }
                        }
                      },
                      [_vm._v(_vm._s(item.value))]
                    );
                  }),
                  0
                )
              ],
              1
            )
          ]
        );
      };
      var time_selectvue_type_template_id_51ab9320_staticRenderFns = [];
      time_selectvue_type_template_id_51ab9320_render._withStripped = true;
      var parseTime = function parseTime2(time) {
        var values = (time || "").split(":");
        if (values.length >= 2) {
          var hours = parseInt(values[0], 10);
          var minutes = parseInt(values[1], 10);
          return {
            hours,
            minutes
          };
        }
        return null;
      };
      var compareTime = function compareTime2(time1, time2) {
        var value1 = parseTime(time1);
        var value2 = parseTime(time2);
        var minutes1 = value1.minutes + value1.hours * 60;
        var minutes2 = value2.minutes + value2.hours * 60;
        if (minutes1 === minutes2) {
          return 0;
        }
        return minutes1 > minutes2 ? 1 : -1;
      };
      var formatTime = function formatTime2(time) {
        return (time.hours < 10 ? "0" + time.hours : time.hours) + ":" + (time.minutes < 10 ? "0" + time.minutes : time.minutes);
      };
      var nextTime = function nextTime2(time, step3) {
        var timeValue = parseTime(time);
        var stepValue = parseTime(step3);
        var next = {
          hours: timeValue.hours,
          minutes: timeValue.minutes
        };
        next.minutes += stepValue.minutes;
        next.hours += stepValue.hours;
        next.hours += Math.floor(next.minutes / 60);
        next.minutes = next.minutes % 60;
        return formatTime(next);
      };
      var time_selectvue_type_script_lang_js_ = {
        components: { ElScrollbar: scrollbar_default.a },
        watch: {
          value: function value(val) {
            var _this = this;
            if (!val)
              return;
            this.$nextTick(function() {
              return _this.scrollToOption();
            });
          }
        },
        methods: {
          handleClick: function handleClick(item) {
            if (!item.disabled) {
              this.$emit("pick", item.value);
            }
          },
          handleClear: function handleClear() {
            this.$emit("pick", null);
          },
          scrollToOption: function scrollToOption() {
            var selector = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ".selected";
            var menu = this.$refs.popper.querySelector(".el-picker-panel__content");
            scroll_into_view_default()(menu, menu.querySelector(selector));
          },
          handleMenuEnter: function handleMenuEnter() {
            var _this2 = this;
            var selected = this.items.map(function(item) {
              return item.value;
            }).indexOf(this.value) !== -1;
            var hasDefault = this.items.map(function(item) {
              return item.value;
            }).indexOf(this.defaultValue) !== -1;
            var option2 = selected && ".selected" || hasDefault && ".default" || ".time-select-item:not(.disabled)";
            this.$nextTick(function() {
              return _this2.scrollToOption(option2);
            });
          },
          scrollDown: function scrollDown(step3) {
            var items = this.items;
            var length = items.length;
            var total = items.length;
            var index2 = items.map(function(item) {
              return item.value;
            }).indexOf(this.value);
            while (total--) {
              index2 = (index2 + step3 + length) % length;
              if (!items[index2].disabled) {
                this.$emit("pick", items[index2].value, true);
                return;
              }
            }
          },
          isValidValue: function isValidValue(date3) {
            return this.items.filter(function(item) {
              return !item.disabled;
            }).map(function(item) {
              return item.value;
            }).indexOf(date3) !== -1;
          },
          handleKeydown: function handleKeydown(event) {
            var keyCode2 = event.keyCode;
            if (keyCode2 === 38 || keyCode2 === 40) {
              var mapping = { 40: 1, 38: -1 };
              var offset = mapping[keyCode2.toString()];
              this.scrollDown(offset);
              event.stopPropagation();
              return;
            }
          }
        },
        data: function data() {
          return {
            popperClass: "",
            start: "09:00",
            end: "18:00",
            step: "00:30",
            value: "",
            defaultValue: "",
            visible: false,
            minTime: "",
            maxTime: "",
            width: 0
          };
        },
        computed: {
          items: function items() {
            var start = this.start;
            var end = this.end;
            var step3 = this.step;
            var result = [];
            if (start && end && step3) {
              var current = start;
              while (compareTime(current, end) <= 0) {
                result.push({
                  value: current,
                  disabled: compareTime(current, this.minTime || "-1:-1") <= 0 || compareTime(current, this.maxTime || "100:100") >= 0
                });
                current = nextTime(current, step3);
              }
            }
            return result;
          }
        }
      };
      var panel_time_selectvue_type_script_lang_js_ = time_selectvue_type_script_lang_js_;
      var time_select_component = normalizeComponent2(
        panel_time_selectvue_type_script_lang_js_,
        time_selectvue_type_template_id_51ab9320_render,
        time_selectvue_type_template_id_51ab9320_staticRenderFns,
        false,
        null,
        null,
        null
      );
      time_select_component.options.__file = "packages/date-picker/src/panel/time-select.vue";
      var time_select = time_select_component.exports;
      var picker_time_select = {
        mixins: [picker],
        name: "ElTimeSelect",
        componentName: "ElTimeSelect",
        props: {
          type: {
            type: String,
            default: "time-select"
          }
        },
        beforeCreate: function beforeCreate() {
          this.panel = time_select;
        }
      };
      picker_time_select.install = function(Vue2) {
        Vue2.component(picker_time_select.name, picker_time_select);
      };
      var packages_time_select = picker_time_select;
      var time_rangevue_type_template_id_fb28660e_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "transition",
          {
            attrs: { name: "el-zoom-in-top" },
            on: {
              "after-leave": function($event) {
                _vm.$emit("dodestroy");
              }
            }
          },
          [
            _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.visible,
                    expression: "visible"
                  }
                ],
                staticClass: "el-time-range-picker el-picker-panel el-popper",
                class: _vm.popperClass
              },
              [
                _c("div", { staticClass: "el-time-range-picker__content" }, [
                  _c("div", { staticClass: "el-time-range-picker__cell" }, [
                    _c("div", { staticClass: "el-time-range-picker__header" }, [
                      _vm._v(_vm._s(_vm.t("el.datepicker.startTime")))
                    ]),
                    _c(
                      "div",
                      {
                        staticClass: "el-time-range-picker__body el-time-panel__content",
                        class: {
                          "has-seconds": _vm.showSeconds,
                          "is-arrow": _vm.arrowControl
                        }
                      },
                      [
                        _c("time-spinner", {
                          ref: "minSpinner",
                          attrs: {
                            "show-seconds": _vm.showSeconds,
                            "am-pm-mode": _vm.amPmMode,
                            "arrow-control": _vm.arrowControl,
                            date: _vm.minDate
                          },
                          on: {
                            change: _vm.handleMinChange,
                            "select-range": _vm.setMinSelectionRange
                          }
                        })
                      ],
                      1
                    )
                  ]),
                  _c("div", { staticClass: "el-time-range-picker__cell" }, [
                    _c("div", { staticClass: "el-time-range-picker__header" }, [
                      _vm._v(_vm._s(_vm.t("el.datepicker.endTime")))
                    ]),
                    _c(
                      "div",
                      {
                        staticClass: "el-time-range-picker__body el-time-panel__content",
                        class: {
                          "has-seconds": _vm.showSeconds,
                          "is-arrow": _vm.arrowControl
                        }
                      },
                      [
                        _c("time-spinner", {
                          ref: "maxSpinner",
                          attrs: {
                            "show-seconds": _vm.showSeconds,
                            "am-pm-mode": _vm.amPmMode,
                            "arrow-control": _vm.arrowControl,
                            date: _vm.maxDate
                          },
                          on: {
                            change: _vm.handleMaxChange,
                            "select-range": _vm.setMaxSelectionRange
                          }
                        })
                      ],
                      1
                    )
                  ])
                ]),
                _c("div", { staticClass: "el-time-panel__footer" }, [
                  _c(
                    "button",
                    {
                      staticClass: "el-time-panel__btn cancel",
                      attrs: { type: "button" },
                      on: {
                        click: function($event) {
                          _vm.handleCancel();
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.t("el.datepicker.cancel")))]
                  ),
                  _c(
                    "button",
                    {
                      staticClass: "el-time-panel__btn confirm",
                      attrs: { type: "button", disabled: _vm.btnDisabled },
                      on: {
                        click: function($event) {
                          _vm.handleConfirm();
                        }
                      }
                    },
                    [_vm._v(_vm._s(_vm.t("el.datepicker.confirm")))]
                  )
                ])
              ]
            )
          ]
        );
      };
      var time_rangevue_type_template_id_fb28660e_staticRenderFns = [];
      time_rangevue_type_template_id_fb28660e_render._withStripped = true;
      var MIN_TIME = Object(date_util_["parseDate"])("00:00:00", "HH:mm:ss");
      var MAX_TIME = Object(date_util_["parseDate"])("23:59:59", "HH:mm:ss");
      var time_rangevue_type_script_lang_js_minTimeOfDay = function minTimeOfDay(date3) {
        return Object(date_util_["modifyDate"])(MIN_TIME, date3.getFullYear(), date3.getMonth(), date3.getDate());
      };
      var time_rangevue_type_script_lang_js_maxTimeOfDay = function maxTimeOfDay(date3) {
        return Object(date_util_["modifyDate"])(MAX_TIME, date3.getFullYear(), date3.getMonth(), date3.getDate());
      };
      var advanceTime = function advanceTime2(date3, amount) {
        return new Date(Math.min(date3.getTime() + amount, time_rangevue_type_script_lang_js_maxTimeOfDay(date3).getTime()));
      };
      var time_rangevue_type_script_lang_js_ = {
        mixins: [locale_default.a],
        components: { TimeSpinner: time_spinner },
        computed: {
          showSeconds: function showSeconds() {
            return (this.format || "").indexOf("ss") !== -1;
          },
          offset: function offset() {
            return this.showSeconds ? 11 : 8;
          },
          spinner: function spinner2() {
            return this.selectionRange[0] < this.offset ? this.$refs.minSpinner : this.$refs.maxSpinner;
          },
          btnDisabled: function btnDisabled() {
            return this.minDate.getTime() > this.maxDate.getTime();
          },
          amPmMode: function amPmMode() {
            if ((this.format || "").indexOf("A") !== -1)
              return "A";
            if ((this.format || "").indexOf("a") !== -1)
              return "a";
            return "";
          }
        },
        data: function data() {
          return {
            popperClass: "",
            minDate: /* @__PURE__ */ new Date(),
            maxDate: /* @__PURE__ */ new Date(),
            value: [],
            oldValue: [/* @__PURE__ */ new Date(), /* @__PURE__ */ new Date()],
            defaultValue: null,
            format: "HH:mm:ss",
            visible: false,
            selectionRange: [0, 2],
            arrowControl: false
          };
        },
        watch: {
          value: function value(_value) {
            if (Array.isArray(_value)) {
              this.minDate = new Date(_value[0]);
              this.maxDate = new Date(_value[1]);
            } else {
              if (Array.isArray(this.defaultValue)) {
                this.minDate = new Date(this.defaultValue[0]);
                this.maxDate = new Date(this.defaultValue[1]);
              } else if (this.defaultValue) {
                this.minDate = new Date(this.defaultValue);
                this.maxDate = advanceTime(new Date(this.defaultValue), 60 * 60 * 1e3);
              } else {
                this.minDate = /* @__PURE__ */ new Date();
                this.maxDate = advanceTime(/* @__PURE__ */ new Date(), 60 * 60 * 1e3);
              }
            }
          },
          visible: function visible(val) {
            var _this = this;
            if (val) {
              this.oldValue = this.value;
              this.$nextTick(function() {
                return _this.$refs.minSpinner.emitSelectRange("hours");
              });
            }
          }
        },
        methods: {
          handleClear: function handleClear() {
            this.$emit("pick", null);
          },
          handleCancel: function handleCancel() {
            this.$emit("pick", this.oldValue);
          },
          handleMinChange: function handleMinChange(date3) {
            this.minDate = Object(date_util_["clearMilliseconds"])(date3);
            this.handleChange();
          },
          handleMaxChange: function handleMaxChange(date3) {
            this.maxDate = Object(date_util_["clearMilliseconds"])(date3);
            this.handleChange();
          },
          handleChange: function handleChange() {
            if (this.isValidValue([this.minDate, this.maxDate])) {
              this.$refs.minSpinner.selectableRange = [[time_rangevue_type_script_lang_js_minTimeOfDay(this.minDate), this.maxDate]];
              this.$refs.maxSpinner.selectableRange = [[this.minDate, time_rangevue_type_script_lang_js_maxTimeOfDay(this.maxDate)]];
              this.$emit("pick", [this.minDate, this.maxDate], true);
            }
          },
          setMinSelectionRange: function setMinSelectionRange(start, end) {
            this.$emit("select-range", start, end, "min");
            this.selectionRange = [start, end];
          },
          setMaxSelectionRange: function setMaxSelectionRange(start, end) {
            this.$emit("select-range", start, end, "max");
            this.selectionRange = [start + this.offset, end + this.offset];
          },
          handleConfirm: function handleConfirm() {
            var visible = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
            var minSelectableRange = this.$refs.minSpinner.selectableRange;
            var maxSelectableRange = this.$refs.maxSpinner.selectableRange;
            this.minDate = Object(date_util_["limitTimeRange"])(this.minDate, minSelectableRange, this.format);
            this.maxDate = Object(date_util_["limitTimeRange"])(this.maxDate, maxSelectableRange, this.format);
            this.$emit("pick", [this.minDate, this.maxDate], visible);
          },
          adjustSpinners: function adjustSpinners() {
            this.$refs.minSpinner.adjustSpinners();
            this.$refs.maxSpinner.adjustSpinners();
          },
          changeSelectionRange: function changeSelectionRange(step3) {
            var list = this.showSeconds ? [0, 3, 6, 11, 14, 17] : [0, 3, 8, 11];
            var mapping = ["hours", "minutes"].concat(this.showSeconds ? ["seconds"] : []);
            var index2 = list.indexOf(this.selectionRange[0]);
            var next = (index2 + step3 + list.length) % list.length;
            var half = list.length / 2;
            if (next < half) {
              this.$refs.minSpinner.emitSelectRange(mapping[next]);
            } else {
              this.$refs.maxSpinner.emitSelectRange(mapping[next - half]);
            }
          },
          isValidValue: function isValidValue(date3) {
            return Array.isArray(date3) && Object(date_util_["timeWithinRange"])(this.minDate, this.$refs.minSpinner.selectableRange) && Object(date_util_["timeWithinRange"])(this.maxDate, this.$refs.maxSpinner.selectableRange);
          },
          handleKeydown: function handleKeydown(event) {
            var keyCode2 = event.keyCode;
            var mapping = { 38: -1, 40: 1, 37: -1, 39: 1 };
            if (keyCode2 === 37 || keyCode2 === 39) {
              var step3 = mapping[keyCode2];
              this.changeSelectionRange(step3);
              event.preventDefault();
              return;
            }
            if (keyCode2 === 38 || keyCode2 === 40) {
              var _step = mapping[keyCode2];
              this.spinner.scrollDown(_step);
              event.preventDefault();
              return;
            }
          }
        }
      };
      var panel_time_rangevue_type_script_lang_js_ = time_rangevue_type_script_lang_js_;
      var time_range_component = normalizeComponent2(
        panel_time_rangevue_type_script_lang_js_,
        time_rangevue_type_template_id_fb28660e_render,
        time_rangevue_type_template_id_fb28660e_staticRenderFns,
        false,
        null,
        null,
        null
      );
      time_range_component.options.__file = "packages/date-picker/src/panel/time-range.vue";
      var time_range = time_range_component.exports;
      var time_picker = {
        mixins: [picker],
        name: "ElTimePicker",
        props: {
          isRange: Boolean,
          arrowControl: Boolean
        },
        data: function data() {
          return {
            type: ""
          };
        },
        watch: {
          isRange: function isRange(_isRange) {
            if (this.picker) {
              this.unmountPicker();
              this.type = _isRange ? "timerange" : "time";
              this.panel = _isRange ? time_range : panel_time;
              this.mountPicker();
            } else {
              this.type = _isRange ? "timerange" : "time";
              this.panel = _isRange ? time_range : panel_time;
            }
          }
        },
        created: function created() {
          this.type = this.isRange ? "timerange" : "time";
          this.panel = this.isRange ? time_range : panel_time;
        }
      };
      time_picker.install = function(Vue2) {
        Vue2.component(time_picker.name, time_picker);
      };
      var packages_time_picker = time_picker;
      var mainvue_type_template_id_52060272_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "span",
          [
            _c(
              "transition",
              {
                attrs: { name: _vm.transition },
                on: {
                  "after-enter": _vm.handleAfterEnter,
                  "after-leave": _vm.handleAfterLeave
                }
              },
              [
                _c(
                  "div",
                  {
                    directives: [
                      {
                        name: "show",
                        rawName: "v-show",
                        value: !_vm.disabled && _vm.showPopper,
                        expression: "!disabled && showPopper"
                      }
                    ],
                    ref: "popper",
                    staticClass: "el-popover el-popper",
                    class: [_vm.popperClass, _vm.content && "el-popover--plain"],
                    style: { width: _vm.width + "px" },
                    attrs: {
                      role: "tooltip",
                      id: _vm.tooltipId,
                      "aria-hidden": _vm.disabled || !_vm.showPopper ? "true" : "false"
                    }
                  },
                  [
                    _vm.title ? _c("div", {
                      staticClass: "el-popover__title",
                      domProps: { textContent: _vm._s(_vm.title) }
                    }) : _vm._e(),
                    _vm._t("default", [_vm._v(_vm._s(_vm.content))])
                  ],
                  2
                )
              ]
            ),
            _c(
              "span",
              { ref: "wrapper", staticClass: "el-popover__reference-wrapper" },
              [_vm._t("reference")],
              2
            )
          ],
          1
        );
      };
      var mainvue_type_template_id_52060272_staticRenderFns = [];
      mainvue_type_template_id_52060272_render._withStripped = true;
      var mainvue_type_script_lang_js_ = {
        name: "ElPopover",
        mixins: [vue_popper_default.a],
        props: {
          trigger: {
            type: String,
            default: "click",
            validator: function validator(value) {
              return ["click", "focus", "hover", "manual"].indexOf(value) > -1;
            }
          },
          openDelay: {
            type: Number,
            default: 0
          },
          closeDelay: {
            type: Number,
            default: 200
          },
          title: String,
          disabled: Boolean,
          content: String,
          reference: {},
          popperClass: String,
          width: {},
          visibleArrow: {
            default: true
          },
          arrowOffset: {
            type: Number,
            default: 0
          },
          transition: {
            type: String,
            default: "fade-in-linear"
          },
          tabindex: {
            type: Number,
            default: 0
          }
        },
        computed: {
          tooltipId: function tooltipId() {
            return "el-popover-" + Object(util_["generateId"])();
          }
        },
        watch: {
          showPopper: function showPopper(val) {
            if (this.disabled) {
              return;
            }
            val ? this.$emit("show") : this.$emit("hide");
          }
        },
        mounted: function mounted2() {
          var _this = this;
          var reference = this.referenceElm = this.reference || this.$refs.reference;
          var popper2 = this.popper || this.$refs.popper;
          if (!reference && this.$refs.wrapper.children) {
            reference = this.referenceElm = this.$refs.wrapper.children[0];
          }
          if (reference) {
            Object(dom_["addClass"])(reference, "el-popover__reference");
            reference.setAttribute("aria-describedby", this.tooltipId);
            reference.setAttribute("tabindex", this.tabindex);
            popper2.setAttribute("tabindex", 0);
            if (this.trigger !== "click") {
              Object(dom_["on"])(reference, "focusin", function() {
                _this.handleFocus();
                var instance = reference.__vue__;
                if (instance && typeof instance.focus === "function") {
                  instance.focus();
                }
              });
              Object(dom_["on"])(popper2, "focusin", this.handleFocus);
              Object(dom_["on"])(reference, "focusout", this.handleBlur);
              Object(dom_["on"])(popper2, "focusout", this.handleBlur);
            }
            Object(dom_["on"])(reference, "keydown", this.handleKeydown);
            Object(dom_["on"])(reference, "click", this.handleClick);
          }
          if (this.trigger === "click") {
            Object(dom_["on"])(reference, "click", this.doToggle);
            Object(dom_["on"])(document, "click", this.handleDocumentClick);
          } else if (this.trigger === "hover") {
            Object(dom_["on"])(reference, "mouseenter", this.handleMouseEnter);
            Object(dom_["on"])(popper2, "mouseenter", this.handleMouseEnter);
            Object(dom_["on"])(reference, "mouseleave", this.handleMouseLeave);
            Object(dom_["on"])(popper2, "mouseleave", this.handleMouseLeave);
          } else if (this.trigger === "focus") {
            if (this.tabindex < 0) {
              console.warn("[Element Warn][Popover]a negative taindex means that the element cannot be focused by tab key");
            }
            if (reference.querySelector("input, textarea")) {
              Object(dom_["on"])(reference, "focusin", this.doShow);
              Object(dom_["on"])(reference, "focusout", this.doClose);
            } else {
              Object(dom_["on"])(reference, "mousedown", this.doShow);
              Object(dom_["on"])(reference, "mouseup", this.doClose);
            }
          }
        },
        beforeDestroy: function beforeDestroy2() {
          this.cleanup();
        },
        deactivated: function deactivated() {
          this.cleanup();
        },
        methods: {
          doToggle: function doToggle() {
            this.showPopper = !this.showPopper;
          },
          doShow: function doShow() {
            this.showPopper = true;
          },
          doClose: function doClose() {
            this.showPopper = false;
          },
          handleFocus: function handleFocus() {
            Object(dom_["addClass"])(this.referenceElm, "focusing");
            if (this.trigger === "click" || this.trigger === "focus")
              this.showPopper = true;
          },
          handleClick: function handleClick() {
            Object(dom_["removeClass"])(this.referenceElm, "focusing");
          },
          handleBlur: function handleBlur() {
            Object(dom_["removeClass"])(this.referenceElm, "focusing");
            if (this.trigger === "click" || this.trigger === "focus")
              this.showPopper = false;
          },
          handleMouseEnter: function handleMouseEnter() {
            var _this2 = this;
            clearTimeout(this._timer);
            if (this.openDelay) {
              this._timer = setTimeout(function() {
                _this2.showPopper = true;
              }, this.openDelay);
            } else {
              this.showPopper = true;
            }
          },
          handleKeydown: function handleKeydown(ev) {
            if (ev.keyCode === 27 && this.trigger !== "manual") {
              this.doClose();
            }
          },
          handleMouseLeave: function handleMouseLeave() {
            var _this3 = this;
            clearTimeout(this._timer);
            if (this.closeDelay) {
              this._timer = setTimeout(function() {
                _this3.showPopper = false;
              }, this.closeDelay);
            } else {
              this.showPopper = false;
            }
          },
          handleDocumentClick: function handleDocumentClick(e) {
            var reference = this.reference || this.$refs.reference;
            var popper2 = this.popper || this.$refs.popper;
            if (!reference && this.$refs.wrapper.children) {
              reference = this.referenceElm = this.$refs.wrapper.children[0];
            }
            if (!this.$el || !reference || this.$el.contains(e.target) || reference.contains(e.target) || !popper2 || popper2.contains(e.target))
              return;
            this.showPopper = false;
          },
          handleAfterEnter: function handleAfterEnter() {
            this.$emit("after-enter");
          },
          handleAfterLeave: function handleAfterLeave() {
            this.$emit("after-leave");
            this.doDestroy();
          },
          cleanup: function cleanup() {
            if (this.openDelay || this.closeDelay) {
              clearTimeout(this._timer);
            }
          }
        },
        destroyed: function destroyed() {
          var reference = this.reference;
          Object(dom_["off"])(reference, "click", this.doToggle);
          Object(dom_["off"])(reference, "mouseup", this.doClose);
          Object(dom_["off"])(reference, "mousedown", this.doShow);
          Object(dom_["off"])(reference, "focusin", this.doShow);
          Object(dom_["off"])(reference, "focusout", this.doClose);
          Object(dom_["off"])(reference, "mousedown", this.doShow);
          Object(dom_["off"])(reference, "mouseup", this.doClose);
          Object(dom_["off"])(reference, "mouseleave", this.handleMouseLeave);
          Object(dom_["off"])(reference, "mouseenter", this.handleMouseEnter);
          Object(dom_["off"])(document, "click", this.handleDocumentClick);
        }
      };
      var src_mainvue_type_script_lang_js_ = mainvue_type_script_lang_js_;
      var main_component = normalizeComponent2(
        src_mainvue_type_script_lang_js_,
        mainvue_type_template_id_52060272_render,
        mainvue_type_template_id_52060272_staticRenderFns,
        false,
        null,
        null,
        null
      );
      main_component.options.__file = "packages/popover/src/main.vue";
      var main = main_component.exports;
      var getReference = function getReference2(el, binding, vnode) {
        var _ref = binding.expression ? binding.value : binding.arg;
        var popper2 = vnode.context.$refs[_ref];
        if (popper2) {
          if (Array.isArray(popper2)) {
            popper2[0].$refs.reference = el;
          } else {
            popper2.$refs.reference = el;
          }
        }
      };
      var directive2 = {
        bind: function bind2(el, binding, vnode) {
          getReference(el, binding, vnode);
        },
        inserted: function inserted(el, binding, vnode) {
          getReference(el, binding, vnode);
        }
      };
      external_vue_default.a.directive("popover", directive2);
      main.install = function(Vue2) {
        Vue2.directive("popover", directive2);
        Vue2.component(main.name, main);
      };
      main.directive = directive2;
      var popover2 = main;
      var src_main = {
        name: "ElTooltip",
        mixins: [vue_popper_default.a],
        props: {
          openDelay: {
            type: Number,
            default: 0
          },
          disabled: Boolean,
          manual: Boolean,
          effect: {
            type: String,
            default: "dark"
          },
          arrowOffset: {
            type: Number,
            default: 0
          },
          popperClass: String,
          content: String,
          visibleArrow: {
            default: true
          },
          transition: {
            type: String,
            default: "el-fade-in-linear"
          },
          popperOptions: {
            default: function _default2() {
              return {
                boundariesPadding: 10,
                gpuAcceleration: false
              };
            }
          },
          enterable: {
            type: Boolean,
            default: true
          },
          hideAfter: {
            type: Number,
            default: 0
          },
          tabindex: {
            type: Number,
            default: 0
          }
        },
        data: function data() {
          return {
            tooltipId: "el-tooltip-" + Object(util_["generateId"])(),
            timeoutPending: null,
            focusing: false
          };
        },
        beforeCreate: function beforeCreate() {
          var _this = this;
          if (this.$isServer)
            return;
          this.popperVM = new external_vue_default.a({
            data: { node: "" },
            render: function render6(h2) {
              return this.node;
            }
          }).$mount();
          this.debounceClose = debounce_default()(200, function() {
            return _this.handleClosePopper();
          });
        },
        render: function render6(h2) {
          var _this2 = this;
          if (this.popperVM) {
            this.popperVM.node = h2(
              "transition",
              {
                attrs: {
                  name: this.transition
                },
                on: {
                  "afterLeave": this.doDestroy
                }
              },
              [h2(
                "div",
                {
                  on: {
                    "mouseleave": function mouseleave() {
                      _this2.setExpectedState(false);
                      _this2.debounceClose();
                    },
                    "mouseenter": function mouseenter() {
                      _this2.setExpectedState(true);
                    }
                  },
                  ref: "popper",
                  attrs: {
                    role: "tooltip",
                    id: this.tooltipId,
                    "aria-hidden": this.disabled || !this.showPopper ? "true" : "false"
                  },
                  directives: [{
                    name: "show",
                    value: !this.disabled && this.showPopper
                  }],
                  "class": ["el-tooltip__popper", "is-" + this.effect, this.popperClass]
                },
                [this.$slots.content || this.content]
              )]
            );
          }
          var firstElement = this.getFirstElement();
          if (!firstElement)
            return null;
          var data = firstElement.data = firstElement.data || {};
          data.staticClass = this.addTooltipClass(data.staticClass);
          return firstElement;
        },
        mounted: function mounted2() {
          var _this3 = this;
          this.referenceElm = this.$el;
          if (this.$el.nodeType === 1) {
            this.$el.setAttribute("aria-describedby", this.tooltipId);
            this.$el.setAttribute("tabindex", this.tabindex);
            Object(dom_["on"])(this.referenceElm, "mouseenter", this.show);
            Object(dom_["on"])(this.referenceElm, "mouseleave", this.hide);
            Object(dom_["on"])(this.referenceElm, "focus", function() {
              if (!_this3.$slots.default || !_this3.$slots.default.length) {
                _this3.handleFocus();
                return;
              }
              var instance = _this3.$slots.default[0].componentInstance;
              if (instance && instance.focus) {
                instance.focus();
              } else {
                _this3.handleFocus();
              }
            });
            Object(dom_["on"])(this.referenceElm, "blur", this.handleBlur);
            Object(dom_["on"])(this.referenceElm, "click", this.removeFocusing);
          }
          if (this.value && this.popperVM) {
            this.popperVM.$nextTick(function() {
              if (_this3.value) {
                _this3.updatePopper();
              }
            });
          }
        },
        watch: {
          focusing: function focusing(val) {
            if (val) {
              Object(dom_["addClass"])(this.referenceElm, "focusing");
            } else {
              Object(dom_["removeClass"])(this.referenceElm, "focusing");
            }
          }
        },
        methods: {
          show: function show2() {
            this.setExpectedState(true);
            this.handleShowPopper();
          },
          hide: function hide2() {
            this.setExpectedState(false);
            this.debounceClose();
          },
          handleFocus: function handleFocus() {
            this.focusing = true;
            this.show();
          },
          handleBlur: function handleBlur() {
            this.focusing = false;
            this.hide();
          },
          removeFocusing: function removeFocusing() {
            this.focusing = false;
          },
          addTooltipClass: function addTooltipClass(prev) {
            if (!prev) {
              return "el-tooltip";
            } else {
              return "el-tooltip " + prev.replace("el-tooltip", "");
            }
          },
          handleShowPopper: function handleShowPopper() {
            var _this4 = this;
            if (!this.expectedState || this.manual)
              return;
            clearTimeout(this.timeout);
            this.timeout = setTimeout(function() {
              _this4.showPopper = true;
            }, this.openDelay);
            if (this.hideAfter > 0) {
              this.timeoutPending = setTimeout(function() {
                _this4.showPopper = false;
              }, this.hideAfter);
            }
          },
          handleClosePopper: function handleClosePopper() {
            if (this.enterable && this.expectedState || this.manual)
              return;
            clearTimeout(this.timeout);
            if (this.timeoutPending) {
              clearTimeout(this.timeoutPending);
            }
            this.showPopper = false;
            if (this.disabled) {
              this.doDestroy();
            }
          },
          setExpectedState: function setExpectedState(expectedState) {
            if (expectedState === false) {
              clearTimeout(this.timeoutPending);
            }
            this.expectedState = expectedState;
          },
          getFirstElement: function getFirstElement() {
            var slots = this.$slots.default;
            if (!Array.isArray(slots))
              return null;
            var element = null;
            for (var index2 = 0; index2 < slots.length; index2++) {
              if (slots[index2] && slots[index2].tag) {
                element = slots[index2];
                break;
              }
            }
            return element;
          }
        },
        beforeDestroy: function beforeDestroy2() {
          this.popperVM && this.popperVM.$destroy();
        },
        destroyed: function destroyed() {
          var reference = this.referenceElm;
          if (reference.nodeType === 1) {
            Object(dom_["off"])(reference, "mouseenter", this.show);
            Object(dom_["off"])(reference, "mouseleave", this.hide);
            Object(dom_["off"])(reference, "focus", this.handleFocus);
            Object(dom_["off"])(reference, "blur", this.handleBlur);
            Object(dom_["off"])(reference, "click", this.removeFocusing);
          }
        }
      };
      src_main.install = function(Vue2) {
        Vue2.component(src_main.name, src_main);
      };
      var packages_tooltip = src_main;
      var mainvue_type_template_id_6b29b012_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", { attrs: { name: "msgbox-fade" } }, [
          _c(
            "div",
            {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.visible,
                  expression: "visible"
                }
              ],
              staticClass: "el-message-box__wrapper",
              attrs: {
                tabindex: "-1",
                role: "dialog",
                "aria-modal": "true",
                "aria-label": _vm.title || "dialog"
              },
              on: {
                click: function($event) {
                  if ($event.target !== $event.currentTarget) {
                    return null;
                  }
                  return _vm.handleWrapperClick($event);
                }
              }
            },
            [
              _c(
                "div",
                {
                  staticClass: "el-message-box",
                  class: [_vm.customClass, _vm.center && "el-message-box--center"]
                },
                [
                  _vm.title !== null ? _c("div", { staticClass: "el-message-box__header" }, [
                    _c("div", { staticClass: "el-message-box__title" }, [
                      _vm.icon && _vm.center ? _c("div", {
                        class: ["el-message-box__status", _vm.icon]
                      }) : _vm._e(),
                      _c("span", [_vm._v(_vm._s(_vm.title))])
                    ]),
                    _vm.showClose ? _c(
                      "button",
                      {
                        staticClass: "el-message-box__headerbtn",
                        attrs: { type: "button", "aria-label": "Close" },
                        on: {
                          click: function($event) {
                            _vm.handleAction(
                              _vm.distinguishCancelAndClose ? "close" : "cancel"
                            );
                          },
                          keydown: function($event) {
                            if (!("button" in $event) && _vm._k(
                              $event.keyCode,
                              "enter",
                              13,
                              $event.key,
                              "Enter"
                            )) {
                              return null;
                            }
                            _vm.handleAction(
                              _vm.distinguishCancelAndClose ? "close" : "cancel"
                            );
                          }
                        }
                      },
                      [
                        _c("i", {
                          staticClass: "el-message-box__close el-icon-close"
                        })
                      ]
                    ) : _vm._e()
                  ]) : _vm._e(),
                  _c("div", { staticClass: "el-message-box__content" }, [
                    _c("div", { staticClass: "el-message-box__container" }, [
                      _vm.icon && !_vm.center && _vm.message !== "" ? _c("div", { class: ["el-message-box__status", _vm.icon] }) : _vm._e(),
                      _vm.message !== "" ? _c(
                        "div",
                        { staticClass: "el-message-box__message" },
                        [
                          _vm._t("default", [
                            !_vm.dangerouslyUseHTMLString ? _c("p", [_vm._v(_vm._s(_vm.message))]) : _c("p", {
                              domProps: { innerHTML: _vm._s(_vm.message) }
                            })
                          ])
                        ],
                        2
                      ) : _vm._e()
                    ]),
                    _c(
                      "div",
                      {
                        directives: [
                          {
                            name: "show",
                            rawName: "v-show",
                            value: _vm.showInput,
                            expression: "showInput"
                          }
                        ],
                        staticClass: "el-message-box__input"
                      },
                      [
                        _c("el-input", {
                          ref: "input",
                          attrs: {
                            type: _vm.inputType,
                            placeholder: _vm.inputPlaceholder
                          },
                          nativeOn: {
                            keydown: function($event) {
                              if (!("button" in $event) && _vm._k(
                                $event.keyCode,
                                "enter",
                                13,
                                $event.key,
                                "Enter"
                              )) {
                                return null;
                              }
                              return _vm.handleInputEnter($event);
                            }
                          },
                          model: {
                            value: _vm.inputValue,
                            callback: function($$v) {
                              _vm.inputValue = $$v;
                            },
                            expression: "inputValue"
                          }
                        }),
                        _c(
                          "div",
                          {
                            staticClass: "el-message-box__errormsg",
                            style: {
                              visibility: !!_vm.editorErrorMessage ? "visible" : "hidden"
                            }
                          },
                          [_vm._v(_vm._s(_vm.editorErrorMessage))]
                        )
                      ],
                      1
                    )
                  ]),
                  _c(
                    "div",
                    { staticClass: "el-message-box__btns" },
                    [
                      _vm.showCancelButton ? _c(
                        "el-button",
                        {
                          class: [_vm.cancelButtonClasses],
                          attrs: {
                            loading: _vm.cancelButtonLoading,
                            round: _vm.roundButton,
                            size: "small"
                          },
                          on: {
                            keydown: function($event) {
                              if (!("button" in $event) && _vm._k(
                                $event.keyCode,
                                "enter",
                                13,
                                $event.key,
                                "Enter"
                              )) {
                                return null;
                              }
                              _vm.handleAction("cancel");
                            }
                          },
                          nativeOn: {
                            click: function($event) {
                              _vm.handleAction("cancel");
                            }
                          }
                        },
                        [
                          _vm._v(
                            "\n          " + _vm._s(
                              _vm.cancelButtonText || _vm.t("el.messagebox.cancel")
                            ) + "\n        "
                          )
                        ]
                      ) : _vm._e(),
                      _c(
                        "el-button",
                        {
                          directives: [
                            {
                              name: "show",
                              rawName: "v-show",
                              value: _vm.showConfirmButton,
                              expression: "showConfirmButton"
                            }
                          ],
                          ref: "confirm",
                          class: [_vm.confirmButtonClasses],
                          attrs: {
                            loading: _vm.confirmButtonLoading,
                            round: _vm.roundButton,
                            size: "small"
                          },
                          on: {
                            keydown: function($event) {
                              if (!("button" in $event) && _vm._k(
                                $event.keyCode,
                                "enter",
                                13,
                                $event.key,
                                "Enter"
                              )) {
                                return null;
                              }
                              _vm.handleAction("confirm");
                            }
                          },
                          nativeOn: {
                            click: function($event) {
                              _vm.handleAction("confirm");
                            }
                          }
                        },
                        [
                          _vm._v(
                            "\n          " + _vm._s(
                              _vm.confirmButtonText || _vm.t("el.messagebox.confirm")
                            ) + "\n        "
                          )
                        ]
                      )
                    ],
                    1
                  )
                ]
              )
            ]
          )
        ]);
      };
      var mainvue_type_template_id_6b29b012_staticRenderFns = [];
      mainvue_type_template_id_6b29b012_render._withStripped = true;
      var lib_locale_ = __webpack_require__(12);
      var lib_locale_default = /* @__PURE__ */ __webpack_require__.n(lib_locale_);
      var aria_dialog_ = __webpack_require__(40);
      var aria_dialog_default = /* @__PURE__ */ __webpack_require__.n(aria_dialog_);
      var messageBox = void 0;
      var typeMap = {
        success: "success",
        info: "info",
        warning: "warning",
        error: "error"
      };
      var message_box_src_mainvue_type_script_lang_js_ = {
        mixins: [popup_default.a, locale_default.a],
        props: {
          modal: {
            default: true
          },
          lockScroll: {
            default: true
          },
          showClose: {
            type: Boolean,
            default: true
          },
          closeOnClickModal: {
            default: true
          },
          closeOnPressEscape: {
            default: true
          },
          closeOnHashChange: {
            default: true
          },
          center: {
            default: false,
            type: Boolean
          },
          roundButton: {
            default: false,
            type: Boolean
          }
        },
        components: {
          ElInput: input_default.a,
          ElButton: button_default.a
        },
        computed: {
          icon: function icon2() {
            var type2 = this.type, iconClass = this.iconClass;
            return iconClass || (type2 && typeMap[type2] ? "el-icon-" + typeMap[type2] : "");
          },
          confirmButtonClasses: function confirmButtonClasses() {
            return "el-button--primary " + this.confirmButtonClass;
          },
          cancelButtonClasses: function cancelButtonClasses() {
            return "" + this.cancelButtonClass;
          }
        },
        methods: {
          getSafeClose: function getSafeClose() {
            var _this = this;
            var currentId = this.uid;
            return function() {
              _this.$nextTick(function() {
                if (currentId === _this.uid)
                  _this.doClose();
              });
            };
          },
          doClose: function doClose() {
            var _this2 = this;
            if (!this.visible)
              return;
            this.visible = false;
            this._closing = true;
            this.onClose && this.onClose();
            messageBox.closeDialog();
            if (this.lockScroll) {
              setTimeout(this.restoreBodyStyle, 200);
            }
            this.opened = false;
            this.doAfterClose();
            setTimeout(function() {
              if (_this2.action)
                _this2.callback(_this2.action, _this2);
            });
          },
          handleWrapperClick: function handleWrapperClick() {
            if (this.closeOnClickModal) {
              this.handleAction(this.distinguishCancelAndClose ? "close" : "cancel");
            }
          },
          handleInputEnter: function handleInputEnter() {
            if (this.inputType !== "textarea") {
              return this.handleAction("confirm");
            }
          },
          handleAction: function handleAction(action) {
            if (this.$type === "prompt" && action === "confirm" && !this.validate()) {
              return;
            }
            this.action = action;
            if (typeof this.beforeClose === "function") {
              this.close = this.getSafeClose();
              this.beforeClose(action, this, this.close);
            } else {
              this.doClose();
            }
          },
          validate: function validate2() {
            if (this.$type === "prompt") {
              var inputPattern = this.inputPattern;
              if (inputPattern && !inputPattern.test(this.inputValue || "")) {
                this.editorErrorMessage = this.inputErrorMessage || Object(lib_locale_["t"])("el.messagebox.error");
                Object(dom_["addClass"])(this.getInputElement(), "invalid");
                return false;
              }
              var inputValidator = this.inputValidator;
              if (typeof inputValidator === "function") {
                var validateResult = inputValidator(this.inputValue);
                if (validateResult === false) {
                  this.editorErrorMessage = this.inputErrorMessage || Object(lib_locale_["t"])("el.messagebox.error");
                  Object(dom_["addClass"])(this.getInputElement(), "invalid");
                  return false;
                }
                if (typeof validateResult === "string") {
                  this.editorErrorMessage = validateResult;
                  Object(dom_["addClass"])(this.getInputElement(), "invalid");
                  return false;
                }
              }
            }
            this.editorErrorMessage = "";
            Object(dom_["removeClass"])(this.getInputElement(), "invalid");
            return true;
          },
          getFirstFocus: function getFirstFocus() {
            var btn = this.$el.querySelector(".el-message-box__btns .el-button");
            var title = this.$el.querySelector(".el-message-box__btns .el-message-box__title");
            return btn || title;
          },
          getInputElement: function getInputElement() {
            var inputRefs = this.$refs.input.$refs;
            return inputRefs.input || inputRefs.textarea;
          },
          handleClose: function handleClose() {
            this.handleAction("close");
          }
        },
        watch: {
          inputValue: {
            immediate: true,
            handler: function handler(val) {
              var _this3 = this;
              this.$nextTick(function(_) {
                if (_this3.$type === "prompt" && val !== null) {
                  _this3.validate();
                }
              });
            }
          },
          visible: function visible(val) {
            var _this4 = this;
            if (val) {
              this.uid++;
              if (this.$type === "alert" || this.$type === "confirm") {
                this.$nextTick(function() {
                  _this4.$refs.confirm.$el.focus();
                });
              }
              this.focusAfterClosed = document.activeElement;
              messageBox = new aria_dialog_default.a(this.$el, this.focusAfterClosed, this.getFirstFocus());
            }
            if (this.$type !== "prompt")
              return;
            if (val) {
              setTimeout(function() {
                if (_this4.$refs.input && _this4.$refs.input.$el) {
                  _this4.getInputElement().focus();
                }
              }, 500);
            } else {
              this.editorErrorMessage = "";
              Object(dom_["removeClass"])(this.getInputElement(), "invalid");
            }
          }
        },
        mounted: function mounted2() {
          var _this5 = this;
          this.$nextTick(function() {
            if (_this5.closeOnHashChange) {
              window.addEventListener("hashchange", _this5.close);
            }
          });
        },
        beforeDestroy: function beforeDestroy2() {
          if (this.closeOnHashChange) {
            window.removeEventListener("hashchange", this.close);
          }
          setTimeout(function() {
            messageBox.closeDialog();
          });
        },
        data: function data() {
          return {
            uid: 1,
            title: void 0,
            message: "",
            type: "",
            iconClass: "",
            customClass: "",
            showInput: false,
            inputValue: null,
            inputPlaceholder: "",
            inputType: "text",
            inputPattern: null,
            inputValidator: null,
            inputErrorMessage: "",
            showConfirmButton: true,
            showCancelButton: false,
            action: "",
            confirmButtonText: "",
            cancelButtonText: "",
            confirmButtonLoading: false,
            cancelButtonLoading: false,
            confirmButtonClass: "",
            confirmButtonDisabled: false,
            cancelButtonClass: "",
            editorErrorMessage: null,
            callback: null,
            dangerouslyUseHTMLString: false,
            focusAfterClosed: null,
            isOnComposition: false,
            distinguishCancelAndClose: false
          };
        }
      };
      var packages_message_box_src_mainvue_type_script_lang_js_ = message_box_src_mainvue_type_script_lang_js_;
      var src_main_component = normalizeComponent2(
        packages_message_box_src_mainvue_type_script_lang_js_,
        mainvue_type_template_id_6b29b012_render,
        mainvue_type_template_id_6b29b012_staticRenderFns,
        false,
        null,
        null,
        null
      );
      src_main_component.options.__file = "packages/message-box/src/main.vue";
      var message_box_src_main = src_main_component.exports;
      var vdom_ = __webpack_require__(22);
      var main_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var main_defaults = {
        title: null,
        message: "",
        type: "",
        iconClass: "",
        showInput: false,
        showClose: true,
        modalFade: true,
        lockScroll: true,
        closeOnClickModal: true,
        closeOnPressEscape: true,
        closeOnHashChange: true,
        inputValue: null,
        inputPlaceholder: "",
        inputType: "text",
        inputPattern: null,
        inputValidator: null,
        inputErrorMessage: "",
        showConfirmButton: true,
        showCancelButton: false,
        confirmButtonPosition: "right",
        confirmButtonHighlight: false,
        cancelButtonHighlight: false,
        confirmButtonText: "",
        cancelButtonText: "",
        confirmButtonClass: "",
        cancelButtonClass: "",
        customClass: "",
        beforeClose: null,
        dangerouslyUseHTMLString: false,
        center: false,
        roundButton: false,
        distinguishCancelAndClose: false
      };
      var MessageBoxConstructor = external_vue_default.a.extend(message_box_src_main);
      var currentMsg = void 0, main_instance = void 0;
      var msgQueue = [];
      var defaultCallback = function defaultCallback2(action) {
        if (currentMsg) {
          var callback = currentMsg.callback;
          if (typeof callback === "function") {
            if (main_instance.showInput) {
              callback(main_instance.inputValue, action);
            } else {
              callback(action);
            }
          }
          if (currentMsg.resolve) {
            if (action === "confirm") {
              if (main_instance.showInput) {
                currentMsg.resolve({ value: main_instance.inputValue, action });
              } else {
                currentMsg.resolve(action);
              }
            } else if (currentMsg.reject && (action === "cancel" || action === "close")) {
              currentMsg.reject(action);
            }
          }
        }
      };
      var initInstance = function initInstance2() {
        main_instance = new MessageBoxConstructor({
          el: document.createElement("div")
        });
        main_instance.callback = defaultCallback;
      };
      var main_showNextMsg = function showNextMsg() {
        if (!main_instance) {
          initInstance();
        }
        main_instance.action = "";
        if (!main_instance.visible || main_instance.closeTimer) {
          if (msgQueue.length > 0) {
            currentMsg = msgQueue.shift();
            var options = currentMsg.options;
            for (var prop in options) {
              if (options.hasOwnProperty(prop)) {
                main_instance[prop] = options[prop];
              }
            }
            if (options.callback === void 0) {
              main_instance.callback = defaultCallback;
            }
            var oldCb = main_instance.callback;
            main_instance.callback = function(action, instance) {
              oldCb(action, instance);
              showNextMsg();
            };
            if (Object(vdom_["isVNode"])(main_instance.message)) {
              main_instance.$slots.default = [main_instance.message];
              main_instance.message = null;
            } else {
              delete main_instance.$slots.default;
            }
            ["modal", "showClose", "closeOnClickModal", "closeOnPressEscape", "closeOnHashChange"].forEach(function(prop2) {
              if (main_instance[prop2] === void 0) {
                main_instance[prop2] = true;
              }
            });
            document.body.appendChild(main_instance.$el);
            external_vue_default.a.nextTick(function() {
              main_instance.visible = true;
            });
          }
        }
      };
      var main_MessageBox = function MessageBox(options, callback) {
        if (external_vue_default.a.prototype.$isServer)
          return;
        if (typeof options === "string" || Object(vdom_["isVNode"])(options)) {
          options = {
            message: options
          };
          if (typeof arguments[1] === "string") {
            options.title = arguments[1];
          }
        } else if (options.callback && !callback) {
          callback = options.callback;
        }
        if (typeof Promise !== "undefined") {
          return new Promise(function(resolve, reject) {
            msgQueue.push({
              options: merge_default()({}, main_defaults, MessageBox.defaults, options),
              callback,
              resolve,
              reject
            });
            main_showNextMsg();
          });
        } else {
          msgQueue.push({
            options: merge_default()({}, main_defaults, MessageBox.defaults, options),
            callback
          });
          main_showNextMsg();
        }
      };
      main_MessageBox.setDefaults = function(defaults) {
        main_MessageBox.defaults = defaults;
      };
      main_MessageBox.alert = function(message, title, options) {
        if ((typeof title === "undefined" ? "undefined" : main_typeof(title)) === "object") {
          options = title;
          title = "";
        } else if (title === void 0) {
          title = "";
        }
        return main_MessageBox(merge_default()({
          title,
          message,
          $type: "alert",
          closeOnPressEscape: false,
          closeOnClickModal: false
        }, options));
      };
      main_MessageBox.confirm = function(message, title, options) {
        if ((typeof title === "undefined" ? "undefined" : main_typeof(title)) === "object") {
          options = title;
          title = "";
        } else if (title === void 0) {
          title = "";
        }
        return main_MessageBox(merge_default()({
          title,
          message,
          $type: "confirm",
          showCancelButton: true
        }, options));
      };
      main_MessageBox.prompt = function(message, title, options) {
        if ((typeof title === "undefined" ? "undefined" : main_typeof(title)) === "object") {
          options = title;
          title = "";
        } else if (title === void 0) {
          title = "";
        }
        return main_MessageBox(merge_default()({
          title,
          message,
          showCancelButton: true,
          showInput: true,
          $type: "prompt"
        }, options));
      };
      main_MessageBox.close = function() {
        main_instance.doClose();
        main_instance.visible = false;
        msgQueue = [];
        currentMsg = null;
      };
      var packages_message_box_src_main = main_MessageBox;
      var message_box = packages_message_box_src_main;
      var breadcrumbvue_type_template_id_4b464c06_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-breadcrumb",
            attrs: { "aria-label": "Breadcrumb", role: "navigation" }
          },
          [_vm._t("default")],
          2
        );
      };
      var breadcrumbvue_type_template_id_4b464c06_staticRenderFns = [];
      breadcrumbvue_type_template_id_4b464c06_render._withStripped = true;
      var breadcrumbvue_type_script_lang_js_ = {
        name: "ElBreadcrumb",
        props: {
          separator: {
            type: String,
            default: "/"
          },
          separatorClass: {
            type: String,
            default: ""
          }
        },
        provide: function provide2() {
          return {
            elBreadcrumb: this
          };
        },
        mounted: function mounted2() {
          var items = this.$el.querySelectorAll(".el-breadcrumb__item");
          if (items.length) {
            items[items.length - 1].setAttribute("aria-current", "page");
          }
        }
      };
      var src_breadcrumbvue_type_script_lang_js_ = breadcrumbvue_type_script_lang_js_;
      var breadcrumb_component = normalizeComponent2(
        src_breadcrumbvue_type_script_lang_js_,
        breadcrumbvue_type_template_id_4b464c06_render,
        breadcrumbvue_type_template_id_4b464c06_staticRenderFns,
        false,
        null,
        null,
        null
      );
      breadcrumb_component.options.__file = "packages/breadcrumb/src/breadcrumb.vue";
      var breadcrumb = breadcrumb_component.exports;
      breadcrumb.install = function(Vue2) {
        Vue2.component(breadcrumb.name, breadcrumb);
      };
      var packages_breadcrumb = breadcrumb;
      var breadcrumb_itemvue_type_template_id_fcf9eaac_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("span", { staticClass: "el-breadcrumb__item" }, [
          _c(
            "span",
            {
              ref: "link",
              class: ["el-breadcrumb__inner", _vm.to ? "is-link" : ""],
              attrs: { role: "link" }
            },
            [_vm._t("default")],
            2
          ),
          _vm.separatorClass ? _c("i", {
            staticClass: "el-breadcrumb__separator",
            class: _vm.separatorClass
          }) : _c(
            "span",
            {
              staticClass: "el-breadcrumb__separator",
              attrs: { role: "presentation" }
            },
            [_vm._v(_vm._s(_vm.separator))]
          )
        ]);
      };
      var breadcrumb_itemvue_type_template_id_fcf9eaac_staticRenderFns = [];
      breadcrumb_itemvue_type_template_id_fcf9eaac_render._withStripped = true;
      var breadcrumb_itemvue_type_script_lang_js_ = {
        name: "ElBreadcrumbItem",
        props: {
          to: {},
          replace: Boolean
        },
        data: function data() {
          return {
            separator: "",
            separatorClass: ""
          };
        },
        inject: ["elBreadcrumb"],
        mounted: function mounted2() {
          var _this = this;
          this.separator = this.elBreadcrumb.separator;
          this.separatorClass = this.elBreadcrumb.separatorClass;
          var link = this.$refs.link;
          link.setAttribute("role", "link");
          link.addEventListener("click", function(_) {
            var to = _this.to, $router = _this.$router;
            if (!to || !$router)
              return;
            _this.replace ? $router.replace(to) : $router.push(to);
          });
        }
      };
      var src_breadcrumb_itemvue_type_script_lang_js_ = breadcrumb_itemvue_type_script_lang_js_;
      var breadcrumb_item_component = normalizeComponent2(
        src_breadcrumb_itemvue_type_script_lang_js_,
        breadcrumb_itemvue_type_template_id_fcf9eaac_render,
        breadcrumb_itemvue_type_template_id_fcf9eaac_staticRenderFns,
        false,
        null,
        null,
        null
      );
      breadcrumb_item_component.options.__file = "packages/breadcrumb/src/breadcrumb-item.vue";
      var breadcrumb_item = breadcrumb_item_component.exports;
      breadcrumb_item.install = function(Vue2) {
        Vue2.component(breadcrumb_item.name, breadcrumb_item);
      };
      var packages_breadcrumb_item = breadcrumb_item;
      var formvue_type_template_id_a1b5ff34_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "form",
          {
            staticClass: "el-form",
            class: [
              _vm.labelPosition ? "el-form--label-" + _vm.labelPosition : "",
              { "el-form--inline": _vm.inline }
            ]
          },
          [_vm._t("default")],
          2
        );
      };
      var formvue_type_template_id_a1b5ff34_staticRenderFns = [];
      formvue_type_template_id_a1b5ff34_render._withStripped = true;
      var formvue_type_script_lang_js_ = {
        name: "ElForm",
        componentName: "ElForm",
        provide: function provide2() {
          return {
            elForm: this
          };
        },
        props: {
          model: Object,
          rules: Object,
          labelPosition: String,
          labelWidth: String,
          labelSuffix: {
            type: String,
            default: ""
          },
          inline: Boolean,
          inlineMessage: Boolean,
          statusIcon: Boolean,
          showMessage: {
            type: Boolean,
            default: true
          },
          size: String,
          disabled: Boolean,
          validateOnRuleChange: {
            type: Boolean,
            default: true
          },
          hideRequiredAsterisk: {
            type: Boolean,
            default: false
          }
        },
        watch: {
          rules: function rules2() {
            this.fields.forEach(function(field) {
              field.removeValidateEvents();
              field.addValidateEvents();
            });
            if (this.validateOnRuleChange) {
              this.validate(function() {
              });
            }
          }
        },
        computed: {
          autoLabelWidth: function autoLabelWidth() {
            if (!this.potentialLabelWidthArr.length)
              return 0;
            var max2 = Math.max.apply(Math, this.potentialLabelWidthArr);
            return max2 ? max2 + "px" : "";
          }
        },
        data: function data() {
          return {
            fields: [],
            potentialLabelWidthArr: []
            // use this array to calculate auto width
          };
        },
        created: function created() {
          var _this = this;
          this.$on("el.form.addField", function(field) {
            if (field) {
              _this.fields.push(field);
            }
          });
          this.$on("el.form.removeField", function(field) {
            if (field.prop) {
              _this.fields.splice(_this.fields.indexOf(field), 1);
            }
          });
        },
        methods: {
          resetFields: function resetFields() {
            if (!this.model) {
              console.warn("[Element Warn][Form]model is required for resetFields to work.");
              return;
            }
            this.fields.forEach(function(field) {
              field.resetField();
            });
          },
          clearValidate: function clearValidate() {
            var props2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
            var fields = props2.length ? typeof props2 === "string" ? this.fields.filter(function(field) {
              return props2 === field.prop;
            }) : this.fields.filter(function(field) {
              return props2.indexOf(field.prop) > -1;
            }) : this.fields;
            fields.forEach(function(field) {
              field.clearValidate();
            });
          },
          validate: function validate2(callback) {
            var _this2 = this;
            if (!this.model) {
              console.warn("[Element Warn][Form]model is required for validate to work!");
              return;
            }
            var promise = void 0;
            if (typeof callback !== "function" && window.Promise) {
              promise = new window.Promise(function(resolve, reject) {
                callback = function callback2(valid2, invalidFields2) {
                  valid2 ? resolve(valid2) : reject(invalidFields2);
                };
              });
            }
            var valid = true;
            var count = 0;
            if (this.fields.length === 0 && callback) {
              callback(true);
            }
            var invalidFields = {};
            this.fields.forEach(function(field) {
              field.validate("", function(message, field2) {
                if (message) {
                  valid = false;
                }
                invalidFields = merge_default()({}, invalidFields, field2);
                if (typeof callback === "function" && ++count === _this2.fields.length) {
                  callback(valid, invalidFields);
                }
              });
            });
            if (promise) {
              return promise;
            }
          },
          validateField: function validateField(props2, cb) {
            props2 = [].concat(props2);
            var fields = this.fields.filter(function(field) {
              return props2.indexOf(field.prop) !== -1;
            });
            if (!fields.length) {
              console.warn("[Element Warn]please pass correct props!");
              return;
            }
            fields.forEach(function(field) {
              field.validate("", cb);
            });
          },
          getLabelWidthIndex: function getLabelWidthIndex(width) {
            var index2 = this.potentialLabelWidthArr.indexOf(width);
            if (index2 === -1) {
              throw new Error("[ElementForm]unpected width ", width);
            }
            return index2;
          },
          registerLabelWidth: function registerLabelWidth(val, oldVal) {
            if (val && oldVal) {
              var index2 = this.getLabelWidthIndex(oldVal);
              this.potentialLabelWidthArr.splice(index2, 1, val);
            } else if (val) {
              this.potentialLabelWidthArr.push(val);
            }
          },
          deregisterLabelWidth: function deregisterLabelWidth(val) {
            var index2 = this.getLabelWidthIndex(val);
            this.potentialLabelWidthArr.splice(index2, 1);
          }
        }
      };
      var src_formvue_type_script_lang_js_ = formvue_type_script_lang_js_;
      var form_component = normalizeComponent2(
        src_formvue_type_script_lang_js_,
        formvue_type_template_id_a1b5ff34_render,
        formvue_type_template_id_a1b5ff34_staticRenderFns,
        false,
        null,
        null,
        null
      );
      form_component.options.__file = "packages/form/src/form.vue";
      var src_form = form_component.exports;
      src_form.install = function(Vue2) {
        Vue2.component(src_form.name, src_form);
      };
      var packages_form = src_form;
      var form_itemvue_type_template_id_b6f3db6c_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-form-item",
            class: [
              {
                "el-form-item--feedback": _vm.elForm && _vm.elForm.statusIcon,
                "is-error": _vm.validateState === "error",
                "is-validating": _vm.validateState === "validating",
                "is-success": _vm.validateState === "success",
                "is-required": _vm.isRequired || _vm.required,
                "is-no-asterisk": _vm.elForm && _vm.elForm.hideRequiredAsterisk
              },
              _vm.sizeClass ? "el-form-item--" + _vm.sizeClass : ""
            ]
          },
          [
            _c(
              "label-wrap",
              {
                attrs: {
                  "is-auto-width": _vm.labelStyle && _vm.labelStyle.width === "auto",
                  "update-all": _vm.form.labelWidth === "auto"
                }
              },
              [
                _vm.label || _vm.$slots.label ? _c(
                  "label",
                  {
                    staticClass: "el-form-item__label",
                    style: _vm.labelStyle,
                    attrs: { for: _vm.labelFor }
                  },
                  [
                    _vm._t("label", [
                      _vm._v(_vm._s(_vm.label + _vm.form.labelSuffix))
                    ])
                  ],
                  2
                ) : _vm._e()
              ]
            ),
            _c(
              "div",
              { staticClass: "el-form-item__content", style: _vm.contentStyle },
              [
                _vm._t("default"),
                _c(
                  "transition",
                  { attrs: { name: "el-zoom-in-top" } },
                  [
                    _vm.validateState === "error" && _vm.showMessage && _vm.form.showMessage ? _vm._t(
                      "error",
                      [
                        _c(
                          "div",
                          {
                            staticClass: "el-form-item__error",
                            class: {
                              "el-form-item__error--inline": typeof _vm.inlineMessage === "boolean" ? _vm.inlineMessage : _vm.elForm && _vm.elForm.inlineMessage || false
                            }
                          },
                          [
                            _vm._v(
                              "\n          " + _vm._s(_vm.validateMessage) + "\n        "
                            )
                          ]
                        )
                      ],
                      { error: _vm.validateMessage }
                    ) : _vm._e()
                  ],
                  2
                )
              ],
              2
            )
          ],
          1
        );
      };
      var form_itemvue_type_template_id_b6f3db6c_staticRenderFns = [];
      form_itemvue_type_template_id_b6f3db6c_render._withStripped = true;
      var external_async_validator_ = __webpack_require__(41);
      var external_async_validator_default = /* @__PURE__ */ __webpack_require__.n(external_async_validator_);
      var label_wrapvue_type_script_lang_js_ = {
        props: {
          isAutoWidth: Boolean,
          updateAll: Boolean
        },
        inject: ["elForm", "elFormItem"],
        render: function render6() {
          var h2 = arguments[0];
          var slots = this.$slots.default;
          if (!slots)
            return null;
          if (this.isAutoWidth) {
            var autoLabelWidth = this.elForm.autoLabelWidth;
            var style2 = {};
            if (autoLabelWidth && autoLabelWidth !== "auto") {
              var marginLeft = parseInt(autoLabelWidth, 10) - this.computedWidth;
              if (marginLeft) {
                style2.marginLeft = marginLeft + "px";
              }
            }
            return h2(
              "div",
              { "class": "el-form-item__label-wrap", style: style2 },
              [slots]
            );
          } else {
            return slots[0];
          }
        },
        methods: {
          getLabelWidth: function getLabelWidth() {
            if (this.$el && this.$el.firstElementChild) {
              var computedWidth = window.getComputedStyle(this.$el.firstElementChild).width;
              return Math.ceil(parseFloat(computedWidth));
            } else {
              return 0;
            }
          },
          updateLabelWidth: function updateLabelWidth() {
            var action = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "update";
            if (this.$slots.default && this.isAutoWidth && this.$el.firstElementChild) {
              if (action === "update") {
                this.computedWidth = this.getLabelWidth();
              } else if (action === "remove") {
                this.elForm.deregisterLabelWidth(this.computedWidth);
              }
            }
          }
        },
        watch: {
          computedWidth: function computedWidth(val, oldVal) {
            if (this.updateAll) {
              this.elForm.registerLabelWidth(val, oldVal);
              this.elFormItem.updateComputedLabelWidth(val);
            }
          }
        },
        data: function data() {
          return {
            computedWidth: 0
          };
        },
        mounted: function mounted2() {
          this.updateLabelWidth("update");
        },
        updated: function updated() {
          this.updateLabelWidth("update");
        },
        beforeDestroy: function beforeDestroy2() {
          this.updateLabelWidth("remove");
        }
      };
      var src_label_wrapvue_type_script_lang_js_ = label_wrapvue_type_script_lang_js_;
      var label_wrap_render, label_wrap_staticRenderFns;
      var label_wrap_component = normalizeComponent2(
        src_label_wrapvue_type_script_lang_js_,
        label_wrap_render,
        label_wrap_staticRenderFns,
        false,
        null,
        null,
        null
      );
      label_wrap_component.options.__file = "packages/form/src/label-wrap.vue";
      var label_wrap = label_wrap_component.exports;
      var form_itemvue_type_script_lang_js_ = {
        name: "ElFormItem",
        componentName: "ElFormItem",
        mixins: [emitter_default.a],
        provide: function provide2() {
          return {
            elFormItem: this
          };
        },
        inject: ["elForm"],
        props: {
          label: String,
          labelWidth: String,
          prop: String,
          required: {
            type: Boolean,
            default: void 0
          },
          rules: [Object, Array],
          error: String,
          validateStatus: String,
          for: String,
          inlineMessage: {
            type: [String, Boolean],
            default: ""
          },
          showMessage: {
            type: Boolean,
            default: true
          },
          size: String
        },
        components: {
          // use this component to calculate auto width
          LabelWrap: label_wrap
        },
        watch: {
          error: {
            immediate: true,
            handler: function handler(value) {
              this.validateMessage = value;
              this.validateState = value ? "error" : "";
            }
          },
          validateStatus: function validateStatus(value) {
            this.validateState = value;
          },
          rules: function rules2(value) {
            if ((!value || value.length === 0) && this.required === void 0) {
              this.clearValidate();
            }
          }
        },
        computed: {
          labelFor: function labelFor() {
            return this.for || this.prop;
          },
          labelStyle: function labelStyle() {
            var ret = {};
            if (this.form.labelPosition === "top")
              return ret;
            var labelWidth = this.labelWidth || this.form.labelWidth;
            if (labelWidth) {
              ret.width = labelWidth;
            }
            return ret;
          },
          contentStyle: function contentStyle() {
            var ret = {};
            var label = this.label;
            if (this.form.labelPosition === "top" || this.form.inline)
              return ret;
            if (!label && !this.labelWidth && this.isNested)
              return ret;
            var labelWidth = this.labelWidth || this.form.labelWidth;
            if (labelWidth === "auto") {
              if (this.labelWidth === "auto") {
                ret.marginLeft = this.computedLabelWidth;
              } else if (this.form.labelWidth === "auto") {
                ret.marginLeft = this.elForm.autoLabelWidth;
              }
            } else {
              ret.marginLeft = labelWidth;
            }
            return ret;
          },
          form: function form() {
            var parent = this.$parent;
            var parentName = parent.$options.componentName;
            while (parentName !== "ElForm") {
              if (parentName === "ElFormItem") {
                this.isNested = true;
              }
              parent = parent.$parent;
              parentName = parent.$options.componentName;
            }
            return parent;
          },
          fieldValue: function fieldValue() {
            var model = this.form.model;
            if (!model || !this.prop) {
              return;
            }
            var path = this.prop;
            if (path.indexOf(":") !== -1) {
              path = path.replace(/:/, ".");
            }
            return Object(util_["getPropByPath"])(model, path, true).v;
          },
          isRequired: function isRequired() {
            var rules2 = this.getRules();
            var isRequired2 = false;
            if (rules2 && rules2.length) {
              rules2.every(function(rule) {
                if (rule.required) {
                  isRequired2 = true;
                  return false;
                }
                return true;
              });
            }
            return isRequired2;
          },
          _formSize: function _formSize() {
            return this.elForm.size;
          },
          elFormItemSize: function elFormItemSize() {
            return this.size || this._formSize;
          },
          sizeClass: function sizeClass() {
            return this.elFormItemSize || (this.$ELEMENT || {}).size;
          }
        },
        data: function data() {
          return {
            validateState: "",
            validateMessage: "",
            validateDisabled: false,
            validator: {},
            isNested: false,
            computedLabelWidth: ""
          };
        },
        methods: {
          validate: function validate2(trigger2) {
            var _this = this;
            var callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : util_["noop"];
            this.validateDisabled = false;
            var rules2 = this.getFilteredRule(trigger2);
            if ((!rules2 || rules2.length === 0) && this.required === void 0) {
              callback();
              return true;
            }
            this.validateState = "validating";
            var descriptor2 = {};
            if (rules2 && rules2.length > 0) {
              rules2.forEach(function(rule) {
                delete rule.trigger;
              });
            }
            descriptor2[this.prop] = rules2;
            var validator = new external_async_validator_default.a(descriptor2);
            var model = {};
            model[this.prop] = this.fieldValue;
            validator.validate(model, { firstFields: true }, function(errors, invalidFields) {
              _this.validateState = !errors ? "success" : "error";
              _this.validateMessage = errors ? errors[0].message : "";
              callback(_this.validateMessage, invalidFields);
              _this.elForm && _this.elForm.$emit("validate", _this.prop, !errors, _this.validateMessage || null);
            });
          },
          clearValidate: function clearValidate() {
            this.validateState = "";
            this.validateMessage = "";
            this.validateDisabled = false;
          },
          resetField: function resetField() {
            var _this2 = this;
            this.validateState = "";
            this.validateMessage = "";
            var model = this.form.model;
            var value = this.fieldValue;
            var path = this.prop;
            if (path.indexOf(":") !== -1) {
              path = path.replace(/:/, ".");
            }
            var prop = Object(util_["getPropByPath"])(model, path, true);
            this.validateDisabled = true;
            if (Array.isArray(value)) {
              prop.o[prop.k] = [].concat(this.initialValue);
            } else {
              prop.o[prop.k] = this.initialValue;
            }
            this.$nextTick(function() {
              _this2.validateDisabled = false;
            });
            this.broadcast("ElTimeSelect", "fieldReset", this.initialValue);
          },
          getRules: function getRules() {
            var formRules = this.form.rules;
            var selfRules = this.rules;
            var requiredRule = this.required !== void 0 ? { required: !!this.required } : [];
            var prop = Object(util_["getPropByPath"])(formRules, this.prop || "");
            formRules = formRules ? prop.o[this.prop || ""] || prop.v : [];
            return [].concat(selfRules || formRules || []).concat(requiredRule);
          },
          getFilteredRule: function getFilteredRule(trigger2) {
            var rules2 = this.getRules();
            return rules2.filter(function(rule) {
              if (!rule.trigger || trigger2 === "")
                return true;
              if (Array.isArray(rule.trigger)) {
                return rule.trigger.indexOf(trigger2) > -1;
              } else {
                return rule.trigger === trigger2;
              }
            }).map(function(rule) {
              return merge_default()({}, rule);
            });
          },
          onFieldBlur: function onFieldBlur() {
            this.validate("blur");
          },
          onFieldChange: function onFieldChange() {
            if (this.validateDisabled) {
              this.validateDisabled = false;
              return;
            }
            this.validate("change");
          },
          updateComputedLabelWidth: function updateComputedLabelWidth(width) {
            this.computedLabelWidth = width ? width + "px" : "";
          },
          addValidateEvents: function addValidateEvents() {
            var rules2 = this.getRules();
            if (rules2.length || this.required !== void 0) {
              this.$on("el.form.blur", this.onFieldBlur);
              this.$on("el.form.change", this.onFieldChange);
            }
          },
          removeValidateEvents: function removeValidateEvents() {
            this.$off();
          }
        },
        mounted: function mounted2() {
          if (this.prop) {
            this.dispatch("ElForm", "el.form.addField", [this]);
            var initialValue = this.fieldValue;
            if (Array.isArray(initialValue)) {
              initialValue = [].concat(initialValue);
            }
            Object.defineProperty(this, "initialValue", {
              value: initialValue
            });
            this.addValidateEvents();
          }
        },
        beforeDestroy: function beforeDestroy2() {
          this.dispatch("ElForm", "el.form.removeField", [this]);
        }
      };
      var src_form_itemvue_type_script_lang_js_ = form_itemvue_type_script_lang_js_;
      var form_item_component = normalizeComponent2(
        src_form_itemvue_type_script_lang_js_,
        form_itemvue_type_template_id_b6f3db6c_render,
        form_itemvue_type_template_id_b6f3db6c_staticRenderFns,
        false,
        null,
        null,
        null
      );
      form_item_component.options.__file = "packages/form/src/form-item.vue";
      var form_item = form_item_component.exports;
      form_item.install = function(Vue2) {
        Vue2.component(form_item.name, form_item);
      };
      var packages_form_item = form_item;
      var tab_barvue_type_template_id_2031f33a_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", {
          staticClass: "el-tabs__active-bar",
          class: "is-" + _vm.rootTabs.tabPosition,
          style: _vm.barStyle
        });
      };
      var tab_barvue_type_template_id_2031f33a_staticRenderFns = [];
      tab_barvue_type_template_id_2031f33a_render._withStripped = true;
      var tab_barvue_type_script_lang_js_ = {
        name: "TabBar",
        props: {
          tabs: Array
        },
        inject: ["rootTabs"],
        computed: {
          barStyle: {
            get: function get() {
              var _this = this;
              var style2 = {};
              var offset = 0;
              var tabSize = 0;
              var sizeName = ["top", "bottom"].indexOf(this.rootTabs.tabPosition) !== -1 ? "width" : "height";
              var sizeDir = sizeName === "width" ? "x" : "y";
              var firstUpperCase = function firstUpperCase2(str) {
                return str.toLowerCase().replace(/( |^)[a-z]/g, function(L) {
                  return L.toUpperCase();
                });
              };
              this.tabs.every(function(tab, index2) {
                var $el = Object(util_["arrayFind"])(_this.$parent.$refs.tabs || [], function(t) {
                  return t.id.replace("tab-", "") === tab.paneName;
                });
                if (!$el) {
                  return false;
                }
                if (!tab.active) {
                  offset += $el["client" + firstUpperCase(sizeName)];
                  return true;
                } else {
                  tabSize = $el["client" + firstUpperCase(sizeName)];
                  var tabStyles = window.getComputedStyle($el);
                  if (sizeName === "width" && _this.tabs.length > 1) {
                    tabSize -= parseFloat(tabStyles.paddingLeft) + parseFloat(tabStyles.paddingRight);
                  }
                  if (sizeName === "width") {
                    offset += parseFloat(tabStyles.paddingLeft);
                  }
                  return false;
                }
              });
              var transform = "translate" + firstUpperCase(sizeDir) + "(" + offset + "px)";
              style2[sizeName] = tabSize + "px";
              style2.transform = transform;
              style2.msTransform = transform;
              style2.webkitTransform = transform;
              return style2;
            }
          }
        }
      };
      var src_tab_barvue_type_script_lang_js_ = tab_barvue_type_script_lang_js_;
      var tab_bar_component = normalizeComponent2(
        src_tab_barvue_type_script_lang_js_,
        tab_barvue_type_template_id_2031f33a_render,
        tab_barvue_type_template_id_2031f33a_staticRenderFns,
        false,
        null,
        null,
        null
      );
      tab_bar_component.options.__file = "packages/tabs/src/tab-bar.vue";
      var tab_bar = tab_bar_component.exports;
      function noop2() {
      }
      var tab_navvue_type_script_lang_js_firstUpperCase = function firstUpperCase(str) {
        return str.toLowerCase().replace(/( |^)[a-z]/g, function(L) {
          return L.toUpperCase();
        });
      };
      var tab_navvue_type_script_lang_js_ = {
        name: "TabNav",
        components: {
          TabBar: tab_bar
        },
        inject: ["rootTabs"],
        props: {
          panes: Array,
          currentName: String,
          editable: Boolean,
          onTabClick: {
            type: Function,
            default: noop2
          },
          onTabRemove: {
            type: Function,
            default: noop2
          },
          type: String,
          stretch: Boolean
        },
        data: function data() {
          return {
            scrollable: false,
            navOffset: 0,
            isFocus: false,
            focusable: true
          };
        },
        computed: {
          navStyle: function navStyle() {
            var dir = ["top", "bottom"].indexOf(this.rootTabs.tabPosition) !== -1 ? "X" : "Y";
            return {
              transform: "translate" + dir + "(-" + this.navOffset + "px)"
            };
          },
          sizeName: function sizeName() {
            return ["top", "bottom"].indexOf(this.rootTabs.tabPosition) !== -1 ? "width" : "height";
          }
        },
        methods: {
          scrollPrev: function scrollPrev() {
            var containerSize = this.$refs.navScroll["offset" + tab_navvue_type_script_lang_js_firstUpperCase(this.sizeName)];
            var currentOffset = this.navOffset;
            if (!currentOffset)
              return;
            var newOffset = currentOffset > containerSize ? currentOffset - containerSize : 0;
            this.navOffset = newOffset;
          },
          scrollNext: function scrollNext() {
            var navSize = this.$refs.nav["offset" + tab_navvue_type_script_lang_js_firstUpperCase(this.sizeName)];
            var containerSize = this.$refs.navScroll["offset" + tab_navvue_type_script_lang_js_firstUpperCase(this.sizeName)];
            var currentOffset = this.navOffset;
            if (navSize - currentOffset <= containerSize)
              return;
            var newOffset = navSize - currentOffset > containerSize * 2 ? currentOffset + containerSize : navSize - containerSize;
            this.navOffset = newOffset;
          },
          scrollToActiveTab: function scrollToActiveTab() {
            if (!this.scrollable)
              return;
            var nav = this.$refs.nav;
            var activeTab = this.$el.querySelector(".is-active");
            if (!activeTab)
              return;
            var navScroll = this.$refs.navScroll;
            var isHorizontal = ["top", "bottom"].indexOf(this.rootTabs.tabPosition) !== -1;
            var activeTabBounding = activeTab.getBoundingClientRect();
            var navScrollBounding = navScroll.getBoundingClientRect();
            var maxOffset = isHorizontal ? nav.offsetWidth - navScrollBounding.width : nav.offsetHeight - navScrollBounding.height;
            var currentOffset = this.navOffset;
            var newOffset = currentOffset;
            if (isHorizontal) {
              if (activeTabBounding.left < navScrollBounding.left) {
                newOffset = currentOffset - (navScrollBounding.left - activeTabBounding.left);
              }
              if (activeTabBounding.right > navScrollBounding.right) {
                newOffset = currentOffset + activeTabBounding.right - navScrollBounding.right;
              }
            } else {
              if (activeTabBounding.top < navScrollBounding.top) {
                newOffset = currentOffset - (navScrollBounding.top - activeTabBounding.top);
              }
              if (activeTabBounding.bottom > navScrollBounding.bottom) {
                newOffset = currentOffset + (activeTabBounding.bottom - navScrollBounding.bottom);
              }
            }
            newOffset = Math.max(newOffset, 0);
            this.navOffset = Math.min(newOffset, maxOffset);
          },
          update: function update2() {
            if (!this.$refs.nav)
              return;
            var sizeName = this.sizeName;
            var navSize = this.$refs.nav["offset" + tab_navvue_type_script_lang_js_firstUpperCase(sizeName)];
            var containerSize = this.$refs.navScroll["offset" + tab_navvue_type_script_lang_js_firstUpperCase(sizeName)];
            var currentOffset = this.navOffset;
            if (containerSize < navSize) {
              var _currentOffset = this.navOffset;
              this.scrollable = this.scrollable || {};
              this.scrollable.prev = _currentOffset;
              this.scrollable.next = _currentOffset + containerSize < navSize;
              if (navSize - _currentOffset < containerSize) {
                this.navOffset = navSize - containerSize;
              }
            } else {
              this.scrollable = false;
              if (currentOffset > 0) {
                this.navOffset = 0;
              }
            }
          },
          changeTab: function changeTab(e) {
            var keyCode2 = e.keyCode;
            var nextIndex = void 0;
            var currentIndex = void 0, tabList = void 0;
            if ([37, 38, 39, 40].indexOf(keyCode2) !== -1) {
              tabList = e.currentTarget.querySelectorAll("[role=tab]");
              currentIndex = Array.prototype.indexOf.call(tabList, e.target);
            } else {
              return;
            }
            if (keyCode2 === 37 || keyCode2 === 38) {
              if (currentIndex === 0) {
                nextIndex = tabList.length - 1;
              } else {
                nextIndex = currentIndex - 1;
              }
            } else {
              if (currentIndex < tabList.length - 1) {
                nextIndex = currentIndex + 1;
              } else {
                nextIndex = 0;
              }
            }
            tabList[nextIndex].focus();
            tabList[nextIndex].click();
            this.setFocus();
          },
          setFocus: function setFocus() {
            if (this.focusable) {
              this.isFocus = true;
            }
          },
          removeFocus: function removeFocus() {
            this.isFocus = false;
          },
          visibilityChangeHandler: function visibilityChangeHandler() {
            var _this = this;
            var visibility = document.visibilityState;
            if (visibility === "hidden") {
              this.focusable = false;
            } else if (visibility === "visible") {
              setTimeout(function() {
                _this.focusable = true;
              }, 50);
            }
          },
          windowBlurHandler: function windowBlurHandler() {
            this.focusable = false;
          },
          windowFocusHandler: function windowFocusHandler() {
            var _this2 = this;
            setTimeout(function() {
              _this2.focusable = true;
            }, 50);
          }
        },
        updated: function updated() {
          this.update();
        },
        render: function render6(h2) {
          var _this3 = this;
          var type2 = this.type, panes = this.panes, editable = this.editable, stretch = this.stretch, onTabClick = this.onTabClick, onTabRemove = this.onTabRemove, navStyle = this.navStyle, scrollable = this.scrollable, scrollNext = this.scrollNext, scrollPrev = this.scrollPrev, changeTab = this.changeTab, setFocus = this.setFocus, removeFocus = this.removeFocus;
          var scrollBtn = scrollable ? [h2(
            "span",
            {
              "class": ["el-tabs__nav-prev", scrollable.prev ? "" : "is-disabled"],
              on: {
                "click": scrollPrev
              }
            },
            [h2("i", { "class": "el-icon-arrow-left" })]
          ), h2(
            "span",
            {
              "class": ["el-tabs__nav-next", scrollable.next ? "" : "is-disabled"],
              on: {
                "click": scrollNext
              }
            },
            [h2("i", { "class": "el-icon-arrow-right" })]
          )] : null;
          var tabs2 = this._l(panes, function(pane, index2) {
            var _ref;
            var tabName = pane.name || pane.index || index2;
            var closable = pane.isClosable || editable;
            pane.index = "" + index2;
            var btnClose = closable ? h2("span", {
              "class": "el-icon-close",
              on: {
                "click": function click(ev) {
                  onTabRemove(pane, ev);
                }
              }
            }) : null;
            var tabLabelContent = pane.$slots.label || pane.label;
            var tabindex = pane.active ? 0 : -1;
            return h2(
              "div",
              {
                "class": (_ref = {
                  "el-tabs__item": true
                }, _ref["is-" + _this3.rootTabs.tabPosition] = true, _ref["is-active"] = pane.active, _ref["is-disabled"] = pane.disabled, _ref["is-closable"] = closable, _ref["is-focus"] = _this3.isFocus, _ref),
                attrs: {
                  id: "tab-" + tabName,
                  "aria-controls": "pane-" + tabName,
                  role: "tab",
                  "aria-selected": pane.active,
                  tabindex
                },
                key: "tab-" + tabName,
                ref: "tabs",
                refInFor: true,
                on: {
                  "focus": function focus2() {
                    setFocus();
                  },
                  "blur": function blur() {
                    removeFocus();
                  },
                  "click": function click(ev) {
                    removeFocus();
                    onTabClick(pane, tabName, ev);
                  },
                  "keydown": function keydown(ev) {
                    if (closable && (ev.keyCode === 46 || ev.keyCode === 8)) {
                      onTabRemove(pane, ev);
                    }
                  }
                }
              },
              [tabLabelContent, btnClose]
            );
          });
          return h2(
            "div",
            { "class": ["el-tabs__nav-wrap", scrollable ? "is-scrollable" : "", "is-" + this.rootTabs.tabPosition] },
            [scrollBtn, h2(
              "div",
              { "class": ["el-tabs__nav-scroll"], ref: "navScroll" },
              [h2(
                "div",
                {
                  "class": ["el-tabs__nav", "is-" + this.rootTabs.tabPosition, stretch && ["top", "bottom"].indexOf(this.rootTabs.tabPosition) !== -1 ? "is-stretch" : ""],
                  ref: "nav",
                  style: navStyle,
                  attrs: {
                    role: "tablist"
                  },
                  on: {
                    "keydown": changeTab
                  }
                },
                [!type2 ? h2("tab-bar", {
                  attrs: { tabs: panes }
                }) : null, tabs2]
              )]
            )]
          );
        },
        mounted: function mounted2() {
          var _this4 = this;
          Object(resize_event_["addResizeListener"])(this.$el, this.update);
          document.addEventListener("visibilitychange", this.visibilityChangeHandler);
          window.addEventListener("blur", this.windowBlurHandler);
          window.addEventListener("focus", this.windowFocusHandler);
          setTimeout(function() {
            _this4.scrollToActiveTab();
          }, 0);
        },
        beforeDestroy: function beforeDestroy2() {
          if (this.$el && this.update)
            Object(resize_event_["removeResizeListener"])(this.$el, this.update);
          document.removeEventListener("visibilitychange", this.visibilityChangeHandler);
          window.removeEventListener("blur", this.windowBlurHandler);
          window.removeEventListener("focus", this.windowFocusHandler);
        }
      };
      var src_tab_navvue_type_script_lang_js_ = tab_navvue_type_script_lang_js_;
      var tab_nav_render, tab_nav_staticRenderFns;
      var tab_nav_component = normalizeComponent2(
        src_tab_navvue_type_script_lang_js_,
        tab_nav_render,
        tab_nav_staticRenderFns,
        false,
        null,
        null,
        null
      );
      tab_nav_component.options.__file = "packages/tabs/src/tab-nav.vue";
      var tab_nav = tab_nav_component.exports;
      var tabsvue_type_script_lang_js_ = {
        name: "ElTabs",
        components: {
          TabNav: tab_nav
        },
        props: {
          type: String,
          activeName: String,
          closable: Boolean,
          addable: Boolean,
          value: {},
          editable: Boolean,
          tabPosition: {
            type: String,
            default: "top"
          },
          beforeLeave: Function,
          stretch: Boolean
        },
        provide: function provide2() {
          return {
            rootTabs: this
          };
        },
        data: function data() {
          return {
            currentName: this.value || this.activeName,
            panes: []
          };
        },
        watch: {
          activeName: function activeName(value) {
            this.setCurrentName(value);
          },
          value: function value(_value) {
            this.setCurrentName(_value);
          },
          currentName: function currentName(value) {
            var _this = this;
            if (this.$refs.nav) {
              this.$nextTick(function() {
                _this.$refs.nav.$nextTick(function(_) {
                  _this.$refs.nav.scrollToActiveTab();
                });
              });
            }
          }
        },
        methods: {
          calcPaneInstances: function calcPaneInstances() {
            var _this2 = this;
            var isForceUpdate = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
            if (this.$slots.default) {
              var paneSlots = this.$slots.default.filter(function(vnode) {
                return vnode.tag && vnode.componentOptions && vnode.componentOptions.Ctor.options.name === "ElTabPane";
              });
              var panes = paneSlots.map(function(_ref) {
                var componentInstance = _ref.componentInstance;
                return componentInstance;
              });
              var panesChanged = !(panes.length === this.panes.length && panes.every(function(pane, index2) {
                return pane === _this2.panes[index2];
              }));
              if (isForceUpdate || panesChanged) {
                this.panes = panes;
              }
            } else if (this.panes.length !== 0) {
              this.panes = [];
            }
          },
          handleTabClick: function handleTabClick(tab, tabName, event) {
            if (tab.disabled)
              return;
            this.setCurrentName(tabName);
            this.$emit("tab-click", tab, event);
          },
          handleTabRemove: function handleTabRemove(pane, ev) {
            if (pane.disabled)
              return;
            ev.stopPropagation();
            this.$emit("edit", pane.name, "remove");
            this.$emit("tab-remove", pane.name);
          },
          handleTabAdd: function handleTabAdd() {
            this.$emit("edit", null, "add");
            this.$emit("tab-add");
          },
          setCurrentName: function setCurrentName(value) {
            var _this3 = this;
            var changeCurrentName = function changeCurrentName2() {
              _this3.currentName = value;
              _this3.$emit("input", value);
            };
            if (this.currentName !== value && this.beforeLeave) {
              var before = this.beforeLeave(value, this.currentName);
              if (before && before.then) {
                before.then(function() {
                  changeCurrentName();
                  _this3.$refs.nav && _this3.$refs.nav.removeFocus();
                }, function() {
                });
              } else if (before !== false) {
                changeCurrentName();
              }
            } else {
              changeCurrentName();
            }
          }
        },
        render: function render6(h2) {
          var _ref2;
          var type2 = this.type, handleTabClick = this.handleTabClick, handleTabRemove = this.handleTabRemove, handleTabAdd = this.handleTabAdd, currentName = this.currentName, panes = this.panes, editable = this.editable, addable = this.addable, tabPosition = this.tabPosition, stretch = this.stretch;
          var newButton = editable || addable ? h2(
            "span",
            {
              "class": "el-tabs__new-tab",
              on: {
                "click": handleTabAdd,
                "keydown": function keydown(ev) {
                  if (ev.keyCode === 13) {
                    handleTabAdd();
                  }
                }
              },
              attrs: {
                tabindex: "0"
              }
            },
            [h2("i", { "class": "el-icon-plus" })]
          ) : null;
          var navData = {
            props: {
              currentName,
              onTabClick: handleTabClick,
              onTabRemove: handleTabRemove,
              editable,
              type: type2,
              panes,
              stretch
            },
            ref: "nav"
          };
          var header2 = h2(
            "div",
            { "class": ["el-tabs__header", "is-" + tabPosition] },
            [newButton, h2("tab-nav", navData)]
          );
          var panels = h2(
            "div",
            { "class": "el-tabs__content" },
            [this.$slots.default]
          );
          return h2(
            "div",
            { "class": (_ref2 = {
              "el-tabs": true,
              "el-tabs--card": type2 === "card"
            }, _ref2["el-tabs--" + tabPosition] = true, _ref2["el-tabs--border-card"] = type2 === "border-card", _ref2) },
            [tabPosition !== "bottom" ? [header2, panels] : [panels, header2]]
          );
        },
        created: function created() {
          if (!this.currentName) {
            this.setCurrentName("0");
          }
          this.$on("tab-nav-update", this.calcPaneInstances.bind(null, true));
        },
        mounted: function mounted2() {
          this.calcPaneInstances();
        },
        updated: function updated() {
          this.calcPaneInstances();
        }
      };
      var src_tabsvue_type_script_lang_js_ = tabsvue_type_script_lang_js_;
      var tabs_render, tabs_staticRenderFns;
      var tabs_component = normalizeComponent2(
        src_tabsvue_type_script_lang_js_,
        tabs_render,
        tabs_staticRenderFns,
        false,
        null,
        null,
        null
      );
      tabs_component.options.__file = "packages/tabs/src/tabs.vue";
      var tabs = tabs_component.exports;
      tabs.install = function(Vue2) {
        Vue2.component(tabs.name, tabs);
      };
      var packages_tabs = tabs;
      var tab_panevue_type_template_id_9145a070_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return !_vm.lazy || _vm.loaded || _vm.active ? _c(
          "div",
          {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.active,
                expression: "active"
              }
            ],
            staticClass: "el-tab-pane",
            attrs: {
              role: "tabpanel",
              "aria-hidden": !_vm.active,
              id: "pane-" + _vm.paneName,
              "aria-labelledby": "tab-" + _vm.paneName
            }
          },
          [_vm._t("default")],
          2
        ) : _vm._e();
      };
      var tab_panevue_type_template_id_9145a070_staticRenderFns = [];
      tab_panevue_type_template_id_9145a070_render._withStripped = true;
      var tab_panevue_type_script_lang_js_ = {
        name: "ElTabPane",
        componentName: "ElTabPane",
        props: {
          label: String,
          labelContent: Function,
          name: String,
          closable: Boolean,
          disabled: Boolean,
          lazy: Boolean
        },
        data: function data() {
          return {
            index: null,
            loaded: false
          };
        },
        computed: {
          isClosable: function isClosable() {
            return this.closable || this.$parent.closable;
          },
          active: function active() {
            var active2 = this.$parent.currentName === (this.name || this.index);
            if (active2) {
              this.loaded = true;
            }
            return active2;
          },
          paneName: function paneName() {
            return this.name || this.index;
          }
        },
        updated: function updated() {
          this.$parent.$emit("tab-nav-update");
        }
      };
      var src_tab_panevue_type_script_lang_js_ = tab_panevue_type_script_lang_js_;
      var tab_pane_component = normalizeComponent2(
        src_tab_panevue_type_script_lang_js_,
        tab_panevue_type_template_id_9145a070_render,
        tab_panevue_type_template_id_9145a070_staticRenderFns,
        false,
        null,
        null,
        null
      );
      tab_pane_component.options.__file = "packages/tabs/src/tab-pane.vue";
      var tab_pane = tab_pane_component.exports;
      tab_pane.install = function(Vue2) {
        Vue2.component(tab_pane.name, tab_pane);
      };
      var packages_tab_pane = tab_pane;
      var tagvue_type_script_lang_js_ = {
        name: "ElTag",
        props: {
          text: String,
          closable: Boolean,
          type: String,
          hit: Boolean,
          disableTransitions: Boolean,
          color: String,
          size: String,
          effect: {
            type: String,
            default: "light",
            validator: function validator(val) {
              return ["dark", "light", "plain"].indexOf(val) !== -1;
            }
          }
        },
        methods: {
          handleClose: function handleClose(event) {
            event.stopPropagation();
            this.$emit("close", event);
          },
          handleClick: function handleClick(event) {
            this.$emit("click", event);
          }
        },
        computed: {
          tagSize: function tagSize() {
            return this.size || (this.$ELEMENT || {}).size;
          }
        },
        render: function render6(h2) {
          var type2 = this.type, tagSize = this.tagSize, hit = this.hit, effect = this.effect;
          var classes = ["el-tag", type2 ? "el-tag--" + type2 : "", tagSize ? "el-tag--" + tagSize : "", effect ? "el-tag--" + effect : "", hit && "is-hit"];
          var tagEl = h2(
            "span",
            {
              "class": classes,
              style: { backgroundColor: this.color },
              on: {
                "click": this.handleClick
              }
            },
            [this.$slots.default, this.closable && h2("i", {
              "class": "el-tag__close el-icon-close",
              on: {
                "click": this.handleClose
              }
            })]
          );
          return this.disableTransitions ? tagEl : h2(
            "transition",
            {
              attrs: { name: "el-zoom-in-center" }
            },
            [tagEl]
          );
        }
      };
      var src_tagvue_type_script_lang_js_ = tagvue_type_script_lang_js_;
      var tag_render, tag_staticRenderFns;
      var tag_component = normalizeComponent2(
        src_tagvue_type_script_lang_js_,
        tag_render,
        tag_staticRenderFns,
        false,
        null,
        null,
        null
      );
      tag_component.options.__file = "packages/tag/src/tag.vue";
      var src_tag = tag_component.exports;
      src_tag.install = function(Vue2) {
        Vue2.component(src_tag.name, src_tag);
      };
      var packages_tag = src_tag;
      var treevue_type_template_id_547575a6_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-tree",
            class: {
              "el-tree--highlight-current": _vm.highlightCurrent,
              "is-dragging": !!_vm.dragState.draggingNode,
              "is-drop-not-allow": !_vm.dragState.allowDrop,
              "is-drop-inner": _vm.dragState.dropType === "inner"
            },
            attrs: { role: "tree" }
          },
          [
            _vm._l(_vm.root.childNodes, function(child) {
              return _c("el-tree-node", {
                key: _vm.getNodeKey(child),
                attrs: {
                  node: child,
                  props: _vm.props,
                  "render-after-expand": _vm.renderAfterExpand,
                  "show-checkbox": _vm.showCheckbox,
                  "render-content": _vm.renderContent
                },
                on: { "node-expand": _vm.handleNodeExpand }
              });
            }),
            _vm.isEmpty ? _c("div", { staticClass: "el-tree__empty-block" }, [
              _c("span", { staticClass: "el-tree__empty-text" }, [
                _vm._v(_vm._s(_vm.emptyText))
              ])
            ]) : _vm._e(),
            _c("div", {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.dragState.showDropIndicator,
                  expression: "dragState.showDropIndicator"
                }
              ],
              ref: "dropIndicator",
              staticClass: "el-tree__drop-indicator"
            })
          ],
          2
        );
      };
      var treevue_type_template_id_547575a6_staticRenderFns = [];
      treevue_type_template_id_547575a6_render._withStripped = true;
      var NODE_KEY = "$treeNodeId";
      var markNodeData = function markNodeData2(node, data) {
        if (!data || data[NODE_KEY])
          return;
        Object.defineProperty(data, NODE_KEY, {
          value: node.id,
          enumerable: false,
          configurable: false,
          writable: false
        });
      };
      var util_getNodeKey = function getNodeKey(key, data) {
        if (!key)
          return data[NODE_KEY];
        return data[key];
      };
      var findNearestComponent = function findNearestComponent2(element, componentName) {
        var target2 = element;
        while (target2 && target2.tagName !== "BODY") {
          if (target2.__vue__ && target2.__vue__.$options.name === componentName) {
            return target2.__vue__;
          }
          target2 = target2.parentNode;
        }
        return null;
      };
      var _createClass2 = function() {
        function defineProperties3(target2, props2) {
          for (var i = 0; i < props2.length; i++) {
            var descriptor2 = props2[i];
            descriptor2.enumerable = descriptor2.enumerable || false;
            descriptor2.configurable = true;
            if ("value" in descriptor2)
              descriptor2.writable = true;
            Object.defineProperty(target2, descriptor2.key, descriptor2);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties3(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties3(Constructor, staticProps);
          return Constructor;
        };
      }();
      function node_classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var getChildState = function getChildState2(node) {
        var all = true;
        var none = true;
        var allWithoutDisable = true;
        for (var i = 0, j = node.length; i < j; i++) {
          var n = node[i];
          if (n.checked !== true || n.indeterminate) {
            all = false;
            if (!n.disabled) {
              allWithoutDisable = false;
            }
          }
          if (n.checked !== false || n.indeterminate) {
            none = false;
          }
        }
        return { all, none, allWithoutDisable, half: !all && !none };
      };
      var reInitChecked = function reInitChecked2(node) {
        if (node.childNodes.length === 0 || node.loading)
          return;
        var _getChildState = getChildState(node.childNodes), all = _getChildState.all, none = _getChildState.none, half = _getChildState.half;
        if (all) {
          node.checked = true;
          node.indeterminate = false;
        } else if (half) {
          node.checked = false;
          node.indeterminate = true;
        } else if (none) {
          node.checked = false;
          node.indeterminate = false;
        }
        var parent = node.parent;
        if (!parent || parent.level === 0)
          return;
        if (!node.store.checkStrictly) {
          reInitChecked2(parent);
        }
      };
      var getPropertyFromData = function getPropertyFromData2(node, prop) {
        var props2 = node.store.props;
        var data = node.data || {};
        var config2 = props2[prop];
        if (typeof config2 === "function") {
          return config2(data, node);
        } else if (typeof config2 === "string") {
          return data[config2];
        } else if (typeof config2 === "undefined") {
          var dataProp = data[prop];
          return dataProp === void 0 ? "" : dataProp;
        }
      };
      var nodeIdSeed = 0;
      var node_Node = function() {
        function Node2(options) {
          node_classCallCheck(this, Node2);
          this.id = nodeIdSeed++;
          this.text = null;
          this.checked = false;
          this.indeterminate = false;
          this.data = null;
          this.expanded = false;
          this.parent = null;
          this.visible = true;
          this.isCurrent = false;
          for (var name in options) {
            if (options.hasOwnProperty(name)) {
              this[name] = options[name];
            }
          }
          this.level = 0;
          this.loaded = false;
          this.childNodes = [];
          this.loading = false;
          if (this.parent) {
            this.level = this.parent.level + 1;
          }
          var store2 = this.store;
          if (!store2) {
            throw new Error("[Node]store is required!");
          }
          store2.registerNode(this);
          var props2 = store2.props;
          if (props2 && typeof props2.isLeaf !== "undefined") {
            var isLeaf = getPropertyFromData(this, "isLeaf");
            if (typeof isLeaf === "boolean") {
              this.isLeafByUser = isLeaf;
            }
          }
          if (store2.lazy !== true && this.data) {
            this.setData(this.data);
            if (store2.defaultExpandAll) {
              this.expanded = true;
            }
          } else if (this.level > 0 && store2.lazy && store2.defaultExpandAll) {
            this.expand();
          }
          if (!Array.isArray(this.data)) {
            markNodeData(this, this.data);
          }
          if (!this.data)
            return;
          var defaultExpandedKeys = store2.defaultExpandedKeys;
          var key = store2.key;
          if (key && defaultExpandedKeys && defaultExpandedKeys.indexOf(this.key) !== -1) {
            this.expand(null, store2.autoExpandParent);
          }
          if (key && store2.currentNodeKey !== void 0 && this.key === store2.currentNodeKey) {
            store2.currentNode = this;
            store2.currentNode.isCurrent = true;
          }
          if (store2.lazy) {
            store2._initDefaultCheckedNode(this);
          }
          this.updateLeafState();
        }
        Node2.prototype.setData = function setData(data) {
          if (!Array.isArray(data)) {
            markNodeData(this, data);
          }
          this.data = data;
          this.childNodes = [];
          var children = void 0;
          if (this.level === 0 && this.data instanceof Array) {
            children = this.data;
          } else {
            children = getPropertyFromData(this, "children") || [];
          }
          for (var i = 0, j = children.length; i < j; i++) {
            this.insertChild({ data: children[i] });
          }
        };
        Node2.prototype.contains = function contains(target2) {
          var deep = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
          var walk = function walk2(parent) {
            var children = parent.childNodes || [];
            var result = false;
            for (var i = 0, j = children.length; i < j; i++) {
              var child = children[i];
              if (child === target2 || deep && walk2(child)) {
                result = true;
                break;
              }
            }
            return result;
          };
          return walk(this);
        };
        Node2.prototype.remove = function remove2() {
          var parent = this.parent;
          if (parent) {
            parent.removeChild(this);
          }
        };
        Node2.prototype.insertChild = function insertChild(child, index2, batch) {
          if (!child)
            throw new Error("insertChild error: child is required.");
          if (!(child instanceof Node2)) {
            if (!batch) {
              var children = this.getChildren(true) || [];
              if (children.indexOf(child.data) === -1) {
                if (typeof index2 === "undefined" || index2 < 0) {
                  children.push(child.data);
                } else {
                  children.splice(index2, 0, child.data);
                }
              }
            }
            merge_default()(child, {
              parent: this,
              store: this.store
            });
            child = new Node2(child);
          }
          child.level = this.level + 1;
          if (typeof index2 === "undefined" || index2 < 0) {
            this.childNodes.push(child);
          } else {
            this.childNodes.splice(index2, 0, child);
          }
          this.updateLeafState();
        };
        Node2.prototype.insertBefore = function insertBefore2(child, ref2) {
          var index2 = void 0;
          if (ref2) {
            index2 = this.childNodes.indexOf(ref2);
          }
          this.insertChild(child, index2);
        };
        Node2.prototype.insertAfter = function insertAfter(child, ref2) {
          var index2 = void 0;
          if (ref2) {
            index2 = this.childNodes.indexOf(ref2);
            if (index2 !== -1)
              index2 += 1;
          }
          this.insertChild(child, index2);
        };
        Node2.prototype.removeChild = function removeChild2(child) {
          var children = this.getChildren() || [];
          var dataIndex = children.indexOf(child.data);
          if (dataIndex > -1) {
            children.splice(dataIndex, 1);
          }
          var index2 = this.childNodes.indexOf(child);
          if (index2 > -1) {
            this.store && this.store.deregisterNode(child);
            child.parent = null;
            this.childNodes.splice(index2, 1);
          }
          this.updateLeafState();
        };
        Node2.prototype.removeChildByData = function removeChildByData(data) {
          var targetNode = null;
          for (var i = 0; i < this.childNodes.length; i++) {
            if (this.childNodes[i].data === data) {
              targetNode = this.childNodes[i];
              break;
            }
          }
          if (targetNode) {
            this.removeChild(targetNode);
          }
        };
        Node2.prototype.expand = function expand2(callback, expandParent) {
          var _this = this;
          var done = function done2() {
            if (expandParent) {
              var parent = _this.parent;
              while (parent.level > 0) {
                parent.expanded = true;
                parent = parent.parent;
              }
            }
            _this.expanded = true;
            if (callback)
              callback();
          };
          if (this.shouldLoadData()) {
            this.loadData(function(data) {
              if (data instanceof Array) {
                if (_this.checked) {
                  _this.setChecked(true, true);
                } else if (!_this.store.checkStrictly) {
                  reInitChecked(_this);
                }
                done();
              }
            });
          } else {
            done();
          }
        };
        Node2.prototype.doCreateChildren = function doCreateChildren(array3) {
          var _this2 = this;
          var defaultProps = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          array3.forEach(function(item) {
            _this2.insertChild(merge_default()({ data: item }, defaultProps), void 0, true);
          });
        };
        Node2.prototype.collapse = function collapse2() {
          this.expanded = false;
        };
        Node2.prototype.shouldLoadData = function shouldLoadData() {
          return this.store.lazy === true && this.store.load && !this.loaded;
        };
        Node2.prototype.updateLeafState = function updateLeafState() {
          if (this.store.lazy === true && this.loaded !== true && typeof this.isLeafByUser !== "undefined") {
            this.isLeaf = this.isLeafByUser;
            return;
          }
          var childNodes = this.childNodes;
          if (!this.store.lazy || this.store.lazy === true && this.loaded === true) {
            this.isLeaf = !childNodes || childNodes.length === 0;
            return;
          }
          this.isLeaf = false;
        };
        Node2.prototype.setChecked = function setChecked(value, deep, recursion, passValue) {
          var _this3 = this;
          this.indeterminate = value === "half";
          this.checked = value === true;
          if (this.store.checkStrictly)
            return;
          if (!(this.shouldLoadData() && !this.store.checkDescendants)) {
            var _getChildState2 = getChildState(this.childNodes), all = _getChildState2.all, allWithoutDisable = _getChildState2.allWithoutDisable;
            if (!this.isLeaf && !all && allWithoutDisable) {
              this.checked = false;
              value = false;
            }
            var handleDescendants = function handleDescendants2() {
              if (deep) {
                var childNodes = _this3.childNodes;
                for (var i = 0, j = childNodes.length; i < j; i++) {
                  var child = childNodes[i];
                  passValue = passValue || value !== false;
                  var isCheck = child.disabled ? child.checked : passValue;
                  child.setChecked(isCheck, deep, true, passValue);
                }
                var _getChildState3 = getChildState(childNodes), half = _getChildState3.half, _all = _getChildState3.all;
                if (!_all) {
                  _this3.checked = _all;
                  _this3.indeterminate = half;
                }
              }
            };
            if (this.shouldLoadData()) {
              this.loadData(function() {
                handleDescendants();
                reInitChecked(_this3);
              }, {
                checked: value !== false
              });
              return;
            } else {
              handleDescendants();
            }
          }
          var parent = this.parent;
          if (!parent || parent.level === 0)
            return;
          if (!recursion) {
            reInitChecked(parent);
          }
        };
        Node2.prototype.getChildren = function getChildren() {
          var forceInit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
          if (this.level === 0)
            return this.data;
          var data = this.data;
          if (!data)
            return null;
          var props2 = this.store.props;
          var children = "children";
          if (props2) {
            children = props2.children || "children";
          }
          if (data[children] === void 0) {
            data[children] = null;
          }
          if (forceInit && !data[children]) {
            data[children] = [];
          }
          return data[children];
        };
        Node2.prototype.updateChildren = function updateChildren() {
          var _this4 = this;
          var newData = this.getChildren() || [];
          var oldData = this.childNodes.map(function(node) {
            return node.data;
          });
          var newDataMap = {};
          var newNodes = [];
          newData.forEach(function(item, index2) {
            var key = item[NODE_KEY];
            var isNodeExists = !!key && Object(util_["arrayFindIndex"])(oldData, function(data) {
              return data[NODE_KEY] === key;
            }) >= 0;
            if (isNodeExists) {
              newDataMap[key] = { index: index2, data: item };
            } else {
              newNodes.push({ index: index2, data: item });
            }
          });
          if (!this.store.lazy) {
            oldData.forEach(function(item) {
              if (!newDataMap[item[NODE_KEY]])
                _this4.removeChildByData(item);
            });
          }
          newNodes.forEach(function(_ref) {
            var index2 = _ref.index, data = _ref.data;
            _this4.insertChild({ data }, index2);
          });
          this.updateLeafState();
        };
        Node2.prototype.loadData = function loadData(callback) {
          var _this5 = this;
          var defaultProps = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          if (this.store.lazy === true && this.store.load && !this.loaded && (!this.loading || Object.keys(defaultProps).length)) {
            this.loading = true;
            var resolve = function resolve2(children) {
              _this5.childNodes = [];
              _this5.doCreateChildren(children, defaultProps);
              _this5.loaded = true;
              _this5.loading = false;
              _this5.updateLeafState();
              if (callback) {
                callback.call(_this5, children);
              }
            };
            this.store.load(this, resolve);
          } else {
            if (callback) {
              callback.call(this);
            }
          }
        };
        _createClass2(Node2, [{
          key: "label",
          get: function get() {
            return getPropertyFromData(this, "label");
          }
        }, {
          key: "key",
          get: function get() {
            var nodeKey = this.store.key;
            if (this.data)
              return this.data[nodeKey];
            return null;
          }
        }, {
          key: "disabled",
          get: function get() {
            return getPropertyFromData(this, "disabled");
          }
        }, {
          key: "nextSibling",
          get: function get() {
            var parent = this.parent;
            if (parent) {
              var index2 = parent.childNodes.indexOf(this);
              if (index2 > -1) {
                return parent.childNodes[index2 + 1];
              }
            }
            return null;
          }
        }, {
          key: "previousSibling",
          get: function get() {
            var parent = this.parent;
            if (parent) {
              var index2 = parent.childNodes.indexOf(this);
              if (index2 > -1) {
                return index2 > 0 ? parent.childNodes[index2 - 1] : null;
              }
            }
            return null;
          }
        }]);
        return Node2;
      }();
      var model_node = node_Node;
      var tree_store_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      function tree_store_classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var tree_store_TreeStore = function() {
        function TreeStore(options) {
          var _this = this;
          tree_store_classCallCheck(this, TreeStore);
          this.currentNode = null;
          this.currentNodeKey = null;
          for (var option2 in options) {
            if (options.hasOwnProperty(option2)) {
              this[option2] = options[option2];
            }
          }
          this.nodesMap = {};
          this.root = new model_node({
            data: this.data,
            store: this
          });
          if (this.lazy && this.load) {
            var loadFn = this.load;
            loadFn(this.root, function(data) {
              _this.root.doCreateChildren(data);
              _this._initDefaultCheckedNodes();
            });
          } else {
            this._initDefaultCheckedNodes();
          }
        }
        TreeStore.prototype.filter = function filter(value) {
          var filterNodeMethod = this.filterNodeMethod;
          var lazy = this.lazy;
          var traverse2 = function traverse3(node) {
            var childNodes = node.root ? node.root.childNodes : node.childNodes;
            childNodes.forEach(function(child) {
              child.visible = filterNodeMethod.call(child, value, child.data, child);
              traverse3(child);
            });
            if (!node.visible && childNodes.length) {
              var allHidden = true;
              allHidden = !childNodes.some(function(child) {
                return child.visible;
              });
              if (node.root) {
                node.root.visible = allHidden === false;
              } else {
                node.visible = allHidden === false;
              }
            }
            if (!value)
              return;
            if (node.visible && !node.isLeaf && !lazy)
              node.expand();
          };
          traverse2(this);
        };
        TreeStore.prototype.setData = function setData(newVal) {
          var instanceChanged = newVal !== this.root.data;
          if (instanceChanged) {
            this.root.setData(newVal);
            this._initDefaultCheckedNodes();
          } else {
            this.root.updateChildren();
          }
        };
        TreeStore.prototype.getNode = function getNode(data) {
          if (data instanceof model_node)
            return data;
          var key = (typeof data === "undefined" ? "undefined" : tree_store_typeof(data)) !== "object" ? data : util_getNodeKey(this.key, data);
          return this.nodesMap[key] || null;
        };
        TreeStore.prototype.insertBefore = function insertBefore2(data, refData) {
          var refNode = this.getNode(refData);
          refNode.parent.insertBefore({ data }, refNode);
        };
        TreeStore.prototype.insertAfter = function insertAfter(data, refData) {
          var refNode = this.getNode(refData);
          refNode.parent.insertAfter({ data }, refNode);
        };
        TreeStore.prototype.remove = function remove2(data) {
          var node = this.getNode(data);
          if (node && node.parent) {
            if (node === this.currentNode) {
              this.currentNode = null;
            }
            node.parent.removeChild(node);
          }
        };
        TreeStore.prototype.append = function append(data, parentData) {
          var parentNode2 = parentData ? this.getNode(parentData) : this.root;
          if (parentNode2) {
            parentNode2.insertChild({ data });
          }
        };
        TreeStore.prototype._initDefaultCheckedNodes = function _initDefaultCheckedNodes() {
          var _this2 = this;
          var defaultCheckedKeys = this.defaultCheckedKeys || [];
          var nodesMap = this.nodesMap;
          defaultCheckedKeys.forEach(function(checkedKey) {
            var node = nodesMap[checkedKey];
            if (node) {
              node.setChecked(true, !_this2.checkStrictly);
            }
          });
        };
        TreeStore.prototype._initDefaultCheckedNode = function _initDefaultCheckedNode(node) {
          var defaultCheckedKeys = this.defaultCheckedKeys || [];
          if (defaultCheckedKeys.indexOf(node.key) !== -1) {
            node.setChecked(true, !this.checkStrictly);
          }
        };
        TreeStore.prototype.setDefaultCheckedKey = function setDefaultCheckedKey(newVal) {
          if (newVal !== this.defaultCheckedKeys) {
            this.defaultCheckedKeys = newVal;
            this._initDefaultCheckedNodes();
          }
        };
        TreeStore.prototype.registerNode = function registerNode(node) {
          var key = this.key;
          if (!key || !node || !node.data)
            return;
          var nodeKey = node.key;
          if (nodeKey !== void 0)
            this.nodesMap[node.key] = node;
        };
        TreeStore.prototype.deregisterNode = function deregisterNode(node) {
          var _this3 = this;
          var key = this.key;
          if (!key || !node || !node.data)
            return;
          node.childNodes.forEach(function(child) {
            _this3.deregisterNode(child);
          });
          delete this.nodesMap[node.key];
        };
        TreeStore.prototype.getCheckedNodes = function getCheckedNodes() {
          var leafOnly = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
          var includeHalfChecked = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          var checkedNodes = [];
          var traverse2 = function traverse3(node) {
            var childNodes = node.root ? node.root.childNodes : node.childNodes;
            childNodes.forEach(function(child) {
              if ((child.checked || includeHalfChecked && child.indeterminate) && (!leafOnly || leafOnly && child.isLeaf)) {
                checkedNodes.push(child.data);
              }
              traverse3(child);
            });
          };
          traverse2(this);
          return checkedNodes;
        };
        TreeStore.prototype.getCheckedKeys = function getCheckedKeys() {
          var _this4 = this;
          var leafOnly = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
          return this.getCheckedNodes(leafOnly).map(function(data) {
            return (data || {})[_this4.key];
          });
        };
        TreeStore.prototype.getHalfCheckedNodes = function getHalfCheckedNodes() {
          var nodes = [];
          var traverse2 = function traverse3(node) {
            var childNodes = node.root ? node.root.childNodes : node.childNodes;
            childNodes.forEach(function(child) {
              if (child.indeterminate) {
                nodes.push(child.data);
              }
              traverse3(child);
            });
          };
          traverse2(this);
          return nodes;
        };
        TreeStore.prototype.getHalfCheckedKeys = function getHalfCheckedKeys() {
          var _this5 = this;
          return this.getHalfCheckedNodes().map(function(data) {
            return (data || {})[_this5.key];
          });
        };
        TreeStore.prototype._getAllNodes = function _getAllNodes() {
          var allNodes = [];
          var nodesMap = this.nodesMap;
          for (var nodeKey in nodesMap) {
            if (nodesMap.hasOwnProperty(nodeKey)) {
              allNodes.push(nodesMap[nodeKey]);
            }
          }
          return allNodes;
        };
        TreeStore.prototype.updateChildren = function updateChildren(key, data) {
          var node = this.nodesMap[key];
          if (!node)
            return;
          var childNodes = node.childNodes;
          for (var i = childNodes.length - 1; i >= 0; i--) {
            var child = childNodes[i];
            this.remove(child.data);
          }
          for (var _i = 0, j = data.length; _i < j; _i++) {
            var _child = data[_i];
            this.append(_child, node.data);
          }
        };
        TreeStore.prototype._setCheckedKeys = function _setCheckedKeys(key) {
          var leafOnly = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          var checkedKeys = arguments[2];
          var allNodes = this._getAllNodes().sort(function(a, b) {
            return b.level - a.level;
          });
          var cache = /* @__PURE__ */ Object.create(null);
          var keys2 = Object.keys(checkedKeys);
          allNodes.forEach(function(node2) {
            return node2.setChecked(false, false);
          });
          for (var i = 0, j = allNodes.length; i < j; i++) {
            var node = allNodes[i];
            var nodeKey = node.data[key].toString();
            var checked = keys2.indexOf(nodeKey) > -1;
            if (!checked) {
              if (node.checked && !cache[nodeKey]) {
                node.setChecked(false, false);
              }
              continue;
            }
            var parent = node.parent;
            while (parent && parent.level > 0) {
              cache[parent.data[key]] = true;
              parent = parent.parent;
            }
            if (node.isLeaf || this.checkStrictly) {
              node.setChecked(true, false);
              continue;
            }
            node.setChecked(true, true);
            if (leafOnly) {
              (function() {
                node.setChecked(false, false);
                var traverse2 = function traverse3(node2) {
                  var childNodes = node2.childNodes;
                  childNodes.forEach(function(child) {
                    if (!child.isLeaf) {
                      child.setChecked(false, false);
                    }
                    traverse3(child);
                  });
                };
                traverse2(node);
              })();
            }
          }
        };
        TreeStore.prototype.setCheckedNodes = function setCheckedNodes(array3) {
          var leafOnly = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          var key = this.key;
          var checkedKeys = {};
          array3.forEach(function(item) {
            checkedKeys[(item || {})[key]] = true;
          });
          this._setCheckedKeys(key, leafOnly, checkedKeys);
        };
        TreeStore.prototype.setCheckedKeys = function setCheckedKeys(keys2) {
          var leafOnly = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
          this.defaultCheckedKeys = keys2;
          var key = this.key;
          var checkedKeys = {};
          keys2.forEach(function(key2) {
            checkedKeys[key2] = true;
          });
          this._setCheckedKeys(key, leafOnly, checkedKeys);
        };
        TreeStore.prototype.setDefaultExpandedKeys = function setDefaultExpandedKeys(keys2) {
          var _this6 = this;
          keys2 = keys2 || [];
          this.defaultExpandedKeys = keys2;
          keys2.forEach(function(key) {
            var node = _this6.getNode(key);
            if (node)
              node.expand(null, _this6.autoExpandParent);
          });
        };
        TreeStore.prototype.setChecked = function setChecked(data, checked, deep) {
          var node = this.getNode(data);
          if (node) {
            node.setChecked(!!checked, deep);
          }
        };
        TreeStore.prototype.getCurrentNode = function getCurrentNode() {
          return this.currentNode;
        };
        TreeStore.prototype.setCurrentNode = function setCurrentNode(currentNode) {
          var prevCurrentNode = this.currentNode;
          if (prevCurrentNode) {
            prevCurrentNode.isCurrent = false;
          }
          this.currentNode = currentNode;
          this.currentNode.isCurrent = true;
        };
        TreeStore.prototype.setUserCurrentNode = function setUserCurrentNode(node) {
          var key = node[this.key];
          var currNode = this.nodesMap[key];
          this.setCurrentNode(currNode);
        };
        TreeStore.prototype.setCurrentNodeKey = function setCurrentNodeKey(key) {
          if (key === null || key === void 0) {
            this.currentNode && (this.currentNode.isCurrent = false);
            this.currentNode = null;
            return;
          }
          var node = this.getNode(key);
          if (node) {
            this.setCurrentNode(node);
          }
        };
        return TreeStore;
      }();
      var tree_store = tree_store_TreeStore;
      var tree_nodevue_type_template_id_3ba3ef0e_render = function() {
        var this$1$1 = this;
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.node.visible,
                expression: "node.visible"
              }
            ],
            ref: "node",
            staticClass: "el-tree-node",
            class: {
              "is-expanded": _vm.expanded,
              "is-current": _vm.node.isCurrent,
              "is-hidden": !_vm.node.visible,
              "is-focusable": !_vm.node.disabled,
              "is-checked": !_vm.node.disabled && _vm.node.checked
            },
            attrs: {
              role: "treeitem",
              tabindex: "-1",
              "aria-expanded": _vm.expanded,
              "aria-disabled": _vm.node.disabled,
              "aria-checked": _vm.node.checked,
              draggable: _vm.tree.draggable
            },
            on: {
              click: function($event) {
                $event.stopPropagation();
                return _vm.handleClick($event);
              },
              contextmenu: function($event) {
                return this$1$1.handleContextMenu($event);
              },
              dragstart: function($event) {
                $event.stopPropagation();
                return _vm.handleDragStart($event);
              },
              dragover: function($event) {
                $event.stopPropagation();
                return _vm.handleDragOver($event);
              },
              dragend: function($event) {
                $event.stopPropagation();
                return _vm.handleDragEnd($event);
              },
              drop: function($event) {
                $event.stopPropagation();
                return _vm.handleDrop($event);
              }
            }
          },
          [
            _c(
              "div",
              {
                staticClass: "el-tree-node__content",
                style: {
                  "padding-left": (_vm.node.level - 1) * _vm.tree.indent + "px"
                }
              },
              [
                _c("span", {
                  class: [
                    {
                      "is-leaf": _vm.node.isLeaf,
                      expanded: !_vm.node.isLeaf && _vm.expanded
                    },
                    "el-tree-node__expand-icon",
                    _vm.tree.iconClass ? _vm.tree.iconClass : "el-icon-caret-right"
                  ],
                  on: {
                    click: function($event) {
                      $event.stopPropagation();
                      return _vm.handleExpandIconClick($event);
                    }
                  }
                }),
                _vm.showCheckbox ? _c("el-checkbox", {
                  attrs: {
                    indeterminate: _vm.node.indeterminate,
                    disabled: !!_vm.node.disabled
                  },
                  on: { change: _vm.handleCheckChange },
                  nativeOn: {
                    click: function($event) {
                      $event.stopPropagation();
                    }
                  },
                  model: {
                    value: _vm.node.checked,
                    callback: function($$v) {
                      _vm.$set(_vm.node, "checked", $$v);
                    },
                    expression: "node.checked"
                  }
                }) : _vm._e(),
                _vm.node.loading ? _c("span", {
                  staticClass: "el-tree-node__loading-icon el-icon-loading"
                }) : _vm._e(),
                _c("node-content", { attrs: { node: _vm.node } })
              ],
              1
            ),
            _c("el-collapse-transition", [
              !_vm.renderAfterExpand || _vm.childNodeRendered ? _c(
                "div",
                {
                  directives: [
                    {
                      name: "show",
                      rawName: "v-show",
                      value: _vm.expanded,
                      expression: "expanded"
                    }
                  ],
                  staticClass: "el-tree-node__children",
                  attrs: { role: "group", "aria-expanded": _vm.expanded }
                },
                _vm._l(_vm.node.childNodes, function(child) {
                  return _c("el-tree-node", {
                    key: _vm.getNodeKey(child),
                    attrs: {
                      "render-content": _vm.renderContent,
                      "render-after-expand": _vm.renderAfterExpand,
                      "show-checkbox": _vm.showCheckbox,
                      node: child
                    },
                    on: { "node-expand": _vm.handleChildNodeExpand }
                  });
                }),
                1
              ) : _vm._e()
            ])
          ],
          1
        );
      };
      var tree_nodevue_type_template_id_3ba3ef0e_staticRenderFns = [];
      tree_nodevue_type_template_id_3ba3ef0e_render._withStripped = true;
      var tree_nodevue_type_script_lang_js_ = {
        name: "ElTreeNode",
        componentName: "ElTreeNode",
        mixins: [emitter_default.a],
        props: {
          node: {
            default: function _default2() {
              return {};
            }
          },
          props: {},
          renderContent: Function,
          renderAfterExpand: {
            type: Boolean,
            default: true
          },
          showCheckbox: {
            type: Boolean,
            default: false
          }
        },
        components: {
          ElCollapseTransition: collapse_transition_default.a,
          ElCheckbox: checkbox_default.a,
          NodeContent: {
            props: {
              node: {
                required: true
              }
            },
            render: function render6(h2) {
              var parent = this.$parent;
              var tree2 = parent.tree;
              var node = this.node;
              var data = node.data, store2 = node.store;
              return parent.renderContent ? parent.renderContent.call(parent._renderProxy, h2, { _self: tree2.$vnode.context, node, data, store: store2 }) : tree2.$scopedSlots.default ? tree2.$scopedSlots.default({ node, data }) : h2(
                "span",
                { "class": "el-tree-node__label" },
                [node.label]
              );
            }
          }
        },
        data: function data() {
          return {
            tree: null,
            expanded: false,
            childNodeRendered: false,
            oldChecked: null,
            oldIndeterminate: null
          };
        },
        watch: {
          "node.indeterminate": function nodeIndeterminate(val) {
            this.handleSelectChange(this.node.checked, val);
          },
          "node.checked": function nodeChecked(val) {
            this.handleSelectChange(val, this.node.indeterminate);
          },
          "node.expanded": function nodeExpanded(val) {
            var _this = this;
            this.$nextTick(function() {
              return _this.expanded = val;
            });
            if (val) {
              this.childNodeRendered = true;
            }
          }
        },
        methods: {
          getNodeKey: function getNodeKey(node) {
            return util_getNodeKey(this.tree.nodeKey, node.data);
          },
          handleSelectChange: function handleSelectChange(checked, indeterminate) {
            if (this.oldChecked !== checked && this.oldIndeterminate !== indeterminate) {
              this.tree.$emit("check-change", this.node.data, checked, indeterminate);
            }
            this.oldChecked = checked;
            this.indeterminate = indeterminate;
          },
          handleClick: function handleClick() {
            var store2 = this.tree.store;
            store2.setCurrentNode(this.node);
            this.tree.$emit("current-change", store2.currentNode ? store2.currentNode.data : null, store2.currentNode);
            this.tree.currentNode = this;
            if (this.tree.expandOnClickNode) {
              this.handleExpandIconClick();
            }
            if (this.tree.checkOnClickNode && !this.node.disabled) {
              this.handleCheckChange(null, {
                target: { checked: !this.node.checked }
              });
            }
            this.tree.$emit("node-click", this.node.data, this.node, this);
          },
          handleContextMenu: function handleContextMenu(event) {
            if (this.tree._events["node-contextmenu"] && this.tree._events["node-contextmenu"].length > 0) {
              event.stopPropagation();
              event.preventDefault();
            }
            this.tree.$emit("node-contextmenu", event, this.node.data, this.node, this);
          },
          handleExpandIconClick: function handleExpandIconClick() {
            if (this.node.isLeaf)
              return;
            if (this.expanded) {
              this.tree.$emit("node-collapse", this.node.data, this.node, this);
              this.node.collapse();
            } else {
              this.node.expand();
              this.$emit("node-expand", this.node.data, this.node, this);
            }
          },
          handleCheckChange: function handleCheckChange(value, ev) {
            var _this2 = this;
            this.node.setChecked(ev.target.checked, !this.tree.checkStrictly);
            this.$nextTick(function() {
              var store2 = _this2.tree.store;
              _this2.tree.$emit("check", _this2.node.data, {
                checkedNodes: store2.getCheckedNodes(),
                checkedKeys: store2.getCheckedKeys(),
                halfCheckedNodes: store2.getHalfCheckedNodes(),
                halfCheckedKeys: store2.getHalfCheckedKeys()
              });
            });
          },
          handleChildNodeExpand: function handleChildNodeExpand(nodeData, node, instance) {
            this.broadcast("ElTreeNode", "tree-node-expand", node);
            this.tree.$emit("node-expand", nodeData, node, instance);
          },
          handleDragStart: function handleDragStart(event) {
            if (!this.tree.draggable)
              return;
            this.tree.$emit("tree-node-drag-start", event, this);
          },
          handleDragOver: function handleDragOver(event) {
            if (!this.tree.draggable)
              return;
            this.tree.$emit("tree-node-drag-over", event, this);
            event.preventDefault();
          },
          handleDrop: function handleDrop(event) {
            event.preventDefault();
          },
          handleDragEnd: function handleDragEnd(event) {
            if (!this.tree.draggable)
              return;
            this.tree.$emit("tree-node-drag-end", event, this);
          }
        },
        created: function created() {
          var _this3 = this;
          var parent = this.$parent;
          if (parent.isTree) {
            this.tree = parent;
          } else {
            this.tree = parent.tree;
          }
          var tree2 = this.tree;
          if (!tree2) {
            console.warn("Can not find node's tree.");
          }
          var props2 = tree2.props || {};
          var childrenKey = props2["children"] || "children";
          this.$watch("node.data." + childrenKey, function() {
            _this3.node.updateChildren();
          });
          if (this.node.expanded) {
            this.expanded = true;
            this.childNodeRendered = true;
          }
          if (this.tree.accordion) {
            this.$on("tree-node-expand", function(node) {
              if (_this3.node !== node) {
                _this3.node.collapse();
              }
            });
          }
        }
      };
      var src_tree_nodevue_type_script_lang_js_ = tree_nodevue_type_script_lang_js_;
      var tree_node_component = normalizeComponent2(
        src_tree_nodevue_type_script_lang_js_,
        tree_nodevue_type_template_id_3ba3ef0e_render,
        tree_nodevue_type_template_id_3ba3ef0e_staticRenderFns,
        false,
        null,
        null,
        null
      );
      tree_node_component.options.__file = "packages/tree/src/tree-node.vue";
      var tree_node = tree_node_component.exports;
      var treevue_type_script_lang_js_ = {
        name: "ElTree",
        mixins: [emitter_default.a],
        components: {
          ElTreeNode: tree_node
        },
        data: function data() {
          return {
            store: null,
            root: null,
            currentNode: null,
            treeItems: null,
            checkboxItems: [],
            dragState: {
              showDropIndicator: false,
              draggingNode: null,
              dropNode: null,
              allowDrop: true
            }
          };
        },
        props: {
          data: {
            type: Array
          },
          emptyText: {
            type: String,
            default: function _default2() {
              return Object(lib_locale_["t"])("el.tree.emptyText");
            }
          },
          renderAfterExpand: {
            type: Boolean,
            default: true
          },
          nodeKey: String,
          checkStrictly: Boolean,
          defaultExpandAll: Boolean,
          expandOnClickNode: {
            type: Boolean,
            default: true
          },
          checkOnClickNode: Boolean,
          checkDescendants: {
            type: Boolean,
            default: false
          },
          autoExpandParent: {
            type: Boolean,
            default: true
          },
          defaultCheckedKeys: Array,
          defaultExpandedKeys: Array,
          currentNodeKey: [String, Number],
          renderContent: Function,
          showCheckbox: {
            type: Boolean,
            default: false
          },
          draggable: {
            type: Boolean,
            default: false
          },
          allowDrag: Function,
          allowDrop: Function,
          props: {
            default: function _default2() {
              return {
                children: "children",
                label: "label",
                disabled: "disabled"
              };
            }
          },
          lazy: {
            type: Boolean,
            default: false
          },
          highlightCurrent: Boolean,
          load: Function,
          filterNodeMethod: Function,
          accordion: Boolean,
          indent: {
            type: Number,
            default: 18
          },
          iconClass: String
        },
        computed: {
          children: {
            set: function set2(value) {
              this.data = value;
            },
            get: function get() {
              return this.data;
            }
          },
          treeItemArray: function treeItemArray() {
            return Array.prototype.slice.call(this.treeItems);
          },
          isEmpty: function isEmpty() {
            var childNodes = this.root.childNodes;
            return !childNodes || childNodes.length === 0 || childNodes.every(function(_ref) {
              var visible = _ref.visible;
              return !visible;
            });
          }
        },
        watch: {
          defaultCheckedKeys: function defaultCheckedKeys(newVal) {
            this.store.setDefaultCheckedKey(newVal);
          },
          defaultExpandedKeys: function defaultExpandedKeys(newVal) {
            this.store.defaultExpandedKeys = newVal;
            this.store.setDefaultExpandedKeys(newVal);
          },
          data: function data(newVal) {
            this.store.setData(newVal);
          },
          checkboxItems: function checkboxItems(val) {
            Array.prototype.forEach.call(val, function(checkbox2) {
              checkbox2.setAttribute("tabindex", -1);
            });
          },
          checkStrictly: function checkStrictly(newVal) {
            this.store.checkStrictly = newVal;
          }
        },
        methods: {
          filter: function filter(value) {
            if (!this.filterNodeMethod)
              throw new Error("[Tree] filterNodeMethod is required when filter");
            this.store.filter(value);
          },
          getNodeKey: function getNodeKey(node) {
            return util_getNodeKey(this.nodeKey, node.data);
          },
          getNodePath: function getNodePath(data) {
            if (!this.nodeKey)
              throw new Error("[Tree] nodeKey is required in getNodePath");
            var node = this.store.getNode(data);
            if (!node)
              return [];
            var path = [node.data];
            var parent = node.parent;
            while (parent && parent !== this.root) {
              path.push(parent.data);
              parent = parent.parent;
            }
            return path.reverse();
          },
          getCheckedNodes: function getCheckedNodes(leafOnly, includeHalfChecked) {
            return this.store.getCheckedNodes(leafOnly, includeHalfChecked);
          },
          getCheckedKeys: function getCheckedKeys(leafOnly) {
            return this.store.getCheckedKeys(leafOnly);
          },
          getCurrentNode: function getCurrentNode() {
            var currentNode = this.store.getCurrentNode();
            return currentNode ? currentNode.data : null;
          },
          getCurrentKey: function getCurrentKey() {
            if (!this.nodeKey)
              throw new Error("[Tree] nodeKey is required in getCurrentKey");
            var currentNode = this.getCurrentNode();
            return currentNode ? currentNode[this.nodeKey] : null;
          },
          setCheckedNodes: function setCheckedNodes(nodes, leafOnly) {
            if (!this.nodeKey)
              throw new Error("[Tree] nodeKey is required in setCheckedNodes");
            this.store.setCheckedNodes(nodes, leafOnly);
          },
          setCheckedKeys: function setCheckedKeys(keys2, leafOnly) {
            if (!this.nodeKey)
              throw new Error("[Tree] nodeKey is required in setCheckedKeys");
            this.store.setCheckedKeys(keys2, leafOnly);
          },
          setChecked: function setChecked(data, checked, deep) {
            this.store.setChecked(data, checked, deep);
          },
          getHalfCheckedNodes: function getHalfCheckedNodes() {
            return this.store.getHalfCheckedNodes();
          },
          getHalfCheckedKeys: function getHalfCheckedKeys() {
            return this.store.getHalfCheckedKeys();
          },
          setCurrentNode: function setCurrentNode(node) {
            if (!this.nodeKey)
              throw new Error("[Tree] nodeKey is required in setCurrentNode");
            this.store.setUserCurrentNode(node);
          },
          setCurrentKey: function setCurrentKey(key) {
            if (!this.nodeKey)
              throw new Error("[Tree] nodeKey is required in setCurrentKey");
            this.store.setCurrentNodeKey(key);
          },
          getNode: function getNode(data) {
            return this.store.getNode(data);
          },
          remove: function remove2(data) {
            this.store.remove(data);
          },
          append: function append(data, parentNode2) {
            this.store.append(data, parentNode2);
          },
          insertBefore: function insertBefore2(data, refNode) {
            this.store.insertBefore(data, refNode);
          },
          insertAfter: function insertAfter(data, refNode) {
            this.store.insertAfter(data, refNode);
          },
          handleNodeExpand: function handleNodeExpand(nodeData, node, instance) {
            this.broadcast("ElTreeNode", "tree-node-expand", node);
            this.$emit("node-expand", nodeData, node, instance);
          },
          updateKeyChildren: function updateKeyChildren(key, data) {
            if (!this.nodeKey)
              throw new Error("[Tree] nodeKey is required in updateKeyChild");
            this.store.updateChildren(key, data);
          },
          initTabIndex: function initTabIndex() {
            this.treeItems = this.$el.querySelectorAll(".is-focusable[role=treeitem]");
            this.checkboxItems = this.$el.querySelectorAll("input[type=checkbox]");
            var checkedItem = this.$el.querySelectorAll(".is-checked[role=treeitem]");
            if (checkedItem.length) {
              checkedItem[0].setAttribute("tabindex", 0);
              return;
            }
            this.treeItems[0] && this.treeItems[0].setAttribute("tabindex", 0);
          },
          handleKeydown: function handleKeydown(ev) {
            var currentItem = ev.target;
            if (currentItem.className.indexOf("el-tree-node") === -1)
              return;
            var keyCode2 = ev.keyCode;
            this.treeItems = this.$el.querySelectorAll(".is-focusable[role=treeitem]");
            var currentIndex = this.treeItemArray.indexOf(currentItem);
            var nextIndex = void 0;
            if ([38, 40].indexOf(keyCode2) > -1) {
              ev.preventDefault();
              if (keyCode2 === 38) {
                nextIndex = currentIndex !== 0 ? currentIndex - 1 : 0;
              } else {
                nextIndex = currentIndex < this.treeItemArray.length - 1 ? currentIndex + 1 : 0;
              }
              this.treeItemArray[nextIndex].focus();
            }
            if ([37, 39].indexOf(keyCode2) > -1) {
              ev.preventDefault();
              currentItem.click();
            }
            var hasInput = currentItem.querySelector('[type="checkbox"]');
            if ([13, 32].indexOf(keyCode2) > -1 && hasInput) {
              ev.preventDefault();
              hasInput.click();
            }
          }
        },
        created: function created() {
          var _this = this;
          this.isTree = true;
          this.store = new tree_store({
            key: this.nodeKey,
            data: this.data,
            lazy: this.lazy,
            props: this.props,
            load: this.load,
            currentNodeKey: this.currentNodeKey,
            checkStrictly: this.checkStrictly,
            checkDescendants: this.checkDescendants,
            defaultCheckedKeys: this.defaultCheckedKeys,
            defaultExpandedKeys: this.defaultExpandedKeys,
            autoExpandParent: this.autoExpandParent,
            defaultExpandAll: this.defaultExpandAll,
            filterNodeMethod: this.filterNodeMethod
          });
          this.root = this.store.root;
          var dragState = this.dragState;
          this.$on("tree-node-drag-start", function(event, treeNode) {
            if (typeof _this.allowDrag === "function" && !_this.allowDrag(treeNode.node)) {
              event.preventDefault();
              return false;
            }
            event.dataTransfer.effectAllowed = "move";
            try {
              event.dataTransfer.setData("text/plain", "");
            } catch (e) {
            }
            dragState.draggingNode = treeNode;
            _this.$emit("node-drag-start", treeNode.node, event);
          });
          this.$on("tree-node-drag-over", function(event, treeNode) {
            var dropNode = findNearestComponent(event.target, "ElTreeNode");
            var oldDropNode = dragState.dropNode;
            if (oldDropNode && oldDropNode !== dropNode) {
              Object(dom_["removeClass"])(oldDropNode.$el, "is-drop-inner");
            }
            var draggingNode = dragState.draggingNode;
            if (!draggingNode || !dropNode)
              return;
            var dropPrev = true;
            var dropInner = true;
            var dropNext = true;
            var userAllowDropInner = true;
            if (typeof _this.allowDrop === "function") {
              dropPrev = _this.allowDrop(draggingNode.node, dropNode.node, "prev");
              userAllowDropInner = dropInner = _this.allowDrop(draggingNode.node, dropNode.node, "inner");
              dropNext = _this.allowDrop(draggingNode.node, dropNode.node, "next");
            }
            event.dataTransfer.dropEffect = dropInner ? "move" : "none";
            if ((dropPrev || dropInner || dropNext) && oldDropNode !== dropNode) {
              if (oldDropNode) {
                _this.$emit("node-drag-leave", draggingNode.node, oldDropNode.node, event);
              }
              _this.$emit("node-drag-enter", draggingNode.node, dropNode.node, event);
            }
            if (dropPrev || dropInner || dropNext) {
              dragState.dropNode = dropNode;
            }
            if (dropNode.node.nextSibling === draggingNode.node) {
              dropNext = false;
            }
            if (dropNode.node.previousSibling === draggingNode.node) {
              dropPrev = false;
            }
            if (dropNode.node.contains(draggingNode.node, false)) {
              dropInner = false;
            }
            if (draggingNode.node === dropNode.node || draggingNode.node.contains(dropNode.node)) {
              dropPrev = false;
              dropInner = false;
              dropNext = false;
            }
            var targetPosition = dropNode.$el.getBoundingClientRect();
            var treePosition = _this.$el.getBoundingClientRect();
            var dropType = void 0;
            var prevPercent = dropPrev ? dropInner ? 0.25 : dropNext ? 0.45 : 1 : -1;
            var nextPercent = dropNext ? dropInner ? 0.75 : dropPrev ? 0.55 : 0 : 1;
            var indicatorTop = -9999;
            var distance = event.clientY - targetPosition.top;
            if (distance < targetPosition.height * prevPercent) {
              dropType = "before";
            } else if (distance > targetPosition.height * nextPercent) {
              dropType = "after";
            } else if (dropInner) {
              dropType = "inner";
            } else {
              dropType = "none";
            }
            var iconPosition = dropNode.$el.querySelector(".el-tree-node__expand-icon").getBoundingClientRect();
            var dropIndicator = _this.$refs.dropIndicator;
            if (dropType === "before") {
              indicatorTop = iconPosition.top - treePosition.top;
            } else if (dropType === "after") {
              indicatorTop = iconPosition.bottom - treePosition.top;
            }
            dropIndicator.style.top = indicatorTop + "px";
            dropIndicator.style.left = iconPosition.right - treePosition.left + "px";
            if (dropType === "inner") {
              Object(dom_["addClass"])(dropNode.$el, "is-drop-inner");
            } else {
              Object(dom_["removeClass"])(dropNode.$el, "is-drop-inner");
            }
            dragState.showDropIndicator = dropType === "before" || dropType === "after";
            dragState.allowDrop = dragState.showDropIndicator || userAllowDropInner;
            dragState.dropType = dropType;
            _this.$emit("node-drag-over", draggingNode.node, dropNode.node, event);
          });
          this.$on("tree-node-drag-end", function(event) {
            var draggingNode = dragState.draggingNode, dropType = dragState.dropType, dropNode = dragState.dropNode;
            event.preventDefault();
            event.dataTransfer.dropEffect = "move";
            if (draggingNode && dropNode) {
              var draggingNodeCopy = { data: draggingNode.node.data };
              if (dropType !== "none") {
                draggingNode.node.remove();
              }
              if (dropType === "before") {
                dropNode.node.parent.insertBefore(draggingNodeCopy, dropNode.node);
              } else if (dropType === "after") {
                dropNode.node.parent.insertAfter(draggingNodeCopy, dropNode.node);
              } else if (dropType === "inner") {
                dropNode.node.insertChild(draggingNodeCopy);
              }
              if (dropType !== "none") {
                _this.store.registerNode(draggingNodeCopy);
              }
              Object(dom_["removeClass"])(dropNode.$el, "is-drop-inner");
              _this.$emit("node-drag-end", draggingNode.node, dropNode.node, dropType, event);
              if (dropType !== "none") {
                _this.$emit("node-drop", draggingNode.node, dropNode.node, dropType, event);
              }
            }
            if (draggingNode && !dropNode) {
              _this.$emit("node-drag-end", draggingNode.node, null, dropType, event);
            }
            dragState.showDropIndicator = false;
            dragState.draggingNode = null;
            dragState.dropNode = null;
            dragState.allowDrop = true;
          });
        },
        mounted: function mounted2() {
          this.initTabIndex();
          this.$el.addEventListener("keydown", this.handleKeydown);
        },
        updated: function updated() {
          this.treeItems = this.$el.querySelectorAll("[role=treeitem]");
          this.checkboxItems = this.$el.querySelectorAll("input[type=checkbox]");
        }
      };
      var src_treevue_type_script_lang_js_ = treevue_type_script_lang_js_;
      var tree_component = normalizeComponent2(
        src_treevue_type_script_lang_js_,
        treevue_type_template_id_547575a6_render,
        treevue_type_template_id_547575a6_staticRenderFns,
        false,
        null,
        null,
        null
      );
      tree_component.options.__file = "packages/tree/src/tree.vue";
      var src_tree = tree_component.exports;
      src_tree.install = function(Vue2) {
        Vue2.component(src_tree.name, src_tree);
      };
      var packages_tree = src_tree;
      var mainvue_type_template_id_6e53341b_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", { attrs: { name: "el-alert-fade" } }, [
          _c(
            "div",
            {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.visible,
                  expression: "visible"
                }
              ],
              staticClass: "el-alert",
              class: [
                _vm.typeClass,
                _vm.center ? "is-center" : "",
                "is-" + _vm.effect
              ],
              attrs: { role: "alert" }
            },
            [
              _vm.showIcon ? _c("i", {
                staticClass: "el-alert__icon",
                class: [_vm.iconClass, _vm.isBigIcon]
              }) : _vm._e(),
              _c("div", { staticClass: "el-alert__content" }, [
                _vm.title || _vm.$slots.title ? _c(
                  "span",
                  { staticClass: "el-alert__title", class: [_vm.isBoldTitle] },
                  [_vm._t("title", [_vm._v(_vm._s(_vm.title))])],
                  2
                ) : _vm._e(),
                _vm.$slots.default && !_vm.description ? _c(
                  "p",
                  { staticClass: "el-alert__description" },
                  [_vm._t("default")],
                  2
                ) : _vm._e(),
                _vm.description && !_vm.$slots.default ? _c("p", { staticClass: "el-alert__description" }, [
                  _vm._v(_vm._s(_vm.description))
                ]) : _vm._e(),
                _c(
                  "i",
                  {
                    directives: [
                      {
                        name: "show",
                        rawName: "v-show",
                        value: _vm.closable,
                        expression: "closable"
                      }
                    ],
                    staticClass: "el-alert__closebtn",
                    class: {
                      "is-customed": _vm.closeText !== "",
                      "el-icon-close": _vm.closeText === ""
                    },
                    on: {
                      click: function($event) {
                        _vm.close();
                      }
                    }
                  },
                  [_vm._v(_vm._s(_vm.closeText))]
                )
              ])
            ]
          )
        ]);
      };
      var mainvue_type_template_id_6e53341b_staticRenderFns = [];
      mainvue_type_template_id_6e53341b_render._withStripped = true;
      var TYPE_CLASSES_MAP = {
        "success": "el-icon-success",
        "warning": "el-icon-warning",
        "error": "el-icon-error"
      };
      var alert_src_mainvue_type_script_lang_js_ = {
        name: "ElAlert",
        props: {
          title: {
            type: String,
            default: ""
          },
          description: {
            type: String,
            default: ""
          },
          type: {
            type: String,
            default: "info"
          },
          closable: {
            type: Boolean,
            default: true
          },
          closeText: {
            type: String,
            default: ""
          },
          showIcon: Boolean,
          center: Boolean,
          effect: {
            type: String,
            default: "light",
            validator: function validator(value) {
              return ["light", "dark"].indexOf(value) !== -1;
            }
          }
        },
        data: function data() {
          return {
            visible: true
          };
        },
        methods: {
          close: function close() {
            this.visible = false;
            this.$emit("close");
          }
        },
        computed: {
          typeClass: function typeClass() {
            return "el-alert--" + this.type;
          },
          iconClass: function iconClass() {
            return TYPE_CLASSES_MAP[this.type] || "el-icon-info";
          },
          isBigIcon: function isBigIcon() {
            return this.description || this.$slots.default ? "is-big" : "";
          },
          isBoldTitle: function isBoldTitle() {
            return this.description || this.$slots.default ? "is-bold" : "";
          }
        }
      };
      var packages_alert_src_mainvue_type_script_lang_js_ = alert_src_mainvue_type_script_lang_js_;
      var alert_src_main_component = normalizeComponent2(
        packages_alert_src_mainvue_type_script_lang_js_,
        mainvue_type_template_id_6e53341b_render,
        mainvue_type_template_id_6e53341b_staticRenderFns,
        false,
        null,
        null,
        null
      );
      alert_src_main_component.options.__file = "packages/alert/src/main.vue";
      var alert_src_main = alert_src_main_component.exports;
      alert_src_main.install = function(Vue2) {
        Vue2.component(alert_src_main.name, alert_src_main);
      };
      var packages_alert = alert_src_main;
      var mainvue_type_template_id_43dbc3d8_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", { attrs: { name: "el-notification-fade" } }, [
          _c(
            "div",
            {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: _vm.visible,
                  expression: "visible"
                }
              ],
              class: ["el-notification", _vm.customClass, _vm.horizontalClass],
              style: _vm.positionStyle,
              attrs: { role: "alert" },
              on: {
                mouseenter: function($event) {
                  _vm.clearTimer();
                },
                mouseleave: function($event) {
                  _vm.startTimer();
                },
                click: _vm.click
              }
            },
            [
              _vm.type || _vm.iconClass ? _c("i", {
                staticClass: "el-notification__icon",
                class: [_vm.typeClass, _vm.iconClass]
              }) : _vm._e(),
              _c(
                "div",
                {
                  staticClass: "el-notification__group",
                  class: { "is-with-icon": _vm.typeClass || _vm.iconClass }
                },
                [
                  _c("h2", {
                    staticClass: "el-notification__title",
                    domProps: { textContent: _vm._s(_vm.title) }
                  }),
                  _c(
                    "div",
                    {
                      directives: [
                        {
                          name: "show",
                          rawName: "v-show",
                          value: _vm.message,
                          expression: "message"
                        }
                      ],
                      staticClass: "el-notification__content"
                    },
                    [
                      _vm._t("default", [
                        !_vm.dangerouslyUseHTMLString ? _c("p", [_vm._v(_vm._s(_vm.message))]) : _c("p", { domProps: { innerHTML: _vm._s(_vm.message) } })
                      ])
                    ],
                    2
                  ),
                  _vm.showClose ? _c("div", {
                    staticClass: "el-notification__closeBtn el-icon-close",
                    on: {
                      click: function($event) {
                        $event.stopPropagation();
                        return _vm.close($event);
                      }
                    }
                  }) : _vm._e()
                ]
              )
            ]
          )
        ]);
      };
      var mainvue_type_template_id_43dbc3d8_staticRenderFns = [];
      mainvue_type_template_id_43dbc3d8_render._withStripped = true;
      var mainvue_type_script_lang_js_typeMap = {
        success: "success",
        info: "info",
        warning: "warning",
        error: "error"
      };
      var notification_src_mainvue_type_script_lang_js_ = {
        data: function data() {
          return {
            visible: false,
            title: "",
            message: "",
            duration: 4500,
            type: "",
            showClose: true,
            customClass: "",
            iconClass: "",
            onClose: null,
            onClick: null,
            closed: false,
            verticalOffset: 0,
            timer: null,
            dangerouslyUseHTMLString: false,
            position: "top-right"
          };
        },
        computed: {
          typeClass: function typeClass() {
            return this.type && mainvue_type_script_lang_js_typeMap[this.type] ? "el-icon-" + mainvue_type_script_lang_js_typeMap[this.type] : "";
          },
          horizontalClass: function horizontalClass() {
            return this.position.indexOf("right") > -1 ? "right" : "left";
          },
          verticalProperty: function verticalProperty() {
            return /^top-/.test(this.position) ? "top" : "bottom";
          },
          positionStyle: function positionStyle() {
            var _ref;
            return _ref = {}, _ref[this.verticalProperty] = this.verticalOffset + "px", _ref;
          }
        },
        watch: {
          closed: function closed(newVal) {
            if (newVal) {
              this.visible = false;
              this.$el.addEventListener("transitionend", this.destroyElement);
            }
          }
        },
        methods: {
          destroyElement: function destroyElement() {
            this.$el.removeEventListener("transitionend", this.destroyElement);
            this.$destroy(true);
            this.$el.parentNode.removeChild(this.$el);
          },
          click: function click() {
            if (typeof this.onClick === "function") {
              this.onClick();
            }
          },
          close: function close() {
            this.closed = true;
            if (typeof this.onClose === "function") {
              this.onClose();
            }
          },
          clearTimer: function clearTimer() {
            clearTimeout(this.timer);
          },
          startTimer: function startTimer() {
            var _this = this;
            if (this.duration > 0) {
              this.timer = setTimeout(function() {
                if (!_this.closed) {
                  _this.close();
                }
              }, this.duration);
            }
          },
          keydown: function keydown(e) {
            if (e.keyCode === 46 || e.keyCode === 8) {
              this.clearTimer();
            } else if (e.keyCode === 27) {
              if (!this.closed) {
                this.close();
              }
            } else {
              this.startTimer();
            }
          }
        },
        mounted: function mounted2() {
          var _this2 = this;
          if (this.duration > 0) {
            this.timer = setTimeout(function() {
              if (!_this2.closed) {
                _this2.close();
              }
            }, this.duration);
          }
          document.addEventListener("keydown", this.keydown);
        },
        beforeDestroy: function beforeDestroy2() {
          document.removeEventListener("keydown", this.keydown);
        }
      };
      var packages_notification_src_mainvue_type_script_lang_js_ = notification_src_mainvue_type_script_lang_js_;
      var notification_src_main_component = normalizeComponent2(
        packages_notification_src_mainvue_type_script_lang_js_,
        mainvue_type_template_id_43dbc3d8_render,
        mainvue_type_template_id_43dbc3d8_staticRenderFns,
        false,
        null,
        null,
        null
      );
      notification_src_main_component.options.__file = "packages/notification/src/main.vue";
      var notification_src_main = notification_src_main_component.exports;
      var NotificationConstructor = external_vue_default.a.extend(notification_src_main);
      var src_main_instance = void 0;
      var instances = [];
      var seed = 1;
      var main_Notification = function Notification(options) {
        if (external_vue_default.a.prototype.$isServer)
          return;
        options = merge_default()({}, options);
        var userOnClose = options.onClose;
        var id2 = "notification_" + seed++;
        var position = options.position || "top-right";
        options.onClose = function() {
          Notification.close(id2, userOnClose);
        };
        src_main_instance = new NotificationConstructor({
          data: options
        });
        if (Object(vdom_["isVNode"])(options.message)) {
          src_main_instance.$slots.default = [options.message];
          options.message = "REPLACED_BY_VNODE";
        }
        src_main_instance.id = id2;
        src_main_instance.$mount();
        document.body.appendChild(src_main_instance.$el);
        src_main_instance.visible = true;
        src_main_instance.dom = src_main_instance.$el;
        src_main_instance.dom.style.zIndex = popup_["PopupManager"].nextZIndex();
        var verticalOffset = options.offset || 0;
        instances.filter(function(item) {
          return item.position === position;
        }).forEach(function(item) {
          verticalOffset += item.$el.offsetHeight + 16;
        });
        verticalOffset += 16;
        src_main_instance.verticalOffset = verticalOffset;
        instances.push(src_main_instance);
        return src_main_instance;
      };
      ["success", "warning", "info", "error"].forEach(function(type2) {
        main_Notification[type2] = function(options) {
          if (typeof options === "string" || Object(vdom_["isVNode"])(options)) {
            options = {
              message: options
            };
          }
          options.type = type2;
          return main_Notification(options);
        };
      });
      main_Notification.close = function(id2, userOnClose) {
        var index2 = -1;
        var len = instances.length;
        var instance = instances.filter(function(instance2, i2) {
          if (instance2.id === id2) {
            index2 = i2;
            return true;
          }
          return false;
        })[0];
        if (!instance)
          return;
        if (typeof userOnClose === "function") {
          userOnClose(instance);
        }
        instances.splice(index2, 1);
        if (len <= 1)
          return;
        var position = instance.position;
        var removedHeight = instance.dom.offsetHeight;
        for (var i = index2; i < len - 1; i++) {
          if (instances[i].position === position) {
            instances[i].dom.style[instance.verticalProperty] = parseInt(instances[i].dom.style[instance.verticalProperty], 10) - removedHeight - 16 + "px";
          }
        }
      };
      main_Notification.closeAll = function() {
        for (var i = instances.length - 1; i >= 0; i--) {
          instances[i].close();
        }
      };
      var packages_notification_src_main = main_Notification;
      var notification = packages_notification_src_main;
      var mainvue_type_template_id_32708644_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-slider",
            class: {
              "is-vertical": _vm.vertical,
              "el-slider--with-input": _vm.showInput
            },
            attrs: {
              role: "slider",
              "aria-valuemin": _vm.min,
              "aria-valuemax": _vm.max,
              "aria-orientation": _vm.vertical ? "vertical" : "horizontal",
              "aria-disabled": _vm.sliderDisabled
            }
          },
          [
            _vm.showInput && !_vm.range ? _c("el-input-number", {
              ref: "input",
              staticClass: "el-slider__input",
              attrs: {
                step: _vm.step,
                disabled: _vm.sliderDisabled,
                controls: _vm.showInputControls,
                min: _vm.min,
                max: _vm.max,
                debounce: _vm.debounce,
                size: _vm.inputSize
              },
              on: { change: _vm.emitChange },
              model: {
                value: _vm.firstValue,
                callback: function($$v) {
                  _vm.firstValue = $$v;
                },
                expression: "firstValue"
              }
            }) : _vm._e(),
            _c(
              "div",
              {
                ref: "slider",
                staticClass: "el-slider__runway",
                class: { "show-input": _vm.showInput, disabled: _vm.sliderDisabled },
                style: _vm.runwayStyle,
                on: { click: _vm.onSliderClick }
              },
              [
                _c("div", { staticClass: "el-slider__bar", style: _vm.barStyle }),
                _c("slider-button", {
                  ref: "button1",
                  attrs: {
                    vertical: _vm.vertical,
                    "tooltip-class": _vm.tooltipClass
                  },
                  model: {
                    value: _vm.firstValue,
                    callback: function($$v) {
                      _vm.firstValue = $$v;
                    },
                    expression: "firstValue"
                  }
                }),
                _vm.range ? _c("slider-button", {
                  ref: "button2",
                  attrs: {
                    vertical: _vm.vertical,
                    "tooltip-class": _vm.tooltipClass
                  },
                  model: {
                    value: _vm.secondValue,
                    callback: function($$v) {
                      _vm.secondValue = $$v;
                    },
                    expression: "secondValue"
                  }
                }) : _vm._e(),
                _vm._l(_vm.stops, function(item, key) {
                  return _vm.showStops ? _c("div", {
                    key,
                    staticClass: "el-slider__stop",
                    style: _vm.getStopStyle(item)
                  }) : _vm._e();
                }),
                _vm.markList.length > 0 ? [
                  _c(
                    "div",
                    _vm._l(_vm.markList, function(item, key) {
                      return _c("div", {
                        key,
                        staticClass: "el-slider__stop el-slider__marks-stop",
                        style: _vm.getStopStyle(item.position)
                      });
                    }),
                    0
                  ),
                  _c(
                    "div",
                    { staticClass: "el-slider__marks" },
                    _vm._l(_vm.markList, function(item, key) {
                      return _c("slider-marker", {
                        key,
                        style: _vm.getStopStyle(item.position),
                        attrs: { mark: item.mark }
                      });
                    }),
                    1
                  )
                ] : _vm._e()
              ],
              2
            )
          ],
          1
        );
      };
      var mainvue_type_template_id_32708644_staticRenderFns = [];
      mainvue_type_template_id_32708644_render._withStripped = true;
      var input_number_ = __webpack_require__(42);
      var input_number_default = /* @__PURE__ */ __webpack_require__.n(input_number_);
      var buttonvue_type_template_id_e72d2ad2_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            ref: "button",
            staticClass: "el-slider__button-wrapper",
            class: { hover: _vm.hovering, dragging: _vm.dragging },
            style: _vm.wrapperStyle,
            attrs: { tabindex: "0" },
            on: {
              mouseenter: _vm.handleMouseEnter,
              mouseleave: _vm.handleMouseLeave,
              mousedown: _vm.onButtonDown,
              touchstart: _vm.onButtonDown,
              focus: _vm.handleMouseEnter,
              blur: _vm.handleMouseLeave,
              keydown: [
                function($event) {
                  if (!("button" in $event) && _vm._k($event.keyCode, "left", 37, $event.key, [
                    "Left",
                    "ArrowLeft"
                  ])) {
                    return null;
                  }
                  if ("button" in $event && $event.button !== 0) {
                    return null;
                  }
                  return _vm.onLeftKeyDown($event);
                },
                function($event) {
                  if (!("button" in $event) && _vm._k($event.keyCode, "right", 39, $event.key, [
                    "Right",
                    "ArrowRight"
                  ])) {
                    return null;
                  }
                  if ("button" in $event && $event.button !== 2) {
                    return null;
                  }
                  return _vm.onRightKeyDown($event);
                },
                function($event) {
                  if (!("button" in $event) && _vm._k($event.keyCode, "down", 40, $event.key, [
                    "Down",
                    "ArrowDown"
                  ])) {
                    return null;
                  }
                  $event.preventDefault();
                  return _vm.onLeftKeyDown($event);
                },
                function($event) {
                  if (!("button" in $event) && _vm._k($event.keyCode, "up", 38, $event.key, ["Up", "ArrowUp"])) {
                    return null;
                  }
                  $event.preventDefault();
                  return _vm.onRightKeyDown($event);
                }
              ]
            }
          },
          [
            _c(
              "el-tooltip",
              {
                ref: "tooltip",
                attrs: {
                  placement: "top",
                  "popper-class": _vm.tooltipClass,
                  disabled: !_vm.showTooltip
                }
              },
              [
                _c("span", { attrs: { slot: "content" }, slot: "content" }, [
                  _vm._v(_vm._s(_vm.formatValue))
                ]),
                _c("div", {
                  staticClass: "el-slider__button",
                  class: { hover: _vm.hovering, dragging: _vm.dragging }
                })
              ]
            )
          ],
          1
        );
      };
      var buttonvue_type_template_id_e72d2ad2_staticRenderFns = [];
      buttonvue_type_template_id_e72d2ad2_render._withStripped = true;
      var slider_src_buttonvue_type_script_lang_js_ = {
        name: "ElSliderButton",
        components: {
          ElTooltip: tooltip_default.a
        },
        props: {
          value: {
            type: Number,
            default: 0
          },
          vertical: {
            type: Boolean,
            default: false
          },
          tooltipClass: String
        },
        data: function data() {
          return {
            hovering: false,
            dragging: false,
            isClick: false,
            startX: 0,
            currentX: 0,
            startY: 0,
            currentY: 0,
            startPosition: 0,
            newPosition: null,
            oldValue: this.value
          };
        },
        computed: {
          disabled: function disabled() {
            return this.$parent.sliderDisabled;
          },
          max: function max2() {
            return this.$parent.max;
          },
          min: function min2() {
            return this.$parent.min;
          },
          step: function step3() {
            return this.$parent.step;
          },
          showTooltip: function showTooltip() {
            return this.$parent.showTooltip;
          },
          precision: function precision() {
            return this.$parent.precision;
          },
          currentPosition: function currentPosition() {
            return (this.value - this.min) / (this.max - this.min) * 100 + "%";
          },
          enableFormat: function enableFormat() {
            return this.$parent.formatTooltip instanceof Function;
          },
          formatValue: function formatValue() {
            return this.enableFormat && this.$parent.formatTooltip(this.value) || this.value;
          },
          wrapperStyle: function wrapperStyle() {
            return this.vertical ? { bottom: this.currentPosition } : { left: this.currentPosition };
          }
        },
        watch: {
          dragging: function dragging(val) {
            this.$parent.dragging = val;
          }
        },
        methods: {
          displayTooltip: function displayTooltip() {
            this.$refs.tooltip && (this.$refs.tooltip.showPopper = true);
          },
          hideTooltip: function hideTooltip() {
            this.$refs.tooltip && (this.$refs.tooltip.showPopper = false);
          },
          handleMouseEnter: function handleMouseEnter() {
            this.hovering = true;
            this.displayTooltip();
          },
          handleMouseLeave: function handleMouseLeave() {
            this.hovering = false;
            this.hideTooltip();
          },
          onButtonDown: function onButtonDown(event) {
            if (this.disabled)
              return;
            event.preventDefault();
            this.onDragStart(event);
            window.addEventListener("mousemove", this.onDragging);
            window.addEventListener("touchmove", this.onDragging);
            window.addEventListener("mouseup", this.onDragEnd);
            window.addEventListener("touchend", this.onDragEnd);
            window.addEventListener("contextmenu", this.onDragEnd);
          },
          onLeftKeyDown: function onLeftKeyDown() {
            if (this.disabled)
              return;
            this.newPosition = parseFloat(this.currentPosition) - this.step / (this.max - this.min) * 100;
            this.setPosition(this.newPosition);
            this.$parent.emitChange();
          },
          onRightKeyDown: function onRightKeyDown() {
            if (this.disabled)
              return;
            this.newPosition = parseFloat(this.currentPosition) + this.step / (this.max - this.min) * 100;
            this.setPosition(this.newPosition);
            this.$parent.emitChange();
          },
          onDragStart: function onDragStart(event) {
            this.dragging = true;
            this.isClick = true;
            if (event.type === "touchstart") {
              event.clientY = event.touches[0].clientY;
              event.clientX = event.touches[0].clientX;
            }
            if (this.vertical) {
              this.startY = event.clientY;
            } else {
              this.startX = event.clientX;
            }
            this.startPosition = parseFloat(this.currentPosition);
            this.newPosition = this.startPosition;
          },
          onDragging: function onDragging(event) {
            if (this.dragging) {
              this.isClick = false;
              this.displayTooltip();
              this.$parent.resetSize();
              var diff = 0;
              if (event.type === "touchmove") {
                event.clientY = event.touches[0].clientY;
                event.clientX = event.touches[0].clientX;
              }
              if (this.vertical) {
                this.currentY = event.clientY;
                diff = (this.startY - this.currentY) / this.$parent.sliderSize * 100;
              } else {
                this.currentX = event.clientX;
                diff = (this.currentX - this.startX) / this.$parent.sliderSize * 100;
              }
              this.newPosition = this.startPosition + diff;
              this.setPosition(this.newPosition);
            }
          },
          onDragEnd: function onDragEnd() {
            var _this = this;
            if (this.dragging) {
              setTimeout(function() {
                _this.dragging = false;
                _this.hideTooltip();
                if (!_this.isClick) {
                  _this.setPosition(_this.newPosition);
                  _this.$parent.emitChange();
                }
              }, 0);
              window.removeEventListener("mousemove", this.onDragging);
              window.removeEventListener("touchmove", this.onDragging);
              window.removeEventListener("mouseup", this.onDragEnd);
              window.removeEventListener("touchend", this.onDragEnd);
              window.removeEventListener("contextmenu", this.onDragEnd);
            }
          },
          setPosition: function setPosition(newPosition) {
            var _this2 = this;
            if (newPosition === null || isNaN(newPosition))
              return;
            if (newPosition < 0) {
              newPosition = 0;
            } else if (newPosition > 100) {
              newPosition = 100;
            }
            var lengthPerStep = 100 / ((this.max - this.min) / this.step);
            var steps2 = Math.round(newPosition / lengthPerStep);
            var value = steps2 * lengthPerStep * (this.max - this.min) * 0.01 + this.min;
            value = parseFloat(value.toFixed(this.precision));
            this.$emit("input", value);
            this.$nextTick(function() {
              _this2.displayTooltip();
              _this2.$refs.tooltip && _this2.$refs.tooltip.updatePopper();
            });
            if (!this.dragging && this.value !== this.oldValue) {
              this.oldValue = this.value;
            }
          }
        }
      };
      var packages_slider_src_buttonvue_type_script_lang_js_ = slider_src_buttonvue_type_script_lang_js_;
      var src_button_component = normalizeComponent2(
        packages_slider_src_buttonvue_type_script_lang_js_,
        buttonvue_type_template_id_e72d2ad2_render,
        buttonvue_type_template_id_e72d2ad2_staticRenderFns,
        false,
        null,
        null,
        null
      );
      src_button_component.options.__file = "packages/slider/src/button.vue";
      var slider_src_button = src_button_component.exports;
      var marker = {
        name: "ElMarker",
        props: {
          mark: {
            type: [String, Object]
          }
        },
        render: function render6() {
          var h2 = arguments[0];
          var label = typeof this.mark === "string" ? this.mark : this.mark.label;
          return h2(
            "div",
            { "class": "el-slider__marks-text", style: this.mark.style || {} },
            [label]
          );
        }
      };
      var slider_src_mainvue_type_script_lang_js_ = {
        name: "ElSlider",
        mixins: [emitter_default.a],
        inject: {
          elForm: {
            default: ""
          }
        },
        props: {
          min: {
            type: Number,
            default: 0
          },
          max: {
            type: Number,
            default: 100
          },
          step: {
            type: Number,
            default: 1
          },
          value: {
            type: [Number, Array],
            default: 0
          },
          showInput: {
            type: Boolean,
            default: false
          },
          showInputControls: {
            type: Boolean,
            default: true
          },
          inputSize: {
            type: String,
            default: "small"
          },
          showStops: {
            type: Boolean,
            default: false
          },
          showTooltip: {
            type: Boolean,
            default: true
          },
          formatTooltip: Function,
          disabled: {
            type: Boolean,
            default: false
          },
          range: {
            type: Boolean,
            default: false
          },
          vertical: {
            type: Boolean,
            default: false
          },
          height: {
            type: String
          },
          debounce: {
            type: Number,
            default: 300
          },
          label: {
            type: String
          },
          tooltipClass: String,
          marks: Object
        },
        components: {
          ElInputNumber: input_number_default.a,
          SliderButton: slider_src_button,
          SliderMarker: marker
        },
        data: function data() {
          return {
            firstValue: null,
            secondValue: null,
            oldValue: null,
            dragging: false,
            sliderSize: 1
          };
        },
        watch: {
          value: function value(val, oldVal) {
            if (this.dragging || Array.isArray(val) && Array.isArray(oldVal) && val.every(function(item, index2) {
              return item === oldVal[index2];
            })) {
              return;
            }
            this.setValues();
          },
          dragging: function dragging(val) {
            if (!val) {
              this.setValues();
            }
          },
          firstValue: function firstValue(val) {
            if (this.range) {
              this.$emit("input", [this.minValue, this.maxValue]);
            } else {
              this.$emit("input", val);
            }
          },
          secondValue: function secondValue() {
            if (this.range) {
              this.$emit("input", [this.minValue, this.maxValue]);
            }
          },
          min: function min2() {
            this.setValues();
          },
          max: function max2() {
            this.setValues();
          }
        },
        methods: {
          valueChanged: function valueChanged() {
            var _this = this;
            if (this.range) {
              return ![this.minValue, this.maxValue].every(function(item, index2) {
                return item === _this.oldValue[index2];
              });
            } else {
              return this.value !== this.oldValue;
            }
          },
          setValues: function setValues() {
            if (this.min > this.max) {
              console.error("[Element Error][Slider]min should not be greater than max.");
              return;
            }
            var val = this.value;
            if (this.range && Array.isArray(val)) {
              if (val[1] < this.min) {
                this.$emit("input", [this.min, this.min]);
              } else if (val[0] > this.max) {
                this.$emit("input", [this.max, this.max]);
              } else if (val[0] < this.min) {
                this.$emit("input", [this.min, val[1]]);
              } else if (val[1] > this.max) {
                this.$emit("input", [val[0], this.max]);
              } else {
                this.firstValue = val[0];
                this.secondValue = val[1];
                if (this.valueChanged()) {
                  this.dispatch("ElFormItem", "el.form.change", [this.minValue, this.maxValue]);
                  this.oldValue = val.slice();
                }
              }
            } else if (!this.range && typeof val === "number" && !isNaN(val)) {
              if (val < this.min) {
                this.$emit("input", this.min);
              } else if (val > this.max) {
                this.$emit("input", this.max);
              } else {
                this.firstValue = val;
                if (this.valueChanged()) {
                  this.dispatch("ElFormItem", "el.form.change", val);
                  this.oldValue = val;
                }
              }
            }
          },
          setPosition: function setPosition(percent) {
            var targetValue = this.min + percent * (this.max - this.min) / 100;
            if (!this.range) {
              this.$refs.button1.setPosition(percent);
              return;
            }
            var button2 = void 0;
            if (Math.abs(this.minValue - targetValue) < Math.abs(this.maxValue - targetValue)) {
              button2 = this.firstValue < this.secondValue ? "button1" : "button2";
            } else {
              button2 = this.firstValue > this.secondValue ? "button1" : "button2";
            }
            this.$refs[button2].setPosition(percent);
          },
          onSliderClick: function onSliderClick(event) {
            if (this.sliderDisabled || this.dragging)
              return;
            this.resetSize();
            if (this.vertical) {
              var sliderOffsetBottom = this.$refs.slider.getBoundingClientRect().bottom;
              this.setPosition((sliderOffsetBottom - event.clientY) / this.sliderSize * 100);
            } else {
              var sliderOffsetLeft = this.$refs.slider.getBoundingClientRect().left;
              this.setPosition((event.clientX - sliderOffsetLeft) / this.sliderSize * 100);
            }
            this.emitChange();
          },
          resetSize: function resetSize() {
            if (this.$refs.slider) {
              this.sliderSize = this.$refs.slider["client" + (this.vertical ? "Height" : "Width")];
            }
          },
          emitChange: function emitChange() {
            var _this2 = this;
            this.$nextTick(function() {
              _this2.$emit("change", _this2.range ? [_this2.minValue, _this2.maxValue] : _this2.value);
            });
          },
          getStopStyle: function getStopStyle(position) {
            return this.vertical ? { "bottom": position + "%" } : { "left": position + "%" };
          }
        },
        computed: {
          stops: function stops() {
            var _this3 = this;
            if (!this.showStops || this.min > this.max)
              return [];
            if (this.step === 0) {
              return [];
            }
            var stopCount = (this.max - this.min) / this.step;
            var stepWidth = 100 * this.step / (this.max - this.min);
            var result = [];
            for (var i = 1; i < stopCount; i++) {
              result.push(i * stepWidth);
            }
            if (this.range) {
              return result.filter(function(step3) {
                return step3 < 100 * (_this3.minValue - _this3.min) / (_this3.max - _this3.min) || step3 > 100 * (_this3.maxValue - _this3.min) / (_this3.max - _this3.min);
              });
            } else {
              return result.filter(function(step3) {
                return step3 > 100 * (_this3.firstValue - _this3.min) / (_this3.max - _this3.min);
              });
            }
          },
          markList: function markList() {
            var _this4 = this;
            if (!this.marks) {
              return [];
            }
            var marksKeys = Object.keys(this.marks);
            return marksKeys.map(parseFloat).sort(function(a, b) {
              return a - b;
            }).filter(function(point) {
              return point <= _this4.max && point >= _this4.min;
            }).map(function(point) {
              return {
                point,
                position: (point - _this4.min) * 100 / (_this4.max - _this4.min),
                mark: _this4.marks[point]
              };
            });
          },
          minValue: function minValue() {
            return Math.min(this.firstValue, this.secondValue);
          },
          maxValue: function maxValue() {
            return Math.max(this.firstValue, this.secondValue);
          },
          barSize: function barSize() {
            return this.range ? 100 * (this.maxValue - this.minValue) / (this.max - this.min) + "%" : 100 * (this.firstValue - this.min) / (this.max - this.min) + "%";
          },
          barStart: function barStart() {
            return this.range ? 100 * (this.minValue - this.min) / (this.max - this.min) + "%" : "0%";
          },
          precision: function precision() {
            var precisions = [this.min, this.max, this.step].map(function(item) {
              var decimal = ("" + item).split(".")[1];
              return decimal ? decimal.length : 0;
            });
            return Math.max.apply(null, precisions);
          },
          runwayStyle: function runwayStyle() {
            return this.vertical ? { height: this.height } : {};
          },
          barStyle: function barStyle() {
            return this.vertical ? {
              height: this.barSize,
              bottom: this.barStart
            } : {
              width: this.barSize,
              left: this.barStart
            };
          },
          sliderDisabled: function sliderDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
          }
        },
        mounted: function mounted2() {
          var valuetext = void 0;
          if (this.range) {
            if (Array.isArray(this.value)) {
              this.firstValue = Math.max(this.min, this.value[0]);
              this.secondValue = Math.min(this.max, this.value[1]);
            } else {
              this.firstValue = this.min;
              this.secondValue = this.max;
            }
            this.oldValue = [this.firstValue, this.secondValue];
            valuetext = this.firstValue + "-" + this.secondValue;
          } else {
            if (typeof this.value !== "number" || isNaN(this.value)) {
              this.firstValue = this.min;
            } else {
              this.firstValue = Math.min(this.max, Math.max(this.min, this.value));
            }
            this.oldValue = this.firstValue;
            valuetext = this.firstValue;
          }
          this.$el.setAttribute("aria-valuetext", valuetext);
          this.$el.setAttribute("aria-label", this.label ? this.label : "slider between " + this.min + " and " + this.max);
          this.resetSize();
          window.addEventListener("resize", this.resetSize);
        },
        beforeDestroy: function beforeDestroy2() {
          window.removeEventListener("resize", this.resetSize);
        }
      };
      var packages_slider_src_mainvue_type_script_lang_js_ = slider_src_mainvue_type_script_lang_js_;
      var slider_src_main_component = normalizeComponent2(
        packages_slider_src_mainvue_type_script_lang_js_,
        mainvue_type_template_id_32708644_render,
        mainvue_type_template_id_32708644_staticRenderFns,
        false,
        null,
        null,
        null
      );
      slider_src_main_component.options.__file = "packages/slider/src/main.vue";
      var slider_src_main = slider_src_main_component.exports;
      slider_src_main.install = function(Vue2) {
        Vue2.component(slider_src_main.name, slider_src_main);
      };
      var slider = slider_src_main;
      var loadingvue_type_template_id_eee0a7ac_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "transition",
          {
            attrs: { name: "el-loading-fade" },
            on: { "after-leave": _vm.handleAfterLeave }
          },
          [
            _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.visible,
                    expression: "visible"
                  }
                ],
                staticClass: "el-loading-mask",
                class: [_vm.customClass, { "is-fullscreen": _vm.fullscreen }],
                style: { backgroundColor: _vm.background || "" }
              },
              [
                _c("div", { staticClass: "el-loading-spinner" }, [
                  !_vm.spinner ? _c(
                    "svg",
                    {
                      staticClass: "circular",
                      attrs: { viewBox: "25 25 50 50" }
                    },
                    [
                      _c("circle", {
                        staticClass: "path",
                        attrs: { cx: "50", cy: "50", r: "20", fill: "none" }
                      })
                    ]
                  ) : _c("i", { class: _vm.spinner }),
                  _vm.text ? _c("p", { staticClass: "el-loading-text" }, [
                    _vm._v(_vm._s(_vm.text))
                  ]) : _vm._e()
                ])
              ]
            )
          ]
        );
      };
      var loadingvue_type_template_id_eee0a7ac_staticRenderFns = [];
      loadingvue_type_template_id_eee0a7ac_render._withStripped = true;
      var loadingvue_type_script_lang_js_ = {
        data: function data() {
          return {
            text: null,
            spinner: null,
            background: null,
            fullscreen: true,
            visible: false,
            customClass: ""
          };
        },
        methods: {
          handleAfterLeave: function handleAfterLeave() {
            this.$emit("after-leave");
          },
          setText: function setText(text) {
            this.text = text;
          }
        }
      };
      var src_loadingvue_type_script_lang_js_ = loadingvue_type_script_lang_js_;
      var loading_component = normalizeComponent2(
        src_loadingvue_type_script_lang_js_,
        loadingvue_type_template_id_eee0a7ac_render,
        loadingvue_type_template_id_eee0a7ac_staticRenderFns,
        false,
        null,
        null,
        null
      );
      loading_component.options.__file = "packages/loading/src/loading.vue";
      var loading = loading_component.exports;
      var after_leave_ = __webpack_require__(33);
      var after_leave_default = /* @__PURE__ */ __webpack_require__.n(after_leave_);
      var Mask = external_vue_default.a.extend(loading);
      var loadingDirective = {};
      loadingDirective.install = function(Vue2) {
        if (Vue2.prototype.$isServer)
          return;
        var toggleLoading = function toggleLoading2(el, binding) {
          if (binding.value) {
            Vue2.nextTick(function() {
              if (binding.modifiers.fullscreen) {
                el.originalPosition = Object(dom_["getStyle"])(document.body, "position");
                el.originalOverflow = Object(dom_["getStyle"])(document.body, "overflow");
                el.maskStyle.zIndex = popup_["PopupManager"].nextZIndex();
                Object(dom_["addClass"])(el.mask, "is-fullscreen");
                insertDom(document.body, el, binding);
              } else {
                Object(dom_["removeClass"])(el.mask, "is-fullscreen");
                if (binding.modifiers.body) {
                  el.originalPosition = Object(dom_["getStyle"])(document.body, "position");
                  ["top", "left"].forEach(function(property) {
                    var scroll = property === "top" ? "scrollTop" : "scrollLeft";
                    el.maskStyle[property] = el.getBoundingClientRect()[property] + document.body[scroll] + document.documentElement[scroll] - parseInt(Object(dom_["getStyle"])(document.body, "margin-" + property), 10) + "px";
                  });
                  ["height", "width"].forEach(function(property) {
                    el.maskStyle[property] = el.getBoundingClientRect()[property] + "px";
                  });
                  insertDom(document.body, el, binding);
                } else {
                  el.originalPosition = Object(dom_["getStyle"])(el, "position");
                  insertDom(el, el, binding);
                }
              }
            });
          } else {
            after_leave_default()(el.instance, function(_) {
              if (!el.instance.hiding)
                return;
              el.domVisible = false;
              var target2 = binding.modifiers.fullscreen || binding.modifiers.body ? document.body : el;
              Object(dom_["removeClass"])(target2, "el-loading-parent--relative");
              Object(dom_["removeClass"])(target2, "el-loading-parent--hidden");
              el.instance.hiding = false;
            }, 300, true);
            el.instance.visible = false;
            el.instance.hiding = true;
          }
        };
        var insertDom = function insertDom2(parent, el, binding) {
          if (!el.domVisible && Object(dom_["getStyle"])(el, "display") !== "none" && Object(dom_["getStyle"])(el, "visibility") !== "hidden") {
            Object.keys(el.maskStyle).forEach(function(property) {
              el.mask.style[property] = el.maskStyle[property];
            });
            if (el.originalPosition !== "absolute" && el.originalPosition !== "fixed" && el.originalPosition !== "sticky") {
              Object(dom_["addClass"])(parent, "el-loading-parent--relative");
            }
            if (binding.modifiers.fullscreen && binding.modifiers.lock) {
              Object(dom_["addClass"])(parent, "el-loading-parent--hidden");
            }
            el.domVisible = true;
            parent.appendChild(el.mask);
            Vue2.nextTick(function() {
              if (el.instance.hiding) {
                el.instance.$emit("after-leave");
              } else {
                el.instance.visible = true;
              }
            });
            el.domInserted = true;
          } else if (el.domVisible && el.instance.hiding === true) {
            el.instance.visible = true;
            el.instance.hiding = false;
          }
        };
        Vue2.directive("loading", {
          bind: function bind2(el, binding, vnode) {
            var textExr = el.getAttribute("element-loading-text");
            var spinnerExr = el.getAttribute("element-loading-spinner");
            var backgroundExr = el.getAttribute("element-loading-background");
            var customClassExr = el.getAttribute("element-loading-custom-class");
            var vm = vnode.context;
            var mask = new Mask({
              el: document.createElement("div"),
              data: {
                text: vm && vm[textExr] || textExr,
                spinner: vm && vm[spinnerExr] || spinnerExr,
                background: vm && vm[backgroundExr] || backgroundExr,
                customClass: vm && vm[customClassExr] || customClassExr,
                fullscreen: !!binding.modifiers.fullscreen
              }
            });
            el.instance = mask;
            el.mask = mask.$el;
            el.maskStyle = {};
            binding.value && toggleLoading(el, binding);
          },
          update: function update2(el, binding) {
            el.instance.setText(el.getAttribute("element-loading-text"));
            if (binding.oldValue !== binding.value) {
              toggleLoading(el, binding);
            }
          },
          unbind: function unbind2(el, binding) {
            if (el.domInserted) {
              el.mask && el.mask.parentNode && el.mask.parentNode.removeChild(el.mask);
              toggleLoading(el, { value: false, modifiers: binding.modifiers });
            }
            el.instance && el.instance.$destroy();
          }
        });
      };
      var src_directive = loadingDirective;
      var LoadingConstructor = external_vue_default.a.extend(loading);
      var src_defaults = {
        text: null,
        fullscreen: true,
        body: false,
        lock: false,
        customClass: ""
      };
      var fullscreenLoading = void 0;
      LoadingConstructor.prototype.originalPosition = "";
      LoadingConstructor.prototype.originalOverflow = "";
      LoadingConstructor.prototype.close = function() {
        var _this = this;
        if (this.fullscreen) {
          fullscreenLoading = void 0;
        }
        after_leave_default()(this, function(_) {
          var target2 = _this.fullscreen || _this.body ? document.body : _this.target;
          Object(dom_["removeClass"])(target2, "el-loading-parent--relative");
          Object(dom_["removeClass"])(target2, "el-loading-parent--hidden");
          if (_this.$el && _this.$el.parentNode) {
            _this.$el.parentNode.removeChild(_this.$el);
          }
          _this.$destroy();
        }, 300);
        this.visible = false;
      };
      var src_addStyle = function addStyle(options, parent, instance) {
        var maskStyle = {};
        if (options.fullscreen) {
          instance.originalPosition = Object(dom_["getStyle"])(document.body, "position");
          instance.originalOverflow = Object(dom_["getStyle"])(document.body, "overflow");
          maskStyle.zIndex = popup_["PopupManager"].nextZIndex();
        } else if (options.body) {
          instance.originalPosition = Object(dom_["getStyle"])(document.body, "position");
          ["top", "left"].forEach(function(property) {
            var scroll = property === "top" ? "scrollTop" : "scrollLeft";
            maskStyle[property] = options.target.getBoundingClientRect()[property] + document.body[scroll] + document.documentElement[scroll] + "px";
          });
          ["height", "width"].forEach(function(property) {
            maskStyle[property] = options.target.getBoundingClientRect()[property] + "px";
          });
        } else {
          instance.originalPosition = Object(dom_["getStyle"])(parent, "position");
        }
        Object.keys(maskStyle).forEach(function(property) {
          instance.$el.style[property] = maskStyle[property];
        });
      };
      var src_Loading = function Loading() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        if (external_vue_default.a.prototype.$isServer)
          return;
        options = merge_default()({}, src_defaults, options);
        if (typeof options.target === "string") {
          options.target = document.querySelector(options.target);
        }
        options.target = options.target || document.body;
        if (options.target !== document.body) {
          options.fullscreen = false;
        } else {
          options.body = true;
        }
        if (options.fullscreen && fullscreenLoading) {
          return fullscreenLoading;
        }
        var parent = options.body ? document.body : options.target;
        var instance = new LoadingConstructor({
          el: document.createElement("div"),
          data: options
        });
        src_addStyle(options, parent, instance);
        if (instance.originalPosition !== "absolute" && instance.originalPosition !== "fixed" && instance.originalPosition !== "sticky") {
          Object(dom_["addClass"])(parent, "el-loading-parent--relative");
        }
        if (options.fullscreen && options.lock) {
          Object(dom_["addClass"])(parent, "el-loading-parent--hidden");
        }
        parent.appendChild(instance.$el);
        external_vue_default.a.nextTick(function() {
          instance.visible = true;
        });
        if (options.fullscreen) {
          fullscreenLoading = instance;
        }
        return instance;
      };
      var src = src_Loading;
      var packages_loading = {
        install: function install2(Vue2) {
          Vue2.use(src_directive);
          Vue2.prototype.$loading = src;
        },
        directive: src_directive,
        service: src
      };
      var iconvue_type_template_id_cb3fe7f4_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("i", { class: "el-icon-" + _vm.name });
      };
      var iconvue_type_template_id_cb3fe7f4_staticRenderFns = [];
      iconvue_type_template_id_cb3fe7f4_render._withStripped = true;
      var iconvue_type_script_lang_js_ = {
        name: "ElIcon",
        props: {
          name: String
        }
      };
      var src_iconvue_type_script_lang_js_ = iconvue_type_script_lang_js_;
      var icon_component = normalizeComponent2(
        src_iconvue_type_script_lang_js_,
        iconvue_type_template_id_cb3fe7f4_render,
        iconvue_type_template_id_cb3fe7f4_staticRenderFns,
        false,
        null,
        null,
        null
      );
      icon_component.options.__file = "packages/icon/src/icon.vue";
      var icon = icon_component.exports;
      icon.install = function(Vue2) {
        Vue2.component(icon.name, icon);
      };
      var packages_icon = icon;
      var src_row = {
        name: "ElRow",
        componentName: "ElRow",
        props: {
          tag: {
            type: String,
            default: "div"
          },
          gutter: Number,
          type: String,
          justify: {
            type: String,
            default: "start"
          },
          align: String
        },
        computed: {
          style: function style2() {
            var ret = {};
            if (this.gutter) {
              ret.marginLeft = "-" + this.gutter / 2 + "px";
              ret.marginRight = ret.marginLeft;
            }
            return ret;
          }
        },
        render: function render6(h2) {
          return h2(this.tag, {
            class: ["el-row", this.justify !== "start" ? "is-justify-" + this.justify : "", this.align ? "is-align-" + this.align : "", { "el-row--flex": this.type === "flex" }],
            style: this.style
          }, this.$slots.default);
        }
      };
      src_row.install = function(Vue2) {
        Vue2.component(src_row.name, src_row);
      };
      var packages_row = src_row;
      var col_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var col = {
        name: "ElCol",
        props: {
          span: {
            type: Number,
            default: 24
          },
          tag: {
            type: String,
            default: "div"
          },
          offset: Number,
          pull: Number,
          push: Number,
          xs: [Number, Object],
          sm: [Number, Object],
          md: [Number, Object],
          lg: [Number, Object],
          xl: [Number, Object]
        },
        computed: {
          gutter: function gutter() {
            var parent = this.$parent;
            while (parent && parent.$options.componentName !== "ElRow") {
              parent = parent.$parent;
            }
            return parent ? parent.gutter : 0;
          }
        },
        render: function render6(h2) {
          var _this = this;
          var classList = [];
          var style2 = {};
          if (this.gutter) {
            style2.paddingLeft = this.gutter / 2 + "px";
            style2.paddingRight = style2.paddingLeft;
          }
          ["span", "offset", "pull", "push"].forEach(function(prop) {
            if (_this[prop] || _this[prop] === 0) {
              classList.push(prop !== "span" ? "el-col-" + prop + "-" + _this[prop] : "el-col-" + _this[prop]);
            }
          });
          ["xs", "sm", "md", "lg", "xl"].forEach(function(size) {
            if (typeof _this[size] === "number") {
              classList.push("el-col-" + size + "-" + _this[size]);
            } else if (col_typeof(_this[size]) === "object") {
              var props2 = _this[size];
              Object.keys(props2).forEach(function(prop) {
                classList.push(prop !== "span" ? "el-col-" + size + "-" + prop + "-" + props2[prop] : "el-col-" + size + "-" + props2[prop]);
              });
            }
          });
          return h2(this.tag, {
            class: ["el-col", classList],
            style: style2
          }, this.$slots.default);
        }
      };
      col.install = function(Vue2) {
        Vue2.component(col.name, col);
      };
      var packages_col = col;
      var upload_listvue_type_template_id_173fedf5_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "transition-group",
          {
            class: [
              "el-upload-list",
              "el-upload-list--" + _vm.listType,
              { "is-disabled": _vm.disabled }
            ],
            attrs: { tag: "ul", name: "el-list" }
          },
          _vm._l(_vm.files, function(file) {
            return _c(
              "li",
              {
                key: file.uid,
                class: [
                  "el-upload-list__item",
                  "is-" + file.status,
                  _vm.focusing ? "focusing" : ""
                ],
                attrs: { tabindex: "0" },
                on: {
                  keydown: function($event) {
                    if (!("button" in $event) && _vm._k($event.keyCode, "delete", [8, 46], $event.key, [
                      "Backspace",
                      "Delete",
                      "Del"
                    ])) {
                      return null;
                    }
                    !_vm.disabled && _vm.$emit("remove", file);
                  },
                  focus: function($event) {
                    _vm.focusing = true;
                  },
                  blur: function($event) {
                    _vm.focusing = false;
                  },
                  click: function($event) {
                    _vm.focusing = false;
                  }
                }
              },
              [
                _vm._t(
                  "default",
                  [
                    file.status !== "uploading" && ["picture-card", "picture"].indexOf(_vm.listType) > -1 ? _c("img", {
                      staticClass: "el-upload-list__item-thumbnail",
                      attrs: { src: file.url, alt: "" }
                    }) : _vm._e(),
                    _c(
                      "a",
                      {
                        staticClass: "el-upload-list__item-name",
                        on: {
                          click: function($event) {
                            _vm.handleClick(file);
                          }
                        }
                      },
                      [
                        _c("i", { staticClass: "el-icon-document" }),
                        _vm._v(_vm._s(file.name) + "\n      ")
                      ]
                    ),
                    _c(
                      "label",
                      { staticClass: "el-upload-list__item-status-label" },
                      [
                        _c("i", {
                          class: {
                            "el-icon-upload-success": true,
                            "el-icon-circle-check": _vm.listType === "text",
                            "el-icon-check": ["picture-card", "picture"].indexOf(_vm.listType) > -1
                          }
                        })
                      ]
                    ),
                    !_vm.disabled ? _c("i", {
                      staticClass: "el-icon-close",
                      on: {
                        click: function($event) {
                          _vm.$emit("remove", file);
                        }
                      }
                    }) : _vm._e(),
                    !_vm.disabled ? _c("i", { staticClass: "el-icon-close-tip" }, [
                      _vm._v(_vm._s(_vm.t("el.upload.deleteTip")))
                    ]) : _vm._e(),
                    file.status === "uploading" ? _c("el-progress", {
                      attrs: {
                        type: _vm.listType === "picture-card" ? "circle" : "line",
                        "stroke-width": _vm.listType === "picture-card" ? 6 : 2,
                        percentage: _vm.parsePercentage(file.percentage)
                      }
                    }) : _vm._e(),
                    _vm.listType === "picture-card" ? _c("span", { staticClass: "el-upload-list__item-actions" }, [
                      _vm.handlePreview && _vm.listType === "picture-card" ? _c(
                        "span",
                        {
                          staticClass: "el-upload-list__item-preview",
                          on: {
                            click: function($event) {
                              _vm.handlePreview(file);
                            }
                          }
                        },
                        [_c("i", { staticClass: "el-icon-zoom-in" })]
                      ) : _vm._e(),
                      !_vm.disabled ? _c(
                        "span",
                        {
                          staticClass: "el-upload-list__item-delete",
                          on: {
                            click: function($event) {
                              _vm.$emit("remove", file);
                            }
                          }
                        },
                        [_c("i", { staticClass: "el-icon-delete" })]
                      ) : _vm._e()
                    ]) : _vm._e()
                  ],
                  { file }
                )
              ],
              2
            );
          }),
          0
        );
      };
      var upload_listvue_type_template_id_173fedf5_staticRenderFns = [];
      upload_listvue_type_template_id_173fedf5_render._withStripped = true;
      var progress_ = __webpack_require__(34);
      var progress_default = /* @__PURE__ */ __webpack_require__.n(progress_);
      var upload_listvue_type_script_lang_js_ = {
        name: "ElUploadList",
        mixins: [locale_default.a],
        data: function data() {
          return {
            focusing: false
          };
        },
        components: { ElProgress: progress_default.a },
        props: {
          files: {
            type: Array,
            default: function _default2() {
              return [];
            }
          },
          disabled: {
            type: Boolean,
            default: false
          },
          handlePreview: Function,
          listType: String
        },
        methods: {
          parsePercentage: function parsePercentage(val) {
            return parseInt(val, 10);
          },
          handleClick: function handleClick(file) {
            this.handlePreview && this.handlePreview(file);
          }
        }
      };
      var src_upload_listvue_type_script_lang_js_ = upload_listvue_type_script_lang_js_;
      var upload_list_component = normalizeComponent2(
        src_upload_listvue_type_script_lang_js_,
        upload_listvue_type_template_id_173fedf5_render,
        upload_listvue_type_template_id_173fedf5_staticRenderFns,
        false,
        null,
        null,
        null
      );
      upload_list_component.options.__file = "packages/upload/src/upload-list.vue";
      var upload_list = upload_list_component.exports;
      var external_babel_helper_vue_jsx_merge_props_ = __webpack_require__(24);
      var external_babel_helper_vue_jsx_merge_props_default = /* @__PURE__ */ __webpack_require__.n(external_babel_helper_vue_jsx_merge_props_);
      function getError(action, option2, xhr) {
        var msg = void 0;
        if (xhr.response) {
          msg = "" + (xhr.response.error || xhr.response);
        } else if (xhr.responseText) {
          msg = "" + xhr.responseText;
        } else {
          msg = "fail to post " + action + " " + xhr.status;
        }
        var err = new Error(msg);
        err.status = xhr.status;
        err.method = "post";
        err.url = action;
        return err;
      }
      function getBody(xhr) {
        var text = xhr.responseText || xhr.response;
        if (!text) {
          return text;
        }
        try {
          return JSON.parse(text);
        } catch (e) {
          return text;
        }
      }
      function upload(option2) {
        if (typeof XMLHttpRequest === "undefined") {
          return;
        }
        var xhr = new XMLHttpRequest();
        var action = option2.action;
        if (xhr.upload) {
          xhr.upload.onprogress = function progress3(e) {
            if (e.total > 0) {
              e.percent = e.loaded / e.total * 100;
            }
            option2.onProgress(e);
          };
        }
        var formData = new FormData();
        if (option2.data) {
          Object.keys(option2.data).forEach(function(key) {
            formData.append(key, option2.data[key]);
          });
        }
        formData.append(option2.filename, option2.file, option2.file.name);
        xhr.onerror = function error(e) {
          option2.onError(e);
        };
        xhr.onload = function onload() {
          if (xhr.status < 200 || xhr.status >= 300) {
            return option2.onError(getError(action, option2, xhr));
          }
          option2.onSuccess(getBody(xhr));
        };
        xhr.open("post", action, true);
        if (option2.withCredentials && "withCredentials" in xhr) {
          xhr.withCredentials = true;
        }
        var headers = option2.headers || {};
        for (var item in headers) {
          if (headers.hasOwnProperty(item) && headers[item] !== null) {
            xhr.setRequestHeader(item, headers[item]);
          }
        }
        xhr.send(formData);
        return xhr;
      }
      var upload_draggervue_type_template_id_7ebbf219_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-upload-dragger",
            class: {
              "is-dragover": _vm.dragover
            },
            on: {
              drop: function($event) {
                $event.preventDefault();
                return _vm.onDrop($event);
              },
              dragover: function($event) {
                $event.preventDefault();
                return _vm.onDragover($event);
              },
              dragleave: function($event) {
                $event.preventDefault();
                _vm.dragover = false;
              }
            }
          },
          [_vm._t("default")],
          2
        );
      };
      var upload_draggervue_type_template_id_7ebbf219_staticRenderFns = [];
      upload_draggervue_type_template_id_7ebbf219_render._withStripped = true;
      var upload_draggervue_type_script_lang_js_ = {
        name: "ElUploadDrag",
        props: {
          disabled: Boolean
        },
        inject: {
          uploader: {
            default: ""
          }
        },
        data: function data() {
          return {
            dragover: false
          };
        },
        methods: {
          onDragover: function onDragover() {
            if (!this.disabled) {
              this.dragover = true;
            }
          },
          onDrop: function onDrop(e) {
            if (this.disabled || !this.uploader)
              return;
            var accept = this.uploader.accept;
            this.dragover = false;
            if (!accept) {
              this.$emit("file", e.dataTransfer.files);
              return;
            }
            this.$emit("file", [].slice.call(e.dataTransfer.files).filter(function(file) {
              var type2 = file.type, name = file.name;
              var extension = name.indexOf(".") > -1 ? "." + name.split(".").pop() : "";
              var baseType = type2.replace(/\/.*$/, "");
              return accept.split(",").map(function(type3) {
                return type3.trim();
              }).filter(function(type3) {
                return type3;
              }).some(function(acceptedType) {
                if (/\..+$/.test(acceptedType)) {
                  return extension === acceptedType;
                }
                if (/\/\*$/.test(acceptedType)) {
                  return baseType === acceptedType.replace(/\/\*$/, "");
                }
                if (/^[^\/]+\/[^\/]+$/.test(acceptedType)) {
                  return type2 === acceptedType;
                }
                return false;
              });
            }));
          }
        }
      };
      var src_upload_draggervue_type_script_lang_js_ = upload_draggervue_type_script_lang_js_;
      var upload_dragger_component = normalizeComponent2(
        src_upload_draggervue_type_script_lang_js_,
        upload_draggervue_type_template_id_7ebbf219_render,
        upload_draggervue_type_template_id_7ebbf219_staticRenderFns,
        false,
        null,
        null,
        null
      );
      upload_dragger_component.options.__file = "packages/upload/src/upload-dragger.vue";
      var upload_dragger = upload_dragger_component.exports;
      var uploadvue_type_script_lang_js_ = {
        inject: ["uploader"],
        components: {
          UploadDragger: upload_dragger
        },
        props: {
          type: String,
          action: {
            type: String,
            required: true
          },
          name: {
            type: String,
            default: "file"
          },
          data: Object,
          headers: Object,
          withCredentials: Boolean,
          multiple: Boolean,
          accept: String,
          onStart: Function,
          onProgress: Function,
          onSuccess: Function,
          onError: Function,
          beforeUpload: Function,
          drag: Boolean,
          onPreview: {
            type: Function,
            default: function _default2() {
            }
          },
          onRemove: {
            type: Function,
            default: function _default2() {
            }
          },
          fileList: Array,
          autoUpload: Boolean,
          listType: String,
          httpRequest: {
            type: Function,
            default: upload
          },
          disabled: Boolean,
          limit: Number,
          onExceed: Function
        },
        data: function data() {
          return {
            mouseover: false,
            reqs: {}
          };
        },
        methods: {
          isImage: function isImage(str) {
            return str.indexOf("image") !== -1;
          },
          handleChange: function handleChange(ev) {
            var files = ev.target.files;
            if (!files)
              return;
            this.uploadFiles(files);
          },
          uploadFiles: function uploadFiles(files) {
            var _this = this;
            if (this.limit && this.fileList.length + files.length > this.limit) {
              this.onExceed && this.onExceed(files, this.fileList);
              return;
            }
            var postFiles = Array.prototype.slice.call(files);
            if (!this.multiple) {
              postFiles = postFiles.slice(0, 1);
            }
            if (postFiles.length === 0) {
              return;
            }
            postFiles.forEach(function(rawFile) {
              _this.onStart(rawFile);
              if (_this.autoUpload)
                _this.upload(rawFile);
            });
          },
          upload: function upload2(rawFile) {
            var _this2 = this;
            this.$refs.input.value = null;
            if (!this.beforeUpload) {
              return this.post(rawFile);
            }
            var before = this.beforeUpload(rawFile);
            if (before && before.then) {
              before.then(function(processedFile) {
                var fileType = Object.prototype.toString.call(processedFile);
                if (fileType === "[object File]" || fileType === "[object Blob]") {
                  if (fileType === "[object Blob]") {
                    processedFile = new File([processedFile], rawFile.name, {
                      type: rawFile.type
                    });
                  }
                  for (var p in rawFile) {
                    if (rawFile.hasOwnProperty(p)) {
                      processedFile[p] = rawFile[p];
                    }
                  }
                  _this2.post(processedFile);
                } else {
                  _this2.post(rawFile);
                }
              }, function() {
                _this2.onRemove(null, rawFile);
              });
            } else if (before !== false) {
              this.post(rawFile);
            } else {
              this.onRemove(null, rawFile);
            }
          },
          abort: function abort(file) {
            var reqs = this.reqs;
            if (file) {
              var uid3 = file;
              if (file.uid)
                uid3 = file.uid;
              if (reqs[uid3]) {
                reqs[uid3].abort();
              }
            } else {
              Object.keys(reqs).forEach(function(uid4) {
                if (reqs[uid4])
                  reqs[uid4].abort();
                delete reqs[uid4];
              });
            }
          },
          post: function post(rawFile) {
            var _this3 = this;
            var uid3 = rawFile.uid;
            var options = {
              headers: this.headers,
              withCredentials: this.withCredentials,
              file: rawFile,
              data: this.data,
              filename: this.name,
              action: this.action,
              onProgress: function onProgress(e) {
                _this3.onProgress(e, rawFile);
              },
              onSuccess: function onSuccess(res) {
                _this3.onSuccess(res, rawFile);
                delete _this3.reqs[uid3];
              },
              onError: function onError(err) {
                _this3.onError(err, rawFile);
                delete _this3.reqs[uid3];
              }
            };
            var req = this.httpRequest(options);
            this.reqs[uid3] = req;
            if (req && req.then) {
              req.then(options.onSuccess, options.onError);
            }
          },
          handleClick: function handleClick() {
            if (!this.disabled) {
              this.$refs.input.value = null;
              this.$refs.input.click();
            }
          },
          handleKeydown: function handleKeydown(e) {
            if (e.target !== e.currentTarget)
              return;
            if (e.keyCode === 13 || e.keyCode === 32) {
              this.handleClick();
            }
          }
        },
        render: function render6(h2) {
          var handleClick = this.handleClick, drag = this.drag, name = this.name, handleChange = this.handleChange, multiple = this.multiple, accept = this.accept, listType = this.listType, uploadFiles = this.uploadFiles, disabled = this.disabled, handleKeydown = this.handleKeydown;
          var data = {
            class: {
              "el-upload": true
            },
            on: {
              click: handleClick,
              keydown: handleKeydown
            }
          };
          data.class["el-upload--" + listType] = true;
          return h2(
            "div",
            external_babel_helper_vue_jsx_merge_props_default()([data, {
              attrs: { tabindex: "0" }
            }]),
            [drag ? h2(
              "upload-dragger",
              {
                attrs: { disabled },
                on: {
                  "file": uploadFiles
                }
              },
              [this.$slots.default]
            ) : this.$slots.default, h2("input", {
              "class": "el-upload__input",
              attrs: { type: "file", name, multiple, accept },
              ref: "input",
              on: {
                "change": handleChange
              }
            })]
          );
        }
      };
      var src_uploadvue_type_script_lang_js_ = uploadvue_type_script_lang_js_;
      var upload_render, upload_staticRenderFns;
      var upload_component = normalizeComponent2(
        src_uploadvue_type_script_lang_js_,
        upload_render,
        upload_staticRenderFns,
        false,
        null,
        null,
        null
      );
      upload_component.options.__file = "packages/upload/src/upload.vue";
      var src_upload = upload_component.exports;
      function srcvue_type_script_lang_js_noop() {
      }
      var srcvue_type_script_lang_js_ = {
        name: "ElUpload",
        mixins: [migrating_default.a],
        components: {
          ElProgress: progress_default.a,
          UploadList: upload_list,
          Upload: src_upload
        },
        provide: function provide2() {
          return {
            uploader: this
          };
        },
        inject: {
          elForm: {
            default: ""
          }
        },
        props: {
          action: {
            type: String,
            required: true
          },
          headers: {
            type: Object,
            default: function _default2() {
              return {};
            }
          },
          data: Object,
          multiple: Boolean,
          name: {
            type: String,
            default: "file"
          },
          drag: Boolean,
          dragger: Boolean,
          withCredentials: Boolean,
          showFileList: {
            type: Boolean,
            default: true
          },
          accept: String,
          type: {
            type: String,
            default: "select"
          },
          beforeUpload: Function,
          beforeRemove: Function,
          onRemove: {
            type: Function,
            default: srcvue_type_script_lang_js_noop
          },
          onChange: {
            type: Function,
            default: srcvue_type_script_lang_js_noop
          },
          onPreview: {
            type: Function
          },
          onSuccess: {
            type: Function,
            default: srcvue_type_script_lang_js_noop
          },
          onProgress: {
            type: Function,
            default: srcvue_type_script_lang_js_noop
          },
          onError: {
            type: Function,
            default: srcvue_type_script_lang_js_noop
          },
          fileList: {
            type: Array,
            default: function _default2() {
              return [];
            }
          },
          autoUpload: {
            type: Boolean,
            default: true
          },
          listType: {
            type: String,
            default: "text"
            // text,picture,picture-card
          },
          httpRequest: Function,
          disabled: Boolean,
          limit: Number,
          onExceed: {
            type: Function,
            default: srcvue_type_script_lang_js_noop
          }
        },
        data: function data() {
          return {
            uploadFiles: [],
            dragOver: false,
            draging: false,
            tempIndex: 1
          };
        },
        computed: {
          uploadDisabled: function uploadDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
          }
        },
        watch: {
          listType: function listType(type2) {
            if (type2 === "picture-card" || type2 === "picture") {
              this.uploadFiles = this.uploadFiles.map(function(file) {
                if (!file.url && file.raw) {
                  try {
                    file.url = URL.createObjectURL(file.raw);
                  } catch (err) {
                    console.error("[Element Error][Upload]", err);
                  }
                }
                return file;
              });
            }
          },
          fileList: {
            immediate: true,
            handler: function handler(fileList) {
              var _this = this;
              this.uploadFiles = fileList.map(function(item) {
                item.uid = item.uid || Date.now() + _this.tempIndex++;
                item.status = item.status || "success";
                return item;
              });
            }
          }
        },
        methods: {
          handleStart: function handleStart(rawFile) {
            rawFile.uid = Date.now() + this.tempIndex++;
            var file = {
              status: "ready",
              name: rawFile.name,
              size: rawFile.size,
              percentage: 0,
              uid: rawFile.uid,
              raw: rawFile
            };
            if (this.listType === "picture-card" || this.listType === "picture") {
              try {
                file.url = URL.createObjectURL(rawFile);
              } catch (err) {
                console.error("[Element Error][Upload]", err);
                return;
              }
            }
            this.uploadFiles.push(file);
            this.onChange(file, this.uploadFiles);
          },
          handleProgress: function handleProgress(ev, rawFile) {
            var file = this.getFile(rawFile);
            this.onProgress(ev, file, this.uploadFiles);
            file.status = "uploading";
            file.percentage = ev.percent || 0;
          },
          handleSuccess: function handleSuccess(res, rawFile) {
            var file = this.getFile(rawFile);
            if (file) {
              file.status = "success";
              file.response = res;
              this.onSuccess(res, file, this.uploadFiles);
              this.onChange(file, this.uploadFiles);
            }
          },
          handleError: function handleError2(err, rawFile) {
            var file = this.getFile(rawFile);
            var fileList = this.uploadFiles;
            file.status = "fail";
            fileList.splice(fileList.indexOf(file), 1);
            this.onError(err, file, this.uploadFiles);
            this.onChange(file, this.uploadFiles);
          },
          handleRemove: function handleRemove(file, raw) {
            var _this2 = this;
            if (raw) {
              file = this.getFile(raw);
            }
            var doRemove = function doRemove2() {
              _this2.abort(file);
              var fileList = _this2.uploadFiles;
              fileList.splice(fileList.indexOf(file), 1);
              _this2.onRemove(file, fileList);
            };
            if (!this.beforeRemove) {
              doRemove();
            } else if (typeof this.beforeRemove === "function") {
              var before = this.beforeRemove(file, this.uploadFiles);
              if (before && before.then) {
                before.then(function() {
                  doRemove();
                }, srcvue_type_script_lang_js_noop);
              } else if (before !== false) {
                doRemove();
              }
            }
          },
          getFile: function getFile(rawFile) {
            var fileList = this.uploadFiles;
            var target2 = void 0;
            fileList.every(function(item) {
              target2 = rawFile.uid === item.uid ? item : null;
              return !target2;
            });
            return target2;
          },
          abort: function abort(file) {
            this.$refs["upload-inner"].abort(file);
          },
          clearFiles: function clearFiles() {
            this.uploadFiles = [];
          },
          submit: function submit() {
            var _this3 = this;
            this.uploadFiles.filter(function(file) {
              return file.status === "ready";
            }).forEach(function(file) {
              _this3.$refs["upload-inner"].upload(file.raw);
            });
          },
          getMigratingConfig: function getMigratingConfig() {
            return {
              props: {
                "default-file-list": "default-file-list is renamed to file-list.",
                "show-upload-list": "show-upload-list is renamed to show-file-list.",
                "thumbnail-mode": "thumbnail-mode has been deprecated, you can implement the same effect according to this case: http://element.eleme.io/#/zh-CN/component/upload#yong-hu-tou-xiang-shang-chuan"
              }
            };
          }
        },
        beforeDestroy: function beforeDestroy2() {
          this.uploadFiles.forEach(function(file) {
            if (file.url && file.url.indexOf("blob:") === 0) {
              URL.revokeObjectURL(file.url);
            }
          });
        },
        render: function render6(h2) {
          var _this4 = this;
          var uploadList = void 0;
          if (this.showFileList) {
            uploadList = h2(
              upload_list,
              {
                attrs: {
                  disabled: this.uploadDisabled,
                  listType: this.listType,
                  files: this.uploadFiles,
                  handlePreview: this.onPreview
                },
                on: {
                  "remove": this.handleRemove
                }
              },
              [function(props2) {
                if (_this4.$scopedSlots.file) {
                  return _this4.$scopedSlots.file({
                    file: props2.file
                  });
                }
              }]
            );
          }
          var uploadData = {
            props: {
              type: this.type,
              drag: this.drag,
              action: this.action,
              multiple: this.multiple,
              "before-upload": this.beforeUpload,
              "with-credentials": this.withCredentials,
              headers: this.headers,
              name: this.name,
              data: this.data,
              accept: this.accept,
              fileList: this.uploadFiles,
              autoUpload: this.autoUpload,
              listType: this.listType,
              disabled: this.uploadDisabled,
              limit: this.limit,
              "on-exceed": this.onExceed,
              "on-start": this.handleStart,
              "on-progress": this.handleProgress,
              "on-success": this.handleSuccess,
              "on-error": this.handleError,
              "on-preview": this.onPreview,
              "on-remove": this.handleRemove,
              "http-request": this.httpRequest
            },
            ref: "upload-inner"
          };
          var trigger2 = this.$slots.trigger || this.$slots.default;
          var uploadComponent = h2(
            "upload",
            uploadData,
            [trigger2]
          );
          return h2("div", [this.listType === "picture-card" ? uploadList : "", this.$slots.trigger ? [uploadComponent, this.$slots.default] : uploadComponent, this.$slots.tip, this.listType !== "picture-card" ? uploadList : ""]);
        }
      };
      var upload_srcvue_type_script_lang_js_ = srcvue_type_script_lang_js_;
      var src_render, src_staticRenderFns;
      var upload_src_component = normalizeComponent2(
        upload_srcvue_type_script_lang_js_,
        src_render,
        src_staticRenderFns,
        false,
        null,
        null,
        null
      );
      upload_src_component.options.__file = "packages/upload/src/index.vue";
      var upload_src = upload_src_component.exports;
      upload_src.install = function(Vue2) {
        Vue2.component(upload_src.name, upload_src);
      };
      var packages_upload = upload_src;
      var progressvue_type_template_id_229ee406_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-progress",
            class: [
              "el-progress--" + _vm.type,
              _vm.status ? "is-" + _vm.status : "",
              {
                "el-progress--without-text": !_vm.showText,
                "el-progress--text-inside": _vm.textInside
              }
            ],
            attrs: {
              role: "progressbar",
              "aria-valuenow": _vm.percentage,
              "aria-valuemin": "0",
              "aria-valuemax": "100"
            }
          },
          [
            _vm.type === "line" ? _c("div", { staticClass: "el-progress-bar" }, [
              _c(
                "div",
                {
                  staticClass: "el-progress-bar__outer",
                  style: {
                    height: _vm.strokeWidth + "px",
                    backgroundColor: _vm.defineBackColor
                  }
                },
                [
                  _c(
                    "div",
                    {
                      staticClass: "el-progress-bar__inner",
                      style: _vm.barStyle
                    },
                    [
                      _vm.showText && _vm.textInside ? _c(
                        "div",
                        {
                          staticClass: "el-progress-bar__innerText",
                          style: { color: _vm.textColor }
                        },
                        [_vm._v(_vm._s(_vm.content))]
                      ) : _vm._e()
                    ]
                  )
                ]
              )
            ]) : _c(
              "div",
              {
                staticClass: "el-progress-circle",
                style: { height: _vm.width + "px", width: _vm.width + "px" }
              },
              [
                _c("svg", { attrs: { viewBox: "0 0 100 100" } }, [
                  _c("path", {
                    staticClass: "el-progress-circle__track",
                    style: _vm.trailPathStyle,
                    attrs: {
                      d: _vm.trackPath,
                      stroke: _vm.defineBackColor,
                      "stroke-width": _vm.relativeStrokeWidth,
                      fill: "none"
                    }
                  }),
                  _c("path", {
                    staticClass: "el-progress-circle__path",
                    style: _vm.circlePathStyle,
                    attrs: {
                      d: _vm.trackPath,
                      stroke: _vm.stroke,
                      fill: "none",
                      "stroke-linecap": _vm.strokeLinecap,
                      "stroke-width": _vm.percentage ? _vm.relativeStrokeWidth : 0
                    }
                  })
                ])
              ]
            ),
            _vm.showText && !_vm.textInside ? _c(
              "div",
              {
                staticClass: "el-progress__text",
                style: {
                  fontSize: _vm.progressTextSize + "px",
                  color: _vm.textColor
                }
              },
              [
                !_vm.status ? [_vm._v(_vm._s(_vm.content))] : _c("i", { class: _vm.iconClass })
              ],
              2
            ) : _vm._e()
          ]
        );
      };
      var progressvue_type_template_id_229ee406_staticRenderFns = [];
      progressvue_type_template_id_229ee406_render._withStripped = true;
      var progressvue_type_script_lang_js_ = {
        name: "ElProgress",
        props: {
          type: {
            type: String,
            default: "line",
            validator: function validator(val) {
              return ["line", "circle", "dashboard"].indexOf(val) > -1;
            }
          },
          percentage: {
            type: Number,
            default: 0,
            required: true,
            validator: function validator(val) {
              return val >= 0 && val <= 100;
            }
          },
          status: {
            type: String,
            validator: function validator(val) {
              return ["success", "exception", "warning"].indexOf(val) > -1;
            }
          },
          strokeWidth: {
            type: Number,
            default: 6
          },
          strokeLinecap: {
            type: String,
            default: "round"
          },
          textInside: {
            type: Boolean,
            default: false
          },
          width: {
            type: Number,
            default: 126
          },
          showText: {
            type: Boolean,
            default: true
          },
          color: {
            type: [String, Array, Function],
            default: ""
          },
          defineBackColor: {
            type: [String, Array, Function],
            default: "#ebeef5"
          },
          textColor: {
            type: [String, Array, Function],
            default: "#606266"
          },
          format: Function
        },
        computed: {
          barStyle: function barStyle() {
            var style2 = {};
            style2.width = this.percentage + "%";
            style2.backgroundColor = this.getCurrentColor(this.percentage);
            return style2;
          },
          relativeStrokeWidth: function relativeStrokeWidth() {
            return (this.strokeWidth / this.width * 100).toFixed(1);
          },
          radius: function radius() {
            if (this.type === "circle" || this.type === "dashboard") {
              return parseInt(50 - parseFloat(this.relativeStrokeWidth) / 2, 10);
            } else {
              return 0;
            }
          },
          trackPath: function trackPath() {
            var radius = this.radius;
            var isDashboard = this.type === "dashboard";
            return "\n        M 50 50\n        m 0 " + (isDashboard ? "" : "-") + radius + "\n        a " + radius + " " + radius + " 0 1 1 0 " + (isDashboard ? "-" : "") + radius * 2 + "\n        a " + radius + " " + radius + " 0 1 1 0 " + (isDashboard ? "" : "-") + radius * 2 + "\n        ";
          },
          perimeter: function perimeter() {
            return 2 * Math.PI * this.radius;
          },
          rate: function rate() {
            return this.type === "dashboard" ? 0.75 : 1;
          },
          strokeDashoffset: function strokeDashoffset() {
            var offset = -1 * this.perimeter * (1 - this.rate) / 2;
            return offset + "px";
          },
          trailPathStyle: function trailPathStyle() {
            return {
              strokeDasharray: this.perimeter * this.rate + "px, " + this.perimeter + "px",
              strokeDashoffset: this.strokeDashoffset
            };
          },
          circlePathStyle: function circlePathStyle() {
            return {
              strokeDasharray: this.perimeter * this.rate * (this.percentage / 100) + "px, " + this.perimeter + "px",
              strokeDashoffset: this.strokeDashoffset,
              transition: "stroke-dasharray 0.6s ease 0s, stroke 0.6s ease"
            };
          },
          stroke: function stroke() {
            var ret = void 0;
            if (this.color) {
              ret = this.getCurrentColor(this.percentage);
            } else {
              switch (this.status) {
                case "success":
                  ret = "#13ce66";
                  break;
                case "exception":
                  ret = "#ff4949";
                  break;
                case "warning":
                  ret = "#e6a23c";
                  break;
                default:
                  ret = "#20a0ff";
              }
            }
            return ret;
          },
          iconClass: function iconClass() {
            if (this.status === "warning") {
              return "el-icon-warning";
            }
            if (this.type === "line") {
              return this.status === "success" ? "el-icon-circle-check" : "el-icon-circle-close";
            } else {
              return this.status === "success" ? "el-icon-check" : "el-icon-close";
            }
          },
          progressTextSize: function progressTextSize() {
            return this.type === "line" ? 12 + this.strokeWidth * 0.4 : this.width * 0.111111 + 2;
          },
          content: function content() {
            if (typeof this.format === "function") {
              return this.format(this.percentage) || "";
            } else {
              return this.percentage + "%";
            }
          }
        },
        methods: {
          getCurrentColor: function getCurrentColor(percentage) {
            if (typeof this.color === "function") {
              return this.color(percentage);
            } else if (typeof this.color === "string") {
              return this.color;
            } else {
              return this.getLevelColor(percentage);
            }
          },
          getLevelColor: function getLevelColor(percentage) {
            var colorArray = this.getColorArray().sort(function(a, b) {
              return a.percentage - b.percentage;
            });
            for (var i = 0; i < colorArray.length; i++) {
              if (colorArray[i].percentage > percentage) {
                return colorArray[i].color;
              }
            }
            return colorArray[colorArray.length - 1].color;
          },
          getColorArray: function getColorArray() {
            var color = this.color;
            var span = 100 / color.length;
            return color.map(function(seriesColor, index2) {
              if (typeof seriesColor === "string") {
                return {
                  color: seriesColor,
                  percentage: (index2 + 1) * span
                };
              }
              return seriesColor;
            });
          }
        }
      };
      var src_progressvue_type_script_lang_js_ = progressvue_type_script_lang_js_;
      var progress_component = normalizeComponent2(
        src_progressvue_type_script_lang_js_,
        progressvue_type_template_id_229ee406_render,
        progressvue_type_template_id_229ee406_staticRenderFns,
        false,
        null,
        null,
        null
      );
      progress_component.options.__file = "packages/progress/src/progress.vue";
      var progress2 = progress_component.exports;
      progress2.install = function(Vue2) {
        Vue2.component(progress2.name, progress2);
      };
      var packages_progress = progress2;
      var spinnervue_type_template_id_697b8538_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("span", { staticClass: "el-spinner" }, [
          _c(
            "svg",
            {
              staticClass: "el-spinner-inner",
              style: { width: _vm.radius / 2 + "px", height: _vm.radius / 2 + "px" },
              attrs: { viewBox: "0 0 50 50" }
            },
            [
              _c("circle", {
                staticClass: "path",
                attrs: {
                  cx: "25",
                  cy: "25",
                  r: "20",
                  fill: "none",
                  stroke: _vm.strokeColor,
                  "stroke-width": _vm.strokeWidth
                }
              })
            ]
          )
        ]);
      };
      var spinnervue_type_template_id_697b8538_staticRenderFns = [];
      spinnervue_type_template_id_697b8538_render._withStripped = true;
      var spinnervue_type_script_lang_js_ = {
        name: "ElSpinner",
        props: {
          type: String,
          radius: {
            type: Number,
            default: 100
          },
          strokeWidth: {
            type: Number,
            default: 5
          },
          strokeColor: {
            type: String,
            default: "#efefef"
          }
        }
      };
      var src_spinnervue_type_script_lang_js_ = spinnervue_type_script_lang_js_;
      var spinner_component = normalizeComponent2(
        src_spinnervue_type_script_lang_js_,
        spinnervue_type_template_id_697b8538_render,
        spinnervue_type_template_id_697b8538_staticRenderFns,
        false,
        null,
        null,
        null
      );
      spinner_component.options.__file = "packages/spinner/src/spinner.vue";
      var spinner = spinner_component.exports;
      spinner.install = function(Vue2) {
        Vue2.component(spinner.name, spinner);
      };
      var packages_spinner = spinner;
      var mainvue_type_template_id_455b9f60_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "transition",
          {
            attrs: { name: "el-message-fade" },
            on: { "after-leave": _vm.handleAfterLeave }
          },
          [
            _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.visible,
                    expression: "visible"
                  }
                ],
                class: [
                  "el-message",
                  _vm.type && !_vm.iconClass ? "el-message--" + _vm.type : "",
                  _vm.center ? "is-center" : "",
                  _vm.showClose ? "is-closable" : "",
                  _vm.customClass
                ],
                style: _vm.positionStyle,
                attrs: { role: "alert" },
                on: { mouseenter: _vm.clearTimer, mouseleave: _vm.startTimer }
              },
              [
                _vm.iconClass ? _c("i", { class: _vm.iconClass }) : _c("i", { class: _vm.typeClass }),
                _vm._t("default", [
                  !_vm.dangerouslyUseHTMLString ? _c("p", { staticClass: "el-message__content" }, [
                    _vm._v(_vm._s(_vm.message))
                  ]) : _c("p", {
                    staticClass: "el-message__content",
                    domProps: { innerHTML: _vm._s(_vm.message) }
                  })
                ]),
                _vm.showClose ? _c("i", {
                  staticClass: "el-message__closeBtn el-icon-close",
                  on: { click: _vm.close }
                }) : _vm._e()
              ],
              2
            )
          ]
        );
      };
      var mainvue_type_template_id_455b9f60_staticRenderFns = [];
      mainvue_type_template_id_455b9f60_render._withStripped = true;
      var src_mainvue_type_script_lang_js_typeMap = {
        success: "success",
        info: "info",
        warning: "warning",
        error: "error"
      };
      var message_src_mainvue_type_script_lang_js_ = {
        data: function data() {
          return {
            visible: false,
            message: "",
            duration: 3e3,
            type: "info",
            iconClass: "",
            customClass: "",
            onClose: null,
            showClose: false,
            closed: false,
            verticalOffset: 20,
            timer: null,
            dangerouslyUseHTMLString: false,
            center: false
          };
        },
        computed: {
          typeClass: function typeClass() {
            return this.type && !this.iconClass ? "el-message__icon el-icon-" + src_mainvue_type_script_lang_js_typeMap[this.type] : "";
          },
          positionStyle: function positionStyle() {
            return {
              "top": this.verticalOffset + "px"
            };
          }
        },
        watch: {
          closed: function closed(newVal) {
            if (newVal) {
              this.visible = false;
            }
          }
        },
        methods: {
          handleAfterLeave: function handleAfterLeave() {
            this.$destroy(true);
            this.$el.parentNode.removeChild(this.$el);
          },
          close: function close() {
            this.closed = true;
            if (typeof this.onClose === "function") {
              this.onClose(this);
            }
          },
          clearTimer: function clearTimer() {
            clearTimeout(this.timer);
          },
          startTimer: function startTimer() {
            var _this = this;
            if (this.duration > 0) {
              this.timer = setTimeout(function() {
                if (!_this.closed) {
                  _this.close();
                }
              }, this.duration);
            }
          },
          keydown: function keydown(e) {
            if (e.keyCode === 27) {
              if (!this.closed) {
                this.close();
              }
            }
          }
        },
        mounted: function mounted2() {
          this.startTimer();
          document.addEventListener("keydown", this.keydown);
        },
        beforeDestroy: function beforeDestroy2() {
          document.removeEventListener("keydown", this.keydown);
        }
      };
      var packages_message_src_mainvue_type_script_lang_js_ = message_src_mainvue_type_script_lang_js_;
      var message_src_main_component = normalizeComponent2(
        packages_message_src_mainvue_type_script_lang_js_,
        mainvue_type_template_id_455b9f60_render,
        mainvue_type_template_id_455b9f60_staticRenderFns,
        false,
        null,
        null,
        null
      );
      message_src_main_component.options.__file = "packages/message/src/main.vue";
      var message_src_main = message_src_main_component.exports;
      var types_ = __webpack_require__(16);
      var main_extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target2[key] = source[key];
            }
          }
        }
        return target2;
      };
      var MessageConstructor = external_vue_default.a.extend(message_src_main);
      var message_src_main_instance = void 0;
      var main_instances = [];
      var main_seed = 1;
      var main_Message = function Message(options) {
        if (external_vue_default.a.prototype.$isServer)
          return;
        options = options || {};
        if (typeof options === "string") {
          options = {
            message: options
          };
        }
        var userOnClose = options.onClose;
        var id2 = "message_" + main_seed++;
        options.onClose = function() {
          Message.close(id2, userOnClose);
        };
        message_src_main_instance = new MessageConstructor({
          data: options
        });
        message_src_main_instance.id = id2;
        if (Object(vdom_["isVNode"])(message_src_main_instance.message)) {
          message_src_main_instance.$slots.default = [message_src_main_instance.message];
          message_src_main_instance.message = null;
        }
        message_src_main_instance.$mount();
        document.body.appendChild(message_src_main_instance.$el);
        var verticalOffset = options.offset || 20;
        main_instances.forEach(function(item) {
          verticalOffset += item.$el.offsetHeight + 16;
        });
        message_src_main_instance.verticalOffset = verticalOffset;
        message_src_main_instance.visible = true;
        message_src_main_instance.$el.style.zIndex = popup_["PopupManager"].nextZIndex();
        main_instances.push(message_src_main_instance);
        return message_src_main_instance;
      };
      ["success", "warning", "info", "error"].forEach(function(type2) {
        main_Message[type2] = function(options) {
          if (Object(types_["isObject"])(options) && !Object(vdom_["isVNode"])(options)) {
            return main_Message(main_extends({}, options, {
              type: type2
            }));
          }
          return main_Message({
            type: type2,
            message: options
          });
        };
      });
      main_Message.close = function(id2, userOnClose) {
        var len = main_instances.length;
        var index2 = -1;
        var removedHeight = void 0;
        for (var i = 0; i < len; i++) {
          if (id2 === main_instances[i].id) {
            removedHeight = main_instances[i].$el.offsetHeight;
            index2 = i;
            if (typeof userOnClose === "function") {
              userOnClose(main_instances[i]);
            }
            main_instances.splice(i, 1);
            break;
          }
        }
        if (len <= 1 || index2 === -1 || index2 > main_instances.length - 1)
          return;
        for (var _i = index2; _i < len - 1; _i++) {
          var dom2 = main_instances[_i].$el;
          dom2.style["top"] = parseInt(dom2.style["top"], 10) - removedHeight - 16 + "px";
        }
      };
      main_Message.closeAll = function() {
        for (var i = main_instances.length - 1; i >= 0; i--) {
          main_instances[i].close();
        }
      };
      var packages_message_src_main = main_Message;
      var packages_message = packages_message_src_main;
      var mainvue_type_template_id_7ccb6598_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          { staticClass: "el-badge" },
          [
            _vm._t("default"),
            _c("transition", { attrs: { name: "el-zoom-in-center" } }, [
              _c("sup", {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: !_vm.hidden && (_vm.content || _vm.content === 0 || _vm.isDot),
                    expression: "!hidden && (content || content === 0 || isDot)"
                  }
                ],
                staticClass: "el-badge__content",
                class: [
                  _vm.type ? "el-badge__content--" + _vm.type : null,
                  {
                    "is-fixed": _vm.$slots.default,
                    "is-dot": _vm.isDot
                  }
                ],
                domProps: { textContent: _vm._s(_vm.content) }
              })
            ])
          ],
          2
        );
      };
      var mainvue_type_template_id_7ccb6598_staticRenderFns = [];
      mainvue_type_template_id_7ccb6598_render._withStripped = true;
      var badge_src_mainvue_type_script_lang_js_ = {
        name: "ElBadge",
        props: {
          value: [String, Number],
          max: Number,
          isDot: Boolean,
          hidden: Boolean,
          type: {
            type: String,
            validator: function validator(val) {
              return ["primary", "success", "warning", "info", "danger"].indexOf(val) > -1;
            }
          }
        },
        computed: {
          content: function content() {
            if (this.isDot)
              return;
            var value = this.value;
            var max2 = this.max;
            if (typeof value === "number" && typeof max2 === "number") {
              return max2 < value ? max2 + "+" : value;
            }
            return value;
          }
        }
      };
      var packages_badge_src_mainvue_type_script_lang_js_ = badge_src_mainvue_type_script_lang_js_;
      var badge_src_main_component = normalizeComponent2(
        packages_badge_src_mainvue_type_script_lang_js_,
        mainvue_type_template_id_7ccb6598_render,
        mainvue_type_template_id_7ccb6598_staticRenderFns,
        false,
        null,
        null,
        null
      );
      badge_src_main_component.options.__file = "packages/badge/src/main.vue";
      var badge_src_main = badge_src_main_component.exports;
      badge_src_main.install = function(Vue2) {
        Vue2.component(badge_src_main.name, badge_src_main);
      };
      var badge = badge_src_main;
      var mainvue_type_template_id_59a4a40f_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-card",
            class: _vm.shadow ? "is-" + _vm.shadow + "-shadow" : "is-always-shadow"
          },
          [
            _vm.$slots.header || _vm.header ? _c(
              "div",
              { staticClass: "el-card__header" },
              [_vm._t("header", [_vm._v(_vm._s(_vm.header))])],
              2
            ) : _vm._e(),
            _c(
              "div",
              { staticClass: "el-card__body", style: _vm.bodyStyle },
              [_vm._t("default")],
              2
            )
          ]
        );
      };
      var mainvue_type_template_id_59a4a40f_staticRenderFns = [];
      mainvue_type_template_id_59a4a40f_render._withStripped = true;
      var card_src_mainvue_type_script_lang_js_ = {
        name: "ElCard",
        props: {
          header: {},
          bodyStyle: {},
          shadow: {
            type: String
          }
        }
      };
      var packages_card_src_mainvue_type_script_lang_js_ = card_src_mainvue_type_script_lang_js_;
      var card_src_main_component = normalizeComponent2(
        packages_card_src_mainvue_type_script_lang_js_,
        mainvue_type_template_id_59a4a40f_render,
        mainvue_type_template_id_59a4a40f_staticRenderFns,
        false,
        null,
        null,
        null
      );
      card_src_main_component.options.__file = "packages/card/src/main.vue";
      var card_src_main = card_src_main_component.exports;
      card_src_main.install = function(Vue2) {
        Vue2.component(card_src_main.name, card_src_main);
      };
      var card = card_src_main;
      var mainvue_type_template_id_ada57782_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-rate",
            attrs: {
              role: "slider",
              "aria-valuenow": _vm.currentValue,
              "aria-valuetext": _vm.text,
              "aria-valuemin": "0",
              "aria-valuemax": _vm.max,
              tabindex: "0"
            },
            on: { keydown: _vm.handleKey }
          },
          [
            _vm._l(_vm.max, function(item, key) {
              return _c(
                "span",
                {
                  key,
                  staticClass: "el-rate__item",
                  style: { cursor: _vm.rateDisabled ? "auto" : "pointer" },
                  on: {
                    mousemove: function($event) {
                      _vm.setCurrentValue(item, $event);
                    },
                    mouseleave: _vm.resetCurrentValue,
                    click: function($event) {
                      _vm.selectValue(item);
                    }
                  }
                },
                [
                  _c(
                    "i",
                    {
                      staticClass: "el-rate__icon",
                      class: [
                        _vm.classes[item - 1],
                        { hover: _vm.hoverIndex === item }
                      ],
                      style: _vm.getIconStyle(item)
                    },
                    [
                      _vm.showDecimalIcon(item) ? _c("i", {
                        staticClass: "el-rate__decimal",
                        class: _vm.decimalIconClass,
                        style: _vm.decimalStyle
                      }) : _vm._e()
                    ]
                  )
                ]
              );
            }),
            _vm.showText || _vm.showScore ? _c(
              "span",
              { staticClass: "el-rate__text", style: { color: _vm.textColor } },
              [_vm._v(_vm._s(_vm.text))]
            ) : _vm._e()
          ],
          2
        );
      };
      var mainvue_type_template_id_ada57782_staticRenderFns = [];
      mainvue_type_template_id_ada57782_render._withStripped = true;
      var rate_src_mainvue_type_script_lang_js_ = {
        name: "ElRate",
        mixins: [migrating_default.a],
        inject: {
          elForm: {
            default: ""
          }
        },
        data: function data() {
          return {
            pointerAtLeftHalf: true,
            currentValue: this.value,
            hoverIndex: -1
          };
        },
        props: {
          value: {
            type: Number,
            default: 0
          },
          lowThreshold: {
            type: Number,
            default: 2
          },
          highThreshold: {
            type: Number,
            default: 4
          },
          max: {
            type: Number,
            default: 5
          },
          colors: {
            type: [Array, Object],
            default: function _default2() {
              return ["#F7BA2A", "#F7BA2A", "#F7BA2A"];
            }
          },
          voidColor: {
            type: String,
            default: "#C6D1DE"
          },
          disabledVoidColor: {
            type: String,
            default: "#EFF2F7"
          },
          iconClasses: {
            type: [Array, Object],
            default: function _default2() {
              return ["el-icon-star-on", "el-icon-star-on", "el-icon-star-on"];
            }
          },
          voidIconClass: {
            type: String,
            default: "el-icon-star-off"
          },
          disabledVoidIconClass: {
            type: String,
            default: "el-icon-star-on"
          },
          disabled: {
            type: Boolean,
            default: false
          },
          allowHalf: {
            type: Boolean,
            default: false
          },
          showText: {
            type: Boolean,
            default: false
          },
          showScore: {
            type: Boolean,
            default: false
          },
          textColor: {
            type: String,
            default: "#1f2d3d"
          },
          texts: {
            type: Array,
            default: function _default2() {
              return ["极差", "失望", "一般", "满意", "惊喜"];
            }
          },
          scoreTemplate: {
            type: String,
            default: "{value}"
          }
        },
        computed: {
          text: function text() {
            var result = "";
            if (this.showScore) {
              result = this.scoreTemplate.replace(/\{\s*value\s*\}/, this.rateDisabled ? this.value : this.currentValue);
            } else if (this.showText) {
              result = this.texts[Math.ceil(this.currentValue) - 1];
            }
            return result;
          },
          decimalStyle: function decimalStyle() {
            var width = "";
            if (this.rateDisabled) {
              width = this.valueDecimal + "%";
            } else if (this.allowHalf) {
              width = "50%";
            }
            return {
              color: this.activeColor,
              width
            };
          },
          valueDecimal: function valueDecimal() {
            return this.value * 100 - Math.floor(this.value) * 100;
          },
          classMap: function classMap() {
            var _ref;
            return Array.isArray(this.iconClasses) ? (_ref = {}, _ref[this.lowThreshold] = this.iconClasses[0], _ref[this.highThreshold] = { value: this.iconClasses[1], excluded: true }, _ref[this.max] = this.iconClasses[2], _ref) : this.iconClasses;
          },
          decimalIconClass: function decimalIconClass() {
            return this.getValueFromMap(this.value, this.classMap);
          },
          voidClass: function voidClass() {
            return this.rateDisabled ? this.disabledVoidIconClass : this.voidIconClass;
          },
          activeClass: function activeClass() {
            return this.getValueFromMap(this.currentValue, this.classMap);
          },
          colorMap: function colorMap() {
            var _ref2;
            return Array.isArray(this.colors) ? (_ref2 = {}, _ref2[this.lowThreshold] = this.colors[0], _ref2[this.highThreshold] = { value: this.colors[1], excluded: true }, _ref2[this.max] = this.colors[2], _ref2) : this.colors;
          },
          activeColor: function activeColor() {
            return this.getValueFromMap(this.currentValue, this.colorMap);
          },
          classes: function classes() {
            var result = [];
            var i = 0;
            var threshold = this.currentValue;
            if (this.allowHalf && this.currentValue !== Math.floor(this.currentValue)) {
              threshold--;
            }
            for (; i < threshold; i++) {
              result.push(this.activeClass);
            }
            for (; i < this.max; i++) {
              result.push(this.voidClass);
            }
            return result;
          },
          rateDisabled: function rateDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
          }
        },
        watch: {
          value: function value(val) {
            this.currentValue = val;
            this.pointerAtLeftHalf = this.value !== Math.floor(this.value);
          }
        },
        methods: {
          getMigratingConfig: function getMigratingConfig() {
            return {
              props: {
                "text-template": "text-template is renamed to score-template."
              }
            };
          },
          getValueFromMap: function getValueFromMap(value, map) {
            var matchedKeys = Object.keys(map).filter(function(key) {
              var val = map[key];
              var excluded = Object(types_["isObject"])(val) ? val.excluded : false;
              return excluded ? value < key : value <= key;
            }).sort(function(a, b) {
              return a - b;
            });
            var matchedValue = map[matchedKeys[0]];
            return Object(types_["isObject"])(matchedValue) ? matchedValue.value : matchedValue || "";
          },
          showDecimalIcon: function showDecimalIcon(item) {
            var showWhenDisabled = this.rateDisabled && this.valueDecimal > 0 && item - 1 < this.value && item > this.value;
            var showWhenAllowHalf = this.allowHalf && this.pointerAtLeftHalf && item - 0.5 <= this.currentValue && item > this.currentValue;
            return showWhenDisabled || showWhenAllowHalf;
          },
          getIconStyle: function getIconStyle(item) {
            var voidColor = this.rateDisabled ? this.disabledVoidColor : this.voidColor;
            return {
              color: item <= this.currentValue ? this.activeColor : voidColor
            };
          },
          selectValue: function selectValue(value) {
            if (this.rateDisabled) {
              return;
            }
            if (this.allowHalf && this.pointerAtLeftHalf) {
              this.$emit("input", this.currentValue);
              this.$emit("change", this.currentValue);
            } else {
              this.$emit("input", value);
              this.$emit("change", value);
            }
          },
          handleKey: function handleKey(e) {
            if (this.rateDisabled) {
              return;
            }
            var currentValue = this.currentValue;
            var keyCode2 = e.keyCode;
            if (keyCode2 === 38 || keyCode2 === 39) {
              if (this.allowHalf) {
                currentValue += 0.5;
              } else {
                currentValue += 1;
              }
              e.stopPropagation();
              e.preventDefault();
            } else if (keyCode2 === 37 || keyCode2 === 40) {
              if (this.allowHalf) {
                currentValue -= 0.5;
              } else {
                currentValue -= 1;
              }
              e.stopPropagation();
              e.preventDefault();
            }
            currentValue = currentValue < 0 ? 0 : currentValue;
            currentValue = currentValue > this.max ? this.max : currentValue;
            this.$emit("input", currentValue);
            this.$emit("change", currentValue);
          },
          setCurrentValue: function setCurrentValue(value, event) {
            if (this.rateDisabled) {
              return;
            }
            if (this.allowHalf) {
              var target2 = event.target;
              if (Object(dom_["hasClass"])(target2, "el-rate__item")) {
                target2 = target2.querySelector(".el-rate__icon");
              }
              if (Object(dom_["hasClass"])(target2, "el-rate__decimal")) {
                target2 = target2.parentNode;
              }
              this.pointerAtLeftHalf = event.offsetX * 2 <= target2.clientWidth;
              this.currentValue = this.pointerAtLeftHalf ? value - 0.5 : value;
            } else {
              this.currentValue = value;
            }
            this.hoverIndex = value;
          },
          resetCurrentValue: function resetCurrentValue() {
            if (this.rateDisabled) {
              return;
            }
            if (this.allowHalf) {
              this.pointerAtLeftHalf = this.value !== Math.floor(this.value);
            }
            this.currentValue = this.value;
            this.hoverIndex = -1;
          }
        },
        created: function created() {
          if (!this.value) {
            this.$emit("input", 0);
          }
        }
      };
      var packages_rate_src_mainvue_type_script_lang_js_ = rate_src_mainvue_type_script_lang_js_;
      var rate_src_main_component = normalizeComponent2(
        packages_rate_src_mainvue_type_script_lang_js_,
        mainvue_type_template_id_ada57782_render,
        mainvue_type_template_id_ada57782_staticRenderFns,
        false,
        null,
        null,
        null
      );
      rate_src_main_component.options.__file = "packages/rate/src/main.vue";
      var rate_src_main = rate_src_main_component.exports;
      rate_src_main.install = function(Vue2) {
        Vue2.component(rate_src_main.name, rate_src_main);
      };
      var packages_rate = rate_src_main;
      var stepsvue_type_template_id_3c6b6dc0_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-steps",
            class: [
              !_vm.simple && "el-steps--" + _vm.direction,
              _vm.simple && "el-steps--simple"
            ]
          },
          [_vm._t("default")],
          2
        );
      };
      var stepsvue_type_template_id_3c6b6dc0_staticRenderFns = [];
      stepsvue_type_template_id_3c6b6dc0_render._withStripped = true;
      var stepsvue_type_script_lang_js_ = {
        name: "ElSteps",
        mixins: [migrating_default.a],
        props: {
          space: [Number, String],
          active: Number,
          direction: {
            type: String,
            default: "horizontal"
          },
          alignCenter: Boolean,
          simple: Boolean,
          finishStatus: {
            type: String,
            default: "finish"
          },
          processStatus: {
            type: String,
            default: "process"
          }
        },
        data: function data() {
          return {
            steps: [],
            stepOffset: 0
          };
        },
        methods: {
          getMigratingConfig: function getMigratingConfig() {
            return {
              props: {
                "center": "center is removed."
              }
            };
          }
        },
        watch: {
          active: function active(newVal, oldVal) {
            this.$emit("change", newVal, oldVal);
          },
          steps: function steps2(_steps) {
            _steps.forEach(function(child, index2) {
              child.index = index2;
            });
          }
        }
      };
      var src_stepsvue_type_script_lang_js_ = stepsvue_type_script_lang_js_;
      var steps_component = normalizeComponent2(
        src_stepsvue_type_script_lang_js_,
        stepsvue_type_template_id_3c6b6dc0_render,
        stepsvue_type_template_id_3c6b6dc0_staticRenderFns,
        false,
        null,
        null,
        null
      );
      steps_component.options.__file = "packages/steps/src/steps.vue";
      var steps = steps_component.exports;
      steps.install = function(Vue2) {
        Vue2.component(steps.name, steps);
      };
      var packages_steps = steps;
      var stepvue_type_template_id_f414a87a_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-step",
            class: [
              !_vm.isSimple && "is-" + _vm.$parent.direction,
              _vm.isSimple && "is-simple",
              _vm.isLast && !_vm.space && !_vm.isCenter && "is-flex",
              _vm.isCenter && !_vm.isVertical && !_vm.isSimple && "is-center"
            ],
            style: _vm.style
          },
          [
            _c(
              "div",
              { staticClass: "el-step__head", class: "is-" + _vm.currentStatus },
              [
                _c(
                  "div",
                  {
                    staticClass: "el-step__line",
                    style: _vm.isLast ? "" : { marginRight: _vm.$parent.stepOffset + "px" }
                  },
                  [
                    _c("i", {
                      staticClass: "el-step__line-inner",
                      style: _vm.lineStyle
                    })
                  ]
                ),
                _c(
                  "div",
                  {
                    staticClass: "el-step__icon",
                    class: "is-" + (_vm.icon ? "icon" : "text")
                  },
                  [
                    _vm.currentStatus !== "success" && _vm.currentStatus !== "error" ? _vm._t("icon", [
                      _vm.icon ? _c("i", {
                        staticClass: "el-step__icon-inner",
                        class: [_vm.icon]
                      }) : _vm._e(),
                      !_vm.icon && !_vm.isSimple ? _c("div", { staticClass: "el-step__icon-inner" }, [
                        _vm._v(_vm._s(_vm.index + 1))
                      ]) : _vm._e()
                    ]) : _c("i", {
                      staticClass: "el-step__icon-inner is-status",
                      class: [
                        "el-icon-" + (_vm.currentStatus === "success" ? "check" : "close")
                      ]
                    })
                  ],
                  2
                )
              ]
            ),
            _c("div", { staticClass: "el-step__main" }, [
              _c(
                "div",
                {
                  ref: "title",
                  staticClass: "el-step__title",
                  class: ["is-" + _vm.currentStatus]
                },
                [_vm._t("title", [_vm._v(_vm._s(_vm.title))])],
                2
              ),
              _vm.isSimple ? _c("div", { staticClass: "el-step__arrow" }) : _c(
                "div",
                {
                  staticClass: "el-step__description",
                  class: ["is-" + _vm.currentStatus]
                },
                [_vm._t("description", [_vm._v(_vm._s(_vm.description))])],
                2
              )
            ])
          ]
        );
      };
      var stepvue_type_template_id_f414a87a_staticRenderFns = [];
      stepvue_type_template_id_f414a87a_render._withStripped = true;
      var stepvue_type_script_lang_js_ = {
        name: "ElStep",
        props: {
          title: String,
          icon: String,
          description: String,
          status: String
        },
        data: function data() {
          return {
            index: -1,
            lineStyle: {},
            internalStatus: ""
          };
        },
        beforeCreate: function beforeCreate() {
          this.$parent.steps.push(this);
        },
        beforeDestroy: function beforeDestroy2() {
          var steps2 = this.$parent.steps;
          var index2 = steps2.indexOf(this);
          if (index2 >= 0) {
            steps2.splice(index2, 1);
          }
        },
        computed: {
          currentStatus: function currentStatus() {
            return this.status || this.internalStatus;
          },
          prevStatus: function prevStatus() {
            var prevStep = this.$parent.steps[this.index - 1];
            return prevStep ? prevStep.currentStatus : "wait";
          },
          isCenter: function isCenter() {
            return this.$parent.alignCenter;
          },
          isVertical: function isVertical() {
            return this.$parent.direction === "vertical";
          },
          isSimple: function isSimple() {
            return this.$parent.simple;
          },
          isLast: function isLast() {
            var parent = this.$parent;
            return parent.steps[parent.steps.length - 1] === this;
          },
          stepsCount: function stepsCount() {
            return this.$parent.steps.length;
          },
          space: function space() {
            var isSimple = this.isSimple, space2 = this.$parent.space;
            return isSimple ? "" : space2;
          },
          style: function style2() {
            var style3 = {};
            var parent = this.$parent;
            var len = parent.steps.length;
            var space = typeof this.space === "number" ? this.space + "px" : this.space ? this.space : 100 / (len - (this.isCenter ? 0 : 1)) + "%";
            style3.flexBasis = space;
            if (this.isVertical)
              return style3;
            if (this.isLast) {
              style3.maxWidth = 100 / this.stepsCount + "%";
            } else {
              style3.marginRight = -this.$parent.stepOffset + "px";
            }
            return style3;
          }
        },
        methods: {
          updateStatus: function updateStatus(val) {
            var prevChild = this.$parent.$children[this.index - 1];
            if (val > this.index) {
              this.internalStatus = this.$parent.finishStatus;
            } else if (val === this.index && this.prevStatus !== "error") {
              this.internalStatus = this.$parent.processStatus;
            } else {
              this.internalStatus = "wait";
            }
            if (prevChild)
              prevChild.calcProgress(this.internalStatus);
          },
          calcProgress: function calcProgress(status) {
            var step3 = 100;
            var style2 = {};
            style2.transitionDelay = 150 * this.index + "ms";
            if (status === this.$parent.processStatus) {
              step3 = this.currentStatus !== "error" ? 0 : 0;
            } else if (status === "wait") {
              step3 = 0;
              style2.transitionDelay = -150 * this.index + "ms";
            }
            style2.borderWidth = step3 && !this.isSimple ? "1px" : 0;
            this.$parent.direction === "vertical" ? style2.height = step3 + "%" : style2.width = step3 + "%";
            this.lineStyle = style2;
          }
        },
        mounted: function mounted2() {
          var _this = this;
          var unwatch = this.$watch("index", function(val) {
            _this.$watch("$parent.active", _this.updateStatus, { immediate: true });
            _this.$watch("$parent.processStatus", function() {
              var activeIndex = _this.$parent.active;
              _this.updateStatus(activeIndex);
            }, { immediate: true });
            unwatch();
          });
        }
      };
      var src_stepvue_type_script_lang_js_ = stepvue_type_script_lang_js_;
      var step_component = normalizeComponent2(
        src_stepvue_type_script_lang_js_,
        stepvue_type_template_id_f414a87a_render,
        stepvue_type_template_id_f414a87a_staticRenderFns,
        false,
        null,
        null,
        null
      );
      step_component.options.__file = "packages/steps/src/step.vue";
      var step2 = step_component.exports;
      step2.install = function(Vue2) {
        Vue2.component(step2.name, step2);
      };
      var packages_step = step2;
      var mainvue_type_template_id_5d5d1482_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            class: _vm.carouselClasses,
            on: {
              mouseenter: function($event) {
                $event.stopPropagation();
                return _vm.handleMouseEnter($event);
              },
              mouseleave: function($event) {
                $event.stopPropagation();
                return _vm.handleMouseLeave($event);
              }
            }
          },
          [
            _c(
              "div",
              {
                staticClass: "el-carousel__container",
                style: { height: _vm.height }
              },
              [
                _vm.arrowDisplay ? _c("transition", { attrs: { name: "carousel-arrow-left" } }, [
                  _c(
                    "button",
                    {
                      directives: [
                        {
                          name: "show",
                          rawName: "v-show",
                          value: (_vm.arrow === "always" || _vm.hover) && (_vm.loop || _vm.activeIndex > 0),
                          expression: "(arrow === 'always' || hover) && (loop || activeIndex > 0)"
                        }
                      ],
                      staticClass: "el-carousel__arrow el-carousel__arrow--left",
                      attrs: { type: "button" },
                      on: {
                        mouseenter: function($event) {
                          _vm.handleButtonEnter("left");
                        },
                        mouseleave: _vm.handleButtonLeave,
                        click: function($event) {
                          $event.stopPropagation();
                          _vm.throttledArrowClick(_vm.activeIndex - 1);
                        }
                      }
                    },
                    [_c("i", { staticClass: "el-icon-arrow-left" })]
                  )
                ]) : _vm._e(),
                _vm.arrowDisplay ? _c("transition", { attrs: { name: "carousel-arrow-right" } }, [
                  _c(
                    "button",
                    {
                      directives: [
                        {
                          name: "show",
                          rawName: "v-show",
                          value: (_vm.arrow === "always" || _vm.hover) && (_vm.loop || _vm.activeIndex < _vm.items.length - 1),
                          expression: "(arrow === 'always' || hover) && (loop || activeIndex < items.length - 1)"
                        }
                      ],
                      staticClass: "el-carousel__arrow el-carousel__arrow--right",
                      attrs: { type: "button" },
                      on: {
                        mouseenter: function($event) {
                          _vm.handleButtonEnter("right");
                        },
                        mouseleave: _vm.handleButtonLeave,
                        click: function($event) {
                          $event.stopPropagation();
                          _vm.throttledArrowClick(_vm.activeIndex + 1);
                        }
                      }
                    },
                    [_c("i", { staticClass: "el-icon-arrow-right" })]
                  )
                ]) : _vm._e(),
                _vm._t("default")
              ],
              2
            ),
            _vm.indicatorPosition !== "none" ? _c(
              "ul",
              { class: _vm.indicatorsClasses },
              _vm._l(_vm.items, function(item, index2) {
                return _c(
                  "li",
                  {
                    key: index2,
                    class: [
                      "el-carousel__indicator",
                      "el-carousel__indicator--" + _vm.direction,
                      { "is-active": index2 === _vm.activeIndex }
                    ],
                    on: {
                      mouseenter: function($event) {
                        _vm.throttledIndicatorHover(index2);
                      },
                      click: function($event) {
                        $event.stopPropagation();
                        _vm.handleIndicatorClick(index2);
                      }
                    }
                  },
                  [
                    _c("button", { staticClass: "el-carousel__button" }, [
                      _vm.hasLabel ? _c("span", [_vm._v(_vm._s(item.label))]) : _vm._e()
                    ])
                  ]
                );
              }),
              0
            ) : _vm._e()
          ]
        );
      };
      var mainvue_type_template_id_5d5d1482_staticRenderFns = [];
      mainvue_type_template_id_5d5d1482_render._withStripped = true;
      var throttle_ = __webpack_require__(25);
      var throttle_default = /* @__PURE__ */ __webpack_require__.n(throttle_);
      var carousel_src_mainvue_type_script_lang_js_ = {
        name: "ElCarousel",
        props: {
          initialIndex: {
            type: Number,
            default: 0
          },
          height: String,
          trigger: {
            type: String,
            default: "hover"
          },
          autoplay: {
            type: Boolean,
            default: true
          },
          interval: {
            type: Number,
            default: 3e3
          },
          indicatorPosition: String,
          indicator: {
            type: Boolean,
            default: true
          },
          arrow: {
            type: String,
            default: "hover"
          },
          type: String,
          loop: {
            type: Boolean,
            default: true
          },
          direction: {
            type: String,
            default: "horizontal",
            validator: function validator(val) {
              return ["horizontal", "vertical"].indexOf(val) !== -1;
            }
          }
        },
        data: function data() {
          return {
            items: [],
            activeIndex: -1,
            containerWidth: 0,
            timer: null,
            hover: false
          };
        },
        computed: {
          arrowDisplay: function arrowDisplay() {
            return this.arrow !== "never" && this.direction !== "vertical";
          },
          hasLabel: function hasLabel() {
            return this.items.some(function(item) {
              return item.label.toString().length > 0;
            });
          },
          carouselClasses: function carouselClasses() {
            var classes = ["el-carousel", "el-carousel--" + this.direction];
            if (this.type === "card") {
              classes.push("el-carousel--card");
            }
            return classes;
          },
          indicatorsClasses: function indicatorsClasses() {
            var classes = ["el-carousel__indicators", "el-carousel__indicators--" + this.direction];
            if (this.hasLabel) {
              classes.push("el-carousel__indicators--labels");
            }
            if (this.indicatorPosition === "outside" || this.type === "card") {
              classes.push("el-carousel__indicators--outside");
            }
            return classes;
          }
        },
        watch: {
          items: function items(val) {
            if (val.length > 0)
              this.setActiveItem(this.initialIndex);
          },
          activeIndex: function activeIndex(val, oldVal) {
            this.resetItemPosition(oldVal);
            if (oldVal > -1) {
              this.$emit("change", val, oldVal);
            }
          },
          autoplay: function autoplay(val) {
            val ? this.startTimer() : this.pauseTimer();
          },
          loop: function loop() {
            this.setActiveItem(this.activeIndex);
          },
          interval: function interval() {
            this.pauseTimer();
            this.startTimer();
          }
        },
        methods: {
          handleMouseEnter: function handleMouseEnter() {
            this.hover = true;
            this.pauseTimer();
          },
          handleMouseLeave: function handleMouseLeave() {
            this.hover = false;
            this.startTimer();
          },
          itemInStage: function itemInStage(item, index2) {
            var length = this.items.length;
            if (index2 === length - 1 && item.inStage && this.items[0].active || item.inStage && this.items[index2 + 1] && this.items[index2 + 1].active) {
              return "left";
            } else if (index2 === 0 && item.inStage && this.items[length - 1].active || item.inStage && this.items[index2 - 1] && this.items[index2 - 1].active) {
              return "right";
            }
            return false;
          },
          handleButtonEnter: function handleButtonEnter(arrow) {
            var _this = this;
            if (this.direction === "vertical")
              return;
            this.items.forEach(function(item, index2) {
              if (arrow === _this.itemInStage(item, index2)) {
                item.hover = true;
              }
            });
          },
          handleButtonLeave: function handleButtonLeave() {
            if (this.direction === "vertical")
              return;
            this.items.forEach(function(item) {
              item.hover = false;
            });
          },
          updateItems: function updateItems() {
            this.items = this.$children.filter(function(child) {
              return child.$options.name === "ElCarouselItem";
            });
          },
          resetItemPosition: function resetItemPosition(oldIndex) {
            var _this2 = this;
            this.items.forEach(function(item, index2) {
              item.translateItem(index2, _this2.activeIndex, oldIndex);
            });
          },
          playSlides: function playSlides() {
            if (this.activeIndex < this.items.length - 1) {
              this.activeIndex++;
            } else if (this.loop) {
              this.activeIndex = 0;
            }
          },
          pauseTimer: function pauseTimer() {
            if (this.timer) {
              clearInterval(this.timer);
              this.timer = null;
            }
          },
          startTimer: function startTimer() {
            if (this.interval <= 0 || !this.autoplay || this.timer)
              return;
            this.timer = setInterval(this.playSlides, this.interval);
          },
          resetTimer: function resetTimer() {
            this.pauseTimer();
            this.startTimer();
          },
          setActiveItem: function setActiveItem(index2) {
            if (typeof index2 === "string") {
              var filteredItems = this.items.filter(function(item) {
                return item.name === index2;
              });
              if (filteredItems.length > 0) {
                index2 = this.items.indexOf(filteredItems[0]);
              }
            }
            index2 = Number(index2);
            if (isNaN(index2) || index2 !== Math.floor(index2)) {
              console.warn("[Element Warn][Carousel]index must be an integer.");
              return;
            }
            var length = this.items.length;
            var oldIndex = this.activeIndex;
            if (index2 < 0) {
              this.activeIndex = this.loop ? length - 1 : 0;
            } else if (index2 >= length) {
              this.activeIndex = this.loop ? 0 : length - 1;
            } else {
              this.activeIndex = index2;
            }
            if (oldIndex === this.activeIndex) {
              this.resetItemPosition(oldIndex);
            }
            this.resetTimer();
          },
          prev: function prev() {
            this.setActiveItem(this.activeIndex - 1);
          },
          next: function next() {
            this.setActiveItem(this.activeIndex + 1);
          },
          handleIndicatorClick: function handleIndicatorClick(index2) {
            this.activeIndex = index2;
          },
          handleIndicatorHover: function handleIndicatorHover(index2) {
            if (this.trigger === "hover" && index2 !== this.activeIndex) {
              this.activeIndex = index2;
            }
          }
        },
        created: function created() {
          var _this3 = this;
          this.throttledArrowClick = throttle_default()(300, true, function(index2) {
            _this3.setActiveItem(index2);
          });
          this.throttledIndicatorHover = throttle_default()(300, function(index2) {
            _this3.handleIndicatorHover(index2);
          });
        },
        mounted: function mounted2() {
          var _this4 = this;
          this.updateItems();
          this.$nextTick(function() {
            Object(resize_event_["addResizeListener"])(_this4.$el, _this4.resetItemPosition);
            if (_this4.initialIndex < _this4.items.length && _this4.initialIndex >= 0) {
              _this4.activeIndex = _this4.initialIndex;
            }
            _this4.startTimer();
          });
        },
        beforeDestroy: function beforeDestroy2() {
          if (this.$el)
            Object(resize_event_["removeResizeListener"])(this.$el, this.resetItemPosition);
          this.pauseTimer();
        }
      };
      var packages_carousel_src_mainvue_type_script_lang_js_ = carousel_src_mainvue_type_script_lang_js_;
      var carousel_src_main_component = normalizeComponent2(
        packages_carousel_src_mainvue_type_script_lang_js_,
        mainvue_type_template_id_5d5d1482_render,
        mainvue_type_template_id_5d5d1482_staticRenderFns,
        false,
        null,
        null,
        null
      );
      carousel_src_main_component.options.__file = "packages/carousel/src/main.vue";
      var carousel_src_main = carousel_src_main_component.exports;
      carousel_src_main.install = function(Vue2) {
        Vue2.component(carousel_src_main.name, carousel_src_main);
      };
      var carousel = carousel_src_main;
      var BAR_MAP = {
        vertical: {
          offset: "offsetHeight",
          scroll: "scrollTop",
          scrollSize: "scrollHeight",
          size: "height",
          key: "vertical",
          axis: "Y",
          client: "clientY",
          direction: "top"
        },
        horizontal: {
          offset: "offsetWidth",
          scroll: "scrollLeft",
          scrollSize: "scrollWidth",
          size: "width",
          key: "horizontal",
          axis: "X",
          client: "clientX",
          direction: "left"
        }
      };
      function renderThumbStyle(_ref) {
        var move = _ref.move, size = _ref.size, bar = _ref.bar;
        var style2 = {};
        var translate = "translate" + bar.axis + "(" + move + "%)";
        style2[bar.size] = size;
        style2.transform = translate;
        style2.msTransform = translate;
        style2.webkitTransform = translate;
        return style2;
      }
      var src_bar = {
        name: "Bar",
        props: {
          vertical: Boolean,
          size: String,
          move: Number
        },
        computed: {
          bar: function bar() {
            return BAR_MAP[this.vertical ? "vertical" : "horizontal"];
          },
          wrap: function wrap2() {
            return this.$parent.wrap;
          }
        },
        render: function render6(h2) {
          var size = this.size, move = this.move, bar = this.bar;
          return h2(
            "div",
            {
              "class": ["el-scrollbar__bar", "is-" + bar.key],
              on: {
                "mousedown": this.clickTrackHandler
              }
            },
            [h2("div", {
              ref: "thumb",
              "class": "el-scrollbar__thumb",
              on: {
                "mousedown": this.clickThumbHandler
              },
              style: renderThumbStyle({ size, move, bar })
            })]
          );
        },
        methods: {
          clickThumbHandler: function clickThumbHandler(e) {
            if (e.ctrlKey || e.button === 2) {
              return;
            }
            this.startDrag(e);
            this[this.bar.axis] = e.currentTarget[this.bar.offset] - (e[this.bar.client] - e.currentTarget.getBoundingClientRect()[this.bar.direction]);
          },
          clickTrackHandler: function clickTrackHandler(e) {
            var offset = Math.abs(e.target.getBoundingClientRect()[this.bar.direction] - e[this.bar.client]);
            var thumbHalf = this.$refs.thumb[this.bar.offset] / 2;
            var thumbPositionPercentage = (offset - thumbHalf) * 100 / this.$el[this.bar.offset];
            this.wrap[this.bar.scroll] = thumbPositionPercentage * this.wrap[this.bar.scrollSize] / 100;
          },
          startDrag: function startDrag(e) {
            e.stopImmediatePropagation();
            this.cursorDown = true;
            Object(dom_["on"])(document, "mousemove", this.mouseMoveDocumentHandler);
            Object(dom_["on"])(document, "mouseup", this.mouseUpDocumentHandler);
            document.onselectstart = function() {
              return false;
            };
          },
          mouseMoveDocumentHandler: function mouseMoveDocumentHandler(e) {
            if (this.cursorDown === false)
              return;
            var prevPage = this[this.bar.axis];
            if (!prevPage)
              return;
            var offset = (this.$el.getBoundingClientRect()[this.bar.direction] - e[this.bar.client]) * -1;
            var thumbClickPosition = this.$refs.thumb[this.bar.offset] - prevPage;
            var thumbPositionPercentage = (offset - thumbClickPosition) * 100 / this.$el[this.bar.offset];
            this.wrap[this.bar.scroll] = thumbPositionPercentage * this.wrap[this.bar.scrollSize] / 100;
          },
          mouseUpDocumentHandler: function mouseUpDocumentHandler(e) {
            this.cursorDown = false;
            this[this.bar.axis] = 0;
            Object(dom_["off"])(document, "mousemove", this.mouseMoveDocumentHandler);
            document.onselectstart = null;
          }
        },
        destroyed: function destroyed() {
          Object(dom_["off"])(document, "mouseup", this.mouseUpDocumentHandler);
        }
      };
      var scrollbar_src_main = {
        name: "ElScrollbar",
        components: { Bar: src_bar },
        props: {
          native: Boolean,
          wrapStyle: {},
          wrapClass: {},
          viewClass: {},
          viewStyle: {},
          noresize: Boolean,
          // 如果 container 尺寸不会发生变化，最好设置它可以优化性能
          tag: {
            type: String,
            default: "div"
          }
        },
        data: function data() {
          return {
            sizeWidth: "0",
            sizeHeight: "0",
            moveX: 0,
            moveY: 0
          };
        },
        computed: {
          wrap: function wrap2() {
            return this.$refs.wrap;
          }
        },
        render: function render6(h2) {
          var gutter = scrollbar_width_default()();
          var style2 = this.wrapStyle;
          if (gutter) {
            var gutterWith = "-" + gutter + "px";
            var gutterStyle = "margin-bottom: " + gutterWith + "; margin-right: " + gutterWith + ";";
            if (Array.isArray(this.wrapStyle)) {
              style2 = Object(util_["toObject"])(this.wrapStyle);
              style2.marginRight = style2.marginBottom = gutterWith;
            } else if (typeof this.wrapStyle === "string") {
              style2 += gutterStyle;
            } else {
              style2 = gutterStyle;
            }
          }
          var view = h2(this.tag, {
            class: ["el-scrollbar__view", this.viewClass],
            style: this.viewStyle,
            ref: "resize"
          }, this.$slots.default);
          var wrap2 = h2(
            "div",
            {
              ref: "wrap",
              style: style2,
              on: {
                "scroll": this.handleScroll
              },
              "class": [this.wrapClass, "el-scrollbar__wrap", gutter ? "" : "el-scrollbar__wrap--hidden-default"]
            },
            [[view]]
          );
          var nodes = void 0;
          if (!this.native) {
            nodes = [wrap2, h2(src_bar, {
              attrs: {
                move: this.moveX,
                size: this.sizeWidth
              }
            }), h2(src_bar, {
              attrs: {
                vertical: true,
                move: this.moveY,
                size: this.sizeHeight
              }
            })];
          } else {
            nodes = [h2(
              "div",
              {
                ref: "wrap",
                "class": [this.wrapClass, "el-scrollbar__wrap"],
                style: style2
              },
              [[view]]
            )];
          }
          return h2("div", { class: "el-scrollbar" }, nodes);
        },
        methods: {
          handleScroll: function handleScroll() {
            var wrap2 = this.wrap;
            this.moveY = wrap2.scrollTop * 100 / wrap2.clientHeight;
            this.moveX = wrap2.scrollLeft * 100 / wrap2.clientWidth;
          },
          update: function update2() {
            var heightPercentage = void 0, widthPercentage = void 0;
            var wrap2 = this.wrap;
            if (!wrap2)
              return;
            heightPercentage = wrap2.clientHeight * 100 / wrap2.scrollHeight;
            widthPercentage = wrap2.clientWidth * 100 / wrap2.scrollWidth;
            this.sizeHeight = heightPercentage < 100 ? heightPercentage + "%" : "";
            this.sizeWidth = widthPercentage < 100 ? widthPercentage + "%" : "";
          }
        },
        mounted: function mounted2() {
          if (this.native)
            return;
          this.$nextTick(this.update);
          !this.noresize && Object(resize_event_["addResizeListener"])(this.$refs.resize, this.update);
        },
        beforeDestroy: function beforeDestroy2() {
          if (this.native)
            return;
          !this.noresize && Object(resize_event_["removeResizeListener"])(this.$refs.resize, this.update);
        }
      };
      scrollbar_src_main.install = function(Vue2) {
        Vue2.component(scrollbar_src_main.name, scrollbar_src_main);
      };
      var scrollbar2 = scrollbar_src_main;
      var itemvue_type_template_id_1801ae19_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.ready,
                expression: "ready"
              }
            ],
            staticClass: "el-carousel__item",
            class: {
              "is-active": _vm.active,
              "el-carousel__item--card": _vm.$parent.type === "card",
              "is-in-stage": _vm.inStage,
              "is-hover": _vm.hover,
              "is-animating": _vm.animating
            },
            style: _vm.itemStyle,
            on: { click: _vm.handleItemClick }
          },
          [
            _vm.$parent.type === "card" ? _c("div", {
              directives: [
                {
                  name: "show",
                  rawName: "v-show",
                  value: !_vm.active,
                  expression: "!active"
                }
              ],
              staticClass: "el-carousel__mask"
            }) : _vm._e(),
            _vm._t("default")
          ],
          2
        );
      };
      var itemvue_type_template_id_1801ae19_staticRenderFns = [];
      itemvue_type_template_id_1801ae19_render._withStripped = true;
      var CARD_SCALE = 0.83;
      var itemvue_type_script_lang_js_ = {
        name: "ElCarouselItem",
        props: {
          name: String,
          label: {
            type: [String, Number],
            default: ""
          }
        },
        data: function data() {
          return {
            hover: false,
            translate: 0,
            scale: 1,
            active: false,
            ready: false,
            inStage: false,
            animating: false
          };
        },
        methods: {
          processIndex: function processIndex(index2, activeIndex, length) {
            if (activeIndex === 0 && index2 === length - 1) {
              return -1;
            } else if (activeIndex === length - 1 && index2 === 0) {
              return length;
            } else if (index2 < activeIndex - 1 && activeIndex - index2 >= length / 2) {
              return length + 1;
            } else if (index2 > activeIndex + 1 && index2 - activeIndex >= length / 2) {
              return -2;
            }
            return index2;
          },
          calcCardTranslate: function calcCardTranslate(index2, activeIndex) {
            var parentWidth = this.$parent.$el.offsetWidth;
            if (this.inStage) {
              return parentWidth * ((2 - CARD_SCALE) * (index2 - activeIndex) + 1) / 4;
            } else if (index2 < activeIndex) {
              return -(1 + CARD_SCALE) * parentWidth / 4;
            } else {
              return (3 + CARD_SCALE) * parentWidth / 4;
            }
          },
          calcTranslate: function calcTranslate(index2, activeIndex, isVertical) {
            var distance = this.$parent.$el[isVertical ? "offsetHeight" : "offsetWidth"];
            return distance * (index2 - activeIndex);
          },
          translateItem: function translateItem(index2, activeIndex, oldIndex) {
            var parentType = this.$parent.type;
            var parentDirection = this.parentDirection;
            var length = this.$parent.items.length;
            if (parentType !== "card" && oldIndex !== void 0) {
              this.animating = index2 === activeIndex || index2 === oldIndex;
            }
            if (index2 !== activeIndex && length > 2 && this.$parent.loop) {
              index2 = this.processIndex(index2, activeIndex, length);
            }
            if (parentType === "card") {
              if (parentDirection === "vertical") {
                console.warn("[Element Warn][Carousel]vertical direction is not supported in card mode");
              }
              this.inStage = Math.round(Math.abs(index2 - activeIndex)) <= 1;
              this.active = index2 === activeIndex;
              this.translate = this.calcCardTranslate(index2, activeIndex);
              this.scale = this.active ? 1 : CARD_SCALE;
            } else {
              this.active = index2 === activeIndex;
              var isVertical = parentDirection === "vertical";
              this.translate = this.calcTranslate(index2, activeIndex, isVertical);
              this.scale = 1;
            }
            this.ready = true;
          },
          handleItemClick: function handleItemClick() {
            var parent = this.$parent;
            if (parent && parent.type === "card") {
              var index2 = parent.items.indexOf(this);
              parent.setActiveItem(index2);
            }
          }
        },
        computed: {
          parentDirection: function parentDirection() {
            return this.$parent.direction;
          },
          itemStyle: function itemStyle() {
            var translateType = this.parentDirection === "vertical" ? "translateY" : "translateX";
            var value = translateType + "(" + this.translate + "px) scale(" + this.scale + ")";
            var style2 = {
              transform: value
            };
            return Object(util_["autoprefixer"])(style2);
          }
        },
        created: function created() {
          this.$parent && this.$parent.updateItems();
        },
        destroyed: function destroyed() {
          this.$parent && this.$parent.updateItems();
        }
      };
      var src_itemvue_type_script_lang_js_ = itemvue_type_script_lang_js_;
      var item_component = normalizeComponent2(
        src_itemvue_type_script_lang_js_,
        itemvue_type_template_id_1801ae19_render,
        itemvue_type_template_id_1801ae19_staticRenderFns,
        false,
        null,
        null,
        null
      );
      item_component.options.__file = "packages/carousel/src/item.vue";
      var src_item = item_component.exports;
      src_item.install = function(Vue2) {
        Vue2.component(src_item.name, src_item);
      };
      var carousel_item = src_item;
      var collapsevue_type_template_id_461d57f4_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-collapse",
            attrs: { role: "tablist", "aria-multiselectable": "true" }
          },
          [_vm._t("default")],
          2
        );
      };
      var collapsevue_type_template_id_461d57f4_staticRenderFns = [];
      collapsevue_type_template_id_461d57f4_render._withStripped = true;
      var collapsevue_type_script_lang_js_ = {
        name: "ElCollapse",
        componentName: "ElCollapse",
        props: {
          accordion: Boolean,
          value: {
            type: [Array, String, Number],
            default: function _default2() {
              return [];
            }
          }
        },
        data: function data() {
          return {
            activeNames: [].concat(this.value)
          };
        },
        provide: function provide2() {
          return {
            collapse: this
          };
        },
        watch: {
          value: function value(_value) {
            this.activeNames = [].concat(_value);
          }
        },
        methods: {
          setActiveNames: function setActiveNames(activeNames) {
            activeNames = [].concat(activeNames);
            var value = this.accordion ? activeNames[0] : activeNames;
            this.activeNames = activeNames;
            this.$emit("input", value);
            this.$emit("change", value);
          },
          handleItemClick: function handleItemClick(item) {
            if (this.accordion) {
              this.setActiveNames((this.activeNames[0] || this.activeNames[0] === 0) && this.activeNames[0] === item.name ? "" : item.name);
            } else {
              var activeNames = this.activeNames.slice(0);
              var index2 = activeNames.indexOf(item.name);
              if (index2 > -1) {
                activeNames.splice(index2, 1);
              } else {
                activeNames.push(item.name);
              }
              this.setActiveNames(activeNames);
            }
          }
        },
        created: function created() {
          this.$on("item-click", this.handleItemClick);
        }
      };
      var src_collapsevue_type_script_lang_js_ = collapsevue_type_script_lang_js_;
      var collapse_component = normalizeComponent2(
        src_collapsevue_type_script_lang_js_,
        collapsevue_type_template_id_461d57f4_render,
        collapsevue_type_template_id_461d57f4_staticRenderFns,
        false,
        null,
        null,
        null
      );
      collapse_component.options.__file = "packages/collapse/src/collapse.vue";
      var collapse = collapse_component.exports;
      collapse.install = function(Vue2) {
        Vue2.component(collapse.name, collapse);
      };
      var packages_collapse = collapse;
      var collapse_itemvue_type_template_id_2d05faac_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-collapse-item",
            class: { "is-active": _vm.isActive, "is-disabled": _vm.disabled }
          },
          [
            _c(
              "div",
              {
                attrs: {
                  role: "tab",
                  "aria-expanded": _vm.isActive,
                  "aria-controls": "el-collapse-content-" + _vm.id,
                  "aria-describedby": "el-collapse-content-" + _vm.id
                }
              },
              [
                _c(
                  "div",
                  {
                    staticClass: "el-collapse-item__header",
                    class: {
                      focusing: _vm.focusing,
                      "is-active": _vm.isActive
                    },
                    attrs: {
                      role: "button",
                      id: "el-collapse-head-" + _vm.id,
                      tabindex: _vm.disabled ? void 0 : 0
                    },
                    on: {
                      click: _vm.handleHeaderClick,
                      keyup: function($event) {
                        if (!("button" in $event) && _vm._k($event.keyCode, "space", 32, $event.key, [
                          " ",
                          "Spacebar"
                        ]) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
                          return null;
                        }
                        $event.stopPropagation();
                        return _vm.handleEnterClick($event);
                      },
                      focus: _vm.handleFocus,
                      blur: function($event) {
                        _vm.focusing = false;
                      }
                    }
                  },
                  [
                    _vm._t("title", [_vm._v(_vm._s(_vm.title))]),
                    _c("i", {
                      staticClass: "el-collapse-item__arrow el-icon-arrow-right",
                      class: { "is-active": _vm.isActive }
                    })
                  ],
                  2
                )
              ]
            ),
            _c("el-collapse-transition", [
              _c(
                "div",
                {
                  directives: [
                    {
                      name: "show",
                      rawName: "v-show",
                      value: _vm.isActive,
                      expression: "isActive"
                    }
                  ],
                  staticClass: "el-collapse-item__wrap",
                  attrs: {
                    role: "tabpanel",
                    "aria-hidden": !_vm.isActive,
                    "aria-labelledby": "el-collapse-head-" + _vm.id,
                    id: "el-collapse-content-" + _vm.id
                  }
                },
                [
                  _c(
                    "div",
                    { staticClass: "el-collapse-item__content" },
                    [_vm._t("default")],
                    2
                  )
                ]
              )
            ])
          ],
          1
        );
      };
      var collapse_itemvue_type_template_id_2d05faac_staticRenderFns = [];
      collapse_itemvue_type_template_id_2d05faac_render._withStripped = true;
      var collapse_itemvue_type_script_lang_js_ = {
        name: "ElCollapseItem",
        componentName: "ElCollapseItem",
        mixins: [emitter_default.a],
        components: { ElCollapseTransition: collapse_transition_default.a },
        data: function data() {
          return {
            contentWrapStyle: {
              height: "auto",
              display: "block"
            },
            contentHeight: 0,
            focusing: false,
            isClick: false,
            id: Object(util_["generateId"])()
          };
        },
        inject: ["collapse"],
        props: {
          title: String,
          name: {
            type: [String, Number],
            default: function _default2() {
              return this._uid;
            }
          },
          disabled: Boolean
        },
        computed: {
          isActive: function isActive() {
            return this.collapse.activeNames.indexOf(this.name) > -1;
          }
        },
        methods: {
          handleFocus: function handleFocus() {
            var _this = this;
            setTimeout(function() {
              if (!_this.isClick) {
                _this.focusing = true;
              } else {
                _this.isClick = false;
              }
            }, 50);
          },
          handleHeaderClick: function handleHeaderClick() {
            if (this.disabled)
              return;
            this.dispatch("ElCollapse", "item-click", this);
            this.focusing = false;
            this.isClick = true;
          },
          handleEnterClick: function handleEnterClick() {
            this.dispatch("ElCollapse", "item-click", this);
          }
        }
      };
      var src_collapse_itemvue_type_script_lang_js_ = collapse_itemvue_type_script_lang_js_;
      var collapse_item_component = normalizeComponent2(
        src_collapse_itemvue_type_script_lang_js_,
        collapse_itemvue_type_template_id_2d05faac_render,
        collapse_itemvue_type_template_id_2d05faac_staticRenderFns,
        false,
        null,
        null,
        null
      );
      collapse_item_component.options.__file = "packages/collapse/src/collapse-item.vue";
      var collapse_item = collapse_item_component.exports;
      collapse_item.install = function(Vue2) {
        Vue2.component(collapse_item.name, collapse_item);
      };
      var packages_collapse_item = collapse_item;
      var cascadervue_type_template_id_032537a6_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            directives: [
              {
                name: "clickoutside",
                rawName: "v-clickoutside",
                value: function() {
                  return _vm.toggleDropDownVisible(false);
                },
                expression: "() => toggleDropDownVisible(false)"
              }
            ],
            ref: "reference",
            class: [
              "el-cascader",
              _vm.realSize && "el-cascader--" + _vm.realSize,
              { "is-disabled": _vm.isDisabled }
            ],
            on: {
              mouseenter: function($event) {
                _vm.inputHover = true;
              },
              mouseleave: function($event) {
                _vm.inputHover = false;
              },
              click: function() {
                return _vm.toggleDropDownVisible(_vm.readonly ? void 0 : true);
              },
              keydown: _vm.handleKeyDown
            }
          },
          [
            _c(
              "el-input",
              {
                ref: "input",
                class: { "is-focus": _vm.dropDownVisible },
                attrs: {
                  size: _vm.realSize,
                  placeholder: _vm.placeholder,
                  readonly: _vm.readonly,
                  disabled: _vm.isDisabled,
                  "validate-event": false
                },
                on: {
                  focus: _vm.handleFocus,
                  blur: _vm.handleBlur,
                  input: _vm.handleInput
                },
                model: {
                  value: _vm.multiple ? _vm.presentText : _vm.inputValue,
                  callback: function($$v) {
                    _vm.multiple ? _vm.presentText : _vm.inputValue = $$v;
                  },
                  expression: "multiple ? presentText : inputValue"
                }
              },
              [
                _c("template", { slot: "suffix" }, [
                  _vm.clearBtnVisible ? _c("i", {
                    key: "clear",
                    staticClass: "el-input__icon el-icon-circle-close",
                    on: {
                      click: function($event) {
                        $event.stopPropagation();
                        return _vm.handleClear($event);
                      }
                    }
                  }) : _c("i", {
                    key: "arrow-down",
                    class: [
                      "el-input__icon",
                      "el-icon-arrow-down",
                      _vm.dropDownVisible && "is-reverse"
                    ],
                    on: {
                      click: function($event) {
                        $event.stopPropagation();
                        _vm.toggleDropDownVisible();
                      }
                    }
                  })
                ])
              ],
              2
            ),
            _vm.multiple ? _c(
              "div",
              { staticClass: "el-cascader__tags" },
              [
                _vm._l(_vm.presentTags, function(tag2) {
                  return _c(
                    "el-tag",
                    {
                      key: tag2.key,
                      attrs: {
                        type: "info",
                        size: _vm.tagSize,
                        hit: tag2.hitState,
                        closable: tag2.closable,
                        "disable-transitions": ""
                      },
                      on: {
                        close: function($event) {
                          _vm.deleteTag(tag2);
                        }
                      }
                    },
                    [_c("span", [_vm._v(_vm._s(tag2.text))])]
                  );
                }),
                _vm.filterable && !_vm.isDisabled ? _c("input", {
                  directives: [
                    {
                      name: "model",
                      rawName: "v-model.trim",
                      value: _vm.inputValue,
                      expression: "inputValue",
                      modifiers: { trim: true }
                    }
                  ],
                  staticClass: "el-cascader__search-input",
                  attrs: {
                    type: "text",
                    placeholder: _vm.presentTags.length ? "" : _vm.placeholder
                  },
                  domProps: { value: _vm.inputValue },
                  on: {
                    input: [
                      function($event) {
                        if ($event.target.composing) {
                          return;
                        }
                        _vm.inputValue = $event.target.value.trim();
                      },
                      function(e) {
                        return _vm.handleInput(_vm.inputValue, e);
                      }
                    ],
                    click: function($event) {
                      $event.stopPropagation();
                      _vm.toggleDropDownVisible(true);
                    },
                    keydown: function($event) {
                      if (!("button" in $event) && _vm._k(
                        $event.keyCode,
                        "delete",
                        [8, 46],
                        $event.key,
                        ["Backspace", "Delete", "Del"]
                      )) {
                        return null;
                      }
                      return _vm.handleDelete($event);
                    },
                    blur: function($event) {
                      _vm.$forceUpdate();
                    }
                  }
                }) : _vm._e()
              ],
              2
            ) : _vm._e(),
            _c(
              "transition",
              {
                attrs: { name: "el-zoom-in-top" },
                on: { "after-leave": _vm.handleDropdownLeave }
              },
              [
                _c(
                  "div",
                  {
                    directives: [
                      {
                        name: "show",
                        rawName: "v-show",
                        value: _vm.dropDownVisible,
                        expression: "dropDownVisible"
                      }
                    ],
                    ref: "popper",
                    class: ["el-popper", "el-cascader__dropdown", _vm.popperClass]
                  },
                  [
                    _c("el-cascader-panel", {
                      directives: [
                        {
                          name: "show",
                          rawName: "v-show",
                          value: !_vm.filtering,
                          expression: "!filtering"
                        }
                      ],
                      ref: "panel",
                      attrs: {
                        options: _vm.options,
                        props: _vm.config,
                        border: false,
                        "render-label": _vm.$scopedSlots.default
                      },
                      on: {
                        "expand-change": _vm.handleExpandChange,
                        close: function($event) {
                          _vm.toggleDropDownVisible(false);
                        }
                      },
                      model: {
                        value: _vm.checkedValue,
                        callback: function($$v) {
                          _vm.checkedValue = $$v;
                        },
                        expression: "checkedValue"
                      }
                    }),
                    _vm.filterable ? _c(
                      "el-scrollbar",
                      {
                        directives: [
                          {
                            name: "show",
                            rawName: "v-show",
                            value: _vm.filtering,
                            expression: "filtering"
                          }
                        ],
                        ref: "suggestionPanel",
                        staticClass: "el-cascader__suggestion-panel",
                        attrs: {
                          tag: "ul",
                          "view-class": "el-cascader__suggestion-list"
                        },
                        nativeOn: {
                          keydown: function($event) {
                            return _vm.handleSuggestionKeyDown($event);
                          }
                        }
                      },
                      [
                        _vm.suggestions.length ? _vm._l(_vm.suggestions, function(item, index2) {
                          return _c(
                            "li",
                            {
                              key: item.uid,
                              class: [
                                "el-cascader__suggestion-item",
                                item.checked && "is-checked"
                              ],
                              attrs: { tabindex: -1 },
                              on: {
                                click: function($event) {
                                  _vm.handleSuggestionClick(index2);
                                }
                              }
                            },
                            [
                              _c("span", [_vm._v(_vm._s(item.text))]),
                              item.checked ? _c("i", { staticClass: "el-icon-check" }) : _vm._e()
                            ]
                          );
                        }) : _vm._t("empty", [
                          _c(
                            "li",
                            { staticClass: "el-cascader__empty-text" },
                            [_vm._v(_vm._s(_vm.t("el.cascader.noMatch")))]
                          )
                        ])
                      ],
                      2
                    ) : _vm._e()
                  ],
                  1
                )
              ]
            )
          ],
          1
        );
      };
      var cascadervue_type_template_id_032537a6_staticRenderFns = [];
      cascadervue_type_template_id_032537a6_render._withStripped = true;
      var cascader_panel_ = __webpack_require__(43);
      var cascader_panel_default = /* @__PURE__ */ __webpack_require__.n(cascader_panel_);
      var aria_utils_ = __webpack_require__(35);
      var aria_utils_default = /* @__PURE__ */ __webpack_require__.n(aria_utils_);
      var KeyCode = aria_utils_default.a.keys;
      var MigratingProps = {
        expandTrigger: {
          newProp: "expandTrigger",
          type: String
        },
        changeOnSelect: {
          newProp: "checkStrictly",
          type: Boolean
        },
        hoverThreshold: {
          newProp: "hoverThreshold",
          type: Number
        }
      };
      var PopperMixin = {
        props: {
          placement: {
            type: String,
            default: "bottom-start"
          },
          appendToBody: vue_popper_default.a.props.appendToBody,
          visibleArrow: {
            type: Boolean,
            default: true
          },
          arrowOffset: vue_popper_default.a.props.arrowOffset,
          offset: vue_popper_default.a.props.offset,
          boundariesPadding: vue_popper_default.a.props.boundariesPadding,
          popperOptions: vue_popper_default.a.props.popperOptions,
          transformOrigin: vue_popper_default.a.props.transformOrigin
        },
        methods: vue_popper_default.a.methods,
        data: vue_popper_default.a.data,
        beforeDestroy: vue_popper_default.a.beforeDestroy
      };
      var InputSizeMap = {
        medium: 36,
        small: 32,
        mini: 28
      };
      var cascadervue_type_script_lang_js_ = {
        name: "ElCascader",
        directives: { Clickoutside: clickoutside_default.a },
        mixins: [PopperMixin, emitter_default.a, locale_default.a, migrating_default.a],
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        components: {
          ElInput: input_default.a,
          ElTag: tag_default.a,
          ElScrollbar: scrollbar_default.a,
          ElCascaderPanel: cascader_panel_default.a
        },
        props: {
          value: {},
          options: Array,
          props: Object,
          size: String,
          placeholder: {
            type: String,
            default: function _default2() {
              return Object(lib_locale_["t"])("el.cascader.placeholder");
            }
          },
          disabled: Boolean,
          clearable: Boolean,
          filterable: Boolean,
          filterMethod: Function,
          separator: {
            type: String,
            default: " / "
          },
          showAllLevels: {
            type: Boolean,
            default: true
          },
          collapseTags: Boolean,
          debounce: {
            type: Number,
            default: 300
          },
          beforeFilter: {
            type: Function,
            default: function _default2() {
              return function() {
              };
            }
          },
          popperClass: String
        },
        data: function data() {
          return {
            dropDownVisible: false,
            checkedValue: this.value,
            inputHover: false,
            inputValue: null,
            presentText: null,
            presentTags: [],
            checkedNodes: [],
            filtering: false,
            suggestions: [],
            inputInitialHeight: 0,
            pressDeleteCount: 0
          };
        },
        computed: {
          realSize: function realSize() {
            var _elFormItemSize = (this.elFormItem || {}).elFormItemSize;
            return this.size || _elFormItemSize || (this.$ELEMENT || {}).size;
          },
          tagSize: function tagSize() {
            return ["small", "mini"].indexOf(this.realSize) > -1 ? "mini" : "small";
          },
          isDisabled: function isDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
          },
          config: function config2() {
            var config3 = this.props || {};
            var $attrs = this.$attrs;
            Object.keys(MigratingProps).forEach(function(oldProp) {
              var _MigratingProps$oldPr = MigratingProps[oldProp], newProp = _MigratingProps$oldPr.newProp, type2 = _MigratingProps$oldPr.type;
              var oldValue = $attrs[oldProp] || $attrs[Object(util_["kebabCase"])(oldProp)];
              if (Object(shared_["isDef"])(oldProp) && !Object(shared_["isDef"])(config3[newProp])) {
                if (type2 === Boolean && oldValue === "") {
                  oldValue = true;
                }
                config3[newProp] = oldValue;
              }
            });
            return config3;
          },
          multiple: function multiple() {
            return this.config.multiple;
          },
          leafOnly: function leafOnly() {
            return !this.config.checkStrictly;
          },
          readonly: function readonly2() {
            return !this.filterable || this.multiple;
          },
          clearBtnVisible: function clearBtnVisible() {
            if (!this.clearable || this.isDisabled || this.filtering || !this.inputHover) {
              return false;
            }
            return this.multiple ? !!this.checkedNodes.filter(function(node) {
              return !node.isDisabled;
            }).length : !!this.presentText;
          },
          panel: function panel() {
            return this.$refs.panel;
          }
        },
        watch: {
          disabled: function disabled() {
            this.computePresentContent();
          },
          value: function value(val) {
            if (!Object(util_["isEqual"])(val, this.checkedValue)) {
              this.checkedValue = val;
              this.computePresentContent();
            }
          },
          checkedValue: function checkedValue(val) {
            var value = this.value, dropDownVisible = this.dropDownVisible;
            var _config = this.config, checkStrictly = _config.checkStrictly, multiple = _config.multiple;
            if (!Object(util_["isEqual"])(val, value) || Object(types_["isUndefined"])(value)) {
              this.computePresentContent();
              if (!multiple && !checkStrictly && dropDownVisible) {
                this.toggleDropDownVisible(false);
              }
              this.$emit("input", val);
              this.$emit("change", val);
              this.dispatch("ElFormItem", "el.form.change", [val]);
            }
          },
          options: {
            handler: function handler() {
              this.$nextTick(this.computePresentContent);
            },
            deep: true
          },
          presentText: function presentText(val) {
            this.inputValue = val;
          },
          presentTags: function presentTags(val, oldVal) {
            if (this.multiple && (val.length || oldVal.length)) {
              this.$nextTick(this.updateStyle);
            }
          },
          filtering: function filtering(val) {
            this.$nextTick(this.updatePopper);
          }
        },
        mounted: function mounted2() {
          var _this = this;
          var input2 = this.$refs.input;
          if (input2 && input2.$el) {
            this.inputInitialHeight = input2.$el.offsetHeight || InputSizeMap[this.realSize] || 40;
          }
          if (!this.isEmptyValue(this.value)) {
            this.computePresentContent();
          }
          this.filterHandler = debounce_default()(this.debounce, function() {
            var inputValue = _this.inputValue;
            if (!inputValue) {
              _this.filtering = false;
              return;
            }
            var before = _this.beforeFilter(inputValue);
            if (before && before.then) {
              before.then(_this.getSuggestions);
            } else if (before !== false) {
              _this.getSuggestions();
            } else {
              _this.filtering = false;
            }
          });
          Object(resize_event_["addResizeListener"])(this.$el, this.updateStyle);
        },
        beforeDestroy: function beforeDestroy2() {
          Object(resize_event_["removeResizeListener"])(this.$el, this.updateStyle);
        },
        methods: {
          getMigratingConfig: function getMigratingConfig() {
            return {
              props: {
                "expand-trigger": "expand-trigger is removed, use `props.expandTrigger` instead.",
                "change-on-select": "change-on-select is removed, use `props.checkStrictly` instead.",
                "hover-threshold": "hover-threshold is removed, use `props.hoverThreshold` instead"
              },
              events: {
                "active-item-change": "active-item-change is renamed to expand-change"
              }
            };
          },
          toggleDropDownVisible: function toggleDropDownVisible(visible) {
            var _this2 = this;
            if (this.isDisabled)
              return;
            var dropDownVisible = this.dropDownVisible;
            var input2 = this.$refs.input;
            visible = Object(shared_["isDef"])(visible) ? visible : !dropDownVisible;
            if (visible !== dropDownVisible) {
              this.dropDownVisible = visible;
              if (visible) {
                this.$nextTick(function() {
                  _this2.updatePopper();
                  _this2.panel.scrollIntoView();
                });
              }
              input2.$refs.input.setAttribute("aria-expanded", visible);
              this.$emit("visible-change", visible);
            }
          },
          handleDropdownLeave: function handleDropdownLeave() {
            this.filtering = false;
            this.inputValue = this.presentText;
            this.doDestroy();
          },
          handleKeyDown: function handleKeyDown(event) {
            switch (event.keyCode) {
              case KeyCode.enter:
                this.toggleDropDownVisible();
                break;
              case KeyCode.down:
                this.toggleDropDownVisible(true);
                this.focusFirstNode();
                event.preventDefault();
                break;
              case KeyCode.esc:
              case KeyCode.tab:
                this.toggleDropDownVisible(false);
                break;
            }
          },
          handleFocus: function handleFocus(e) {
            this.$emit("focus", e);
          },
          handleBlur: function handleBlur(e) {
            this.$emit("blur", e);
          },
          handleInput: function handleInput(val, event) {
            !this.dropDownVisible && this.toggleDropDownVisible(true);
            if (event && event.isComposing)
              return;
            if (val) {
              this.filterHandler();
            } else {
              this.filtering = false;
            }
          },
          handleClear: function handleClear() {
            this.presentText = "";
            this.panel.clearCheckedNodes();
          },
          handleExpandChange: function handleExpandChange(value) {
            this.$nextTick(this.updatePopper.bind(this));
            this.$emit("expand-change", value);
            this.$emit("active-item-change", value);
          },
          focusFirstNode: function focusFirstNode() {
            var _this3 = this;
            this.$nextTick(function() {
              var filtering = _this3.filtering;
              var _$refs = _this3.$refs, popper2 = _$refs.popper, suggestionPanel = _$refs.suggestionPanel;
              var firstNode = null;
              if (filtering && suggestionPanel) {
                firstNode = suggestionPanel.$el.querySelector(".el-cascader__suggestion-item");
              } else {
                var firstMenu = popper2.querySelector(".el-cascader-menu");
                firstNode = firstMenu.querySelector('.el-cascader-node[tabindex="-1"]');
              }
              if (firstNode) {
                firstNode.focus();
                !filtering && firstNode.click();
              }
            });
          },
          computePresentContent: function computePresentContent() {
            var _this4 = this;
            this.$nextTick(function() {
              if (_this4.config.multiple) {
                _this4.computePresentTags();
                _this4.presentText = _this4.presentTags.length ? " " : null;
              } else {
                _this4.computePresentText();
              }
            });
          },
          isEmptyValue: function isEmptyValue2(val) {
            var multiple = this.multiple;
            var emitPath = this.panel.config.emitPath;
            if (multiple || emitPath) {
              return Object(util_["isEmpty"])(val);
            }
            return false;
          },
          computePresentText: function computePresentText() {
            var checkedValue = this.checkedValue, config2 = this.config;
            if (!this.isEmptyValue(checkedValue)) {
              var node = this.panel.getNodeByValue(checkedValue);
              if (node && (config2.checkStrictly || node.isLeaf)) {
                this.presentText = node.getText(this.showAllLevels, this.separator);
                return;
              }
            }
            this.presentText = null;
          },
          computePresentTags: function computePresentTags() {
            var isDisabled = this.isDisabled, leafOnly = this.leafOnly, showAllLevels = this.showAllLevels, separator = this.separator, collapseTags = this.collapseTags;
            var checkedNodes = this.getCheckedNodes(leafOnly);
            var tags = [];
            var genTag = function genTag2(node) {
              return {
                node,
                key: node.uid,
                text: node.getText(showAllLevels, separator),
                hitState: false,
                closable: !isDisabled && !node.isDisabled
              };
            };
            if (checkedNodes.length) {
              var first = checkedNodes[0], rest = checkedNodes.slice(1);
              var restCount = rest.length;
              tags.push(genTag(first));
              if (restCount) {
                if (collapseTags) {
                  tags.push({
                    key: -1,
                    text: "+ " + restCount,
                    closable: false
                  });
                } else {
                  rest.forEach(function(node) {
                    return tags.push(genTag(node));
                  });
                }
              }
            }
            this.checkedNodes = checkedNodes;
            this.presentTags = tags;
          },
          getSuggestions: function getSuggestions() {
            var _this5 = this;
            var filterMethod = this.filterMethod;
            if (!Object(types_["isFunction"])(filterMethod)) {
              filterMethod = function filterMethod2(node, keyword) {
                return node.text.includes(keyword);
              };
            }
            var suggestions = this.panel.getFlattedNodes(this.leafOnly).filter(function(node) {
              if (node.isDisabled)
                return false;
              node.text = node.getText(_this5.showAllLevels, _this5.separator) || "";
              return filterMethod(node, _this5.inputValue);
            });
            if (this.multiple) {
              this.presentTags.forEach(function(tag2) {
                tag2.hitState = false;
              });
            } else {
              suggestions.forEach(function(node) {
                node.checked = Object(util_["isEqual"])(_this5.checkedValue, node.getValueByOption());
              });
            }
            this.filtering = true;
            this.suggestions = suggestions;
            this.$nextTick(this.updatePopper);
          },
          handleSuggestionKeyDown: function handleSuggestionKeyDown(event) {
            var keyCode2 = event.keyCode, target2 = event.target;
            switch (keyCode2) {
              case KeyCode.enter:
                target2.click();
                break;
              case KeyCode.up:
                var prev = target2.previousElementSibling;
                prev && prev.focus();
                break;
              case KeyCode.down:
                var next = target2.nextElementSibling;
                next && next.focus();
                break;
              case KeyCode.esc:
              case KeyCode.tab:
                this.toggleDropDownVisible(false);
                break;
            }
          },
          handleDelete: function handleDelete() {
            var inputValue = this.inputValue, pressDeleteCount = this.pressDeleteCount, presentTags = this.presentTags;
            var lastIndex = presentTags.length - 1;
            var lastTag = presentTags[lastIndex];
            this.pressDeleteCount = inputValue ? 0 : pressDeleteCount + 1;
            if (!lastTag)
              return;
            if (this.pressDeleteCount) {
              if (lastTag.hitState) {
                this.deleteTag(lastTag);
              } else {
                lastTag.hitState = true;
              }
            }
          },
          handleSuggestionClick: function handleSuggestionClick(index2) {
            var multiple = this.multiple;
            var targetNode = this.suggestions[index2];
            if (multiple) {
              var checked = targetNode.checked;
              targetNode.doCheck(!checked);
              this.panel.calculateMultiCheckedValue();
            } else {
              this.checkedValue = targetNode.getValueByOption();
              this.toggleDropDownVisible(false);
            }
          },
          deleteTag: function deleteTag(tag2) {
            var checkedValue = this.checkedValue;
            var current = tag2.node.getValueByOption();
            var val = checkedValue.find(function(n) {
              return Object(util_["isEqual"])(n, current);
            });
            this.checkedValue = checkedValue.filter(function(n) {
              return !Object(util_["isEqual"])(n, current);
            });
            this.$emit("remove-tag", val);
          },
          updateStyle: function updateStyle2() {
            var $el = this.$el, inputInitialHeight = this.inputInitialHeight;
            if (this.$isServer || !$el)
              return;
            var suggestionPanel = this.$refs.suggestionPanel;
            var inputInner = $el.querySelector(".el-input__inner");
            if (!inputInner)
              return;
            var tags = $el.querySelector(".el-cascader__tags");
            var suggestionPanelEl = null;
            if (suggestionPanel && (suggestionPanelEl = suggestionPanel.$el)) {
              var suggestionList = suggestionPanelEl.querySelector(".el-cascader__suggestion-list");
              suggestionList.style.minWidth = inputInner.offsetWidth + "px";
            }
            if (tags) {
              var offsetHeight = Math.round(tags.getBoundingClientRect().height);
              var height = Math.max(offsetHeight + 6, inputInitialHeight) + "px";
              inputInner.style.height = height;
              if (this.dropDownVisible) {
                this.updatePopper();
              }
            }
          },
          /**
           * public methods
          */
          getCheckedNodes: function getCheckedNodes(leafOnly) {
            return this.panel.getCheckedNodes(leafOnly);
          }
        }
      };
      var src_cascadervue_type_script_lang_js_ = cascadervue_type_script_lang_js_;
      var cascader_component = normalizeComponent2(
        src_cascadervue_type_script_lang_js_,
        cascadervue_type_template_id_032537a6_render,
        cascadervue_type_template_id_032537a6_staticRenderFns,
        false,
        null,
        null,
        null
      );
      cascader_component.options.__file = "packages/cascader/src/cascader.vue";
      var cascader = cascader_component.exports;
      cascader.install = function(Vue2) {
        Vue2.component(cascader.name, cascader);
      };
      var packages_cascader = cascader;
      var mainvue_type_template_id_55c8ade7_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            directives: [
              {
                name: "clickoutside",
                rawName: "v-clickoutside",
                value: _vm.hide,
                expression: "hide"
              }
            ],
            class: [
              "el-color-picker",
              _vm.colorDisabled ? "is-disabled" : "",
              _vm.colorSize ? "el-color-picker--" + _vm.colorSize : ""
            ]
          },
          [
            _vm.colorDisabled ? _c("div", { staticClass: "el-color-picker__mask" }) : _vm._e(),
            _c(
              "div",
              {
                staticClass: "el-color-picker__trigger",
                on: { click: _vm.handleTrigger }
              },
              [
                _c(
                  "span",
                  {
                    staticClass: "el-color-picker__color",
                    class: { "is-alpha": _vm.showAlpha }
                  },
                  [
                    _c("span", {
                      staticClass: "el-color-picker__color-inner",
                      style: {
                        backgroundColor: _vm.displayedColor
                      }
                    }),
                    !_vm.value && !_vm.showPanelColor ? _c("span", {
                      staticClass: "el-color-picker__empty el-icon-close"
                    }) : _vm._e()
                  ]
                ),
                _c("span", {
                  directives: [
                    {
                      name: "show",
                      rawName: "v-show",
                      value: _vm.value || _vm.showPanelColor,
                      expression: "value || showPanelColor"
                    }
                  ],
                  staticClass: "el-color-picker__icon el-icon-arrow-down"
                })
              ]
            ),
            _c("picker-dropdown", {
              ref: "dropdown",
              class: ["el-color-picker__panel", _vm.popperClass || ""],
              attrs: {
                color: _vm.color,
                "show-alpha": _vm.showAlpha,
                predefine: _vm.predefine
              },
              on: { pick: _vm.confirmValue, clear: _vm.clearValue },
              model: {
                value: _vm.showPicker,
                callback: function($$v) {
                  _vm.showPicker = $$v;
                },
                expression: "showPicker"
              }
            })
          ],
          1
        );
      };
      var mainvue_type_template_id_55c8ade7_staticRenderFns = [];
      mainvue_type_template_id_55c8ade7_render._withStripped = true;
      var color_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      function color_classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var hsv2hsl = function hsv2hsl2(hue, sat, val) {
        return [hue, sat * val / ((hue = (2 - sat) * val) < 1 ? hue : 2 - hue) || 0, hue / 2];
      };
      var isOnePointZero = function isOnePointZero2(n) {
        return typeof n === "string" && n.indexOf(".") !== -1 && parseFloat(n) === 1;
      };
      var isPercentage = function isPercentage2(n) {
        return typeof n === "string" && n.indexOf("%") !== -1;
      };
      var bound01 = function bound012(value, max2) {
        if (isOnePointZero(value))
          value = "100%";
        var processPercent = isPercentage(value);
        value = Math.min(max2, Math.max(0, parseFloat(value)));
        if (processPercent) {
          value = parseInt(value * max2, 10) / 100;
        }
        if (Math.abs(value - max2) < 1e-6) {
          return 1;
        }
        return value % max2 / parseFloat(max2);
      };
      var INT_HEX_MAP = { 10: "A", 11: "B", 12: "C", 13: "D", 14: "E", 15: "F" };
      var toHex = function toHex2(_ref) {
        var r = _ref.r, g = _ref.g, b = _ref.b;
        var hexOne = function hexOne2(value) {
          value = Math.min(Math.round(value), 255);
          var high = Math.floor(value / 16);
          var low = value % 16;
          return "" + (INT_HEX_MAP[high] || high) + (INT_HEX_MAP[low] || low);
        };
        if (isNaN(r) || isNaN(g) || isNaN(b))
          return "";
        return "#" + hexOne(r) + hexOne(g) + hexOne(b);
      };
      var HEX_INT_MAP = { A: 10, B: 11, C: 12, D: 13, E: 14, F: 15 };
      var parseHexChannel = function parseHexChannel2(hex2) {
        if (hex2.length === 2) {
          return (HEX_INT_MAP[hex2[0].toUpperCase()] || +hex2[0]) * 16 + (HEX_INT_MAP[hex2[1].toUpperCase()] || +hex2[1]);
        }
        return HEX_INT_MAP[hex2[1].toUpperCase()] || +hex2[1];
      };
      var hsl2hsv = function hsl2hsv2(hue, sat, light) {
        sat = sat / 100;
        light = light / 100;
        var smin = sat;
        var lmin = Math.max(light, 0.01);
        var sv = void 0;
        var v = void 0;
        light *= 2;
        sat *= light <= 1 ? light : 2 - light;
        smin *= lmin <= 1 ? lmin : 2 - lmin;
        v = (light + sat) / 2;
        sv = light === 0 ? 2 * smin / (lmin + smin) : 2 * sat / (light + sat);
        return {
          h: hue,
          s: sv * 100,
          v: v * 100
        };
      };
      var rgb2hsv = function rgb2hsv2(r, g, b) {
        r = bound01(r, 255);
        g = bound01(g, 255);
        b = bound01(b, 255);
        var max2 = Math.max(r, g, b);
        var min2 = Math.min(r, g, b);
        var h2 = void 0, s = void 0;
        var v = max2;
        var d = max2 - min2;
        s = max2 === 0 ? 0 : d / max2;
        if (max2 === min2) {
          h2 = 0;
        } else {
          switch (max2) {
            case r:
              h2 = (g - b) / d + (g < b ? 6 : 0);
              break;
            case g:
              h2 = (b - r) / d + 2;
              break;
            case b:
              h2 = (r - g) / d + 4;
              break;
          }
          h2 /= 6;
        }
        return { h: h2 * 360, s: s * 100, v: v * 100 };
      };
      var hsv2rgb = function hsv2rgb2(h2, s, v) {
        h2 = bound01(h2, 360) * 6;
        s = bound01(s, 100);
        v = bound01(v, 100);
        var i = Math.floor(h2);
        var f2 = h2 - i;
        var p = v * (1 - s);
        var q = v * (1 - f2 * s);
        var t = v * (1 - (1 - f2) * s);
        var mod = i % 6;
        var r = [v, q, p, p, t, v][mod];
        var g = [t, v, v, q, p, p][mod];
        var b = [p, p, t, v, v, q][mod];
        return {
          r: Math.round(r * 255),
          g: Math.round(g * 255),
          b: Math.round(b * 255)
        };
      };
      var Color = function() {
        function Color2(options) {
          color_classCallCheck(this, Color2);
          this._hue = 0;
          this._saturation = 100;
          this._value = 100;
          this._alpha = 100;
          this.enableAlpha = false;
          this.format = "hex";
          this.value = "";
          options = options || {};
          for (var option2 in options) {
            if (options.hasOwnProperty(option2)) {
              this[option2] = options[option2];
            }
          }
          this.doOnChange();
        }
        Color2.prototype.set = function set2(prop, value) {
          if (arguments.length === 1 && (typeof prop === "undefined" ? "undefined" : color_typeof(prop)) === "object") {
            for (var p in prop) {
              if (prop.hasOwnProperty(p)) {
                this.set(p, prop[p]);
              }
            }
            return;
          }
          this["_" + prop] = value;
          this.doOnChange();
        };
        Color2.prototype.get = function get(prop) {
          return this["_" + prop];
        };
        Color2.prototype.toRgb = function toRgb() {
          return hsv2rgb(this._hue, this._saturation, this._value);
        };
        Color2.prototype.fromString = function fromString(value) {
          var _this = this;
          if (!value) {
            this._hue = 0;
            this._saturation = 100;
            this._value = 100;
            this.doOnChange();
            return;
          }
          var fromHSV = function fromHSV2(h3, s2, v2) {
            _this._hue = Math.max(0, Math.min(360, h3));
            _this._saturation = Math.max(0, Math.min(100, s2));
            _this._value = Math.max(0, Math.min(100, v2));
            _this.doOnChange();
          };
          if (value.indexOf("hsl") !== -1) {
            var parts = value.replace(/hsla|hsl|\(|\)/gm, "").split(/\s|,/g).filter(function(val) {
              return val !== "";
            }).map(function(val, index2) {
              return index2 > 2 ? parseFloat(val) : parseInt(val, 10);
            });
            if (parts.length === 4) {
              this._alpha = Math.floor(parseFloat(parts[3]) * 100);
            } else if (parts.length === 3) {
              this._alpha = 100;
            }
            if (parts.length >= 3) {
              var _hsl2hsv = hsl2hsv(parts[0], parts[1], parts[2]), h2 = _hsl2hsv.h, s = _hsl2hsv.s, v = _hsl2hsv.v;
              fromHSV(h2, s, v);
            }
          } else if (value.indexOf("hsv") !== -1) {
            var _parts = value.replace(/hsva|hsv|\(|\)/gm, "").split(/\s|,/g).filter(function(val) {
              return val !== "";
            }).map(function(val, index2) {
              return index2 > 2 ? parseFloat(val) : parseInt(val, 10);
            });
            if (_parts.length === 4) {
              this._alpha = Math.floor(parseFloat(_parts[3]) * 100);
            } else if (_parts.length === 3) {
              this._alpha = 100;
            }
            if (_parts.length >= 3) {
              fromHSV(_parts[0], _parts[1], _parts[2]);
            }
          } else if (value.indexOf("rgb") !== -1) {
            var _parts2 = value.replace(/rgba|rgb|\(|\)/gm, "").split(/\s|,/g).filter(function(val) {
              return val !== "";
            }).map(function(val, index2) {
              return index2 > 2 ? parseFloat(val) : parseInt(val, 10);
            });
            if (_parts2.length === 4) {
              this._alpha = Math.floor(parseFloat(_parts2[3]) * 100);
            } else if (_parts2.length === 3) {
              this._alpha = 100;
            }
            if (_parts2.length >= 3) {
              var _rgb2hsv = rgb2hsv(_parts2[0], _parts2[1], _parts2[2]), _h = _rgb2hsv.h, _s = _rgb2hsv.s, _v = _rgb2hsv.v;
              fromHSV(_h, _s, _v);
            }
          } else if (value.indexOf("#") !== -1) {
            var hex2 = value.replace("#", "").trim();
            if (!/^(?:[0-9a-fA-F]{3}){1,2}|[0-9a-fA-F]{8}$/.test(hex2))
              return;
            var r = void 0, g = void 0, b = void 0;
            if (hex2.length === 3) {
              r = parseHexChannel(hex2[0] + hex2[0]);
              g = parseHexChannel(hex2[1] + hex2[1]);
              b = parseHexChannel(hex2[2] + hex2[2]);
            } else if (hex2.length === 6 || hex2.length === 8) {
              r = parseHexChannel(hex2.substring(0, 2));
              g = parseHexChannel(hex2.substring(2, 4));
              b = parseHexChannel(hex2.substring(4, 6));
            }
            if (hex2.length === 8) {
              this._alpha = Math.floor(parseHexChannel(hex2.substring(6)) / 255 * 100);
            } else if (hex2.length === 3 || hex2.length === 6) {
              this._alpha = 100;
            }
            var _rgb2hsv2 = rgb2hsv(r, g, b), _h2 = _rgb2hsv2.h, _s2 = _rgb2hsv2.s, _v2 = _rgb2hsv2.v;
            fromHSV(_h2, _s2, _v2);
          }
        };
        Color2.prototype.compare = function compare(color) {
          return Math.abs(color._hue - this._hue) < 2 && Math.abs(color._saturation - this._saturation) < 1 && Math.abs(color._value - this._value) < 1 && Math.abs(color._alpha - this._alpha) < 1;
        };
        Color2.prototype.doOnChange = function doOnChange() {
          var _hue = this._hue, _saturation = this._saturation, _value = this._value, _alpha = this._alpha, format2 = this.format;
          if (this.enableAlpha) {
            switch (format2) {
              case "hsl":
                var hsl = hsv2hsl(_hue, _saturation / 100, _value / 100);
                this.value = "hsla(" + _hue + ", " + Math.round(hsl[1] * 100) + "%, " + Math.round(hsl[2] * 100) + "%, " + _alpha / 100 + ")";
                break;
              case "hsv":
                this.value = "hsva(" + _hue + ", " + Math.round(_saturation) + "%, " + Math.round(_value) + "%, " + _alpha / 100 + ")";
                break;
              default:
                var _hsv2rgb = hsv2rgb(_hue, _saturation, _value), r = _hsv2rgb.r, g = _hsv2rgb.g, b = _hsv2rgb.b;
                this.value = "rgba(" + r + ", " + g + ", " + b + ", " + _alpha / 100 + ")";
            }
          } else {
            switch (format2) {
              case "hsl":
                var _hsl = hsv2hsl(_hue, _saturation / 100, _value / 100);
                this.value = "hsl(" + _hue + ", " + Math.round(_hsl[1] * 100) + "%, " + Math.round(_hsl[2] * 100) + "%)";
                break;
              case "hsv":
                this.value = "hsv(" + _hue + ", " + Math.round(_saturation) + "%, " + Math.round(_value) + "%)";
                break;
              case "rgb":
                var _hsv2rgb2 = hsv2rgb(_hue, _saturation, _value), _r = _hsv2rgb2.r, _g = _hsv2rgb2.g, _b = _hsv2rgb2.b;
                this.value = "rgb(" + _r + ", " + _g + ", " + _b + ")";
                break;
              default:
                this.value = toHex(hsv2rgb(_hue, _saturation, _value));
            }
          }
        };
        return Color2;
      }();
      var src_color = Color;
      var picker_dropdownvue_type_template_id_06601625_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "transition",
          { attrs: { name: "el-zoom-in-top" }, on: { "after-leave": _vm.doDestroy } },
          [
            _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.showPopper,
                    expression: "showPopper"
                  }
                ],
                staticClass: "el-color-dropdown"
              },
              [
                _c(
                  "div",
                  { staticClass: "el-color-dropdown__main-wrapper" },
                  [
                    _c("hue-slider", {
                      ref: "hue",
                      staticStyle: { float: "right" },
                      attrs: { color: _vm.color, vertical: "" }
                    }),
                    _c("sv-panel", { ref: "sl", attrs: { color: _vm.color } })
                  ],
                  1
                ),
                _vm.showAlpha ? _c("alpha-slider", { ref: "alpha", attrs: { color: _vm.color } }) : _vm._e(),
                _vm.predefine ? _c("predefine", {
                  attrs: { color: _vm.color, colors: _vm.predefine }
                }) : _vm._e(),
                _c(
                  "div",
                  { staticClass: "el-color-dropdown__btns" },
                  [
                    _c(
                      "span",
                      { staticClass: "el-color-dropdown__value" },
                      [
                        _c("el-input", {
                          attrs: { "validate-event": false, size: "mini" },
                          on: { blur: _vm.handleConfirm },
                          nativeOn: {
                            keyup: function($event) {
                              if (!("button" in $event) && _vm._k(
                                $event.keyCode,
                                "enter",
                                13,
                                $event.key,
                                "Enter"
                              )) {
                                return null;
                              }
                              return _vm.handleConfirm($event);
                            }
                          },
                          model: {
                            value: _vm.customInput,
                            callback: function($$v) {
                              _vm.customInput = $$v;
                            },
                            expression: "customInput"
                          }
                        })
                      ],
                      1
                    ),
                    _c(
                      "el-button",
                      {
                        staticClass: "el-color-dropdown__link-btn",
                        attrs: { size: "mini", type: "text" },
                        on: {
                          click: function($event) {
                            _vm.$emit("clear");
                          }
                        }
                      },
                      [
                        _vm._v(
                          "\n        " + _vm._s(_vm.t("el.colorpicker.clear")) + "\n      "
                        )
                      ]
                    ),
                    _c(
                      "el-button",
                      {
                        staticClass: "el-color-dropdown__btn",
                        attrs: { plain: "", size: "mini" },
                        on: { click: _vm.confirmValue }
                      },
                      [
                        _vm._v(
                          "\n        " + _vm._s(_vm.t("el.colorpicker.confirm")) + "\n      "
                        )
                      ]
                    )
                  ],
                  1
                )
              ],
              1
            )
          ]
        );
      };
      var picker_dropdownvue_type_template_id_06601625_staticRenderFns = [];
      picker_dropdownvue_type_template_id_06601625_render._withStripped = true;
      var sv_panelvue_type_template_id_d8583596_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-color-svpanel",
            style: {
              backgroundColor: _vm.background
            }
          },
          [
            _c("div", { staticClass: "el-color-svpanel__white" }),
            _c("div", { staticClass: "el-color-svpanel__black" }),
            _c(
              "div",
              {
                staticClass: "el-color-svpanel__cursor",
                style: {
                  top: _vm.cursorTop + "px",
                  left: _vm.cursorLeft + "px"
                }
              },
              [_c("div")]
            )
          ]
        );
      };
      var sv_panelvue_type_template_id_d8583596_staticRenderFns = [];
      sv_panelvue_type_template_id_d8583596_render._withStripped = true;
      var isDragging = false;
      var draggable = function(element, options) {
        if (external_vue_default.a.prototype.$isServer)
          return;
        var moveFn = function moveFn2(event) {
          if (options.drag) {
            options.drag(event);
          }
        };
        var upFn = function upFn2(event) {
          document.removeEventListener("mousemove", moveFn);
          document.removeEventListener("mouseup", upFn2);
          document.onselectstart = null;
          document.ondragstart = null;
          isDragging = false;
          if (options.end) {
            options.end(event);
          }
        };
        element.addEventListener("mousedown", function(event) {
          if (isDragging)
            return;
          document.onselectstart = function() {
            return false;
          };
          document.ondragstart = function() {
            return false;
          };
          document.addEventListener("mousemove", moveFn);
          document.addEventListener("mouseup", upFn);
          isDragging = true;
          if (options.start) {
            options.start(event);
          }
        });
      };
      var sv_panelvue_type_script_lang_js_ = {
        name: "el-sl-panel",
        props: {
          color: {
            required: true
          }
        },
        computed: {
          colorValue: function colorValue() {
            var hue = this.color.get("hue");
            var value = this.color.get("value");
            return { hue, value };
          }
        },
        watch: {
          colorValue: function colorValue() {
            this.update();
          }
        },
        methods: {
          update: function update2() {
            var saturation = this.color.get("saturation");
            var value = this.color.get("value");
            var el = this.$el;
            var width = el.clientWidth, height = el.clientHeight;
            this.cursorLeft = saturation * width / 100;
            this.cursorTop = (100 - value) * height / 100;
            this.background = "hsl(" + this.color.get("hue") + ", 100%, 50%)";
          },
          handleDrag: function handleDrag(event) {
            var el = this.$el;
            var rect = el.getBoundingClientRect();
            var left = event.clientX - rect.left;
            var top = event.clientY - rect.top;
            left = Math.max(0, left);
            left = Math.min(left, rect.width);
            top = Math.max(0, top);
            top = Math.min(top, rect.height);
            this.cursorLeft = left;
            this.cursorTop = top;
            this.color.set({
              saturation: left / rect.width * 100,
              value: 100 - top / rect.height * 100
            });
          }
        },
        mounted: function mounted2() {
          var _this = this;
          draggable(this.$el, {
            drag: function drag(event) {
              _this.handleDrag(event);
            },
            end: function end(event) {
              _this.handleDrag(event);
            }
          });
          this.update();
        },
        data: function data() {
          return {
            cursorTop: 0,
            cursorLeft: 0,
            background: "hsl(0, 100%, 50%)"
          };
        }
      };
      var components_sv_panelvue_type_script_lang_js_ = sv_panelvue_type_script_lang_js_;
      var sv_panel_component = normalizeComponent2(
        components_sv_panelvue_type_script_lang_js_,
        sv_panelvue_type_template_id_d8583596_render,
        sv_panelvue_type_template_id_d8583596_staticRenderFns,
        false,
        null,
        null,
        null
      );
      sv_panel_component.options.__file = "packages/color-picker/src/components/sv-panel.vue";
      var sv_panel = sv_panel_component.exports;
      var hue_slidervue_type_template_id_5cdc43b1_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-color-hue-slider",
            class: { "is-vertical": _vm.vertical }
          },
          [
            _c("div", {
              ref: "bar",
              staticClass: "el-color-hue-slider__bar",
              on: { click: _vm.handleClick }
            }),
            _c("div", {
              ref: "thumb",
              staticClass: "el-color-hue-slider__thumb",
              style: {
                left: _vm.thumbLeft + "px",
                top: _vm.thumbTop + "px"
              }
            })
          ]
        );
      };
      var hue_slidervue_type_template_id_5cdc43b1_staticRenderFns = [];
      hue_slidervue_type_template_id_5cdc43b1_render._withStripped = true;
      var hue_slidervue_type_script_lang_js_ = {
        name: "el-color-hue-slider",
        props: {
          color: {
            required: true
          },
          vertical: Boolean
        },
        data: function data() {
          return {
            thumbLeft: 0,
            thumbTop: 0
          };
        },
        computed: {
          hueValue: function hueValue() {
            var hue = this.color.get("hue");
            return hue;
          }
        },
        watch: {
          hueValue: function hueValue() {
            this.update();
          }
        },
        methods: {
          handleClick: function handleClick(event) {
            var thumb = this.$refs.thumb;
            var target2 = event.target;
            if (target2 !== thumb) {
              this.handleDrag(event);
            }
          },
          handleDrag: function handleDrag(event) {
            var rect = this.$el.getBoundingClientRect();
            var thumb = this.$refs.thumb;
            var hue = void 0;
            if (!this.vertical) {
              var left = event.clientX - rect.left;
              left = Math.min(left, rect.width - thumb.offsetWidth / 2);
              left = Math.max(thumb.offsetWidth / 2, left);
              hue = Math.round((left - thumb.offsetWidth / 2) / (rect.width - thumb.offsetWidth) * 360);
            } else {
              var top = event.clientY - rect.top;
              top = Math.min(top, rect.height - thumb.offsetHeight / 2);
              top = Math.max(thumb.offsetHeight / 2, top);
              hue = Math.round((top - thumb.offsetHeight / 2) / (rect.height - thumb.offsetHeight) * 360);
            }
            this.color.set("hue", hue);
          },
          getThumbLeft: function getThumbLeft() {
            if (this.vertical)
              return 0;
            var el = this.$el;
            var hue = this.color.get("hue");
            if (!el)
              return 0;
            var thumb = this.$refs.thumb;
            return Math.round(hue * (el.offsetWidth - thumb.offsetWidth / 2) / 360);
          },
          getThumbTop: function getThumbTop() {
            if (!this.vertical)
              return 0;
            var el = this.$el;
            var hue = this.color.get("hue");
            if (!el)
              return 0;
            var thumb = this.$refs.thumb;
            return Math.round(hue * (el.offsetHeight - thumb.offsetHeight / 2) / 360);
          },
          update: function update2() {
            this.thumbLeft = this.getThumbLeft();
            this.thumbTop = this.getThumbTop();
          }
        },
        mounted: function mounted2() {
          var _this = this;
          var _$refs = this.$refs, bar = _$refs.bar, thumb = _$refs.thumb;
          var dragConfig = {
            drag: function drag(event) {
              _this.handleDrag(event);
            },
            end: function end(event) {
              _this.handleDrag(event);
            }
          };
          draggable(bar, dragConfig);
          draggable(thumb, dragConfig);
          this.update();
        }
      };
      var components_hue_slidervue_type_script_lang_js_ = hue_slidervue_type_script_lang_js_;
      var hue_slider_component = normalizeComponent2(
        components_hue_slidervue_type_script_lang_js_,
        hue_slidervue_type_template_id_5cdc43b1_render,
        hue_slidervue_type_template_id_5cdc43b1_staticRenderFns,
        false,
        null,
        null,
        null
      );
      hue_slider_component.options.__file = "packages/color-picker/src/components/hue-slider.vue";
      var hue_slider = hue_slider_component.exports;
      var alpha_slidervue_type_template_id_068c66cb_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            staticClass: "el-color-alpha-slider",
            class: { "is-vertical": _vm.vertical }
          },
          [
            _c("div", {
              ref: "bar",
              staticClass: "el-color-alpha-slider__bar",
              style: {
                background: _vm.background
              },
              on: { click: _vm.handleClick }
            }),
            _c("div", {
              ref: "thumb",
              staticClass: "el-color-alpha-slider__thumb",
              style: {
                left: _vm.thumbLeft + "px",
                top: _vm.thumbTop + "px"
              }
            })
          ]
        );
      };
      var alpha_slidervue_type_template_id_068c66cb_staticRenderFns = [];
      alpha_slidervue_type_template_id_068c66cb_render._withStripped = true;
      var alpha_slidervue_type_script_lang_js_ = {
        name: "el-color-alpha-slider",
        props: {
          color: {
            required: true
          },
          vertical: Boolean
        },
        watch: {
          "color._alpha": function color_alpha() {
            this.update();
          },
          "color.value": function colorValue() {
            this.update();
          }
        },
        methods: {
          handleClick: function handleClick(event) {
            var thumb = this.$refs.thumb;
            var target2 = event.target;
            if (target2 !== thumb) {
              this.handleDrag(event);
            }
          },
          handleDrag: function handleDrag(event) {
            var rect = this.$el.getBoundingClientRect();
            var thumb = this.$refs.thumb;
            if (!this.vertical) {
              var left = event.clientX - rect.left;
              left = Math.max(thumb.offsetWidth / 2, left);
              left = Math.min(left, rect.width - thumb.offsetWidth / 2);
              this.color.set("alpha", Math.round((left - thumb.offsetWidth / 2) / (rect.width - thumb.offsetWidth) * 100));
            } else {
              var top = event.clientY - rect.top;
              top = Math.max(thumb.offsetHeight / 2, top);
              top = Math.min(top, rect.height - thumb.offsetHeight / 2);
              this.color.set("alpha", Math.round((top - thumb.offsetHeight / 2) / (rect.height - thumb.offsetHeight) * 100));
            }
          },
          getThumbLeft: function getThumbLeft() {
            if (this.vertical)
              return 0;
            var el = this.$el;
            var alpha = this.color._alpha;
            if (!el)
              return 0;
            var thumb = this.$refs.thumb;
            return Math.round(alpha * (el.offsetWidth - thumb.offsetWidth / 2) / 100);
          },
          getThumbTop: function getThumbTop() {
            if (!this.vertical)
              return 0;
            var el = this.$el;
            var alpha = this.color._alpha;
            if (!el)
              return 0;
            var thumb = this.$refs.thumb;
            return Math.round(alpha * (el.offsetHeight - thumb.offsetHeight / 2) / 100);
          },
          getBackground: function getBackground() {
            if (this.color && this.color.value) {
              var _color$toRgb = this.color.toRgb(), r = _color$toRgb.r, g = _color$toRgb.g, b = _color$toRgb.b;
              return "linear-gradient(to right, rgba(" + r + ", " + g + ", " + b + ", 0) 0%, rgba(" + r + ", " + g + ", " + b + ", 1) 100%)";
            }
            return null;
          },
          update: function update2() {
            this.thumbLeft = this.getThumbLeft();
            this.thumbTop = this.getThumbTop();
            this.background = this.getBackground();
          }
        },
        data: function data() {
          return {
            thumbLeft: 0,
            thumbTop: 0,
            background: null
          };
        },
        mounted: function mounted2() {
          var _this = this;
          var _$refs = this.$refs, bar = _$refs.bar, thumb = _$refs.thumb;
          var dragConfig = {
            drag: function drag(event) {
              _this.handleDrag(event);
            },
            end: function end(event) {
              _this.handleDrag(event);
            }
          };
          draggable(bar, dragConfig);
          draggable(thumb, dragConfig);
          this.update();
        }
      };
      var components_alpha_slidervue_type_script_lang_js_ = alpha_slidervue_type_script_lang_js_;
      var alpha_slider_component = normalizeComponent2(
        components_alpha_slidervue_type_script_lang_js_,
        alpha_slidervue_type_template_id_068c66cb_render,
        alpha_slidervue_type_template_id_068c66cb_staticRenderFns,
        false,
        null,
        null,
        null
      );
      alpha_slider_component.options.__file = "packages/color-picker/src/components/alpha-slider.vue";
      var alpha_slider = alpha_slider_component.exports;
      var predefinevue_type_template_id_06e03093_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", { staticClass: "el-color-predefine" }, [
          _c(
            "div",
            { staticClass: "el-color-predefine__colors" },
            _vm._l(_vm.rgbaColors, function(item, index2) {
              return _c(
                "div",
                {
                  key: _vm.colors[index2],
                  staticClass: "el-color-predefine__color-selector",
                  class: { selected: item.selected, "is-alpha": item._alpha < 100 },
                  on: {
                    click: function($event) {
                      _vm.handleSelect(index2);
                    }
                  }
                },
                [_c("div", { style: { "background-color": item.value } })]
              );
            }),
            0
          )
        ]);
      };
      var predefinevue_type_template_id_06e03093_staticRenderFns = [];
      predefinevue_type_template_id_06e03093_render._withStripped = true;
      var predefinevue_type_script_lang_js_ = {
        props: {
          colors: { type: Array, required: true },
          color: { required: true }
        },
        data: function data() {
          return {
            rgbaColors: this.parseColors(this.colors, this.color)
          };
        },
        methods: {
          handleSelect: function handleSelect(index2) {
            this.color.fromString(this.colors[index2]);
          },
          parseColors: function parseColors(colors, color) {
            return colors.map(function(value) {
              var c = new src_color();
              c.enableAlpha = true;
              c.format = "rgba";
              c.fromString(value);
              c.selected = c.value === color.value;
              return c;
            });
          }
        },
        watch: {
          "$parent.currentColor": function $parentCurrentColor(val) {
            var color = new src_color();
            color.fromString(val);
            this.rgbaColors.forEach(function(item) {
              item.selected = color.compare(item);
            });
          },
          colors: function colors(newVal) {
            this.rgbaColors = this.parseColors(newVal, this.color);
          },
          color: function color(newVal) {
            this.rgbaColors = this.parseColors(this.colors, newVal);
          }
        }
      };
      var components_predefinevue_type_script_lang_js_ = predefinevue_type_script_lang_js_;
      var predefine_component = normalizeComponent2(
        components_predefinevue_type_script_lang_js_,
        predefinevue_type_template_id_06e03093_render,
        predefinevue_type_template_id_06e03093_staticRenderFns,
        false,
        null,
        null,
        null
      );
      predefine_component.options.__file = "packages/color-picker/src/components/predefine.vue";
      var predefine = predefine_component.exports;
      var picker_dropdownvue_type_script_lang_js_ = {
        name: "el-color-picker-dropdown",
        mixins: [vue_popper_default.a, locale_default.a],
        components: {
          SvPanel: sv_panel,
          HueSlider: hue_slider,
          AlphaSlider: alpha_slider,
          ElInput: input_default.a,
          ElButton: button_default.a,
          Predefine: predefine
        },
        props: {
          color: {
            required: true
          },
          showAlpha: Boolean,
          predefine: Array
        },
        data: function data() {
          return {
            customInput: ""
          };
        },
        computed: {
          currentColor: function currentColor() {
            var parent = this.$parent;
            return !parent.value && !parent.showPanelColor ? "" : parent.color.value;
          }
        },
        methods: {
          confirmValue: function confirmValue() {
            this.$emit("pick");
          },
          handleConfirm: function handleConfirm() {
            this.color.fromString(this.customInput);
          }
        },
        mounted: function mounted2() {
          this.$parent.popperElm = this.popperElm = this.$el;
          this.referenceElm = this.$parent.$el;
        },
        watch: {
          showPopper: function showPopper(val) {
            var _this = this;
            if (val === true) {
              this.$nextTick(function() {
                var _$refs = _this.$refs, sl = _$refs.sl, hue = _$refs.hue, alpha = _$refs.alpha;
                sl && sl.update();
                hue && hue.update();
                alpha && alpha.update();
              });
            }
          },
          currentColor: {
            immediate: true,
            handler: function handler(val) {
              this.customInput = val;
            }
          }
        }
      };
      var components_picker_dropdownvue_type_script_lang_js_ = picker_dropdownvue_type_script_lang_js_;
      var picker_dropdown_component = normalizeComponent2(
        components_picker_dropdownvue_type_script_lang_js_,
        picker_dropdownvue_type_template_id_06601625_render,
        picker_dropdownvue_type_template_id_06601625_staticRenderFns,
        false,
        null,
        null,
        null
      );
      picker_dropdown_component.options.__file = "packages/color-picker/src/components/picker-dropdown.vue";
      var picker_dropdown = picker_dropdown_component.exports;
      var color_picker_src_mainvue_type_script_lang_js_ = {
        name: "ElColorPicker",
        mixins: [emitter_default.a],
        props: {
          value: String,
          showAlpha: Boolean,
          colorFormat: String,
          disabled: Boolean,
          size: String,
          popperClass: String,
          predefine: Array
        },
        inject: {
          elForm: {
            default: ""
          },
          elFormItem: {
            default: ""
          }
        },
        directives: { Clickoutside: clickoutside_default.a },
        computed: {
          displayedColor: function displayedColor() {
            if (!this.value && !this.showPanelColor) {
              return "transparent";
            }
            return this.displayedRgb(this.color, this.showAlpha);
          },
          _elFormItemSize: function _elFormItemSize() {
            return (this.elFormItem || {}).elFormItemSize;
          },
          colorSize: function colorSize() {
            return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;
          },
          colorDisabled: function colorDisabled() {
            return this.disabled || (this.elForm || {}).disabled;
          }
        },
        watch: {
          value: function value(val) {
            if (!val) {
              this.showPanelColor = false;
            } else if (val && val !== this.color.value) {
              this.color.fromString(val);
            }
          },
          color: {
            deep: true,
            handler: function handler() {
              this.showPanelColor = true;
            }
          },
          displayedColor: function displayedColor(val) {
            if (!this.showPicker)
              return;
            var currentValueColor = new src_color({
              enableAlpha: this.showAlpha,
              format: this.colorFormat
            });
            currentValueColor.fromString(this.value);
            var currentValueColorRgb = this.displayedRgb(currentValueColor, this.showAlpha);
            if (val !== currentValueColorRgb) {
              this.$emit("active-change", val);
            }
          }
        },
        methods: {
          handleTrigger: function handleTrigger() {
            if (this.colorDisabled)
              return;
            this.showPicker = !this.showPicker;
          },
          confirmValue: function confirmValue() {
            var value = this.color.value;
            this.$emit("input", value);
            this.$emit("change", value);
            this.dispatch("ElFormItem", "el.form.change", value);
            this.showPicker = false;
          },
          clearValue: function clearValue() {
            this.$emit("input", null);
            this.$emit("change", null);
            if (this.value !== null) {
              this.dispatch("ElFormItem", "el.form.change", null);
            }
            this.showPanelColor = false;
            this.showPicker = false;
            this.resetColor();
          },
          hide: function hide2() {
            this.showPicker = false;
            this.resetColor();
          },
          resetColor: function resetColor() {
            var _this = this;
            this.$nextTick(function(_) {
              if (_this.value) {
                _this.color.fromString(_this.value);
              } else {
                _this.showPanelColor = false;
              }
            });
          },
          displayedRgb: function displayedRgb(color, showAlpha) {
            if (!(color instanceof src_color)) {
              throw Error("color should be instance of Color Class");
            }
            var _color$toRgb = color.toRgb(), r = _color$toRgb.r, g = _color$toRgb.g, b = _color$toRgb.b;
            return showAlpha ? "rgba(" + r + ", " + g + ", " + b + ", " + color.get("alpha") / 100 + ")" : "rgb(" + r + ", " + g + ", " + b + ")";
          }
        },
        mounted: function mounted2() {
          var value = this.value;
          if (value) {
            this.color.fromString(value);
          }
          this.popperElm = this.$refs.dropdown.$el;
        },
        data: function data() {
          var color = new src_color({
            enableAlpha: this.showAlpha,
            format: this.colorFormat
          });
          return {
            color,
            showPicker: false,
            showPanelColor: false
          };
        },
        components: {
          PickerDropdown: picker_dropdown
        }
      };
      var packages_color_picker_src_mainvue_type_script_lang_js_ = color_picker_src_mainvue_type_script_lang_js_;
      var color_picker_src_main_component = normalizeComponent2(
        packages_color_picker_src_mainvue_type_script_lang_js_,
        mainvue_type_template_id_55c8ade7_render,
        mainvue_type_template_id_55c8ade7_staticRenderFns,
        false,
        null,
        null,
        null
      );
      color_picker_src_main_component.options.__file = "packages/color-picker/src/main.vue";
      var color_picker_src_main = color_picker_src_main_component.exports;
      color_picker_src_main.install = function(Vue2) {
        Vue2.component(color_picker_src_main.name, color_picker_src_main);
      };
      var color_picker = color_picker_src_main;
      var mainvue_type_template_id_5c654dd8_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          { staticClass: "el-transfer" },
          [
            _c(
              "transfer-panel",
              _vm._b(
                {
                  ref: "leftPanel",
                  attrs: {
                    data: _vm.sourceData,
                    title: _vm.titles[0] || _vm.t("el.transfer.titles.0"),
                    "default-checked": _vm.leftDefaultChecked,
                    placeholder: _vm.filterPlaceholder || _vm.t("el.transfer.filterPlaceholder")
                  },
                  on: { "checked-change": _vm.onSourceCheckedChange }
                },
                "transfer-panel",
                _vm.$props,
                false
              ),
              [_vm._t("left-footer")],
              2
            ),
            _c(
              "div",
              { staticClass: "el-transfer__buttons" },
              [
                _c(
                  "el-button",
                  {
                    class: [
                      "el-transfer__button",
                      _vm.hasButtonTexts ? "is-with-texts" : ""
                    ],
                    attrs: {
                      type: "primary",
                      disabled: _vm.rightChecked.length === 0
                    },
                    nativeOn: {
                      click: function($event) {
                        return _vm.addToLeft($event);
                      }
                    }
                  },
                  [
                    _c("i", { staticClass: "el-icon-arrow-left" }),
                    _vm.buttonTexts[0] !== void 0 ? _c("span", [_vm._v(_vm._s(_vm.buttonTexts[0]))]) : _vm._e()
                  ]
                ),
                _c(
                  "el-button",
                  {
                    class: [
                      "el-transfer__button",
                      _vm.hasButtonTexts ? "is-with-texts" : ""
                    ],
                    attrs: {
                      type: "primary",
                      disabled: _vm.leftChecked.length === 0
                    },
                    nativeOn: {
                      click: function($event) {
                        return _vm.addToRight($event);
                      }
                    }
                  },
                  [
                    _vm.buttonTexts[1] !== void 0 ? _c("span", [_vm._v(_vm._s(_vm.buttonTexts[1]))]) : _vm._e(),
                    _c("i", { staticClass: "el-icon-arrow-right" })
                  ]
                )
              ],
              1
            ),
            _c(
              "transfer-panel",
              _vm._b(
                {
                  ref: "rightPanel",
                  attrs: {
                    data: _vm.targetData,
                    title: _vm.titles[1] || _vm.t("el.transfer.titles.1"),
                    "default-checked": _vm.rightDefaultChecked,
                    placeholder: _vm.filterPlaceholder || _vm.t("el.transfer.filterPlaceholder")
                  },
                  on: { "checked-change": _vm.onTargetCheckedChange }
                },
                "transfer-panel",
                _vm.$props,
                false
              ),
              [_vm._t("right-footer")],
              2
            )
          ],
          1
        );
      };
      var mainvue_type_template_id_5c654dd8_staticRenderFns = [];
      mainvue_type_template_id_5c654dd8_render._withStripped = true;
      var transfer_panelvue_type_template_id_2ddab8bd_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", { staticClass: "el-transfer-panel" }, [
          _c(
            "p",
            { staticClass: "el-transfer-panel__header" },
            [
              _c(
                "el-checkbox",
                {
                  attrs: { indeterminate: _vm.isIndeterminate },
                  on: { change: _vm.handleAllCheckedChange },
                  model: {
                    value: _vm.allChecked,
                    callback: function($$v) {
                      _vm.allChecked = $$v;
                    },
                    expression: "allChecked"
                  }
                },
                [
                  _vm._v("\n      " + _vm._s(_vm.title) + "\n      "),
                  _c("span", [_vm._v(_vm._s(_vm.checkedSummary))])
                ]
              )
            ],
            1
          ),
          _c(
            "div",
            {
              class: [
                "el-transfer-panel__body",
                _vm.hasFooter ? "is-with-footer" : ""
              ]
            },
            [
              _vm.filterable ? _c(
                "el-input",
                {
                  staticClass: "el-transfer-panel__filter",
                  attrs: { size: "small", placeholder: _vm.placeholder },
                  nativeOn: {
                    mouseenter: function($event) {
                      _vm.inputHover = true;
                    },
                    mouseleave: function($event) {
                      _vm.inputHover = false;
                    }
                  },
                  model: {
                    value: _vm.query,
                    callback: function($$v) {
                      _vm.query = $$v;
                    },
                    expression: "query"
                  }
                },
                [
                  _c("i", {
                    class: ["el-input__icon", "el-icon-" + _vm.inputIcon],
                    attrs: { slot: "prefix" },
                    on: { click: _vm.clearQuery },
                    slot: "prefix"
                  })
                ]
              ) : _vm._e(),
              _c(
                "el-checkbox-group",
                {
                  directives: [
                    {
                      name: "show",
                      rawName: "v-show",
                      value: !_vm.hasNoMatch && _vm.data.length > 0,
                      expression: "!hasNoMatch && data.length > 0"
                    }
                  ],
                  staticClass: "el-transfer-panel__list",
                  class: { "is-filterable": _vm.filterable },
                  model: {
                    value: _vm.checked,
                    callback: function($$v) {
                      _vm.checked = $$v;
                    },
                    expression: "checked"
                  }
                },
                _vm._l(_vm.filteredData, function(item) {
                  return _c(
                    "el-checkbox",
                    {
                      key: item[_vm.keyProp],
                      staticClass: "el-transfer-panel__item",
                      attrs: {
                        label: item[_vm.keyProp],
                        disabled: item[_vm.disabledProp]
                      }
                    },
                    [_c("option-content", { attrs: { option: item } })],
                    1
                  );
                }),
                1
              ),
              _c(
                "p",
                {
                  directives: [
                    {
                      name: "show",
                      rawName: "v-show",
                      value: _vm.hasNoMatch,
                      expression: "hasNoMatch"
                    }
                  ],
                  staticClass: "el-transfer-panel__empty"
                },
                [_vm._v(_vm._s(_vm.t("el.transfer.noMatch")))]
              ),
              _c(
                "p",
                {
                  directives: [
                    {
                      name: "show",
                      rawName: "v-show",
                      value: _vm.data.length === 0 && !_vm.hasNoMatch,
                      expression: "data.length === 0 && !hasNoMatch"
                    }
                  ],
                  staticClass: "el-transfer-panel__empty"
                },
                [_vm._v(_vm._s(_vm.t("el.transfer.noData")))]
              )
            ],
            1
          ),
          _vm.hasFooter ? _c(
            "p",
            { staticClass: "el-transfer-panel__footer" },
            [_vm._t("default")],
            2
          ) : _vm._e()
        ]);
      };
      var transfer_panelvue_type_template_id_2ddab8bd_staticRenderFns = [];
      transfer_panelvue_type_template_id_2ddab8bd_render._withStripped = true;
      var transfer_panelvue_type_script_lang_js_ = {
        mixins: [locale_default.a],
        name: "ElTransferPanel",
        componentName: "ElTransferPanel",
        components: {
          ElCheckboxGroup: checkbox_group_default.a,
          ElCheckbox: checkbox_default.a,
          ElInput: input_default.a,
          OptionContent: {
            props: {
              option: Object
            },
            render: function render6(h2) {
              var getParent = function getParent2(vm) {
                if (vm.$options.componentName === "ElTransferPanel") {
                  return vm;
                } else if (vm.$parent) {
                  return getParent2(vm.$parent);
                } else {
                  return vm;
                }
              };
              var panel = getParent(this);
              var transfer2 = panel.$parent || panel;
              return panel.renderContent ? panel.renderContent(h2, this.option) : transfer2.$scopedSlots.default ? transfer2.$scopedSlots.default({ option: this.option }) : h2("span", [this.option[panel.labelProp] || this.option[panel.keyProp]]);
            }
          }
        },
        props: {
          data: {
            type: Array,
            default: function _default2() {
              return [];
            }
          },
          renderContent: Function,
          placeholder: String,
          title: String,
          filterable: Boolean,
          format: Object,
          filterMethod: Function,
          defaultChecked: Array,
          props: Object
        },
        data: function data() {
          return {
            checked: [],
            allChecked: false,
            query: "",
            inputHover: false,
            checkChangeByUser: true
          };
        },
        watch: {
          checked: function checked(val, oldVal) {
            this.updateAllChecked();
            if (this.checkChangeByUser) {
              var movedKeys = val.concat(oldVal).filter(function(v) {
                return val.indexOf(v) === -1 || oldVal.indexOf(v) === -1;
              });
              this.$emit("checked-change", val, movedKeys);
            } else {
              this.$emit("checked-change", val);
              this.checkChangeByUser = true;
            }
          },
          data: function data() {
            var _this = this;
            var checked = [];
            var filteredDataKeys = this.filteredData.map(function(item) {
              return item[_this.keyProp];
            });
            this.checked.forEach(function(item) {
              if (filteredDataKeys.indexOf(item) > -1) {
                checked.push(item);
              }
            });
            this.checkChangeByUser = false;
            this.checked = checked;
          },
          checkableData: function checkableData() {
            this.updateAllChecked();
          },
          defaultChecked: {
            immediate: true,
            handler: function handler(val, oldVal) {
              var _this2 = this;
              if (oldVal && val.length === oldVal.length && val.every(function(item) {
                return oldVal.indexOf(item) > -1;
              }))
                return;
              var checked = [];
              var checkableDataKeys = this.checkableData.map(function(item) {
                return item[_this2.keyProp];
              });
              val.forEach(function(item) {
                if (checkableDataKeys.indexOf(item) > -1) {
                  checked.push(item);
                }
              });
              this.checkChangeByUser = false;
              this.checked = checked;
            }
          }
        },
        computed: {
          filteredData: function filteredData() {
            var _this3 = this;
            return this.data.filter(function(item) {
              if (typeof _this3.filterMethod === "function") {
                return _this3.filterMethod(_this3.query, item);
              } else {
                var label = item[_this3.labelProp] || item[_this3.keyProp].toString();
                return label.toLowerCase().indexOf(_this3.query.toLowerCase()) > -1;
              }
            });
          },
          checkableData: function checkableData() {
            var _this4 = this;
            return this.filteredData.filter(function(item) {
              return !item[_this4.disabledProp];
            });
          },
          checkedSummary: function checkedSummary() {
            var checkedLength = this.checked.length;
            var dataLength = this.data.length;
            var _format = this.format, noChecked = _format.noChecked, hasChecked = _format.hasChecked;
            if (noChecked && hasChecked) {
              return checkedLength > 0 ? hasChecked.replace(/\${checked}/g, checkedLength).replace(/\${total}/g, dataLength) : noChecked.replace(/\${total}/g, dataLength);
            } else {
              return checkedLength + "/" + dataLength;
            }
          },
          isIndeterminate: function isIndeterminate() {
            var checkedLength = this.checked.length;
            return checkedLength > 0 && checkedLength < this.checkableData.length;
          },
          hasNoMatch: function hasNoMatch() {
            return this.query.length > 0 && this.filteredData.length === 0;
          },
          inputIcon: function inputIcon() {
            return this.query.length > 0 && this.inputHover ? "circle-close" : "search";
          },
          labelProp: function labelProp() {
            return this.props.label || "label";
          },
          keyProp: function keyProp() {
            return this.props.key || "key";
          },
          disabledProp: function disabledProp() {
            return this.props.disabled || "disabled";
          },
          hasFooter: function hasFooter() {
            return !!this.$slots.default;
          }
        },
        methods: {
          updateAllChecked: function updateAllChecked() {
            var _this5 = this;
            var checkableDataKeys = this.checkableData.map(function(item) {
              return item[_this5.keyProp];
            });
            this.allChecked = checkableDataKeys.length > 0 && checkableDataKeys.every(function(item) {
              return _this5.checked.indexOf(item) > -1;
            });
          },
          handleAllCheckedChange: function handleAllCheckedChange(value) {
            var _this6 = this;
            this.checked = value ? this.checkableData.map(function(item) {
              return item[_this6.keyProp];
            }) : [];
          },
          clearQuery: function clearQuery() {
            if (this.inputIcon === "circle-close") {
              this.query = "";
            }
          }
        }
      };
      var src_transfer_panelvue_type_script_lang_js_ = transfer_panelvue_type_script_lang_js_;
      var transfer_panel_component = normalizeComponent2(
        src_transfer_panelvue_type_script_lang_js_,
        transfer_panelvue_type_template_id_2ddab8bd_render,
        transfer_panelvue_type_template_id_2ddab8bd_staticRenderFns,
        false,
        null,
        null,
        null
      );
      transfer_panel_component.options.__file = "packages/transfer/src/transfer-panel.vue";
      var transfer_panel = transfer_panel_component.exports;
      var transfer_src_mainvue_type_script_lang_js_ = {
        name: "ElTransfer",
        mixins: [emitter_default.a, locale_default.a, migrating_default.a],
        components: {
          TransferPanel: transfer_panel,
          ElButton: button_default.a
        },
        props: {
          data: {
            type: Array,
            default: function _default2() {
              return [];
            }
          },
          titles: {
            type: Array,
            default: function _default2() {
              return [];
            }
          },
          buttonTexts: {
            type: Array,
            default: function _default2() {
              return [];
            }
          },
          filterPlaceholder: {
            type: String,
            default: ""
          },
          filterMethod: Function,
          leftDefaultChecked: {
            type: Array,
            default: function _default2() {
              return [];
            }
          },
          rightDefaultChecked: {
            type: Array,
            default: function _default2() {
              return [];
            }
          },
          renderContent: Function,
          value: {
            type: Array,
            default: function _default2() {
              return [];
            }
          },
          format: {
            type: Object,
            default: function _default2() {
              return {};
            }
          },
          filterable: Boolean,
          props: {
            type: Object,
            default: function _default2() {
              return {
                label: "label",
                key: "key",
                disabled: "disabled"
              };
            }
          },
          targetOrder: {
            type: String,
            default: "original"
          }
        },
        data: function data() {
          return {
            leftChecked: [],
            rightChecked: []
          };
        },
        computed: {
          dataObj: function dataObj() {
            var key = this.props.key;
            return this.data.reduce(function(o, cur) {
              return (o[cur[key]] = cur) && o;
            }, {});
          },
          sourceData: function sourceData() {
            var _this = this;
            return this.data.filter(function(item) {
              return _this.value.indexOf(item[_this.props.key]) === -1;
            });
          },
          targetData: function targetData() {
            var _this2 = this;
            if (this.targetOrder === "original") {
              return this.data.filter(function(item) {
                return _this2.value.indexOf(item[_this2.props.key]) > -1;
              });
            } else {
              return this.value.reduce(function(arr, cur) {
                var val = _this2.dataObj[cur];
                if (val) {
                  arr.push(val);
                }
                return arr;
              }, []);
            }
          },
          hasButtonTexts: function hasButtonTexts() {
            return this.buttonTexts.length === 2;
          }
        },
        watch: {
          value: function value(val) {
            this.dispatch("ElFormItem", "el.form.change", val);
          }
        },
        methods: {
          getMigratingConfig: function getMigratingConfig() {
            return {
              props: {
                "footer-format": "footer-format is renamed to format."
              }
            };
          },
          onSourceCheckedChange: function onSourceCheckedChange(val, movedKeys) {
            this.leftChecked = val;
            if (movedKeys === void 0)
              return;
            this.$emit("left-check-change", val, movedKeys);
          },
          onTargetCheckedChange: function onTargetCheckedChange(val, movedKeys) {
            this.rightChecked = val;
            if (movedKeys === void 0)
              return;
            this.$emit("right-check-change", val, movedKeys);
          },
          addToLeft: function addToLeft() {
            var currentValue = this.value.slice();
            this.rightChecked.forEach(function(item) {
              var index2 = currentValue.indexOf(item);
              if (index2 > -1) {
                currentValue.splice(index2, 1);
              }
            });
            this.$emit("input", currentValue);
            this.$emit("change", currentValue, "left", this.rightChecked);
          },
          addToRight: function addToRight() {
            var _this3 = this;
            var currentValue = this.value.slice();
            var itemsToBeMoved = [];
            var key = this.props.key;
            this.data.forEach(function(item) {
              var itemKey = item[key];
              if (_this3.leftChecked.indexOf(itemKey) > -1 && _this3.value.indexOf(itemKey) === -1) {
                itemsToBeMoved.push(itemKey);
              }
            });
            currentValue = this.targetOrder === "unshift" ? itemsToBeMoved.concat(currentValue) : currentValue.concat(itemsToBeMoved);
            this.$emit("input", currentValue);
            this.$emit("change", currentValue, "right", this.leftChecked);
          },
          clearQuery: function clearQuery(which) {
            if (which === "left") {
              this.$refs.leftPanel.query = "";
            } else if (which === "right") {
              this.$refs.rightPanel.query = "";
            }
          }
        }
      };
      var packages_transfer_src_mainvue_type_script_lang_js_ = transfer_src_mainvue_type_script_lang_js_;
      var transfer_src_main_component = normalizeComponent2(
        packages_transfer_src_mainvue_type_script_lang_js_,
        mainvue_type_template_id_5c654dd8_render,
        mainvue_type_template_id_5c654dd8_staticRenderFns,
        false,
        null,
        null,
        null
      );
      transfer_src_main_component.options.__file = "packages/transfer/src/main.vue";
      var transfer_src_main = transfer_src_main_component.exports;
      transfer_src_main.install = function(Vue2) {
        Vue2.component(transfer_src_main.name, transfer_src_main);
      };
      var transfer = transfer_src_main;
      var mainvue_type_template_id_5bf181d4_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "section",
          { staticClass: "el-container", class: { "is-vertical": _vm.isVertical } },
          [_vm._t("default")],
          2
        );
      };
      var mainvue_type_template_id_5bf181d4_staticRenderFns = [];
      mainvue_type_template_id_5bf181d4_render._withStripped = true;
      var container_src_mainvue_type_script_lang_js_ = {
        name: "ElContainer",
        componentName: "ElContainer",
        props: {
          direction: String
        },
        computed: {
          isVertical: function isVertical() {
            if (this.direction === "vertical") {
              return true;
            } else if (this.direction === "horizontal") {
              return false;
            }
            return this.$slots && this.$slots.default ? this.$slots.default.some(function(vnode) {
              var tag2 = vnode.componentOptions && vnode.componentOptions.tag;
              return tag2 === "el-header" || tag2 === "el-footer";
            }) : false;
          }
        }
      };
      var packages_container_src_mainvue_type_script_lang_js_ = container_src_mainvue_type_script_lang_js_;
      var container_src_main_component = normalizeComponent2(
        packages_container_src_mainvue_type_script_lang_js_,
        mainvue_type_template_id_5bf181d4_render,
        mainvue_type_template_id_5bf181d4_staticRenderFns,
        false,
        null,
        null,
        null
      );
      container_src_main_component.options.__file = "packages/container/src/main.vue";
      var container_src_main = container_src_main_component.exports;
      container_src_main.install = function(Vue2) {
        Vue2.component(container_src_main.name, container_src_main);
      };
      var packages_container = container_src_main;
      var mainvue_type_template_id_2b296ab2_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "header",
          { staticClass: "el-header", style: { height: _vm.height } },
          [_vm._t("default")],
          2
        );
      };
      var mainvue_type_template_id_2b296ab2_staticRenderFns = [];
      mainvue_type_template_id_2b296ab2_render._withStripped = true;
      var header_src_mainvue_type_script_lang_js_ = {
        name: "ElHeader",
        componentName: "ElHeader",
        props: {
          height: {
            type: String,
            default: "60px"
          }
        }
      };
      var packages_header_src_mainvue_type_script_lang_js_ = header_src_mainvue_type_script_lang_js_;
      var header_src_main_component = normalizeComponent2(
        packages_header_src_mainvue_type_script_lang_js_,
        mainvue_type_template_id_2b296ab2_render,
        mainvue_type_template_id_2b296ab2_staticRenderFns,
        false,
        null,
        null,
        null
      );
      header_src_main_component.options.__file = "packages/header/src/main.vue";
      var header_src_main = header_src_main_component.exports;
      header_src_main.install = function(Vue2) {
        Vue2.component(header_src_main.name, header_src_main);
      };
      var header = header_src_main;
      var mainvue_type_template_id_03411dbf_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "aside",
          { staticClass: "el-aside", style: { width: _vm.width } },
          [_vm._t("default")],
          2
        );
      };
      var mainvue_type_template_id_03411dbf_staticRenderFns = [];
      mainvue_type_template_id_03411dbf_render._withStripped = true;
      var aside_src_mainvue_type_script_lang_js_ = {
        name: "ElAside",
        componentName: "ElAside",
        props: {
          width: {
            type: String,
            default: "300px"
          }
        }
      };
      var packages_aside_src_mainvue_type_script_lang_js_ = aside_src_mainvue_type_script_lang_js_;
      var aside_src_main_component = normalizeComponent2(
        packages_aside_src_mainvue_type_script_lang_js_,
        mainvue_type_template_id_03411dbf_render,
        mainvue_type_template_id_03411dbf_staticRenderFns,
        false,
        null,
        null,
        null
      );
      aside_src_main_component.options.__file = "packages/aside/src/main.vue";
      var aside_src_main = aside_src_main_component.exports;
      aside_src_main.install = function(Vue2) {
        Vue2.component(aside_src_main.name, aside_src_main);
      };
      var aside = aside_src_main;
      var mainvue_type_template_id_2a3a7406_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("main", { staticClass: "el-main" }, [_vm._t("default")], 2);
      };
      var mainvue_type_template_id_2a3a7406_staticRenderFns = [];
      mainvue_type_template_id_2a3a7406_render._withStripped = true;
      var main_src_mainvue_type_script_lang_js_ = {
        name: "ElMain",
        componentName: "ElMain"
      };
      var packages_main_src_mainvue_type_script_lang_js_ = main_src_mainvue_type_script_lang_js_;
      var main_src_main_component = normalizeComponent2(
        packages_main_src_mainvue_type_script_lang_js_,
        mainvue_type_template_id_2a3a7406_render,
        mainvue_type_template_id_2a3a7406_staticRenderFns,
        false,
        null,
        null,
        null
      );
      main_src_main_component.options.__file = "packages/main/src/main.vue";
      var main_src_main = main_src_main_component.exports;
      main_src_main.install = function(Vue2) {
        Vue2.component(main_src_main.name, main_src_main);
      };
      var packages_main = main_src_main;
      var mainvue_type_template_id_80210338_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "footer",
          { staticClass: "el-footer", style: { height: _vm.height } },
          [_vm._t("default")],
          2
        );
      };
      var mainvue_type_template_id_80210338_staticRenderFns = [];
      mainvue_type_template_id_80210338_render._withStripped = true;
      var footer_src_mainvue_type_script_lang_js_ = {
        name: "ElFooter",
        componentName: "ElFooter",
        props: {
          height: {
            type: String,
            default: "60px"
          }
        }
      };
      var packages_footer_src_mainvue_type_script_lang_js_ = footer_src_mainvue_type_script_lang_js_;
      var footer_src_main_component = normalizeComponent2(
        packages_footer_src_mainvue_type_script_lang_js_,
        mainvue_type_template_id_80210338_render,
        mainvue_type_template_id_80210338_staticRenderFns,
        false,
        null,
        null,
        null
      );
      footer_src_main_component.options.__file = "packages/footer/src/main.vue";
      var footer_src_main = footer_src_main_component.exports;
      footer_src_main.install = function(Vue2) {
        Vue2.component(footer_src_main.name, footer_src_main);
      };
      var footer = footer_src_main;
      var timeline_src_mainvue_type_script_lang_js_ = {
        name: "ElTimeline",
        props: {
          reverse: {
            type: Boolean,
            default: false
          }
        },
        provide: function provide2() {
          return {
            timeline: this
          };
        },
        render: function render6() {
          var h2 = arguments[0];
          var reverse = this.reverse;
          var classes = {
            "el-timeline": true,
            "is-reverse": reverse
          };
          var slots = this.$slots.default || [];
          if (reverse) {
            slots = slots.reverse();
          }
          return h2(
            "ul",
            { "class": classes },
            [slots]
          );
        }
      };
      var packages_timeline_src_mainvue_type_script_lang_js_ = timeline_src_mainvue_type_script_lang_js_;
      var main_render, main_staticRenderFns;
      var timeline_src_main_component = normalizeComponent2(
        packages_timeline_src_mainvue_type_script_lang_js_,
        main_render,
        main_staticRenderFns,
        false,
        null,
        null,
        null
      );
      timeline_src_main_component.options.__file = "packages/timeline/src/main.vue";
      var timeline_src_main = timeline_src_main_component.exports;
      timeline_src_main.install = function(Vue2) {
        Vue2.component(timeline_src_main.name, timeline_src_main);
      };
      var timeline = timeline_src_main;
      var itemvue_type_template_id_61a69e50_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("li", { staticClass: "el-timeline-item" }, [
          _c("div", { staticClass: "el-timeline-item__tail" }),
          !_vm.$slots.dot ? _c(
            "div",
            {
              staticClass: "el-timeline-item__node",
              class: [
                "el-timeline-item__node--" + (_vm.size || ""),
                "el-timeline-item__node--" + (_vm.type || "")
              ],
              style: {
                backgroundColor: _vm.color
              }
            },
            [
              _vm.icon ? _c("i", {
                staticClass: "el-timeline-item__icon",
                class: _vm.icon
              }) : _vm._e()
            ]
          ) : _vm._e(),
          _vm.$slots.dot ? _c("div", { staticClass: "el-timeline-item__dot" }, [_vm._t("dot")], 2) : _vm._e(),
          _c("div", { staticClass: "el-timeline-item__wrapper" }, [
            !_vm.hideTimestamp && _vm.placement === "top" ? _c("div", { staticClass: "el-timeline-item__timestamp is-top" }, [
              _vm._v("\n      " + _vm._s(_vm.timestamp) + "\n    ")
            ]) : _vm._e(),
            _c(
              "div",
              { staticClass: "el-timeline-item__content" },
              [_vm._t("default")],
              2
            ),
            !_vm.hideTimestamp && _vm.placement === "bottom" ? _c("div", { staticClass: "el-timeline-item__timestamp is-bottom" }, [
              _vm._v("\n      " + _vm._s(_vm.timestamp) + "\n    ")
            ]) : _vm._e()
          ])
        ]);
      };
      var itemvue_type_template_id_61a69e50_staticRenderFns = [];
      itemvue_type_template_id_61a69e50_render._withStripped = true;
      var timeline_src_itemvue_type_script_lang_js_ = {
        name: "ElTimelineItem",
        inject: ["timeline"],
        props: {
          timestamp: String,
          hideTimestamp: {
            type: Boolean,
            default: false
          },
          placement: {
            type: String,
            default: "bottom"
          },
          type: String,
          color: String,
          size: {
            type: String,
            default: "normal"
          },
          icon: String
        }
      };
      var packages_timeline_src_itemvue_type_script_lang_js_ = timeline_src_itemvue_type_script_lang_js_;
      var src_item_component = normalizeComponent2(
        packages_timeline_src_itemvue_type_script_lang_js_,
        itemvue_type_template_id_61a69e50_render,
        itemvue_type_template_id_61a69e50_staticRenderFns,
        false,
        null,
        null,
        null
      );
      src_item_component.options.__file = "packages/timeline/src/item.vue";
      var timeline_src_item = src_item_component.exports;
      timeline_src_item.install = function(Vue2) {
        Vue2.component(timeline_src_item.name, timeline_src_item);
      };
      var timeline_item = timeline_src_item;
      var mainvue_type_template_id_01cf3b65_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "a",
          _vm._b(
            {
              class: [
                "el-link",
                _vm.type ? "el-link--" + _vm.type : "",
                _vm.disabled && "is-disabled",
                _vm.underline && !_vm.disabled && "is-underline"
              ],
              attrs: { href: _vm.disabled ? null : _vm.href },
              on: { click: _vm.handleClick }
            },
            "a",
            _vm.$attrs,
            false
          ),
          [
            _vm.icon ? _c("i", { class: _vm.icon }) : _vm._e(),
            _vm.$slots.default ? _c("span", { staticClass: "el-link--inner" }, [_vm._t("default")], 2) : _vm._e(),
            _vm.$slots.icon ? [_vm.$slots.icon ? _vm._t("icon") : _vm._e()] : _vm._e()
          ],
          2
        );
      };
      var mainvue_type_template_id_01cf3b65_staticRenderFns = [];
      mainvue_type_template_id_01cf3b65_render._withStripped = true;
      var link_src_mainvue_type_script_lang_js_ = {
        name: "ElLink",
        props: {
          type: {
            type: String,
            default: "default"
          },
          underline: {
            type: Boolean,
            default: true
          },
          disabled: Boolean,
          href: String,
          icon: String
        },
        methods: {
          handleClick: function handleClick(event) {
            if (!this.disabled) {
              if (!this.href) {
                this.$emit("click", event);
              }
            }
          }
        }
      };
      var packages_link_src_mainvue_type_script_lang_js_ = link_src_mainvue_type_script_lang_js_;
      var link_src_main_component = normalizeComponent2(
        packages_link_src_mainvue_type_script_lang_js_,
        mainvue_type_template_id_01cf3b65_render,
        mainvue_type_template_id_01cf3b65_staticRenderFns,
        false,
        null,
        null,
        null
      );
      link_src_main_component.options.__file = "packages/link/src/main.vue";
      var link_src_main = link_src_main_component.exports;
      link_src_main.install = function(Vue2) {
        Vue2.component(link_src_main.name, link_src_main);
      };
      var packages_link = link_src_main;
      var mainvue_type_template_id_7fa02a7e_functional_true_render = function(_h, _vm) {
        var _c = _vm._c;
        return _c(
          "div",
          _vm._g(
            _vm._b(
              {
                class: [
                  _vm.data.staticClass,
                  "el-divider",
                  "el-divider--" + _vm.props.direction
                ]
              },
              "div",
              _vm.data.attrs,
              false
            ),
            _vm.listeners
          ),
          [
            _vm.slots().default && _vm.props.direction !== "vertical" ? _c(
              "div",
              { class: ["el-divider__text", "is-" + _vm.props.contentPosition] },
              [_vm._t("default")],
              2
            ) : _vm._e()
          ]
        );
      };
      var mainvue_type_template_id_7fa02a7e_functional_true_staticRenderFns = [];
      mainvue_type_template_id_7fa02a7e_functional_true_render._withStripped = true;
      var divider_src_mainvue_type_script_lang_js_ = {
        name: "ElDivider",
        props: {
          direction: {
            type: String,
            default: "horizontal",
            validator: function validator(val) {
              return ["horizontal", "vertical"].indexOf(val) !== -1;
            }
          },
          contentPosition: {
            type: String,
            default: "center",
            validator: function validator(val) {
              return ["left", "center", "right"].indexOf(val) !== -1;
            }
          }
        }
      };
      var packages_divider_src_mainvue_type_script_lang_js_ = divider_src_mainvue_type_script_lang_js_;
      var divider_src_main_component = normalizeComponent2(
        packages_divider_src_mainvue_type_script_lang_js_,
        mainvue_type_template_id_7fa02a7e_functional_true_render,
        mainvue_type_template_id_7fa02a7e_functional_true_staticRenderFns,
        true,
        null,
        null,
        null
      );
      divider_src_main_component.options.__file = "packages/divider/src/main.vue";
      var divider_src_main = divider_src_main_component.exports;
      divider_src_main.install = function(Vue2) {
        Vue2.component(divider_src_main.name, divider_src_main);
      };
      var divider = divider_src_main;
      var mainvue_type_template_id_44d84a7c_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          { staticClass: "el-image" },
          [
            _vm.loading ? _vm._t("placeholder", [
              _c("div", { staticClass: "el-image__placeholder" })
            ]) : _vm.error ? _vm._t("error", [
              _c("div", { staticClass: "el-image__error" }, [
                _vm._v(_vm._s(_vm.t("el.image.error")))
              ])
            ]) : _c(
              "img",
              _vm._g(
                _vm._b(
                  {
                    staticClass: "el-image__inner",
                    class: {
                      "el-image__inner--center": _vm.alignCenter,
                      "el-image__preview": _vm.preview
                    },
                    style: _vm.imageStyle,
                    attrs: { src: _vm.src },
                    on: { click: _vm.clickHandler }
                  },
                  "img",
                  _vm.$attrs,
                  false
                ),
                _vm.$listeners
              )
            ),
            _vm.preview ? [
              _vm.showViewer ? _c("image-viewer", {
                attrs: {
                  "z-index": _vm.zIndex,
                  "initial-index": _vm.imageIndex,
                  "on-close": _vm.closeViewer,
                  "url-list": _vm.previewSrcList
                }
              }) : _vm._e()
            ] : _vm._e()
          ],
          2
        );
      };
      var mainvue_type_template_id_44d84a7c_staticRenderFns = [];
      mainvue_type_template_id_44d84a7c_render._withStripped = true;
      var image_viewervue_type_template_id_5e73b307_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", { attrs: { name: "viewer-fade" } }, [
          _c(
            "div",
            {
              ref: "el-image-viewer__wrapper",
              staticClass: "el-image-viewer__wrapper",
              style: { "z-index": _vm.viewerZIndex },
              attrs: { tabindex: "-1" }
            },
            [
              _c("div", {
                staticClass: "el-image-viewer__mask",
                on: {
                  click: function($event) {
                    if ($event.target !== $event.currentTarget) {
                      return null;
                    }
                    return _vm.handleMaskClick($event);
                  }
                }
              }),
              _c(
                "span",
                {
                  staticClass: "el-image-viewer__btn el-image-viewer__close",
                  on: { click: _vm.hide }
                },
                [_c("i", { staticClass: "el-icon-close" })]
              ),
              !_vm.isSingle ? [
                _c(
                  "span",
                  {
                    staticClass: "el-image-viewer__btn el-image-viewer__prev",
                    class: { "is-disabled": !_vm.infinite && _vm.isFirst },
                    on: { click: _vm.prev }
                  },
                  [_c("i", { staticClass: "el-icon-arrow-left" })]
                ),
                _c(
                  "span",
                  {
                    staticClass: "el-image-viewer__btn el-image-viewer__next",
                    class: { "is-disabled": !_vm.infinite && _vm.isLast },
                    on: { click: _vm.next }
                  },
                  [_c("i", { staticClass: "el-icon-arrow-right" })]
                )
              ] : _vm._e(),
              _c(
                "div",
                { staticClass: "el-image-viewer__btn el-image-viewer__actions" },
                [
                  _c("div", { staticClass: "el-image-viewer__actions__inner" }, [
                    _c("i", {
                      staticClass: "el-icon-zoom-out",
                      on: {
                        click: function($event) {
                          _vm.handleActions("zoomOut");
                        }
                      }
                    }),
                    _c("i", {
                      staticClass: "el-icon-zoom-in",
                      on: {
                        click: function($event) {
                          _vm.handleActions("zoomIn");
                        }
                      }
                    }),
                    _c("i", { staticClass: "el-image-viewer__actions__divider" }),
                    _c("i", { class: _vm.mode.icon, on: { click: _vm.toggleMode } }),
                    _c("i", { staticClass: "el-image-viewer__actions__divider" }),
                    _c("i", {
                      staticClass: "el-icon-refresh-left",
                      on: {
                        click: function($event) {
                          _vm.handleActions("anticlocelise");
                        }
                      }
                    }),
                    _c("i", {
                      staticClass: "el-icon-refresh-right",
                      on: {
                        click: function($event) {
                          _vm.handleActions("clocelise");
                        }
                      }
                    })
                  ])
                ]
              ),
              _c(
                "div",
                { staticClass: "el-image-viewer__canvas" },
                _vm._l(_vm.urlList, function(url2, i) {
                  return i === _vm.index ? _c("img", {
                    key: url2,
                    ref: "img",
                    refInFor: true,
                    staticClass: "el-image-viewer__img",
                    style: _vm.imgStyle,
                    attrs: { src: _vm.currentImg, referrerpolicy: "no-referrer" },
                    on: {
                      load: _vm.handleImgLoad,
                      error: _vm.handleImgError,
                      mousedown: _vm.handleMouseDown
                    }
                  }) : _vm._e();
                }),
                0
              )
            ],
            2
          )
        ]);
      };
      var image_viewervue_type_template_id_5e73b307_staticRenderFns = [];
      image_viewervue_type_template_id_5e73b307_render._withStripped = true;
      var image_viewervue_type_script_lang_js_extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target2[key] = source[key];
            }
          }
        }
        return target2;
      };
      var Mode = {
        CONTAIN: {
          name: "contain",
          icon: "el-icon-full-screen"
        },
        ORIGINAL: {
          name: "original",
          icon: "el-icon-c-scale-to-original"
        }
      };
      var mousewheelEventName = Object(util_["isFirefox"])() ? "DOMMouseScroll" : "mousewheel";
      var image_viewervue_type_script_lang_js_ = {
        name: "elImageViewer",
        props: {
          urlList: {
            type: Array,
            default: function _default2() {
              return [];
            }
          },
          zIndex: {
            type: Number,
            default: 2e3
          },
          onSwitch: {
            type: Function,
            default: function _default2() {
            }
          },
          onClose: {
            type: Function,
            default: function _default2() {
            }
          },
          initialIndex: {
            type: Number,
            default: 0
          },
          appendToBody: {
            type: Boolean,
            default: true
          },
          maskClosable: {
            type: Boolean,
            default: true
          }
        },
        data: function data() {
          return {
            index: this.initialIndex,
            isShow: false,
            infinite: true,
            loading: false,
            mode: Mode.CONTAIN,
            transform: {
              scale: 1,
              deg: 0,
              offsetX: 0,
              offsetY: 0,
              enableTransition: false
            }
          };
        },
        computed: {
          isSingle: function isSingle() {
            return this.urlList.length <= 1;
          },
          isFirst: function isFirst() {
            return this.index === 0;
          },
          isLast: function isLast() {
            return this.index === this.urlList.length - 1;
          },
          currentImg: function currentImg() {
            return this.urlList[this.index];
          },
          imgStyle: function imgStyle() {
            var _transform = this.transform, scale = _transform.scale, deg = _transform.deg, offsetX = _transform.offsetX, offsetY = _transform.offsetY, enableTransition = _transform.enableTransition;
            var style2 = {
              transform: "scale(" + scale + ") rotate(" + deg + "deg)",
              transition: enableTransition ? "transform .3s" : "",
              "margin-left": offsetX + "px",
              "margin-top": offsetY + "px"
            };
            if (this.mode === Mode.CONTAIN) {
              style2.maxWidth = style2.maxHeight = "100%";
            }
            return style2;
          },
          viewerZIndex: function viewerZIndex() {
            var nextZIndex = popup_["PopupManager"].nextZIndex();
            return this.zIndex > nextZIndex ? this.zIndex : nextZIndex;
          }
        },
        watch: {
          index: {
            handler: function handler(val) {
              this.reset();
              this.onSwitch(val);
            }
          },
          currentImg: function currentImg(val) {
            var _this = this;
            this.$nextTick(function(_) {
              var $img = _this.$refs.img[0];
              if (!$img.complete) {
                _this.loading = true;
              }
            });
          }
        },
        methods: {
          hide: function hide2() {
            this.deviceSupportUninstall();
            this.onClose();
          },
          deviceSupportInstall: function deviceSupportInstall() {
            var _this2 = this;
            this._keyDownHandler = function(e) {
              e.stopPropagation();
              var keyCode2 = e.keyCode;
              switch (keyCode2) {
                case 27:
                  _this2.hide();
                  break;
                case 32:
                  _this2.toggleMode();
                  break;
                case 37:
                  _this2.prev();
                  break;
                case 38:
                  _this2.handleActions("zoomIn");
                  break;
                case 39:
                  _this2.next();
                  break;
                case 40:
                  _this2.handleActions("zoomOut");
                  break;
              }
            };
            this._mouseWheelHandler = Object(util_["rafThrottle"])(function(e) {
              var delta = e.wheelDelta ? e.wheelDelta : -e.detail;
              if (delta > 0) {
                _this2.handleActions("zoomIn", {
                  zoomRate: 0.015,
                  enableTransition: false
                });
              } else {
                _this2.handleActions("zoomOut", {
                  zoomRate: 0.015,
                  enableTransition: false
                });
              }
            });
            Object(dom_["on"])(document, "keydown", this._keyDownHandler);
            Object(dom_["on"])(document, mousewheelEventName, this._mouseWheelHandler);
          },
          deviceSupportUninstall: function deviceSupportUninstall() {
            Object(dom_["off"])(document, "keydown", this._keyDownHandler);
            Object(dom_["off"])(document, mousewheelEventName, this._mouseWheelHandler);
            this._keyDownHandler = null;
            this._mouseWheelHandler = null;
          },
          handleImgLoad: function handleImgLoad(e) {
            this.loading = false;
          },
          handleImgError: function handleImgError(e) {
            this.loading = false;
            e.target.alt = "加载失败";
          },
          handleMouseDown: function handleMouseDown(e) {
            var _this3 = this;
            if (this.loading || e.button !== 0)
              return;
            var _transform2 = this.transform, offsetX = _transform2.offsetX, offsetY = _transform2.offsetY;
            var startX = e.pageX;
            var startY = e.pageY;
            this._dragHandler = Object(util_["rafThrottle"])(function(ev) {
              _this3.transform.offsetX = offsetX + ev.pageX - startX;
              _this3.transform.offsetY = offsetY + ev.pageY - startY;
            });
            Object(dom_["on"])(document, "mousemove", this._dragHandler);
            Object(dom_["on"])(document, "mouseup", function(ev) {
              Object(dom_["off"])(document, "mousemove", _this3._dragHandler);
            });
            e.preventDefault();
          },
          handleMaskClick: function handleMaskClick() {
            if (this.maskClosable) {
              this.hide();
            }
          },
          reset: function reset() {
            this.transform = {
              scale: 1,
              deg: 0,
              offsetX: 0,
              offsetY: 0,
              enableTransition: false
            };
          },
          toggleMode: function toggleMode() {
            if (this.loading)
              return;
            var modeNames = Object.keys(Mode);
            var modeValues = Object.values(Mode);
            var index2 = modeValues.indexOf(this.mode);
            var nextIndex = (index2 + 1) % modeNames.length;
            this.mode = Mode[modeNames[nextIndex]];
            this.reset();
          },
          prev: function prev() {
            if (this.isFirst && !this.infinite)
              return;
            var len = this.urlList.length;
            this.index = (this.index - 1 + len) % len;
          },
          next: function next() {
            if (this.isLast && !this.infinite)
              return;
            var len = this.urlList.length;
            this.index = (this.index + 1) % len;
          },
          handleActions: function handleActions(action) {
            var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            if (this.loading)
              return;
            var _zoomRate$rotateDeg$e = image_viewervue_type_script_lang_js_extends({
              zoomRate: 0.2,
              rotateDeg: 90,
              enableTransition: true
            }, options), zoomRate = _zoomRate$rotateDeg$e.zoomRate, rotateDeg = _zoomRate$rotateDeg$e.rotateDeg, enableTransition = _zoomRate$rotateDeg$e.enableTransition;
            var transform = this.transform;
            switch (action) {
              case "zoomOut":
                if (transform.scale > 0.2) {
                  transform.scale = parseFloat((transform.scale - zoomRate).toFixed(3));
                }
                break;
              case "zoomIn":
                transform.scale = parseFloat((transform.scale + zoomRate).toFixed(3));
                break;
              case "clocelise":
                transform.deg += rotateDeg;
                break;
              case "anticlocelise":
                transform.deg -= rotateDeg;
                break;
            }
            transform.enableTransition = enableTransition;
          }
        },
        mounted: function mounted2() {
          this.deviceSupportInstall();
          if (this.appendToBody) {
            document.body.appendChild(this.$el);
          }
          this.$refs["el-image-viewer__wrapper"].focus();
        },
        destroyed: function destroyed() {
          if (this.appendToBody && this.$el && this.$el.parentNode) {
            this.$el.parentNode.removeChild(this.$el);
          }
        }
      };
      var src_image_viewervue_type_script_lang_js_ = image_viewervue_type_script_lang_js_;
      var image_viewer_component = normalizeComponent2(
        src_image_viewervue_type_script_lang_js_,
        image_viewervue_type_template_id_5e73b307_render,
        image_viewervue_type_template_id_5e73b307_staticRenderFns,
        false,
        null,
        null,
        null
      );
      image_viewer_component.options.__file = "packages/image/src/image-viewer.vue";
      var image_viewer = image_viewer_component.exports;
      var isSupportObjectFit = function isSupportObjectFit2() {
        return document.documentElement.style.objectFit !== void 0;
      };
      var ObjectFit = {
        NONE: "none",
        CONTAIN: "contain",
        COVER: "cover",
        FILL: "fill",
        SCALE_DOWN: "scale-down"
      };
      var prevOverflow = "";
      var image_src_mainvue_type_script_lang_js_ = {
        name: "ElImage",
        mixins: [locale_default.a],
        inheritAttrs: false,
        components: {
          ImageViewer: image_viewer
        },
        props: {
          src: String,
          fit: String,
          lazy: Boolean,
          scrollContainer: {},
          previewSrcList: {
            type: Array,
            default: function _default2() {
              return [];
            }
          },
          zIndex: {
            type: Number,
            default: 2e3
          },
          initialIndex: Number
        },
        data: function data() {
          return {
            loading: true,
            error: false,
            show: !this.lazy,
            imageWidth: 0,
            imageHeight: 0,
            showViewer: false
          };
        },
        computed: {
          imageStyle: function imageStyle() {
            var fit = this.fit;
            if (!this.$isServer && fit) {
              return isSupportObjectFit() ? { "object-fit": fit } : this.getImageStyle(fit);
            }
            return {};
          },
          alignCenter: function alignCenter() {
            return !this.$isServer && !isSupportObjectFit() && this.fit !== ObjectFit.FILL;
          },
          preview: function preview() {
            var previewSrcList = this.previewSrcList;
            return Array.isArray(previewSrcList) && previewSrcList.length > 0;
          },
          imageIndex: function imageIndex() {
            var previewIndex = 0;
            var initialIndex = this.initialIndex;
            if (initialIndex >= 0) {
              previewIndex = initialIndex;
              return previewIndex;
            }
            var srcIndex = this.previewSrcList.indexOf(this.src);
            if (srcIndex >= 0) {
              previewIndex = srcIndex;
              return previewIndex;
            }
            return previewIndex;
          }
        },
        watch: {
          src: function src2(val) {
            this.show && this.loadImage();
          },
          show: function show2(val) {
            val && this.loadImage();
          }
        },
        mounted: function mounted2() {
          if (this.lazy) {
            this.addLazyLoadListener();
          } else {
            this.loadImage();
          }
        },
        beforeDestroy: function beforeDestroy2() {
          this.lazy && this.removeLazyLoadListener();
        },
        methods: {
          loadImage: function loadImage() {
            var _this = this;
            if (this.$isServer)
              return;
            this.loading = true;
            this.error = false;
            var img = new Image();
            img.onload = function(e) {
              return _this.handleLoad(e, img);
            };
            img.onerror = this.handleError.bind(this);
            Object.keys(this.$attrs).forEach(function(key) {
              var value = _this.$attrs[key];
              img.setAttribute(key, value);
            });
            img.src = this.src;
          },
          handleLoad: function handleLoad(e, img) {
            this.imageWidth = img.width;
            this.imageHeight = img.height;
            this.loading = false;
            this.error = false;
          },
          handleError: function handleError2(e) {
            this.loading = false;
            this.error = true;
            this.$emit("error", e);
          },
          handleLazyLoad: function handleLazyLoad() {
            if (Object(dom_["isInContainer"])(this.$el, this._scrollContainer)) {
              this.show = true;
              this.removeLazyLoadListener();
            }
          },
          addLazyLoadListener: function addLazyLoadListener() {
            if (this.$isServer)
              return;
            var scrollContainer = this.scrollContainer;
            var _scrollContainer = null;
            if (Object(types_["isHtmlElement"])(scrollContainer)) {
              _scrollContainer = scrollContainer;
            } else if (Object(types_["isString"])(scrollContainer)) {
              _scrollContainer = document.querySelector(scrollContainer);
            } else {
              _scrollContainer = Object(dom_["getScrollContainer"])(this.$el);
            }
            if (_scrollContainer) {
              this._scrollContainer = _scrollContainer;
              this._lazyLoadHandler = throttle_default()(200, this.handleLazyLoad);
              Object(dom_["on"])(_scrollContainer, "scroll", this._lazyLoadHandler);
              this.handleLazyLoad();
            }
          },
          removeLazyLoadListener: function removeLazyLoadListener() {
            var _scrollContainer = this._scrollContainer, _lazyLoadHandler = this._lazyLoadHandler;
            if (this.$isServer || !_scrollContainer || !_lazyLoadHandler)
              return;
            Object(dom_["off"])(_scrollContainer, "scroll", _lazyLoadHandler);
            this._scrollContainer = null;
            this._lazyLoadHandler = null;
          },
          /**
           * simulate object-fit behavior to compatible with IE11 and other browsers which not support object-fit
           */
          getImageStyle: function getImageStyle(fit) {
            var imageWidth = this.imageWidth, imageHeight = this.imageHeight;
            var _$el = this.$el, containerWidth = _$el.clientWidth, containerHeight = _$el.clientHeight;
            if (!imageWidth || !imageHeight || !containerWidth || !containerHeight)
              return {};
            var imageAspectRatio = imageWidth / imageHeight;
            var containerAspectRatio = containerWidth / containerHeight;
            if (fit === ObjectFit.SCALE_DOWN) {
              var isSmaller = imageWidth < containerWidth && imageHeight < containerHeight;
              fit = isSmaller ? ObjectFit.NONE : ObjectFit.CONTAIN;
            }
            switch (fit) {
              case ObjectFit.NONE:
                return { width: "auto", height: "auto" };
              case ObjectFit.CONTAIN:
                return imageAspectRatio < containerAspectRatio ? { width: "auto" } : { height: "auto" };
              case ObjectFit.COVER:
                return imageAspectRatio < containerAspectRatio ? { height: "auto" } : { width: "auto" };
              default:
                return {};
            }
          },
          clickHandler: function clickHandler() {
            if (!this.preview) {
              return;
            }
            prevOverflow = document.body.style.overflow;
            document.body.style.overflow = "hidden";
            this.showViewer = true;
          },
          closeViewer: function closeViewer() {
            document.body.style.overflow = prevOverflow;
            this.showViewer = false;
          }
        }
      };
      var packages_image_src_mainvue_type_script_lang_js_ = image_src_mainvue_type_script_lang_js_;
      var image_src_main_component = normalizeComponent2(
        packages_image_src_mainvue_type_script_lang_js_,
        mainvue_type_template_id_44d84a7c_render,
        mainvue_type_template_id_44d84a7c_staticRenderFns,
        false,
        null,
        null,
        null
      );
      image_src_main_component.options.__file = "packages/image/src/main.vue";
      var image_src_main = image_src_main_component.exports;
      image_src_main.install = function(Vue2) {
        Vue2.component(image_src_main.name, image_src_main);
      };
      var packages_image = image_src_main;
      var mainvue_type_template_id_6d9756be_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", { staticClass: "el-calendar" }, [
          _c("div", { staticClass: "el-calendar__header" }, [
            _c("div", { staticClass: "el-calendar__title" }, [
              _vm._v("\n      " + _vm._s(_vm.i18nDate) + "\n    ")
            ]),
            _vm.validatedRange.length === 0 ? _c(
              "div",
              { staticClass: "el-calendar__button-group" },
              [
                _c(
                  "el-button-group",
                  [
                    _c(
                      "el-button",
                      {
                        attrs: { type: "plain", size: "mini" },
                        on: {
                          click: function($event) {
                            _vm.selectDate("prev-month");
                          }
                        }
                      },
                      [
                        _vm._v(
                          "\n          " + _vm._s(_vm.t("el.datepicker.prevMonth")) + "\n        "
                        )
                      ]
                    ),
                    _c(
                      "el-button",
                      {
                        attrs: { type: "plain", size: "mini" },
                        on: {
                          click: function($event) {
                            _vm.selectDate("today");
                          }
                        }
                      },
                      [
                        _vm._v(
                          "\n          " + _vm._s(_vm.t("el.datepicker.today")) + "\n        "
                        )
                      ]
                    ),
                    _c(
                      "el-button",
                      {
                        attrs: { type: "plain", size: "mini" },
                        on: {
                          click: function($event) {
                            _vm.selectDate("next-month");
                          }
                        }
                      },
                      [
                        _vm._v(
                          "\n          " + _vm._s(_vm.t("el.datepicker.nextMonth")) + "\n        "
                        )
                      ]
                    )
                  ],
                  1
                )
              ],
              1
            ) : _vm._e()
          ]),
          _vm.validatedRange.length === 0 ? _c(
            "div",
            { key: "no-range", staticClass: "el-calendar__body" },
            [
              _c("date-table", {
                attrs: {
                  date: _vm.date,
                  "selected-day": _vm.realSelectedDay,
                  "first-day-of-week": _vm.realFirstDayOfWeek
                },
                on: { pick: _vm.pickDay }
              })
            ],
            1
          ) : _c(
            "div",
            { key: "has-range", staticClass: "el-calendar__body" },
            _vm._l(_vm.validatedRange, function(range2, index2) {
              return _c("date-table", {
                key: index2,
                attrs: {
                  date: range2[0],
                  "selected-day": _vm.realSelectedDay,
                  range: range2,
                  "hide-header": index2 !== 0,
                  "first-day-of-week": _vm.realFirstDayOfWeek
                },
                on: { pick: _vm.pickDay }
              });
            }),
            1
          )
        ]);
      };
      var mainvue_type_template_id_6d9756be_staticRenderFns = [];
      mainvue_type_template_id_6d9756be_render._withStripped = true;
      var date_ = __webpack_require__(20);
      var date_default = /* @__PURE__ */ __webpack_require__.n(date_);
      var src_date_tablevue_type_script_lang_js_ = {
        props: {
          selectedDay: String,
          // formated date yyyy-MM-dd
          range: {
            type: Array,
            validator: function validator(val) {
              if (!(val && val.length))
                return true;
              var start = val[0], end = val[1];
              return Object(date_util_["validateRangeInOneMonth"])(start, end);
            }
          },
          date: Date,
          hideHeader: Boolean,
          firstDayOfWeek: Number
        },
        inject: ["elCalendar"],
        methods: {
          toNestedArr: function toNestedArr(days) {
            return Object(date_util_["range"])(days.length / 7).map(function(_, index2) {
              var start = index2 * 7;
              return days.slice(start, start + 7);
            });
          },
          getFormateDate: function getFormateDate(day, type2) {
            if (!day || ["prev", "current", "next"].indexOf(type2) === -1) {
              throw new Error("invalid day or type");
            }
            var prefix = this.curMonthDatePrefix;
            if (type2 === "prev") {
              prefix = this.prevMonthDatePrefix;
            } else if (type2 === "next") {
              prefix = this.nextMonthDatePrefix;
            }
            day = ("00" + day).slice(-2);
            return prefix + "-" + day;
          },
          getCellClass: function getCellClass(_ref) {
            var text = _ref.text, type2 = _ref.type;
            var classes = [type2];
            if (type2 === "current") {
              var date3 = this.getFormateDate(text, type2);
              if (date3 === this.selectedDay) {
                classes.push("is-selected");
              }
              if (date3 === this.formatedToday) {
                classes.push("is-today");
              }
            }
            return classes;
          },
          pickDay: function pickDay(_ref2) {
            var text = _ref2.text, type2 = _ref2.type;
            var date3 = this.getFormateDate(text, type2);
            this.$emit("pick", date3);
          },
          cellRenderProxy: function cellRenderProxy(_ref3) {
            var text = _ref3.text, type2 = _ref3.type;
            var h2 = this.$createElement;
            var render6 = this.elCalendar.$scopedSlots.dateCell;
            if (!render6)
              return h2("span", [text]);
            var day = this.getFormateDate(text, type2);
            var date3 = new Date(day);
            var data = {
              isSelected: this.selectedDay === day,
              type: type2 + "-month",
              day
            };
            return render6({ date: date3, data });
          }
        },
        computed: {
          WEEK_DAYS: function WEEK_DAYS() {
            return Object(date_util_["getI18nSettings"])().dayNames;
          },
          prevMonthDatePrefix: function prevMonthDatePrefix() {
            var temp = new Date(this.date.getTime());
            temp.setDate(0);
            return date_default.a.format(temp, "yyyy-MM");
          },
          curMonthDatePrefix: function curMonthDatePrefix() {
            return date_default.a.format(this.date, "yyyy-MM");
          },
          nextMonthDatePrefix: function nextMonthDatePrefix() {
            var temp = new Date(this.date.getFullYear(), this.date.getMonth() + 1, 1);
            return date_default.a.format(temp, "yyyy-MM");
          },
          formatedToday: function formatedToday() {
            return this.elCalendar.formatedToday;
          },
          isInRange: function isInRange() {
            return this.range && this.range.length;
          },
          rows: function rows() {
            var days = [];
            if (this.isInRange) {
              var _range = this.range, start = _range[0], end = _range[1];
              var currentMonthRange = Object(date_util_["range"])(end.getDate() - start.getDate() + 1).map(function(_, index2) {
                return {
                  text: start.getDate() + index2,
                  type: "current"
                };
              });
              var remaining = currentMonthRange.length % 7;
              remaining = remaining === 0 ? 0 : 7 - remaining;
              var nextMonthRange = Object(date_util_["range"])(remaining).map(function(_, index2) {
                return {
                  text: index2 + 1,
                  type: "next"
                };
              });
              days = currentMonthRange.concat(nextMonthRange);
            } else {
              var date3 = this.date;
              var firstDay = Object(date_util_["getFirstDayOfMonth"])(date3);
              firstDay = firstDay === 0 ? 7 : firstDay;
              var firstDayOfWeek = typeof this.firstDayOfWeek === "number" ? this.firstDayOfWeek : 1;
              var offset = (7 + firstDay - firstDayOfWeek) % 7;
              var prevMonthDays = Object(date_util_["getPrevMonthLastDays"])(date3, offset).map(function(day) {
                return {
                  text: day,
                  type: "prev"
                };
              });
              var currentMonthDays = Object(date_util_["getMonthDays"])(date3).map(function(day) {
                return {
                  text: day,
                  type: "current"
                };
              });
              days = [].concat(prevMonthDays, currentMonthDays);
              var nextMonthDays = Object(date_util_["range"])(42 - days.length).map(function(_, index2) {
                return {
                  text: index2 + 1,
                  type: "next"
                };
              });
              days = days.concat(nextMonthDays);
            }
            return this.toNestedArr(days);
          },
          weekDays: function weekDays2() {
            var start = this.firstDayOfWeek;
            var WEEK_DAYS = this.WEEK_DAYS;
            if (typeof start !== "number" || start === 0) {
              return WEEK_DAYS.slice();
            } else {
              return WEEK_DAYS.slice(start).concat(WEEK_DAYS.slice(0, start));
            }
          }
        },
        render: function render6() {
          var _this = this;
          var h2 = arguments[0];
          var thead = this.hideHeader ? null : h2("thead", [this.weekDays.map(function(day) {
            return h2(
              "th",
              { key: day },
              [day]
            );
          })]);
          return h2(
            "table",
            {
              "class": {
                "el-calendar-table": true,
                "is-range": this.isInRange
              },
              attrs: {
                cellspacing: "0",
                cellpadding: "0"
              }
            },
            [thead, h2("tbody", [this.rows.map(function(row, index2) {
              return h2(
                "tr",
                {
                  "class": {
                    "el-calendar-table__row": true,
                    "el-calendar-table__row--hide-border": index2 === 0 && _this.hideHeader
                  },
                  key: index2
                },
                [row.map(function(cell, key) {
                  return h2(
                    "td",
                    {
                      key,
                      "class": _this.getCellClass(cell),
                      on: {
                        "click": _this.pickDay.bind(_this, cell)
                      }
                    },
                    [h2(
                      "div",
                      { "class": "el-calendar-day" },
                      [_this.cellRenderProxy(cell)]
                    )]
                  );
                })]
              );
            })])]
          );
        }
      };
      var calendar_src_date_tablevue_type_script_lang_js_ = src_date_tablevue_type_script_lang_js_;
      var date_table_render, date_table_staticRenderFns;
      var src_date_table_component = normalizeComponent2(
        calendar_src_date_tablevue_type_script_lang_js_,
        date_table_render,
        date_table_staticRenderFns,
        false,
        null,
        null,
        null
      );
      src_date_table_component.options.__file = "packages/calendar/src/date-table.vue";
      var src_date_table = src_date_table_component.exports;
      var validTypes = ["prev-month", "today", "next-month"];
      var weekDays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
      var oneDay = 864e5;
      var calendar_src_mainvue_type_script_lang_js_ = {
        name: "ElCalendar",
        mixins: [locale_default.a],
        components: {
          DateTable: src_date_table,
          ElButton: button_default.a,
          ElButtonGroup: button_group_default.a
        },
        props: {
          value: [Date, String, Number],
          range: {
            type: Array,
            validator: function validator(range2) {
              if (Array.isArray(range2)) {
                return range2.length === 2 && range2.every(function(item) {
                  return typeof item === "string" || typeof item === "number" || item instanceof Date;
                });
              } else {
                return true;
              }
            }
          },
          firstDayOfWeek: {
            type: Number,
            default: 1
          }
        },
        provide: function provide2() {
          return {
            elCalendar: this
          };
        },
        methods: {
          pickDay: function pickDay(day) {
            this.realSelectedDay = day;
          },
          selectDate: function selectDate(type2) {
            if (validTypes.indexOf(type2) === -1) {
              throw new Error("invalid type " + type2);
            }
            var day = "";
            if (type2 === "prev-month") {
              day = this.prevMonthDatePrefix + "-01";
            } else if (type2 === "next-month") {
              day = this.nextMonthDatePrefix + "-01";
            } else {
              day = this.formatedToday;
            }
            if (day === this.formatedDate)
              return;
            this.pickDay(day);
          },
          toDate: function toDate(val) {
            if (!val) {
              throw new Error("invalid val");
            }
            return val instanceof Date ? val : new Date(val);
          },
          rangeValidator: function rangeValidator(date3, isStart) {
            var firstDayOfWeek = this.realFirstDayOfWeek;
            var expected = isStart ? firstDayOfWeek : firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1;
            var message = (isStart ? "start" : "end") + " of range should be " + weekDays[expected] + ".";
            if (date3.getDay() !== expected) {
              console.warn("[ElementCalendar]", message, "Invalid range will be ignored.");
              return false;
            }
            return true;
          }
        },
        computed: {
          prevMonthDatePrefix: function prevMonthDatePrefix() {
            var temp = new Date(this.date.getTime());
            temp.setDate(0);
            return date_default.a.format(temp, "yyyy-MM");
          },
          curMonthDatePrefix: function curMonthDatePrefix() {
            return date_default.a.format(this.date, "yyyy-MM");
          },
          nextMonthDatePrefix: function nextMonthDatePrefix() {
            var temp = new Date(this.date.getFullYear(), this.date.getMonth() + 1, 1);
            return date_default.a.format(temp, "yyyy-MM");
          },
          formatedDate: function formatedDate() {
            return date_default.a.format(this.date, "yyyy-MM-dd");
          },
          i18nDate: function i18nDate() {
            var year = this.date.getFullYear();
            var month = this.date.getMonth() + 1;
            return year + " " + this.t("el.datepicker.year") + " " + this.t("el.datepicker.month" + month);
          },
          formatedToday: function formatedToday() {
            return date_default.a.format(this.now, "yyyy-MM-dd");
          },
          realSelectedDay: {
            get: function get() {
              if (!this.value)
                return this.selectedDay;
              return this.formatedDate;
            },
            set: function set2(val) {
              this.selectedDay = val;
              var date3 = new Date(val);
              this.$emit("input", date3);
            }
          },
          date: function date3() {
            if (!this.value) {
              if (this.realSelectedDay) {
                var d = this.selectedDay.split("-");
                return new Date(d[0], d[1] - 1, d[2]);
              } else if (this.validatedRange.length) {
                return this.validatedRange[0][0];
              }
              return this.now;
            } else {
              return this.toDate(this.value);
            }
          },
          // if range is valid, we get a two-digit array
          validatedRange: function validatedRange() {
            var _this = this;
            var range2 = this.range;
            if (!range2)
              return [];
            range2 = range2.reduce(function(prev, val, index2) {
              var date3 = _this.toDate(val);
              if (_this.rangeValidator(date3, index2 === 0)) {
                prev = prev.concat(date3);
              }
              return prev;
            }, []);
            if (range2.length === 2) {
              var _range = range2, start = _range[0], end = _range[1];
              if (start > end) {
                console.warn("[ElementCalendar]end time should be greater than start time");
                return [];
              }
              if (Object(date_util_["validateRangeInOneMonth"])(start, end)) {
                return [[start, end]];
              }
              var data = [];
              var startDay = new Date(start.getFullYear(), start.getMonth() + 1, 1);
              var lastDay = this.toDate(startDay.getTime() - oneDay);
              if (!Object(date_util_["validateRangeInOneMonth"])(startDay, end)) {
                console.warn("[ElementCalendar]start time and end time interval must not exceed two months");
                return [];
              }
              data.push([start, lastDay]);
              var firstDayOfWeek = this.realFirstDayOfWeek;
              var nextMontFirstDay = startDay.getDay();
              var interval = 0;
              if (nextMontFirstDay !== firstDayOfWeek) {
                if (firstDayOfWeek === 0) {
                  interval = 7 - nextMontFirstDay;
                } else {
                  interval = firstDayOfWeek - nextMontFirstDay;
                  interval = interval > 0 ? interval : 7 + interval;
                }
              }
              startDay = this.toDate(startDay.getTime() + interval * oneDay);
              if (startDay.getDate() < end.getDate()) {
                data.push([startDay, end]);
              }
              return data;
            }
            return [];
          },
          realFirstDayOfWeek: function realFirstDayOfWeek() {
            if (this.firstDayOfWeek < 1 || this.firstDayOfWeek > 6) {
              return 0;
            }
            return Math.floor(this.firstDayOfWeek);
          }
        },
        data: function data() {
          return {
            selectedDay: "",
            now: /* @__PURE__ */ new Date()
          };
        }
      };
      var packages_calendar_src_mainvue_type_script_lang_js_ = calendar_src_mainvue_type_script_lang_js_;
      var calendar_src_main_component = normalizeComponent2(
        packages_calendar_src_mainvue_type_script_lang_js_,
        mainvue_type_template_id_6d9756be_render,
        mainvue_type_template_id_6d9756be_staticRenderFns,
        false,
        null,
        null,
        null
      );
      calendar_src_main_component.options.__file = "packages/calendar/src/main.vue";
      var calendar_src_main = calendar_src_main_component.exports;
      calendar_src_main.install = function(Vue2) {
        Vue2.component(calendar_src_main.name, calendar_src_main);
      };
      var calendar = calendar_src_main;
      var mainvue_type_template_id_257dd4a9_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("transition", { attrs: { name: "el-fade-in" } }, [
          _vm.visible ? _c(
            "div",
            {
              staticClass: "el-backtop",
              style: {
                right: _vm.styleRight,
                bottom: _vm.styleBottom
              },
              on: {
                click: function($event) {
                  $event.stopPropagation();
                  return _vm.handleClick($event);
                }
              }
            },
            [
              _vm._t("default", [_c("el-icon", { attrs: { name: "caret-top" } })])
            ],
            2
          ) : _vm._e()
        ]);
      };
      var mainvue_type_template_id_257dd4a9_staticRenderFns = [];
      mainvue_type_template_id_257dd4a9_render._withStripped = true;
      var cubic = function cubic2(value) {
        return Math.pow(value, 3);
      };
      var easeInOutCubic = function easeInOutCubic2(value) {
        return value < 0.5 ? cubic(value * 2) / 2 : 1 - cubic((1 - value) * 2) / 2;
      };
      var backtop_src_mainvue_type_script_lang_js_ = {
        name: "ElBacktop",
        props: {
          visibilityHeight: {
            type: Number,
            default: 200
          },
          target: [String],
          right: {
            type: Number,
            default: 40
          },
          bottom: {
            type: Number,
            default: 40
          }
        },
        data: function data() {
          return {
            el: null,
            container: null,
            visible: false
          };
        },
        computed: {
          styleBottom: function styleBottom() {
            return this.bottom + "px";
          },
          styleRight: function styleRight() {
            return this.right + "px";
          }
        },
        mounted: function mounted2() {
          this.init();
          this.throttledScrollHandler = throttle_default()(300, this.onScroll);
          this.container.addEventListener("scroll", this.throttledScrollHandler);
        },
        methods: {
          init: function init() {
            this.container = document;
            this.el = document.documentElement;
            if (this.target) {
              this.el = document.querySelector(this.target);
              if (!this.el) {
                throw new Error("target is not existed: " + this.target);
              }
              this.container = this.el;
            }
          },
          onScroll: function onScroll() {
            var scrollTop = this.el.scrollTop;
            this.visible = scrollTop >= this.visibilityHeight;
          },
          handleClick: function handleClick(e) {
            this.scrollToTop();
            this.$emit("click", e);
          },
          scrollToTop: function scrollToTop() {
            var el = this.el;
            var beginTime = Date.now();
            var beginValue = el.scrollTop;
            var rAF = window.requestAnimationFrame || function(func) {
              return setTimeout(func, 16);
            };
            var frameFunc = function frameFunc2() {
              var progress3 = (Date.now() - beginTime) / 500;
              if (progress3 < 1) {
                el.scrollTop = beginValue * (1 - easeInOutCubic(progress3));
                rAF(frameFunc2);
              } else {
                el.scrollTop = 0;
              }
            };
            rAF(frameFunc);
          }
        },
        beforeDestroy: function beforeDestroy2() {
          this.container.removeEventListener("scroll", this.throttledScrollHandler);
        }
      };
      var packages_backtop_src_mainvue_type_script_lang_js_ = backtop_src_mainvue_type_script_lang_js_;
      var backtop_src_main_component = normalizeComponent2(
        packages_backtop_src_mainvue_type_script_lang_js_,
        mainvue_type_template_id_257dd4a9_render,
        mainvue_type_template_id_257dd4a9_staticRenderFns,
        false,
        null,
        null,
        null
      );
      backtop_src_main_component.options.__file = "packages/backtop/src/main.vue";
      var backtop_src_main = backtop_src_main_component.exports;
      backtop_src_main.install = function(Vue2) {
        Vue2.component(backtop_src_main.name, backtop_src_main);
      };
      var backtop = backtop_src_main;
      var getStyleComputedProperty = function getStyleComputedProperty2(element, property) {
        if (element === window) {
          element = document.documentElement;
        }
        if (element.nodeType !== 1) {
          return [];
        }
        var css = window.getComputedStyle(element, null);
        return property ? css[property] : css;
      };
      var entries = function entries2(obj) {
        return Object.keys(obj || {}).map(function(key) {
          return [key, obj[key]];
        });
      };
      var getPositionSize = function getPositionSize2(el, prop) {
        return el === window || el === document ? document.documentElement[prop] : el[prop];
      };
      var getOffsetHeight = function getOffsetHeight2(el) {
        return getPositionSize(el, "offsetHeight");
      };
      var getClientHeight = function getClientHeight2(el) {
        return getPositionSize(el, "clientHeight");
      };
      var scope = "ElInfiniteScroll";
      var attributes = {
        delay: {
          type: Number,
          default: 200
        },
        distance: {
          type: Number,
          default: 0
        },
        disabled: {
          type: Boolean,
          default: false
        },
        immediate: {
          type: Boolean,
          default: true
        }
      };
      var main_getScrollOptions = function getScrollOptions(el, vm) {
        if (!Object(types_["isHtmlElement"])(el))
          return {};
        return entries(attributes).reduce(function(map, _ref) {
          var key = _ref[0], option2 = _ref[1];
          var type2 = option2.type, defaultValue = option2.default;
          var value = el.getAttribute("infinite-scroll-" + key);
          value = Object(types_["isUndefined"])(vm[value]) ? value : vm[value];
          switch (type2) {
            case Number:
              value = Number(value);
              value = Number.isNaN(value) ? defaultValue : value;
              break;
            case Boolean:
              value = Object(types_["isDefined"])(value) ? value === "false" ? false : Boolean(value) : defaultValue;
              break;
            default:
              value = type2(value);
          }
          map[key] = value;
          return map;
        }, {});
      };
      var getElementTop = function getElementTop2(el) {
        return el.getBoundingClientRect().top;
      };
      var main_handleScroll = function handleScroll(cb) {
        var _scope = this[scope], el = _scope.el, vm = _scope.vm, container = _scope.container, observer = _scope.observer;
        var _getScrollOptions = main_getScrollOptions(el, vm), distance = _getScrollOptions.distance, disabled = _getScrollOptions.disabled;
        if (disabled)
          return;
        var containerInfo = container.getBoundingClientRect();
        if (!containerInfo.width && !containerInfo.height)
          return;
        var shouldTrigger = false;
        if (container === el) {
          var scrollBottom = container.scrollTop + getClientHeight(container);
          shouldTrigger = container.scrollHeight - scrollBottom <= distance;
        } else {
          var heightBelowTop = getOffsetHeight(el) + getElementTop(el) - getElementTop(container);
          var offsetHeight = getOffsetHeight(container);
          var borderBottom = Number.parseFloat(getStyleComputedProperty(container, "borderBottomWidth"));
          shouldTrigger = heightBelowTop - offsetHeight + borderBottom <= distance;
        }
        if (shouldTrigger && Object(types_["isFunction"])(cb)) {
          cb.call(vm);
        } else if (observer) {
          observer.disconnect();
          this[scope].observer = null;
        }
      };
      var infinite_scroll_src_main = {
        name: "InfiniteScroll",
        inserted: function inserted(el, binding, vnode) {
          var cb = binding.value;
          var vm = vnode.context;
          var container = Object(dom_["getScrollContainer"])(el, true);
          var _getScrollOptions2 = main_getScrollOptions(el, vm), delay = _getScrollOptions2.delay, immediate = _getScrollOptions2.immediate;
          var onScroll = debounce_default()(delay, main_handleScroll.bind(el, cb));
          el[scope] = { el, vm, container, onScroll };
          if (container) {
            container.addEventListener("scroll", onScroll);
            if (immediate) {
              var observer = el[scope].observer = new MutationObserver(onScroll);
              observer.observe(container, { childList: true, subtree: true });
              onScroll();
            }
          }
        },
        unbind: function unbind2(el) {
          var _el$scope = el[scope], container = _el$scope.container, onScroll = _el$scope.onScroll;
          if (container) {
            container.removeEventListener("scroll", onScroll);
          }
        }
      };
      infinite_scroll_src_main.install = function(Vue2) {
        Vue2.directive(infinite_scroll_src_main.name, infinite_scroll_src_main);
      };
      var infinite_scroll = infinite_scroll_src_main;
      var mainvue_type_template_id_5070954c_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", { staticClass: "el-page-header" }, [
          _c(
            "div",
            {
              staticClass: "el-page-header__left",
              on: {
                click: function($event) {
                  _vm.$emit("back");
                }
              }
            },
            [
              _c("i", { staticClass: "el-icon-back" }),
              _c(
                "div",
                { staticClass: "el-page-header__title" },
                [_vm._t("title", [_vm._v(_vm._s(_vm.title))])],
                2
              )
            ]
          ),
          _c(
            "div",
            { staticClass: "el-page-header__content" },
            [_vm._t("content", [_vm._v(_vm._s(_vm.content))])],
            2
          )
        ]);
      };
      var mainvue_type_template_id_5070954c_staticRenderFns = [];
      mainvue_type_template_id_5070954c_render._withStripped = true;
      var page_header_src_mainvue_type_script_lang_js_ = {
        name: "ElPageHeader",
        props: {
          title: {
            type: String,
            default: function _default2() {
              return Object(lib_locale_["t"])("el.pageHeader.title");
            }
          },
          content: String
        }
      };
      var packages_page_header_src_mainvue_type_script_lang_js_ = page_header_src_mainvue_type_script_lang_js_;
      var page_header_src_main_component = normalizeComponent2(
        packages_page_header_src_mainvue_type_script_lang_js_,
        mainvue_type_template_id_5070954c_render,
        mainvue_type_template_id_5070954c_staticRenderFns,
        false,
        null,
        null,
        null
      );
      page_header_src_main_component.options.__file = "packages/page-header/src/main.vue";
      var page_header_src_main = page_header_src_main_component.exports;
      page_header_src_main.install = function(Vue2) {
        Vue2.component(page_header_src_main.name, page_header_src_main);
      };
      var page_header = page_header_src_main;
      var cascader_panelvue_type_template_id_34932346_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          {
            class: ["el-cascader-panel", _vm.border && "is-bordered"],
            on: { keydown: _vm.handleKeyDown }
          },
          _vm._l(_vm.menus, function(menu, index2) {
            return _c("cascader-menu", {
              key: index2,
              ref: "menu",
              refInFor: true,
              attrs: { index: index2, nodes: menu }
            });
          }),
          1
        );
      };
      var cascader_panelvue_type_template_id_34932346_staticRenderFns = [];
      cascader_panelvue_type_template_id_34932346_render._withStripped = true;
      var radio_ = __webpack_require__(44);
      var radio_default = /* @__PURE__ */ __webpack_require__.n(radio_);
      var stopPropagation = function stopPropagation2(e) {
        return e.stopPropagation();
      };
      var cascader_nodevue_type_script_lang_js_ = {
        inject: ["panel"],
        components: {
          ElCheckbox: checkbox_default.a,
          ElRadio: radio_default.a
        },
        props: {
          node: {
            required: true
          },
          nodeId: String
        },
        computed: {
          config: function config2() {
            return this.panel.config;
          },
          isLeaf: function isLeaf() {
            return this.node.isLeaf;
          },
          isDisabled: function isDisabled() {
            return this.node.isDisabled;
          },
          checkedValue: function checkedValue() {
            return this.panel.checkedValue;
          },
          isChecked: function isChecked() {
            return this.node.isSameNode(this.checkedValue);
          },
          inActivePath: function inActivePath() {
            return this.isInPath(this.panel.activePath);
          },
          inCheckedPath: function inCheckedPath() {
            var _this = this;
            if (!this.config.checkStrictly)
              return false;
            return this.panel.checkedNodePaths.some(function(checkedPath) {
              return _this.isInPath(checkedPath);
            });
          },
          value: function value() {
            return this.node.getValueByOption();
          }
        },
        methods: {
          handleExpand: function handleExpand() {
            var _this2 = this;
            var panel = this.panel, node = this.node, isDisabled = this.isDisabled, config2 = this.config;
            var multiple = config2.multiple, checkStrictly = config2.checkStrictly;
            if (!checkStrictly && isDisabled || node.loading)
              return;
            if (config2.lazy && !node.loaded) {
              panel.lazyLoad(node, function() {
                var isLeaf = _this2.isLeaf;
                if (!isLeaf)
                  _this2.handleExpand();
                if (multiple) {
                  var checked = isLeaf ? node.checked : false;
                  _this2.handleMultiCheckChange(checked);
                }
              });
            } else {
              panel.handleExpand(node);
            }
          },
          handleCheckChange: function handleCheckChange() {
            var panel = this.panel, value = this.value, node = this.node;
            panel.handleCheckChange(value);
            panel.handleExpand(node);
          },
          handleMultiCheckChange: function handleMultiCheckChange(checked) {
            this.node.doCheck(checked);
            this.panel.calculateMultiCheckedValue();
          },
          isInPath: function isInPath(pathNodes) {
            var node = this.node;
            var selectedPathNode = pathNodes[node.level - 1] || {};
            return selectedPathNode.uid === node.uid;
          },
          renderPrefix: function renderPrefix(h2) {
            var isLeaf = this.isLeaf, isChecked = this.isChecked, config2 = this.config;
            var checkStrictly = config2.checkStrictly, multiple = config2.multiple;
            if (multiple) {
              return this.renderCheckbox(h2);
            } else if (checkStrictly) {
              return this.renderRadio(h2);
            } else if (isLeaf && isChecked) {
              return this.renderCheckIcon(h2);
            }
            return null;
          },
          renderPostfix: function renderPostfix(h2) {
            var node = this.node, isLeaf = this.isLeaf;
            if (node.loading) {
              return this.renderLoadingIcon(h2);
            } else if (!isLeaf) {
              return this.renderExpandIcon(h2);
            }
            return null;
          },
          renderCheckbox: function renderCheckbox(h2) {
            var node = this.node, config2 = this.config, isDisabled = this.isDisabled;
            var events2 = {
              on: { change: this.handleMultiCheckChange },
              nativeOn: {}
            };
            if (config2.checkStrictly) {
              events2.nativeOn.click = stopPropagation;
            }
            return h2("el-checkbox", external_babel_helper_vue_jsx_merge_props_default()([{
              attrs: {
                value: node.checked,
                indeterminate: node.indeterminate,
                disabled: isDisabled
              }
            }, events2]));
          },
          renderRadio: function renderRadio(h2) {
            var checkedValue = this.checkedValue, value = this.value, isDisabled = this.isDisabled;
            if (Object(util_["isEqual"])(value, checkedValue)) {
              value = checkedValue;
            }
            return h2(
              "el-radio",
              {
                attrs: {
                  value: checkedValue,
                  label: value,
                  disabled: isDisabled
                },
                on: {
                  "change": this.handleCheckChange
                },
                nativeOn: {
                  "click": stopPropagation
                }
              },
              [h2("span")]
            );
          },
          renderCheckIcon: function renderCheckIcon(h2) {
            return h2("i", { "class": "el-icon-check el-cascader-node__prefix" });
          },
          renderLoadingIcon: function renderLoadingIcon(h2) {
            return h2("i", { "class": "el-icon-loading el-cascader-node__postfix" });
          },
          renderExpandIcon: function renderExpandIcon(h2) {
            return h2("i", { "class": "el-icon-arrow-right el-cascader-node__postfix" });
          },
          renderContent: function renderContent(h2) {
            var panel = this.panel, node = this.node;
            var render6 = panel.renderLabelFn;
            var vnode = render6 ? render6({ node, data: node.data }) : null;
            return h2(
              "span",
              { "class": "el-cascader-node__label" },
              [vnode || node.label]
            );
          }
        },
        render: function render6(h2) {
          var _this3 = this;
          var inActivePath = this.inActivePath, inCheckedPath = this.inCheckedPath, isChecked = this.isChecked, isLeaf = this.isLeaf, isDisabled = this.isDisabled, config2 = this.config, nodeId = this.nodeId;
          var expandTrigger = config2.expandTrigger, checkStrictly = config2.checkStrictly, multiple = config2.multiple;
          var disabled = !checkStrictly && isDisabled;
          var events2 = { on: {} };
          if (expandTrigger === "click") {
            events2.on.click = this.handleExpand;
          } else {
            events2.on.mouseenter = function(e) {
              _this3.handleExpand();
              _this3.$emit("expand", e);
            };
            events2.on.focus = function(e) {
              _this3.handleExpand();
              _this3.$emit("expand", e);
            };
          }
          if (isLeaf && !isDisabled && !checkStrictly && !multiple) {
            events2.on.click = this.handleCheckChange;
          }
          return h2(
            "li",
            external_babel_helper_vue_jsx_merge_props_default()([{
              attrs: {
                role: "menuitem",
                id: nodeId,
                "aria-expanded": inActivePath,
                tabindex: disabled ? null : -1
              },
              "class": {
                "el-cascader-node": true,
                "is-selectable": checkStrictly,
                "in-active-path": inActivePath,
                "in-checked-path": inCheckedPath,
                "is-active": isChecked,
                "is-disabled": disabled
              }
            }, events2]),
            [this.renderPrefix(h2), this.renderContent(h2), this.renderPostfix(h2)]
          );
        }
      };
      var src_cascader_nodevue_type_script_lang_js_ = cascader_nodevue_type_script_lang_js_;
      var cascader_node_render, cascader_node_staticRenderFns;
      var cascader_node_component = normalizeComponent2(
        src_cascader_nodevue_type_script_lang_js_,
        cascader_node_render,
        cascader_node_staticRenderFns,
        false,
        null,
        null,
        null
      );
      cascader_node_component.options.__file = "packages/cascader-panel/src/cascader-node.vue";
      var cascader_node = cascader_node_component.exports;
      var cascader_menuvue_type_script_lang_js_ = {
        name: "ElCascaderMenu",
        mixins: [locale_default.a],
        inject: ["panel"],
        components: {
          ElScrollbar: scrollbar_default.a,
          CascaderNode: cascader_node
        },
        props: {
          nodes: {
            type: Array,
            required: true
          },
          index: Number
        },
        data: function data() {
          return {
            activeNode: null,
            hoverTimer: null,
            id: Object(util_["generateId"])()
          };
        },
        computed: {
          isEmpty: function isEmpty() {
            return !this.nodes.length;
          },
          menuId: function menuId() {
            return "cascader-menu-" + this.id + "-" + this.index;
          }
        },
        methods: {
          handleExpand: function handleExpand(e) {
            this.activeNode = e.target;
          },
          handleMouseMove: function handleMouseMove(e) {
            var activeNode = this.activeNode, hoverTimer = this.hoverTimer;
            var hoverZone = this.$refs.hoverZone;
            if (!activeNode || !hoverZone)
              return;
            if (activeNode.contains(e.target)) {
              clearTimeout(hoverTimer);
              var _$el$getBoundingClien = this.$el.getBoundingClientRect(), left = _$el$getBoundingClien.left;
              var startX = e.clientX - left;
              var _$el = this.$el, offsetWidth = _$el.offsetWidth, offsetHeight = _$el.offsetHeight;
              var top = activeNode.offsetTop;
              var bottom = top + activeNode.offsetHeight;
              hoverZone.innerHTML = '\n          <path style="pointer-events: auto;" fill="transparent" d="M' + startX + " " + top + " L" + offsetWidth + " 0 V" + top + ' Z" />\n          <path style="pointer-events: auto;" fill="transparent" d="M' + startX + " " + bottom + " L" + offsetWidth + " " + offsetHeight + " V" + bottom + ' Z" />\n        ';
            } else if (!hoverTimer) {
              this.hoverTimer = setTimeout(this.clearHoverZone, this.panel.config.hoverThreshold);
            }
          },
          clearHoverZone: function clearHoverZone() {
            var hoverZone = this.$refs.hoverZone;
            if (!hoverZone)
              return;
            hoverZone.innerHTML = "";
          },
          renderEmptyText: function renderEmptyText(h2) {
            return h2(
              "div",
              { "class": "el-cascader-menu__empty-text" },
              [this.t("el.cascader.noData")]
            );
          },
          renderNodeList: function renderNodeList(h2) {
            var menuId = this.menuId;
            var isHoverMenu = this.panel.isHoverMenu;
            var events2 = { on: {} };
            if (isHoverMenu) {
              events2.on.expand = this.handleExpand;
            }
            var nodes = this.nodes.map(function(node, index2) {
              var hasChildren = node.hasChildren;
              return h2("cascader-node", external_babel_helper_vue_jsx_merge_props_default()([{
                key: node.uid,
                attrs: {
                  node,
                  "node-id": menuId + "-" + index2,
                  "aria-haspopup": hasChildren,
                  "aria-owns": hasChildren ? menuId : null
                }
              }, events2]));
            });
            return [].concat(nodes, [isHoverMenu ? h2("svg", { ref: "hoverZone", "class": "el-cascader-menu__hover-zone" }) : null]);
          }
        },
        render: function render6(h2) {
          var isEmpty = this.isEmpty, menuId = this.menuId;
          var events2 = { nativeOn: {} };
          if (this.panel.isHoverMenu) {
            events2.nativeOn.mousemove = this.handleMouseMove;
          }
          return h2(
            "el-scrollbar",
            external_babel_helper_vue_jsx_merge_props_default()([{
              attrs: {
                tag: "ul",
                role: "menu",
                id: menuId,
                "wrap-class": "el-cascader-menu__wrap",
                "view-class": {
                  "el-cascader-menu__list": true,
                  "is-empty": isEmpty
                }
              },
              "class": "el-cascader-menu"
            }, events2]),
            [isEmpty ? this.renderEmptyText(h2) : this.renderNodeList(h2)]
          );
        }
      };
      var src_cascader_menuvue_type_script_lang_js_ = cascader_menuvue_type_script_lang_js_;
      var cascader_menu_render, cascader_menu_staticRenderFns;
      var cascader_menu_component = normalizeComponent2(
        src_cascader_menuvue_type_script_lang_js_,
        cascader_menu_render,
        cascader_menu_staticRenderFns,
        false,
        null,
        null,
        null
      );
      cascader_menu_component.options.__file = "packages/cascader-panel/src/cascader-menu.vue";
      var cascader_menu = cascader_menu_component.exports;
      var node_createClass = function() {
        function defineProperties3(target2, props2) {
          for (var i = 0; i < props2.length; i++) {
            var descriptor2 = props2[i];
            descriptor2.enumerable = descriptor2.enumerable || false;
            descriptor2.configurable = true;
            if ("value" in descriptor2)
              descriptor2.writable = true;
            Object.defineProperty(target2, descriptor2.key, descriptor2);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties3(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties3(Constructor, staticProps);
          return Constructor;
        };
      }();
      function src_node_classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var uid2 = 0;
      var src_node_Node = function() {
        function Node2(data, config2, parentNode2) {
          src_node_classCallCheck(this, Node2);
          this.data = data;
          this.config = config2;
          this.parent = parentNode2 || null;
          this.level = !this.parent ? 1 : this.parent.level + 1;
          this.uid = uid2++;
          this.initState();
          this.initChildren();
        }
        Node2.prototype.initState = function initState2() {
          var _config = this.config, valueKey = _config.value, labelKey = _config.label;
          this.value = this.data[valueKey];
          this.label = this.data[labelKey];
          this.pathNodes = this.calculatePathNodes();
          this.path = this.pathNodes.map(function(node) {
            return node.value;
          });
          this.pathLabels = this.pathNodes.map(function(node) {
            return node.label;
          });
          this.loading = false;
          this.loaded = false;
        };
        Node2.prototype.initChildren = function initChildren() {
          var _this = this;
          var config2 = this.config;
          var childrenKey = config2.children;
          var childrenData = this.data[childrenKey];
          this.hasChildren = Array.isArray(childrenData);
          this.children = (childrenData || []).map(function(child) {
            return new Node2(child, config2, _this);
          });
        };
        Node2.prototype.calculatePathNodes = function calculatePathNodes() {
          var nodes = [this];
          var parent = this.parent;
          while (parent) {
            nodes.unshift(parent);
            parent = parent.parent;
          }
          return nodes;
        };
        Node2.prototype.getPath = function getPath() {
          return this.path;
        };
        Node2.prototype.getValue = function getValue2() {
          return this.value;
        };
        Node2.prototype.getValueByOption = function getValueByOption() {
          return this.config.emitPath ? this.getPath() : this.getValue();
        };
        Node2.prototype.getText = function getText(allLevels, separator) {
          return allLevels ? this.pathLabels.join(separator) : this.label;
        };
        Node2.prototype.isSameNode = function isSameNode(checkedValue) {
          var value = this.getValueByOption();
          return this.config.multiple && Array.isArray(checkedValue) ? checkedValue.some(function(val) {
            return Object(util_["isEqual"])(val, value);
          }) : Object(util_["isEqual"])(checkedValue, value);
        };
        Node2.prototype.broadcast = function broadcast(event) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          var handlerName = "onParent" + Object(util_["capitalize"])(event);
          this.children.forEach(function(child) {
            if (child) {
              child.broadcast.apply(child, [event].concat(args));
              child[handlerName] && child[handlerName].apply(child, args);
            }
          });
        };
        Node2.prototype.emit = function emit(event) {
          var parent = this.parent;
          var handlerName = "onChild" + Object(util_["capitalize"])(event);
          if (parent) {
            for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            parent[handlerName] && parent[handlerName].apply(parent, args);
            parent.emit.apply(parent, [event].concat(args));
          }
        };
        Node2.prototype.onParentCheck = function onParentCheck(checked) {
          if (!this.isDisabled) {
            this.setCheckState(checked);
          }
        };
        Node2.prototype.onChildCheck = function onChildCheck() {
          var children = this.children;
          var validChildren = children.filter(function(child) {
            return !child.isDisabled;
          });
          var checked = validChildren.length ? validChildren.every(function(child) {
            return child.checked;
          }) : false;
          this.setCheckState(checked);
        };
        Node2.prototype.setCheckState = function setCheckState(checked) {
          var totalNum = this.children.length;
          var checkedNum = this.children.reduce(function(c, p) {
            var num = p.checked ? 1 : p.indeterminate ? 0.5 : 0;
            return c + num;
          }, 0);
          this.checked = checked;
          this.indeterminate = checkedNum !== totalNum && checkedNum > 0;
        };
        Node2.prototype.syncCheckState = function syncCheckState(checkedValue) {
          var value = this.getValueByOption();
          var checked = this.isSameNode(checkedValue, value);
          this.doCheck(checked);
        };
        Node2.prototype.doCheck = function doCheck(checked) {
          if (this.checked !== checked) {
            if (this.config.checkStrictly) {
              this.checked = checked;
            } else {
              this.broadcast("check", checked);
              this.setCheckState(checked);
              this.emit("check");
            }
          }
        };
        node_createClass(Node2, [{
          key: "isDisabled",
          get: function get() {
            var data = this.data, parent = this.parent, config2 = this.config;
            var disabledKey = config2.disabled;
            var checkStrictly = config2.checkStrictly;
            return data[disabledKey] || !checkStrictly && parent && parent.isDisabled;
          }
        }, {
          key: "isLeaf",
          get: function get() {
            var data = this.data, loaded = this.loaded, hasChildren = this.hasChildren, children = this.children;
            var _config2 = this.config, lazy = _config2.lazy, leafKey = _config2.leaf;
            if (lazy) {
              var isLeaf = Object(shared_["isDef"])(data[leafKey]) ? data[leafKey] : loaded ? !children.length : false;
              this.hasChildren = !isLeaf;
              return isLeaf;
            }
            return !hasChildren;
          }
        }]);
        return Node2;
      }();
      var src_node = src_node_Node;
      function store_classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var flatNodes = function flatNodes2(data, leafOnly) {
        return data.reduce(function(res, node) {
          if (node.isLeaf) {
            res.push(node);
          } else {
            !leafOnly && res.push(node);
            res = res.concat(flatNodes2(node.children, leafOnly));
          }
          return res;
        }, []);
      };
      var store_Store = function() {
        function Store(data, config2) {
          store_classCallCheck(this, Store);
          this.config = config2;
          this.initNodes(data);
        }
        Store.prototype.initNodes = function initNodes(data) {
          var _this = this;
          data = Object(util_["coerceTruthyValueToArray"])(data);
          this.nodes = data.map(function(nodeData) {
            return new src_node(nodeData, _this.config);
          });
          this.flattedNodes = this.getFlattedNodes(false, false);
          this.leafNodes = this.getFlattedNodes(true, false);
        };
        Store.prototype.appendNode = function appendNode(nodeData, parentNode2) {
          var node = new src_node(nodeData, this.config, parentNode2);
          var children = parentNode2 ? parentNode2.children : this.nodes;
          children.push(node);
        };
        Store.prototype.appendNodes = function appendNodes(nodeDataList, parentNode2) {
          var _this2 = this;
          nodeDataList = Object(util_["coerceTruthyValueToArray"])(nodeDataList);
          nodeDataList.forEach(function(nodeData) {
            return _this2.appendNode(nodeData, parentNode2);
          });
        };
        Store.prototype.getNodes = function getNodes() {
          return this.nodes;
        };
        Store.prototype.getFlattedNodes = function getFlattedNodes(leafOnly) {
          var cached2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
          var cachedNodes = leafOnly ? this.leafNodes : this.flattedNodes;
          return cached2 ? cachedNodes : flatNodes(this.nodes, leafOnly);
        };
        Store.prototype.getNodeByValue = function getNodeByValue(value) {
          var nodes = this.getFlattedNodes(false, !this.config.lazy).filter(function(node) {
            return Object(util_["valueEquals"])(node.path, value) || node.value === value;
          });
          return nodes && nodes.length ? nodes[0] : null;
        };
        return Store;
      }();
      var cascader_panel_src_store = store_Store;
      var cascader_panelvue_type_script_lang_js_extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target2[key] = source[key];
            }
          }
        }
        return target2;
      };
      var cascader_panelvue_type_script_lang_js_KeyCode = aria_utils_default.a.keys;
      var DefaultProps = {
        expandTrigger: "click",
        // or hover
        multiple: false,
        checkStrictly: false,
        // whether all nodes can be selected
        emitPath: true,
        // wether to emit an array of all levels value in which node is located
        lazy: false,
        lazyLoad: util_["noop"],
        value: "value",
        label: "label",
        children: "children",
        leaf: "leaf",
        disabled: "disabled",
        hoverThreshold: 500
      };
      var cascader_panelvue_type_script_lang_js_isLeaf = function isLeaf(el) {
        return !el.getAttribute("aria-owns");
      };
      var getSibling = function getSibling2(el, distance) {
        var parentNode2 = el.parentNode;
        if (parentNode2) {
          var siblings = parentNode2.querySelectorAll('.el-cascader-node[tabindex="-1"]');
          var index2 = Array.prototype.indexOf.call(siblings, el);
          return siblings[index2 + distance] || null;
        }
        return null;
      };
      var getMenuIndex = function getMenuIndex2(el, distance) {
        if (!el)
          return;
        var pieces = el.id.split("-");
        return Number(pieces[pieces.length - 2]);
      };
      var focusNode = function focusNode2(el) {
        if (!el)
          return;
        el.focus();
        !cascader_panelvue_type_script_lang_js_isLeaf(el) && el.click();
      };
      var checkNode = function checkNode2(el) {
        if (!el)
          return;
        var input2 = el.querySelector("input");
        if (input2) {
          input2.click();
        } else if (cascader_panelvue_type_script_lang_js_isLeaf(el)) {
          el.click();
        }
      };
      var cascader_panelvue_type_script_lang_js_ = {
        name: "ElCascaderPanel",
        components: {
          CascaderMenu: cascader_menu
        },
        props: {
          value: {},
          options: Array,
          props: Object,
          border: {
            type: Boolean,
            default: true
          },
          renderLabel: Function
        },
        provide: function provide2() {
          return {
            panel: this
          };
        },
        data: function data() {
          return {
            checkedValue: null,
            checkedNodePaths: [],
            store: [],
            menus: [],
            activePath: [],
            loadCount: 0
          };
        },
        computed: {
          config: function config2() {
            return merge_default()(cascader_panelvue_type_script_lang_js_extends({}, DefaultProps), this.props || {});
          },
          multiple: function multiple() {
            return this.config.multiple;
          },
          checkStrictly: function checkStrictly() {
            return this.config.checkStrictly;
          },
          leafOnly: function leafOnly() {
            return !this.checkStrictly;
          },
          isHoverMenu: function isHoverMenu() {
            return this.config.expandTrigger === "hover";
          },
          renderLabelFn: function renderLabelFn() {
            return this.renderLabel || this.$scopedSlots.default;
          }
        },
        watch: {
          value: function value() {
            this.syncCheckedValue();
            this.checkStrictly && this.calculateCheckedNodePaths();
          },
          options: {
            handler: function handler() {
              this.initStore();
            },
            immediate: true,
            deep: true
          },
          checkedValue: function checkedValue(val) {
            if (!Object(util_["isEqual"])(val, this.value)) {
              this.checkStrictly && this.calculateCheckedNodePaths();
              this.$emit("input", val);
              this.$emit("change", val);
            }
          }
        },
        mounted: function mounted2() {
          if (!this.isEmptyValue(this.value)) {
            this.syncCheckedValue();
          }
        },
        methods: {
          initStore: function initStore() {
            var config2 = this.config, options = this.options;
            if (config2.lazy && Object(util_["isEmpty"])(options)) {
              this.lazyLoad();
            } else {
              this.store = new cascader_panel_src_store(options, config2);
              this.menus = [this.store.getNodes()];
              this.syncMenuState();
            }
          },
          syncCheckedValue: function syncCheckedValue() {
            var value = this.value, checkedValue = this.checkedValue;
            if (!Object(util_["isEqual"])(value, checkedValue)) {
              this.activePath = [];
              this.checkedValue = value;
              this.syncMenuState();
            }
          },
          syncMenuState: function syncMenuState() {
            var multiple = this.multiple, checkStrictly = this.checkStrictly;
            this.syncActivePath();
            multiple && this.syncMultiCheckState();
            checkStrictly && this.calculateCheckedNodePaths();
            this.$nextTick(this.scrollIntoView);
          },
          syncMultiCheckState: function syncMultiCheckState() {
            var _this = this;
            var nodes = this.getFlattedNodes(this.leafOnly);
            nodes.forEach(function(node) {
              node.syncCheckState(_this.checkedValue);
            });
          },
          isEmptyValue: function isEmptyValue2(val) {
            var multiple = this.multiple, config2 = this.config;
            var emitPath = config2.emitPath;
            if (multiple || emitPath) {
              return Object(util_["isEmpty"])(val);
            }
            return false;
          },
          syncActivePath: function syncActivePath() {
            var _this2 = this;
            var store2 = this.store, multiple = this.multiple, activePath = this.activePath, checkedValue = this.checkedValue;
            if (!Object(util_["isEmpty"])(activePath)) {
              var nodes = activePath.map(function(node) {
                return _this2.getNodeByValue(node.getValue());
              });
              this.expandNodes(nodes);
            } else if (!this.isEmptyValue(checkedValue)) {
              var value = multiple ? checkedValue[0] : checkedValue;
              var checkedNode = this.getNodeByValue(value) || {};
              var _nodes = (checkedNode.pathNodes || []).slice(0, -1);
              this.expandNodes(_nodes);
            } else {
              this.activePath = [];
              this.menus = [store2.getNodes()];
            }
          },
          expandNodes: function expandNodes(nodes) {
            var _this3 = this;
            nodes.forEach(function(node) {
              return _this3.handleExpand(
                node,
                true
                /* silent */
              );
            });
          },
          calculateCheckedNodePaths: function calculateCheckedNodePaths() {
            var _this4 = this;
            var checkedValue = this.checkedValue, multiple = this.multiple;
            var checkedValues = multiple ? Object(util_["coerceTruthyValueToArray"])(checkedValue) : [checkedValue];
            this.checkedNodePaths = checkedValues.map(function(v) {
              var checkedNode = _this4.getNodeByValue(v);
              return checkedNode ? checkedNode.pathNodes : [];
            });
          },
          handleKeyDown: function handleKeyDown(e) {
            var target2 = e.target, keyCode2 = e.keyCode;
            switch (keyCode2) {
              case cascader_panelvue_type_script_lang_js_KeyCode.up:
                var prev = getSibling(target2, -1);
                focusNode(prev);
                break;
              case cascader_panelvue_type_script_lang_js_KeyCode.down:
                var next = getSibling(target2, 1);
                focusNode(next);
                break;
              case cascader_panelvue_type_script_lang_js_KeyCode.left:
                var preMenu = this.$refs.menu[getMenuIndex(target2) - 1];
                if (preMenu) {
                  var expandedNode = preMenu.$el.querySelector('.el-cascader-node[aria-expanded="true"]');
                  focusNode(expandedNode);
                }
                break;
              case cascader_panelvue_type_script_lang_js_KeyCode.right:
                var nextMenu = this.$refs.menu[getMenuIndex(target2) + 1];
                if (nextMenu) {
                  var firstNode = nextMenu.$el.querySelector('.el-cascader-node[tabindex="-1"]');
                  focusNode(firstNode);
                }
                break;
              case cascader_panelvue_type_script_lang_js_KeyCode.enter:
                checkNode(target2);
                break;
              case cascader_panelvue_type_script_lang_js_KeyCode.esc:
              case cascader_panelvue_type_script_lang_js_KeyCode.tab:
                this.$emit("close");
                break;
              default:
                return;
            }
          },
          handleExpand: function handleExpand(node, silent) {
            var activePath = this.activePath;
            var level = node.level;
            var path = activePath.slice(0, level - 1);
            var menus = this.menus.slice(0, level);
            if (!node.isLeaf) {
              path.push(node);
              menus.push(node.children);
            }
            this.activePath = path;
            this.menus = menus;
            if (!silent) {
              var pathValues = path.map(function(node2) {
                return node2.getValue();
              });
              var activePathValues = activePath.map(function(node2) {
                return node2.getValue();
              });
              if (!Object(util_["valueEquals"])(pathValues, activePathValues)) {
                this.$emit("active-item-change", pathValues);
                this.$emit("expand-change", pathValues);
              }
            }
          },
          handleCheckChange: function handleCheckChange(value) {
            this.checkedValue = value;
          },
          lazyLoad: function lazyLoad(node, onFullfiled) {
            var _this5 = this;
            var config2 = this.config;
            if (!node) {
              node = node || { root: true, level: 0 };
              this.store = new cascader_panel_src_store([], config2);
              this.menus = [this.store.getNodes()];
            }
            node.loading = true;
            var resolve = function resolve2(dataList) {
              var parent = node.root ? null : node;
              dataList && dataList.length && _this5.store.appendNodes(dataList, parent);
              node.loading = false;
              node.loaded = true;
              if (Array.isArray(_this5.checkedValue)) {
                var nodeValue = _this5.checkedValue[_this5.loadCount++];
                var valueKey = _this5.config.value;
                var leafKey = _this5.config.leaf;
                if (Array.isArray(dataList) && dataList.filter(function(item) {
                  return item[valueKey] === nodeValue;
                }).length > 0) {
                  var checkedNode = _this5.store.getNodeByValue(nodeValue);
                  if (!checkedNode.data[leafKey]) {
                    _this5.lazyLoad(checkedNode, function() {
                      _this5.handleExpand(checkedNode);
                    });
                  }
                  if (_this5.loadCount === _this5.checkedValue.length) {
                    _this5.$parent.computePresentText();
                  }
                }
              }
              onFullfiled && onFullfiled(dataList);
            };
            config2.lazyLoad(node, resolve);
          },
          /**
           * public methods
          */
          calculateMultiCheckedValue: function calculateMultiCheckedValue() {
            this.checkedValue = this.getCheckedNodes(this.leafOnly).map(function(node) {
              return node.getValueByOption();
            });
          },
          scrollIntoView: function scrollIntoView2() {
            if (this.$isServer)
              return;
            var menus = this.$refs.menu || [];
            menus.forEach(function(menu) {
              var menuElement = menu.$el;
              if (menuElement) {
                var container = menuElement.querySelector(".el-scrollbar__wrap");
                var activeNode = menuElement.querySelector(".el-cascader-node.is-active") || menuElement.querySelector(".el-cascader-node.in-active-path");
                scroll_into_view_default()(container, activeNode);
              }
            });
          },
          getNodeByValue: function getNodeByValue(val) {
            return this.store.getNodeByValue(val);
          },
          getFlattedNodes: function getFlattedNodes(leafOnly) {
            var cached2 = !this.config.lazy;
            return this.store.getFlattedNodes(leafOnly, cached2);
          },
          getCheckedNodes: function getCheckedNodes(leafOnly) {
            var checkedValue = this.checkedValue, multiple = this.multiple;
            if (multiple) {
              var nodes = this.getFlattedNodes(leafOnly);
              return nodes.filter(function(node) {
                return node.checked;
              });
            } else {
              return this.isEmptyValue(checkedValue) ? [] : [this.getNodeByValue(checkedValue)];
            }
          },
          clearCheckedNodes: function clearCheckedNodes() {
            var config2 = this.config, leafOnly = this.leafOnly;
            var multiple = config2.multiple, emitPath = config2.emitPath;
            if (multiple) {
              this.getCheckedNodes(leafOnly).filter(function(node) {
                return !node.isDisabled;
              }).forEach(function(node) {
                return node.doCheck(false);
              });
              this.calculateMultiCheckedValue();
            } else {
              this.checkedValue = emitPath ? [] : null;
            }
          }
        }
      };
      var src_cascader_panelvue_type_script_lang_js_ = cascader_panelvue_type_script_lang_js_;
      var cascader_panel_component = normalizeComponent2(
        src_cascader_panelvue_type_script_lang_js_,
        cascader_panelvue_type_template_id_34932346_render,
        cascader_panelvue_type_template_id_34932346_staticRenderFns,
        false,
        null,
        null,
        null
      );
      cascader_panel_component.options.__file = "packages/cascader-panel/src/cascader-panel.vue";
      var cascader_panel = cascader_panel_component.exports;
      cascader_panel.install = function(Vue2) {
        Vue2.component(cascader_panel.name, cascader_panel);
      };
      var packages_cascader_panel = cascader_panel;
      var avatar_src_mainvue_type_script_lang_js_ = {
        name: "ElAvatar",
        props: {
          size: {
            type: [Number, String],
            validator: function validator(val) {
              if (typeof val === "string") {
                return ["large", "medium", "small"].includes(val);
              }
              return typeof val === "number";
            }
          },
          shape: {
            type: String,
            default: "circle",
            validator: function validator(val) {
              return ["circle", "square"].includes(val);
            }
          },
          icon: String,
          src: String,
          alt: String,
          srcSet: String,
          error: Function,
          fit: {
            type: String,
            default: "cover"
          }
        },
        data: function data() {
          return {
            isImageExist: true
          };
        },
        computed: {
          avatarClass: function avatarClass() {
            var size = this.size, icon2 = this.icon, shape = this.shape;
            var classList = ["el-avatar"];
            if (size && typeof size === "string") {
              classList.push("el-avatar--" + size);
            }
            if (icon2) {
              classList.push("el-avatar--icon");
            }
            if (shape) {
              classList.push("el-avatar--" + shape);
            }
            return classList.join(" ");
          }
        },
        methods: {
          handleError: function handleError2() {
            var error = this.error;
            var errorFlag = error ? error() : void 0;
            if (errorFlag !== false) {
              this.isImageExist = false;
            }
          },
          renderAvatar: function renderAvatar() {
            var h2 = this.$createElement;
            var icon2 = this.icon, src2 = this.src, alt = this.alt, isImageExist = this.isImageExist, srcSet = this.srcSet, fit = this.fit;
            if (isImageExist && src2) {
              return h2("img", {
                attrs: {
                  src: src2,
                  alt,
                  srcSet
                },
                on: {
                  "error": this.handleError
                },
                style: { "object-fit": fit }
              });
            }
            if (icon2) {
              return h2("i", { "class": icon2 });
            }
            return this.$slots.default;
          }
        },
        render: function render6() {
          var h2 = arguments[0];
          var avatarClass = this.avatarClass, size = this.size;
          var sizeStyle = typeof size === "number" ? {
            height: size + "px",
            width: size + "px",
            lineHeight: size + "px"
          } : {};
          return h2(
            "span",
            { "class": avatarClass, style: sizeStyle },
            [this.renderAvatar()]
          );
        }
      };
      var packages_avatar_src_mainvue_type_script_lang_js_ = avatar_src_mainvue_type_script_lang_js_;
      var src_main_render, src_main_staticRenderFns;
      var avatar_src_main_component = normalizeComponent2(
        packages_avatar_src_mainvue_type_script_lang_js_,
        src_main_render,
        src_main_staticRenderFns,
        false,
        null,
        null,
        null
      );
      avatar_src_main_component.options.__file = "packages/avatar/src/main.vue";
      var avatar_src_main = avatar_src_main_component.exports;
      avatar_src_main.install = function(Vue2) {
        Vue2.component(avatar_src_main.name, avatar_src_main);
      };
      var avatar = avatar_src_main;
      var mainvue_type_template_id_a4885264_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "transition",
          {
            attrs: { name: "el-drawer-fade" },
            on: { "after-enter": _vm.afterEnter, "after-leave": _vm.afterLeave }
          },
          [
            _c(
              "div",
              {
                directives: [
                  {
                    name: "show",
                    rawName: "v-show",
                    value: _vm.visible,
                    expression: "visible"
                  }
                ],
                staticClass: "el-drawer__wrapper",
                attrs: { tabindex: "-1" }
              },
              [
                _c(
                  "div",
                  {
                    staticClass: "el-drawer__container",
                    class: _vm.visible && "el-drawer__open",
                    attrs: { role: "document", tabindex: "-1" },
                    on: {
                      click: function($event) {
                        if ($event.target !== $event.currentTarget) {
                          return null;
                        }
                        return _vm.handleWrapperClick($event);
                      }
                    }
                  },
                  [
                    _c(
                      "div",
                      {
                        ref: "drawer",
                        staticClass: "el-drawer",
                        class: [_vm.direction, _vm.customClass],
                        style: _vm.isHorizontal ? "width: " + _vm.drawerSize : "height: " + _vm.drawerSize,
                        attrs: {
                          "aria-modal": "true",
                          "aria-labelledby": "el-drawer__title",
                          "aria-label": _vm.title,
                          role: "dialog",
                          tabindex: "-1"
                        }
                      },
                      [
                        _vm.withHeader ? _c(
                          "header",
                          {
                            staticClass: "el-drawer__header",
                            attrs: { id: "el-drawer__title" }
                          },
                          [
                            _vm._t("title", [
                              _c(
                                "span",
                                { attrs: { role: "heading", title: _vm.title } },
                                [_vm._v(_vm._s(_vm.title))]
                              )
                            ]),
                            _vm.showClose ? _c(
                              "button",
                              {
                                staticClass: "el-drawer__close-btn",
                                attrs: {
                                  "aria-label": "close " + (_vm.title || "drawer"),
                                  type: "button"
                                },
                                on: { click: _vm.closeDrawer }
                              },
                              [
                                _c("i", {
                                  staticClass: "el-dialog__close el-icon el-icon-close"
                                })
                              ]
                            ) : _vm._e()
                          ],
                          2
                        ) : _vm._e(),
                        _vm.rendered ? _c(
                          "section",
                          { staticClass: "el-drawer__body" },
                          [_vm._t("default")],
                          2
                        ) : _vm._e()
                      ]
                    )
                  ]
                )
              ]
            )
          ]
        );
      };
      var mainvue_type_template_id_a4885264_staticRenderFns = [];
      mainvue_type_template_id_a4885264_render._withStripped = true;
      var drawer_src_mainvue_type_script_lang_js_ = {
        name: "ElDrawer",
        mixins: [popup_default.a, emitter_default.a],
        props: {
          appendToBody: {
            type: Boolean,
            default: false
          },
          beforeClose: {
            type: Function
          },
          customClass: {
            type: String,
            default: ""
          },
          closeOnPressEscape: {
            type: Boolean,
            default: true
          },
          destroyOnClose: {
            type: Boolean,
            default: false
          },
          modal: {
            type: Boolean,
            default: true
          },
          direction: {
            type: String,
            default: "rtl",
            validator: function validator(val) {
              return ["ltr", "rtl", "ttb", "btt"].indexOf(val) !== -1;
            }
          },
          modalAppendToBody: {
            type: Boolean,
            default: true
          },
          showClose: {
            type: Boolean,
            default: true
          },
          size: {
            type: [Number, String],
            default: "30%"
          },
          title: {
            type: String,
            default: ""
          },
          visible: {
            type: Boolean
          },
          wrapperClosable: {
            type: Boolean,
            default: true
          },
          withHeader: {
            type: Boolean,
            default: true
          }
        },
        computed: {
          isHorizontal: function isHorizontal() {
            return this.direction === "rtl" || this.direction === "ltr";
          },
          drawerSize: function drawerSize() {
            return typeof this.size === "number" ? this.size + "px" : this.size;
          }
        },
        data: function data() {
          return {
            closed: false,
            prevActiveElement: null
          };
        },
        watch: {
          visible: function visible(val) {
            var _this = this;
            if (val) {
              this.closed = false;
              this.$emit("open");
              if (this.appendToBody) {
                document.body.appendChild(this.$el);
              }
              this.prevActiveElement = document.activeElement;
            } else {
              if (!this.closed) {
                this.$emit("close");
                if (this.destroyOnClose === true) {
                  this.rendered = false;
                }
              }
              this.$nextTick(function() {
                if (_this.prevActiveElement) {
                  _this.prevActiveElement.focus();
                }
              });
            }
          }
        },
        methods: {
          afterEnter: function afterEnter() {
            this.$emit("opened");
          },
          afterLeave: function afterLeave2() {
            this.$emit("closed");
          },
          hide: function hide2(cancel) {
            if (cancel !== false) {
              this.$emit("update:visible", false);
              this.$emit("close");
              if (this.destroyOnClose === true) {
                this.rendered = false;
              }
              this.closed = true;
            }
          },
          handleWrapperClick: function handleWrapperClick() {
            if (this.wrapperClosable) {
              this.closeDrawer();
            }
          },
          closeDrawer: function closeDrawer() {
            if (typeof this.beforeClose === "function") {
              this.beforeClose(this.hide);
            } else {
              this.hide();
            }
          },
          handleClose: function handleClose() {
            this.closeDrawer();
          }
        },
        mounted: function mounted2() {
          if (this.visible) {
            this.rendered = true;
            this.open();
            if (this.appendToBody) {
              document.body.appendChild(this.$el);
            }
          }
        },
        destroyed: function destroyed() {
          if (this.appendToBody && this.$el && this.$el.parentNode) {
            this.$el.parentNode.removeChild(this.$el);
          }
        }
      };
      var packages_drawer_src_mainvue_type_script_lang_js_ = drawer_src_mainvue_type_script_lang_js_;
      var drawer_src_main_component = normalizeComponent2(
        packages_drawer_src_mainvue_type_script_lang_js_,
        mainvue_type_template_id_a4885264_render,
        mainvue_type_template_id_a4885264_staticRenderFns,
        false,
        null,
        null,
        null
      );
      drawer_src_main_component.options.__file = "packages/drawer/src/main.vue";
      var drawer_src_main = drawer_src_main_component.exports;
      drawer_src_main.install = function(Vue2) {
        Vue2.component(drawer_src_main.name, drawer_src_main);
      };
      var drawer = drawer_src_main;
      var mainvue_type_template_id_76339aa7_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", { staticClass: "el-statistic" }, [
          _vm.title || _vm.$slots.title ? _c(
            "div",
            { staticClass: "head" },
            [
              _vm._t("title", [
                _c("span", { staticClass: "title" }, [
                  _vm._v("\n        " + _vm._s(_vm.title) + "\n      ")
                ])
              ])
            ],
            2
          ) : _vm._e(),
          _c("div", { staticClass: "con" }, [
            _vm.prefix || _vm.$slots.prefix ? _c(
              "span",
              { staticClass: "prefix" },
              [
                _vm._t("prefix", [
                  _vm._v("\n        " + _vm._s(_vm.prefix) + "\n      ")
                ])
              ],
              2
            ) : _vm._e(),
            _c(
              "span",
              { staticClass: "number", style: _vm.valueStyle },
              [_vm._t("formatter", [_vm._v(" " + _vm._s(_vm.disposeValue))])],
              2
            ),
            _vm.suffix || _vm.$slots.suffix ? _c(
              "span",
              { staticClass: "suffix" },
              [
                _vm._t("suffix", [
                  _vm._v("\n        " + _vm._s(_vm.suffix) + "\n      ")
                ])
              ],
              2
            ) : _vm._e()
          ])
        ]);
      };
      var mainvue_type_template_id_76339aa7_staticRenderFns = [];
      mainvue_type_template_id_76339aa7_render._withStripped = true;
      var lodash_ = __webpack_require__(28);
      var statistic_src_mainvue_type_script_lang_js_ = {
        name: "ElStatistic",
        data: function data() {
          return {
            disposeValue: "",
            timeTask: null,
            REFRESH_INTERVAL: 1e3 / 30
          };
        },
        props: {
          decimalSeparator: {
            type: String,
            default: "."
          },
          groupSeparator: {
            type: String,
            default: ""
          },
          precision: {
            type: Number,
            default: null
          },
          value: {
            type: [String, Number],
            default: ""
          },
          prefix: {
            type: String,
            default: ""
          },
          suffix: {
            type: String,
            default: ""
          },
          title: {
            type: [String, Number],
            default: ""
          },
          timeIndices: {
            type: Boolean,
            default: false
          },
          valueStyle: {
            type: Object,
            default: function _default2() {
              return {};
            }
          },
          format: {
            type: String,
            default: "HH:mm:ss:SSS"
          },
          rate: {
            type: Number,
            default: 1e3
          }
        },
        created: function created() {
          this.branch();
        },
        watch: {
          value: function value() {
            this.branch();
          }
        },
        methods: {
          branch: function branch() {
            var timeIndices = this.timeIndices, countDown = this.countDown, dispose = this.dispose;
            timeIndices ? countDown() : dispose();
          },
          magnification: function magnification(num) {
            var mulriple = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1e3;
            var groupSeparator = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ",";
            var level = String(mulriple).length - 1;
            var reg = new RegExp("\\d{1," + level + "}(?=(\\d{" + level + "})+$)", "g");
            var result = String(num).replace(reg, "$&,").split(",").join(groupSeparator);
            return result;
          },
          dispose: function dispose() {
            var value = this.value, precision = this.precision, groupSeparator = this.groupSeparator, rate = this.rate;
            if (!Object(lodash_["isNumber"])(value))
              return false;
            var _String$split = String(value).split("."), integer3 = _String$split[0], decimal = _String$split[1];
            if (precision) {
              decimal = "" + (decimal || "") + 1 .toFixed(precision).replace(".", "").slice(1);
              decimal = decimal.slice(0, precision);
            }
            var result = 0;
            if (groupSeparator) {
              integer3 = this.magnification(integer3, rate, groupSeparator);
            }
            result = [integer3, decimal].join(decimal ? this.decimalSeparator : "");
            this.disposeValue = result;
            return result;
          },
          diffDate: function diffDate(minuend, subtrahend) {
            return Math.max(minuend - subtrahend, 0);
          },
          suspend: function suspend(isStop) {
            if (isStop) {
              if (this.timeTask) {
                clearInterval(this.timeTask);
                this.timeTask = null;
              }
            } else {
              this.branch();
            }
            return this.disposeValue;
          },
          formatTimeStr: function formatTimeStr(time) {
            var format2 = this.format;
            var escapeRegex = /\[[^\]]*]/g;
            var keepList = (format2.match(escapeRegex) || []).map(function(str) {
              return str.slice(1, -1);
            });
            var timeUnits = [
              ["Y", 1e3 * 60 * 60 * 24 * 365],
              // years
              ["M", 1e3 * 60 * 60 * 24 * 30],
              // months
              ["D", 1e3 * 60 * 60 * 24],
              // days
              ["H", 1e3 * 60 * 60],
              // hours
              ["m", 1e3 * 60],
              // minutes
              ["s", 1e3],
              // seconds
              ["S", 1]
              // million seconds
            ];
            var formatText = Object(lodash_["reduce"])(timeUnits, function(con, item) {
              var name = item[0];
              return con.replace(new RegExp(name + "+", "g"), function(match) {
                var sum = Object(lodash_["chain"])(time).divide(item[1]).floor(0).value();
                time -= Object(lodash_["multiply"])(sum, item[1]);
                return Object(lodash_["padStart"])(String(sum), String(match).length, 0);
              });
            }, format2);
            var index2 = 0;
            return formatText.replace(escapeRegex, function() {
              var match = keepList[index2];
              index2 += 1;
              return match;
            });
          },
          stopTime: function stopTime(time) {
            var result = true;
            if (time) {
              this.$emit("change", time);
              result = false;
            } else {
              result = true;
              this.suspend(true);
              this.$emit("finish", true);
            }
            return result;
          },
          countDown: function countDown() {
            var REFRESH_INTERVAL = this.REFRESH_INTERVAL, timeTask = this.timeTask, diffDate = this.diffDate, formatTimeStr = this.formatTimeStr, stopTime = this.stopTime, suspend = this.suspend;
            if (timeTask)
              return;
            var than = this;
            this.timeTask = setInterval(function() {
              var diffTiem = diffDate(than.value, Date.now());
              than.disposeValue = formatTimeStr(diffTiem);
              stopTime(diffTiem);
            }, REFRESH_INTERVAL);
            this.$once("hook:beforeDestroy", function() {
              suspend(true);
            });
          }
        }
      };
      var packages_statistic_src_mainvue_type_script_lang_js_ = statistic_src_mainvue_type_script_lang_js_;
      var statistic_src_main_component = normalizeComponent2(
        packages_statistic_src_mainvue_type_script_lang_js_,
        mainvue_type_template_id_76339aa7_render,
        mainvue_type_template_id_76339aa7_staticRenderFns,
        false,
        null,
        null,
        null
      );
      statistic_src_main_component.options.__file = "packages/statistic/src/main.vue";
      var statistic_src_main = statistic_src_main_component.exports;
      statistic_src_main.install = function(Vue2) {
        Vue2.component(statistic_src_main.name, statistic_src_main);
      };
      var statistic = statistic_src_main;
      var mainvue_type_template_id_048de730_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "el-popover",
          _vm._b(
            {
              attrs: { trigger: "click" },
              model: {
                value: _vm.visible,
                callback: function($$v) {
                  _vm.visible = $$v;
                },
                expression: "visible"
              }
            },
            "el-popover",
            _vm.$attrs,
            false
          ),
          [
            _c("div", { staticClass: "el-popconfirm" }, [
              _c("p", { staticClass: "el-popconfirm__main" }, [
                !_vm.hideIcon ? _c("i", {
                  staticClass: "el-popconfirm__icon",
                  class: _vm.icon,
                  style: { color: _vm.iconColor }
                }) : _vm._e(),
                _vm._v("\n      " + _vm._s(_vm.title) + "\n    ")
              ]),
              _c(
                "div",
                { staticClass: "el-popconfirm__action" },
                [
                  _c(
                    "el-button",
                    {
                      attrs: { size: "mini", type: _vm.cancelButtonType },
                      on: { click: _vm.cancel }
                    },
                    [
                      _vm._v(
                        "\n        " + _vm._s(_vm.displayCancelButtonText) + "\n      "
                      )
                    ]
                  ),
                  _c(
                    "el-button",
                    {
                      attrs: { size: "mini", type: _vm.confirmButtonType },
                      on: { click: _vm.confirm }
                    },
                    [
                      _vm._v(
                        "\n        " + _vm._s(_vm.displayConfirmButtonText) + "\n      "
                      )
                    ]
                  )
                ],
                1
              )
            ]),
            _vm._t("reference", null, { slot: "reference" })
          ],
          2
        );
      };
      var mainvue_type_template_id_048de730_staticRenderFns = [];
      mainvue_type_template_id_048de730_render._withStripped = true;
      var popover_ = __webpack_require__(45);
      var popover_default = /* @__PURE__ */ __webpack_require__.n(popover_);
      var popconfirm_src_mainvue_type_script_lang_js_ = {
        name: "ElPopconfirm",
        props: {
          title: {
            type: String
          },
          confirmButtonText: {
            type: String
          },
          cancelButtonText: {
            type: String
          },
          confirmButtonType: {
            type: String,
            default: "primary"
          },
          cancelButtonType: {
            type: String,
            default: "text"
          },
          icon: {
            type: String,
            default: "el-icon-question"
          },
          iconColor: {
            type: String,
            default: "#f90"
          },
          hideIcon: {
            type: Boolean,
            default: false
          }
        },
        components: {
          ElPopover: popover_default.a,
          ElButton: button_default.a
        },
        data: function data() {
          return {
            visible: false
          };
        },
        computed: {
          displayConfirmButtonText: function displayConfirmButtonText() {
            return this.confirmButtonText || Object(lib_locale_["t"])("el.popconfirm.confirmButtonText");
          },
          displayCancelButtonText: function displayCancelButtonText() {
            return this.cancelButtonText || Object(lib_locale_["t"])("el.popconfirm.cancelButtonText");
          }
        },
        methods: {
          confirm: function confirm() {
            this.visible = false;
            this.$emit("confirm");
          },
          cancel: function cancel() {
            this.visible = false;
            this.$emit("cancel");
          }
        }
      };
      var packages_popconfirm_src_mainvue_type_script_lang_js_ = popconfirm_src_mainvue_type_script_lang_js_;
      var popconfirm_src_main_component = normalizeComponent2(
        packages_popconfirm_src_mainvue_type_script_lang_js_,
        mainvue_type_template_id_048de730_render,
        mainvue_type_template_id_048de730_staticRenderFns,
        false,
        null,
        null,
        null
      );
      popconfirm_src_main_component.options.__file = "packages/popconfirm/src/main.vue";
      var popconfirm_src_main = popconfirm_src_main_component.exports;
      popconfirm_src_main.install = function(Vue2) {
        Vue2.component(popconfirm_src_main.name, popconfirm_src_main);
      };
      var popconfirm = popconfirm_src_main;
      var srcvue_type_template_id_7f659269_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          [
            _vm.uiLoading ? [
              _c(
                "div",
                _vm._b(
                  { class: ["el-skeleton", _vm.animated ? "is-animated" : ""] },
                  "div",
                  _vm.$attrs,
                  false
                ),
                [
                  _vm._l(_vm.count, function(i) {
                    return [
                      _vm.loading ? _vm._t(
                        "template",
                        _vm._l(_vm.rows, function(item) {
                          return _c("el-skeleton-item", {
                            key: i + "-" + item,
                            class: {
                              "el-skeleton__paragraph": item !== 1,
                              "is-first": item === 1,
                              "is-last": item === _vm.rows && _vm.rows > 1
                            },
                            attrs: { variant: "p" }
                          });
                        })
                      ) : _vm._e()
                    ];
                  })
                ],
                2
              )
            ] : [_vm._t("default", null, null, _vm.$attrs)]
          ],
          2
        );
      };
      var srcvue_type_template_id_7f659269_staticRenderFns = [];
      srcvue_type_template_id_7f659269_render._withStripped = true;
      var skeleton_srcvue_type_script_lang_js_ = {
        name: "ElSkeleton",
        props: {
          animated: {
            type: Boolean,
            default: false
          },
          count: {
            type: Number,
            default: 1
          },
          rows: {
            type: Number,
            default: 4
          },
          loading: {
            type: Boolean,
            default: true
          },
          throttle: {
            type: Number,
            default: 0
          }
        },
        watch: {
          loading: {
            handler: function handler(loading2) {
              var _this = this;
              if (this.throttle <= 0) {
                this.uiLoading = loading2;
                return;
              }
              if (loading2) {
                clearTimeout(this.timeoutHandle);
                this.timeoutHandle = setTimeout(function() {
                  _this.uiLoading = _this.loading;
                }, this.throttle);
              } else {
                this.uiLoading = loading2;
              }
            },
            immediate: true
          }
        },
        data: function data() {
          return {
            uiLoading: this.throttle <= 0 ? this.loading : false
          };
        }
      };
      var packages_skeleton_srcvue_type_script_lang_js_ = skeleton_srcvue_type_script_lang_js_;
      var skeleton_src_component = normalizeComponent2(
        packages_skeleton_srcvue_type_script_lang_js_,
        srcvue_type_template_id_7f659269_render,
        srcvue_type_template_id_7f659269_staticRenderFns,
        false,
        null,
        null,
        null
      );
      skeleton_src_component.options.__file = "packages/skeleton/src/index.vue";
      var skeleton_src = skeleton_src_component.exports;
      skeleton_src.install = function(Vue2) {
        Vue2.component(skeleton_src.name, skeleton_src);
      };
      var skeleton = skeleton_src;
      var itemvue_type_template_id_4bc8804c_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "div",
          { class: ["el-skeleton__item", "el-skeleton__" + _vm.variant] },
          [_vm.variant === "image" ? _c("img-placeholder") : _vm._e()],
          1
        );
      };
      var itemvue_type_template_id_4bc8804c_staticRenderFns = [];
      itemvue_type_template_id_4bc8804c_render._withStripped = true;
      var img_placeholdervue_type_template_id_1b2cb5c0_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "svg",
          {
            attrs: { viewBox: "0 0 1024 1024", xmlns: "http://www.w3.org/2000/svg" }
          },
          [
            _c("path", {
              attrs: {
                d: "M64 896V128h896v768H64z m64-128l192-192 116.352 116.352L640 448l256 307.2V192H128v576z m224-480a96 96 0 1 1-0.064 192.064A96 96 0 0 1 352 288z"
              }
            })
          ]
        );
      };
      var img_placeholdervue_type_template_id_1b2cb5c0_staticRenderFns = [];
      img_placeholdervue_type_template_id_1b2cb5c0_render._withStripped = true;
      var img_placeholdervue_type_script_lang_js_ = {
        name: "ImgPlaceholder"
      };
      var src_img_placeholdervue_type_script_lang_js_ = img_placeholdervue_type_script_lang_js_;
      var img_placeholder_component = normalizeComponent2(
        src_img_placeholdervue_type_script_lang_js_,
        img_placeholdervue_type_template_id_1b2cb5c0_render,
        img_placeholdervue_type_template_id_1b2cb5c0_staticRenderFns,
        false,
        null,
        null,
        null
      );
      img_placeholder_component.options.__file = "packages/skeleton/src/img-placeholder.vue";
      var img_placeholder = img_placeholder_component.exports;
      var _components;
      var skeleton_src_itemvue_type_script_lang_js_ = {
        name: "ElSkeletonItem",
        props: {
          variant: {
            type: String,
            default: "text"
          }
        },
        components: (_components = {}, _components[img_placeholder.name] = img_placeholder, _components)
      };
      var packages_skeleton_src_itemvue_type_script_lang_js_ = skeleton_src_itemvue_type_script_lang_js_;
      var skeleton_src_item_component = normalizeComponent2(
        packages_skeleton_src_itemvue_type_script_lang_js_,
        itemvue_type_template_id_4bc8804c_render,
        itemvue_type_template_id_4bc8804c_staticRenderFns,
        false,
        null,
        null,
        null
      );
      skeleton_src_item_component.options.__file = "packages/skeleton/src/item.vue";
      var skeleton_src_item = skeleton_src_item_component.exports;
      skeleton_src_item.install = function(Vue2) {
        Vue2.component(skeleton_src_item.name, skeleton_src_item);
      };
      var skeleton_item = skeleton_src_item;
      var srcvue_type_template_id_347ced91_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", { staticClass: "el-empty" }, [
          _c(
            "div",
            { staticClass: "el-empty__image", style: _vm.imageStyle },
            [
              _vm.image ? _c("img", {
                attrs: { src: _vm.image, ondragstart: "return false" }
              }) : _vm._t("image", [_c("img-empty")])
            ],
            2
          ),
          _c(
            "div",
            { staticClass: "el-empty__description" },
            [
              _vm.$slots.description ? _vm._t("description") : _c("p", [_vm._v(_vm._s(_vm.emptyDescription))])
            ],
            2
          ),
          _vm.$slots.default ? _c("div", { staticClass: "el-empty__bottom" }, [_vm._t("default")], 2) : _vm._e()
        ]);
      };
      var srcvue_type_template_id_347ced91_staticRenderFns = [];
      srcvue_type_template_id_347ced91_render._withStripped = true;
      var img_emptyvue_type_template_id_42918b82_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "svg",
          {
            attrs: {
              viewBox: "0 0 79 86",
              version: "1.1",
              xmlns: "http://www.w3.org/2000/svg",
              "xmlns:xlink": "http://www.w3.org/1999/xlink"
            }
          },
          [
            _c(
              "defs",
              [
                _c(
                  "linearGradient",
                  {
                    attrs: {
                      id: "linearGradient-1-" + _vm.id,
                      x1: "38.8503086%",
                      y1: "0%",
                      x2: "61.1496914%",
                      y2: "100%"
                    }
                  },
                  [
                    _c("stop", { attrs: { "stop-color": "#FCFCFD", offset: "0%" } }),
                    _c("stop", { attrs: { "stop-color": "#EEEFF3", offset: "100%" } })
                  ],
                  1
                ),
                _c(
                  "linearGradient",
                  {
                    attrs: {
                      id: "linearGradient-2-" + _vm.id,
                      x1: "0%",
                      y1: "9.5%",
                      x2: "100%",
                      y2: "90.5%"
                    }
                  },
                  [
                    _c("stop", { attrs: { "stop-color": "#FCFCFD", offset: "0%" } }),
                    _c("stop", { attrs: { "stop-color": "#E9EBEF", offset: "100%" } })
                  ],
                  1
                ),
                _c("rect", {
                  attrs: {
                    id: "path-3-" + _vm.id,
                    x: "0",
                    y: "0",
                    width: "17",
                    height: "36"
                  }
                })
              ],
              1
            ),
            _c(
              "g",
              {
                attrs: {
                  id: "Illustrations",
                  stroke: "none",
                  "stroke-width": "1",
                  fill: "none",
                  "fill-rule": "evenodd"
                }
              },
              [
                _c(
                  "g",
                  {
                    attrs: {
                      id: "B-type",
                      transform: "translate(-1268.000000, -535.000000)"
                    }
                  },
                  [
                    _c(
                      "g",
                      {
                        attrs: {
                          id: "Group-2",
                          transform: "translate(1268.000000, 535.000000)"
                        }
                      },
                      [
                        _c("path", {
                          attrs: {
                            id: "Oval-Copy-2",
                            d: "M39.5,86 C61.3152476,86 79,83.9106622 79,81.3333333 C79,78.7560045 57.3152476,78 35.5,78 C13.6847524,78 0,78.7560045 0,81.3333333 C0,83.9106622 17.6847524,86 39.5,86 Z",
                            fill: "#F7F8FC"
                          }
                        }),
                        _c("polygon", {
                          attrs: {
                            id: "Rectangle-Copy-14",
                            fill: "#E5E7E9",
                            transform: "translate(27.500000, 51.500000) scale(1, -1) translate(-27.500000, -51.500000) ",
                            points: "13 58 53 58 42 45 2 45"
                          }
                        }),
                        _c(
                          "g",
                          {
                            attrs: {
                              id: "Group-Copy",
                              transform: "translate(34.500000, 31.500000) scale(-1, 1) rotate(-25.000000) translate(-34.500000, -31.500000) translate(7.000000, 10.000000)"
                            }
                          },
                          [
                            _c("polygon", {
                              attrs: {
                                id: "Rectangle-Copy-10",
                                fill: "#E5E7E9",
                                transform: "translate(11.500000, 5.000000) scale(1, -1) translate(-11.500000, -5.000000) ",
                                points: "2.84078316e-14 3 18 3 23 7 5 7"
                              }
                            }),
                            _c("polygon", {
                              attrs: {
                                id: "Rectangle-Copy-11",
                                fill: "#EDEEF2",
                                points: "-3.69149156e-15 7 38 7 38 43 -3.69149156e-15 43"
                              }
                            }),
                            _c("rect", {
                              attrs: {
                                id: "Rectangle-Copy-12",
                                fill: "url(#linearGradient-1-" + _vm.id + ")",
                                transform: "translate(46.500000, 25.000000) scale(-1, 1) translate(-46.500000, -25.000000) ",
                                x: "38",
                                y: "7",
                                width: "17",
                                height: "36"
                              }
                            }),
                            _c("polygon", {
                              attrs: {
                                id: "Rectangle-Copy-13",
                                fill: "#F8F9FB",
                                transform: "translate(39.500000, 3.500000) scale(-1, 1) translate(-39.500000, -3.500000) ",
                                points: "24 7 41 7 55 -3.63806207e-12 38 -3.63806207e-12"
                              }
                            })
                          ]
                        ),
                        _c("rect", {
                          attrs: {
                            id: "Rectangle-Copy-15",
                            fill: "url(#linearGradient-2-" + _vm.id + ")",
                            x: "13",
                            y: "45",
                            width: "40",
                            height: "36"
                          }
                        }),
                        _c(
                          "g",
                          {
                            attrs: {
                              id: "Rectangle-Copy-17",
                              transform: "translate(53.000000, 45.000000)"
                            }
                          },
                          [
                            _c(
                              "mask",
                              { attrs: { id: "mask-4-" + _vm.id, fill: "white" } },
                              [
                                _c("use", {
                                  attrs: { "xlink:href": "#path-3-" + _vm.id }
                                })
                              ]
                            ),
                            _c("use", {
                              attrs: {
                                id: "Mask",
                                fill: "#E0E3E9",
                                transform: "translate(8.500000, 18.000000) scale(-1, 1) translate(-8.500000, -18.000000) ",
                                "xlink:href": "#path-3-" + _vm.id
                              }
                            }),
                            _c("polygon", {
                              attrs: {
                                id: "Rectangle-Copy",
                                fill: "#D5D7DE",
                                mask: "url(#mask-4-" + _vm.id + ")",
                                transform: "translate(12.000000, 9.000000) scale(-1, 1) translate(-12.000000, -9.000000) ",
                                points: "7 0 24 0 20 18 -1.70530257e-13 16"
                              }
                            })
                          ]
                        ),
                        _c("polygon", {
                          attrs: {
                            id: "Rectangle-Copy-18",
                            fill: "#F8F9FB",
                            transform: "translate(66.000000, 51.500000) scale(-1, 1) translate(-66.000000, -51.500000) ",
                            points: "62 45 79 45 70 58 53 58"
                          }
                        })
                      ]
                    )
                  ]
                )
              ]
            )
          ]
        );
      };
      var img_emptyvue_type_template_id_42918b82_staticRenderFns = [];
      img_emptyvue_type_template_id_42918b82_render._withStripped = true;
      var img_emptyvue_type_script_lang_js_id = 0;
      var img_emptyvue_type_script_lang_js_ = {
        name: "ImgEmpty",
        data: function data() {
          return {
            id: ++img_emptyvue_type_script_lang_js_id
          };
        }
      };
      var src_img_emptyvue_type_script_lang_js_ = img_emptyvue_type_script_lang_js_;
      var img_empty_component = normalizeComponent2(
        src_img_emptyvue_type_script_lang_js_,
        img_emptyvue_type_template_id_42918b82_render,
        img_emptyvue_type_template_id_42918b82_staticRenderFns,
        false,
        null,
        null,
        null
      );
      img_empty_component.options.__file = "packages/empty/src/img-empty.vue";
      var img_empty = img_empty_component.exports;
      var srcvue_type_script_lang_js_components;
      var empty_srcvue_type_script_lang_js_ = {
        name: "ElEmpty",
        components: (srcvue_type_script_lang_js_components = {}, srcvue_type_script_lang_js_components[img_empty.name] = img_empty, srcvue_type_script_lang_js_components),
        props: {
          image: {
            type: String,
            default: ""
          },
          imageSize: Number,
          description: {
            type: String,
            default: ""
          }
        },
        computed: {
          emptyDescription: function emptyDescription() {
            return this.description || Object(lib_locale_["t"])("el.empty.description");
          },
          imageStyle: function imageStyle() {
            return {
              width: this.imageSize ? this.imageSize + "px" : ""
            };
          }
        }
      };
      var packages_empty_srcvue_type_script_lang_js_ = empty_srcvue_type_script_lang_js_;
      var empty_src_component = normalizeComponent2(
        packages_empty_srcvue_type_script_lang_js_,
        srcvue_type_template_id_347ced91_render,
        srcvue_type_template_id_347ced91_staticRenderFns,
        false,
        null,
        null,
        null
      );
      empty_src_component.options.__file = "packages/empty/src/index.vue";
      var empty_src = empty_src_component.exports;
      empty_src.install = function(Vue2) {
        Vue2.component(empty_src.name, empty_src);
      };
      var empty = empty_src;
      var descriptions_row_extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target2[key] = source[key];
            }
          }
        }
        return target2;
      };
      var descriptions_row = {
        name: "ElDescriptionsRow",
        props: {
          row: {
            type: Array
          }
        },
        inject: ["elDescriptions"],
        render: function render6(h2) {
          var elDescriptions = this.elDescriptions;
          var row = (this.row || []).map(function(item) {
            return descriptions_row_extends({}, item, {
              label: item.slots.label || item.props.label
            }, ["labelClassName", "contentClassName", "labelStyle", "contentStyle"].reduce(function(res, key) {
              res[key] = item.props[key] || elDescriptions[key];
              return res;
            }, {}));
          });
          if (elDescriptions.direction === "vertical") {
            return h2("tbody", [h2(
              "tr",
              { "class": "el-descriptions-row" },
              [row.map(function(item) {
                var _ref;
                return h2(
                  "th",
                  {
                    "class": (_ref = {
                      "el-descriptions-item__cell": true,
                      "el-descriptions-item__label": true,
                      "has-colon": elDescriptions.border ? false : elDescriptions.colon,
                      "is-bordered-label": elDescriptions.border
                    }, _ref[item.labelClassName] = true, _ref),
                    style: item.labelStyle,
                    attrs: {
                      colSpan: item.props.span
                    }
                  },
                  [item.label]
                );
              })]
            ), h2(
              "tr",
              { "class": "el-descriptions-row" },
              [row.map(function(item) {
                return h2(
                  "td",
                  {
                    "class": ["el-descriptions-item__cell", "el-descriptions-item__content", item.contentClassName],
                    style: item.contentStyle,
                    attrs: {
                      colSpan: item.props.span
                    }
                  },
                  [item.slots.default]
                );
              })]
            )]);
          }
          if (elDescriptions.border) {
            return h2("tbody", [h2(
              "tr",
              { "class": "el-descriptions-row" },
              [row.map(function(item) {
                var _ref2;
                return [h2(
                  "th",
                  {
                    "class": (_ref2 = {
                      "el-descriptions-item__cell": true,
                      "el-descriptions-item__label": true,
                      "is-bordered-label": elDescriptions.border
                    }, _ref2[item.labelClassName] = true, _ref2),
                    style: item.labelStyle,
                    attrs: {
                      colSpan: "1"
                    }
                  },
                  [item.label]
                ), h2(
                  "td",
                  {
                    "class": ["el-descriptions-item__cell", "el-descriptions-item__content", item.contentClassName],
                    style: item.contentStyle,
                    attrs: {
                      colSpan: item.props.span * 2 - 1
                    }
                  },
                  [item.slots.default]
                )];
              })]
            )]);
          }
          return h2("tbody", [h2(
            "tr",
            { "class": "el-descriptions-row" },
            [row.map(function(item) {
              var _ref3;
              return h2(
                "td",
                {
                  "class": "el-descriptions-item el-descriptions-item__cell",
                  attrs: { colSpan: item.props.span }
                },
                [h2(
                  "div",
                  { "class": "el-descriptions-item__container" },
                  [h2(
                    "span",
                    {
                      "class": (_ref3 = {
                        "el-descriptions-item__label": true,
                        "has-colon": elDescriptions.colon
                      }, _ref3[item.labelClassName] = true, _ref3),
                      style: item.labelStyle
                    },
                    [item.label]
                  ), h2(
                    "span",
                    {
                      "class": ["el-descriptions-item__content", item.contentClassName],
                      style: item.contentStyle
                    },
                    [item.slots.default]
                  )]
                )]
              );
            })]
          )]);
        }
      };
      var src_extends = Object.assign || function(target2) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target2[key] = source[key];
            }
          }
        }
        return target2;
      };
      var src_components;
      var descriptions_src = {
        name: "ElDescriptions",
        components: (src_components = {}, src_components[descriptions_row.name] = descriptions_row, src_components),
        props: {
          border: {
            type: Boolean,
            default: false
          },
          column: {
            type: Number,
            default: 3
          },
          direction: {
            type: String,
            default: "horizontal"
          },
          size: {
            type: String
            // validator: isValidComponentSize,
          },
          title: {
            type: String,
            default: ""
          },
          extra: {
            type: String,
            default: ""
          },
          labelStyle: {
            type: Object
          },
          contentStyle: {
            type: Object
          },
          labelClassName: {
            type: String,
            default: ""
          },
          contentClassName: {
            type: String,
            default: ""
          },
          colon: {
            type: Boolean,
            default: true
          }
        },
        computed: {
          descriptionsSize: function descriptionsSize() {
            return this.size || (this.$ELEMENT || {}).size;
          }
        },
        provide: function provide2() {
          return {
            elDescriptions: this
          };
        },
        methods: {
          getOptionProps: function getOptionProps(vnode) {
            if (vnode.componentOptions) {
              var componentOptions = vnode.componentOptions;
              var _componentOptions$pro = componentOptions.propsData, propsData = _componentOptions$pro === void 0 ? {} : _componentOptions$pro, _componentOptions$Cto = componentOptions.Ctor, Ctor = _componentOptions$Cto === void 0 ? {} : _componentOptions$Cto;
              var props2 = (Ctor.options || {}).props || {};
              var res = {};
              for (var k in props2) {
                var v = props2[k];
                var defaultValue = v.default;
                if (defaultValue !== void 0) {
                  res[k] = Object(types_["isFunction"])(defaultValue) ? defaultValue.call(vnode) : defaultValue;
                }
              }
              return src_extends({}, res, propsData);
            }
            return {};
          },
          getSlots: function getSlots(vnode) {
            var _this = this;
            var componentOptions = vnode.componentOptions || {};
            var children = vnode.children || componentOptions.children || [];
            var slots = {};
            children.forEach(function(child) {
              if (!_this.isEmptyElement(child)) {
                var name = child.data && child.data.slot || "default";
                slots[name] = slots[name] || [];
                if (child.tag === "template") {
                  slots[name].push(child.children);
                } else {
                  slots[name].push(child);
                }
              }
            });
            return src_extends({}, slots);
          },
          isEmptyElement: function isEmptyElement(c) {
            return !(c.tag || c.text && c.text.trim() !== "");
          },
          filledNode: function filledNode(node, span, count) {
            var isLast = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
            if (!node.props) {
              node.props = {};
            }
            if (span > count) {
              node.props.span = count;
            }
            if (isLast) {
              node.props.span = count;
            }
            return node;
          },
          getRows: function getRows() {
            var _this2 = this;
            var children = (this.$slots.default || []).filter(function(vnode) {
              return vnode.tag && vnode.componentOptions && vnode.componentOptions.Ctor.options.name === "ElDescriptionsItem";
            });
            var nodes = children.map(function(vnode) {
              return {
                props: _this2.getOptionProps(vnode),
                slots: _this2.getSlots(vnode),
                vnode
              };
            });
            var rows = [];
            var temp = [];
            var count = this.column;
            nodes.forEach(function(node, index2) {
              var span = node.props.span || 1;
              if (index2 === children.length - 1) {
                temp.push(_this2.filledNode(node, span, count, true));
                rows.push(temp);
                return;
              }
              if (span < count) {
                count -= span;
                temp.push(node);
              } else {
                temp.push(_this2.filledNode(node, span, count));
                rows.push(temp);
                count = _this2.column;
                temp = [];
              }
            });
            return rows;
          }
        },
        render: function render6() {
          var h2 = arguments[0];
          var title = this.title, extra = this.extra, border = this.border, descriptionsSize = this.descriptionsSize, $slots = this.$slots;
          var rows = this.getRows();
          return h2(
            "div",
            { "class": "el-descriptions" },
            [title || extra || $slots.title || $slots.extra ? h2(
              "div",
              { "class": "el-descriptions__header" },
              [h2(
                "div",
                { "class": "el-descriptions__title" },
                [$slots.title ? $slots.title : title]
              ), h2(
                "div",
                { "class": "el-descriptions__extra" },
                [$slots.extra ? $slots.extra : extra]
              )]
            ) : null, h2(
              "div",
              { "class": "el-descriptions__body" },
              [h2(
                "table",
                { "class": ["el-descriptions__table", { "is-bordered": border }, descriptionsSize ? "el-descriptions--" + descriptionsSize : ""] },
                [rows.map(function(row) {
                  return h2(descriptions_row, {
                    attrs: { row }
                  });
                })]
              )]
            )]
          );
        }
      };
      descriptions_src.install = function install2(Vue2) {
        Vue2.component(descriptions_src.name, descriptions_src);
      };
      var descriptions = descriptions_src;
      var descriptions_item = {
        name: "ElDescriptionsItem",
        props: {
          label: {
            type: String,
            default: ""
          },
          span: {
            type: Number,
            default: 1
          },
          contentClassName: {
            type: String,
            default: ""
          },
          contentStyle: {
            type: Object
          },
          labelClassName: {
            type: String,
            default: ""
          },
          labelStyle: {
            type: Object
          }
        },
        render: function render6() {
          return null;
        }
      };
      descriptions_item.install = function install2(Vue2) {
        Vue2.component(descriptions_item.name, descriptions_item);
      };
      var packages_descriptions_item = descriptions_item;
      var srcvue_type_template_id_3408b139_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c("div", { staticClass: "el-result" }, [
          _c(
            "div",
            { staticClass: "el-result__icon" },
            [
              _vm._t("icon", [
                _c(_vm.iconElement, { tag: "component", class: _vm.iconElement })
              ])
            ],
            2
          ),
          _vm.title || _vm.$slots.title ? _c(
            "div",
            { staticClass: "el-result__title" },
            [_vm._t("title", [_c("p", [_vm._v(_vm._s(_vm.title))])])],
            2
          ) : _vm._e(),
          _vm.subTitle || _vm.$slots.subTitle ? _c(
            "div",
            { staticClass: "el-result__subtitle" },
            [_vm._t("subTitle", [_c("p", [_vm._v(_vm._s(_vm.subTitle))])])],
            2
          ) : _vm._e(),
          _vm.$slots.extra ? _c("div", { staticClass: "el-result__extra" }, [_vm._t("extra")], 2) : _vm._e()
        ]);
      };
      var srcvue_type_template_id_3408b139_staticRenderFns = [];
      srcvue_type_template_id_3408b139_render._withStripped = true;
      var icon_successvue_type_template_id_18119418_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "svg",
          { attrs: { viewBox: "0 0 48 48", xmlns: "http://www.w3.org/2000/svg" } },
          [
            _c("path", {
              attrs: {
                d: "M24,4 C35.045695,4 44,12.954305 44,24 C44,35.045695 35.045695,44 24,44 C12.954305,44 4,35.045695 4,24 C4,12.954305 12.954305,4 24,4 Z M34.5548098,16.4485711 C33.9612228,15.8504763 32.9988282,15.8504763 32.4052412,16.4485711 L32.4052412,16.4485711 L21.413757,27.5805811 L21.413757,27.5805811 L21.4034642,27.590855 C21.0097542,27.9781674 20.3766105,27.9729811 19.9892981,27.5792711 L19.9892981,27.5792711 L15.5947588,23.1121428 C15.0011718,22.514048 14.0387772,22.514048 13.4451902,23.1121428 C12.8516033,23.7102376 12.8516033,24.6799409 13.4451902,25.2780357 L13.4451902,25.2780357 L19.6260786,31.5514289 C20.2196656,32.1495237 21.1820602,32.1495237 21.7756472,31.5514289 L21.7756472,31.5514289 L34.5548098,18.614464 C35.1483967,18.0163692 35.1483967,17.0466659 34.5548098,16.4485711 Z"
              }
            })
          ]
        );
      };
      var icon_successvue_type_template_id_18119418_staticRenderFns = [];
      icon_successvue_type_template_id_18119418_render._withStripped = true;
      var icon_successvue_type_script_lang_js_ = {
        name: "IconSuccess"
      };
      var src_icon_successvue_type_script_lang_js_ = icon_successvue_type_script_lang_js_;
      var icon_success_component = normalizeComponent2(
        src_icon_successvue_type_script_lang_js_,
        icon_successvue_type_template_id_18119418_render,
        icon_successvue_type_template_id_18119418_staticRenderFns,
        false,
        null,
        null,
        null
      );
      icon_success_component.options.__file = "packages/result/src/icon-success.vue";
      var icon_success = icon_success_component.exports;
      var icon_errorvue_type_template_id_21199246_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "svg",
          { attrs: { viewBox: "0 0 48 48", xmlns: "http://www.w3.org/2000/svg" } },
          [
            _c("path", {
              attrs: {
                d: "M24,4 C35.045695,4 44,12.954305 44,24 C44,35.045695 35.045695,44 24,44 C12.954305,44 4,35.045695 4,24 C4,12.954305 12.954305,4 24,4 Z M32.57818,15.42182 C32.0157534,14.8593933 31.1038797,14.8593933 30.541453,15.42182 L30.541453,15.42182 L24.0006789,21.9625941 L17.458547,15.42182 C16.8961203,14.8593933 15.9842466,14.8593933 15.42182,15.42182 C14.8593933,15.9842466 14.8593933,16.8961203 15.42182,17.458547 L15.42182,17.458547 L21.9639519,23.9993211 L15.42182,30.541453 C14.8593933,31.1038797 14.8593933,32.0157534 15.42182,32.57818 C15.9842466,33.1406067 16.8961203,33.1406067 17.458547,32.57818 L17.458547,32.57818 L24.0006789,26.0360481 L30.541453,32.57818 C31.1038797,33.1406067 32.0157534,33.1406067 32.57818,32.57818 C33.1406067,32.0157534 33.1406067,31.1038797 32.57818,30.541453 L32.57818,30.541453 L26.0374059,23.9993211 L32.57818,17.458547 C33.1406067,16.8961203 33.1406067,15.9842466 32.57818,15.42182 Z"
              }
            })
          ]
        );
      };
      var icon_errorvue_type_template_id_21199246_staticRenderFns = [];
      icon_errorvue_type_template_id_21199246_render._withStripped = true;
      var icon_errorvue_type_script_lang_js_ = {
        name: "IconError"
      };
      var src_icon_errorvue_type_script_lang_js_ = icon_errorvue_type_script_lang_js_;
      var icon_error_component = normalizeComponent2(
        src_icon_errorvue_type_script_lang_js_,
        icon_errorvue_type_template_id_21199246_render,
        icon_errorvue_type_template_id_21199246_staticRenderFns,
        false,
        null,
        null,
        null
      );
      icon_error_component.options.__file = "packages/result/src/icon-error.vue";
      var icon_error = icon_error_component.exports;
      var icon_warningvue_type_template_id_46fe8f31_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "svg",
          { attrs: { viewBox: "0 0 48 48", xmlns: "http://www.w3.org/2000/svg" } },
          [
            _c("path", {
              attrs: {
                d: "M24,4 C35.045695,4 44,12.954305 44,24 C44,35.045695 35.045695,44 24,44 C12.954305,44 4,35.045695 4,24 C4,12.954305 12.954305,4 24,4 Z M24,31 C22.8954305,31 22,31.8954305 22,33 C22,34.1045695 22.8954305,35 24,35 C25.1045695,35 26,34.1045695 26,33 C26,31.8954305 25.1045695,31 24,31 Z M24,14 C23.1715729,14 22.5,14.6715729 22.5,15.5 L22.5,15.5 L22.5,27.5 C22.5,28.3284271 23.1715729,29 24,29 C24.8284271,29 25.5,28.3284271 25.5,27.5 L25.5,27.5 L25.5,15.5 C25.5,14.6715729 24.8284271,14 24,14 Z"
              }
            })
          ]
        );
      };
      var icon_warningvue_type_template_id_46fe8f31_staticRenderFns = [];
      icon_warningvue_type_template_id_46fe8f31_render._withStripped = true;
      var icon_warningvue_type_script_lang_ts_ = {
        name: "IconWarning"
      };
      var src_icon_warningvue_type_script_lang_ts_ = icon_warningvue_type_script_lang_ts_;
      var icon_warning_component = normalizeComponent2(
        src_icon_warningvue_type_script_lang_ts_,
        icon_warningvue_type_template_id_46fe8f31_render,
        icon_warningvue_type_template_id_46fe8f31_staticRenderFns,
        false,
        null,
        null,
        null
      );
      icon_warning_component.options.__file = "packages/result/src/icon-warning.vue";
      var icon_warning = icon_warning_component.exports;
      var icon_infovue_type_template_id_19e3de69_render = function() {
        var _vm = this;
        var _h = _vm.$createElement;
        var _c = _vm._self._c || _h;
        return _c(
          "svg",
          { attrs: { viewBox: "0 0 48 48", xmlns: "http://www.w3.org/2000/svg" } },
          [
            _c("path", {
              attrs: {
                d: "M24,4 C35.045695,4 44,12.954305 44,24 C44,35.045695 35.045695,44 24,44 C12.954305,44 4,35.045695 4,24 C4,12.954305 12.954305,4 24,4 Z M24,19 L21,19 C20.1715729,19 19.5,19.6715729 19.5,20.5 C19.5,21.3284271 20.1715729,22 21,22 L21,22 L22.5,22 L22.5,31 L21,31 C20.1715729,31 19.5,31.6715729 19.5,32.5 C19.5,33.3284271 20.1715729,34 21,34 L21,34 L27,34 C27.8284271,34 28.5,33.3284271 28.5,32.5 C28.5,31.6715729 27.8284271,31 27,31 L27,31 L25.5,31 L25.5,20.5 C25.5,19.6715729 24.8284271,19 24,19 L24,19 Z M24,13 C22.8954305,13 22,13.8954305 22,15 C22,16.1045695 22.8954305,17 24,17 C25.1045695,17 26,16.1045695 26,15 C26,13.8954305 25.1045695,13 24,13 Z"
              }
            })
          ]
        );
      };
      var icon_infovue_type_template_id_19e3de69_staticRenderFns = [];
      icon_infovue_type_template_id_19e3de69_render._withStripped = true;
      var icon_infovue_type_script_lang_ts_ = {
        name: "IconInfo"
      };
      var src_icon_infovue_type_script_lang_ts_ = icon_infovue_type_script_lang_ts_;
      var icon_info_component = normalizeComponent2(
        src_icon_infovue_type_script_lang_ts_,
        icon_infovue_type_template_id_19e3de69_render,
        icon_infovue_type_template_id_19e3de69_staticRenderFns,
        false,
        null,
        null,
        null
      );
      icon_info_component.options.__file = "packages/result/src/icon-info.vue";
      var icon_info = icon_info_component.exports;
      var result_srcvue_type_script_lang_js_components;
      var IconMap = {
        success: "icon-success",
        warning: "icon-warning",
        error: "icon-error",
        info: "icon-info"
      };
      var result_srcvue_type_script_lang_js_ = {
        name: "ElResult",
        components: (result_srcvue_type_script_lang_js_components = {}, result_srcvue_type_script_lang_js_components[icon_success.name] = icon_success, result_srcvue_type_script_lang_js_components[icon_error.name] = icon_error, result_srcvue_type_script_lang_js_components[icon_warning.name] = icon_warning, result_srcvue_type_script_lang_js_components[icon_info.name] = icon_info, result_srcvue_type_script_lang_js_components),
        props: {
          title: {
            type: String,
            default: ""
          },
          subTitle: {
            type: String,
            default: ""
          },
          icon: {
            type: String,
            default: "info"
          }
        },
        computed: {
          iconElement: function iconElement() {
            var icon2 = this.icon;
            return icon2 && IconMap[icon2] ? IconMap[icon2] : "icon-info";
          }
        }
      };
      var packages_result_srcvue_type_script_lang_js_ = result_srcvue_type_script_lang_js_;
      var result_src_component = normalizeComponent2(
        packages_result_srcvue_type_script_lang_js_,
        srcvue_type_template_id_3408b139_render,
        srcvue_type_template_id_3408b139_staticRenderFns,
        false,
        null,
        null,
        null
      );
      result_src_component.options.__file = "packages/result/src/index.vue";
      var result_src = result_src_component.exports;
      result_src.install = function(Vue2) {
        Vue2.component(result_src.name, result_src);
      };
      var packages_result = result_src;
      var components = [packages_pagination, dialog, packages_autocomplete, packages_dropdown, packages_dropdown_menu, packages_dropdown_item, packages_menu, packages_submenu, packages_menu_item, packages_menu_item_group, packages_input, packages_input_number, packages_radio, packages_radio_group, packages_radio_button, packages_checkbox, packages_checkbox_button, packages_checkbox_group, packages_switch, packages_select, packages_option, packages_option_group, packages_button, packages_button_group, packages_table, packages_table_column, packages_date_picker, packages_time_select, packages_time_picker, popover2, packages_tooltip, packages_breadcrumb, packages_breadcrumb_item, packages_form, packages_form_item, packages_tabs, packages_tab_pane, packages_tag, packages_tree, packages_alert, slider, packages_icon, packages_row, packages_col, packages_upload, packages_progress, packages_spinner, badge, card, packages_rate, packages_steps, packages_step, carousel, scrollbar2, carousel_item, packages_collapse, packages_collapse_item, packages_cascader, color_picker, transfer, packages_container, header, aside, packages_main, footer, timeline, timeline_item, packages_link, divider, packages_image, calendar, backtop, page_header, packages_cascader_panel, avatar, drawer, statistic, popconfirm, skeleton, skeleton_item, empty, descriptions, packages_descriptions_item, packages_result, collapse_transition_default.a];
      var src_install = function install2(Vue2) {
        var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        lib_locale_default.a.use(opts.locale);
        lib_locale_default.a.i18n(opts.i18n);
        components.forEach(function(component2) {
          Vue2.component(component2.name, component2);
        });
        Vue2.use(infinite_scroll);
        Vue2.use(packages_loading.directive);
        Vue2.prototype.$ELEMENT = {
          size: opts.size || "",
          zIndex: opts.zIndex || 2e3
        };
        Vue2.prototype.$loading = packages_loading.service;
        Vue2.prototype.$msgbox = message_box;
        Vue2.prototype.$alert = message_box.alert;
        Vue2.prototype.$confirm = message_box.confirm;
        Vue2.prototype.$prompt = message_box.prompt;
        Vue2.prototype.$notify = notification;
        Vue2.prototype.$message = packages_message;
      };
      if (typeof window !== "undefined" && window.Vue) {
        src_install(window.Vue);
      }
      __webpack_exports__["default"] = {
        version: "2.15.13",
        locale: lib_locale_default.a.use,
        i18n: lib_locale_default.a.i18n,
        install: src_install,
        CollapseTransition: collapse_transition_default.a,
        Loading: packages_loading,
        Pagination: packages_pagination,
        Dialog: dialog,
        Autocomplete: packages_autocomplete,
        Dropdown: packages_dropdown,
        DropdownMenu: packages_dropdown_menu,
        DropdownItem: packages_dropdown_item,
        Menu: packages_menu,
        Submenu: packages_submenu,
        MenuItem: packages_menu_item,
        MenuItemGroup: packages_menu_item_group,
        Input: packages_input,
        InputNumber: packages_input_number,
        Radio: packages_radio,
        RadioGroup: packages_radio_group,
        RadioButton: packages_radio_button,
        Checkbox: packages_checkbox,
        CheckboxButton: packages_checkbox_button,
        CheckboxGroup: packages_checkbox_group,
        Switch: packages_switch,
        Select: packages_select,
        Option: packages_option,
        OptionGroup: packages_option_group,
        Button: packages_button,
        ButtonGroup: packages_button_group,
        Table: packages_table,
        TableColumn: packages_table_column,
        DatePicker: packages_date_picker,
        TimeSelect: packages_time_select,
        TimePicker: packages_time_picker,
        Popover: popover2,
        Tooltip: packages_tooltip,
        MessageBox: message_box,
        Breadcrumb: packages_breadcrumb,
        BreadcrumbItem: packages_breadcrumb_item,
        Form: packages_form,
        FormItem: packages_form_item,
        Tabs: packages_tabs,
        TabPane: packages_tab_pane,
        Tag: packages_tag,
        Tree: packages_tree,
        Alert: packages_alert,
        Notification: notification,
        Slider: slider,
        Icon: packages_icon,
        Row: packages_row,
        Col: packages_col,
        Upload: packages_upload,
        Progress: packages_progress,
        Spinner: packages_spinner,
        Message: packages_message,
        Badge: badge,
        Card: card,
        Rate: packages_rate,
        Steps: packages_steps,
        Step: packages_step,
        Carousel: carousel,
        Scrollbar: scrollbar2,
        CarouselItem: carousel_item,
        Collapse: packages_collapse,
        CollapseItem: packages_collapse_item,
        Cascader: packages_cascader,
        ColorPicker: color_picker,
        Transfer: transfer,
        Container: packages_container,
        Header: header,
        Aside: aside,
        Main: packages_main,
        Footer: footer,
        Timeline: timeline,
        TimelineItem: timeline_item,
        Link: packages_link,
        Divider: divider,
        Image: packages_image,
        Calendar: calendar,
        Backtop: backtop,
        InfiniteScroll: infinite_scroll,
        PageHeader: page_header,
        CascaderPanel: packages_cascader_panel,
        Avatar: avatar,
        Drawer: drawer,
        Statistic: statistic,
        Popconfirm: popconfirm,
        Skeleton: skeleton,
        SkeletonItem: skeleton_item,
        Empty: empty,
        Descriptions: descriptions,
        DescriptionsItem: packages_descriptions_item,
        Result: packages_result
      };
    }
    /******/
  ])["default"];
})(elementUi_common);
var elementUi_commonExports = elementUi_common.exports;
Vue.use(elementUi_commonExports.Input);
Vue.use(elementUi_commonExports.Col);
Vue.use(elementUi_commonExports.Checkbox);
Vue.use(elementUi_commonExports.Form);
Vue.use(elementUi_commonExports.FormItem);
Vue.use(elementUi_commonExports.RadioGroup);
Vue.use(elementUi_commonExports.Radio);
Vue.use(elementUi_commonExports.Row);
const useSelect = (emit) => {
  const handleSelectAll = (panelOptions, checkAll) => {
    panelOptions.forEach((item) => {
      item.onCheckedClick(checkAll);
    });
  };
  const handleSelectChange = (checked, menuItem) => {
    menuItem.onCheckedClick(checked);
    if (emit)
      emit("clickMenuItem", menuItem);
  };
  return {
    handleSelectAll,
    handleSelectChange
  };
};
function getInternetExplorerVersion() {
  var ua = window.navigator.userAgent;
  var msie = ua.indexOf("MSIE ");
  if (msie > 0) {
    return parseInt(ua.substring(msie + 5, ua.indexOf(".", msie)), 10);
  }
  var trident = ua.indexOf("Trident/");
  if (trident > 0) {
    var rv = ua.indexOf("rv:");
    return parseInt(ua.substring(rv + 3, ua.indexOf(".", rv)), 10);
  }
  var edge = ua.indexOf("Edge/");
  if (edge > 0) {
    return parseInt(ua.substring(edge + 5, ua.indexOf(".", edge)), 10);
  }
  return -1;
}
var isIE = void 0;
function initCompat() {
  if (!initCompat.init) {
    initCompat.init = true;
    isIE = getInternetExplorerVersion() !== -1;
  }
}
var ResizeObserver$1 = {
  render: function render() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", { staticClass: "resize-observer", attrs: { "tabindex": "-1" } });
  },
  staticRenderFns: [],
  _scopeId: "data-v-b329ee4c",
  name: "resize-observer",
  methods: {
    compareAndNotify: function compareAndNotify() {
      if (this._w !== this.$el.offsetWidth || this._h !== this.$el.offsetHeight) {
        this._w = this.$el.offsetWidth;
        this._h = this.$el.offsetHeight;
        this.$emit("notify");
      }
    },
    addResizeHandlers: function addResizeHandlers() {
      this._resizeObject.contentDocument.defaultView.addEventListener("resize", this.compareAndNotify);
      this.compareAndNotify();
    },
    removeResizeHandlers: function removeResizeHandlers() {
      if (this._resizeObject && this._resizeObject.onload) {
        if (!isIE && this._resizeObject.contentDocument) {
          this._resizeObject.contentDocument.defaultView.removeEventListener("resize", this.compareAndNotify);
        }
        delete this._resizeObject.onload;
      }
    }
  },
  mounted: function mounted() {
    var _this = this;
    initCompat();
    this.$nextTick(function() {
      _this._w = _this.$el.offsetWidth;
      _this._h = _this.$el.offsetHeight;
    });
    var object3 = document.createElement("object");
    this._resizeObject = object3;
    object3.setAttribute("aria-hidden", "true");
    object3.setAttribute("tabindex", -1);
    object3.onload = this.addResizeHandlers;
    object3.type = "text/html";
    if (isIE) {
      this.$el.appendChild(object3);
    }
    object3.data = "about:blank";
    if (!isIE) {
      this.$el.appendChild(object3);
    }
  },
  beforeDestroy: function beforeDestroy() {
    this.removeResizeHandlers();
  }
};
function install$1(Vue2) {
  Vue2.component("resize-observer", ResizeObserver$1);
  Vue2.component("ResizeObserver", ResizeObserver$1);
}
var plugin$2 = {
  // eslint-disable-next-line no-undef
  version: "0.4.5",
  install: install$1
};
var GlobalVue$2 = null;
if (typeof window !== "undefined") {
  GlobalVue$2 = window.Vue;
} else if (typeof global !== "undefined") {
  GlobalVue$2 = global.Vue;
}
if (GlobalVue$2) {
  GlobalVue$2.use(plugin$2);
}
function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target2, props2) {
  for (var i = 0; i < props2.length; i++) {
    var descriptor2 = props2[i];
    descriptor2.enumerable = descriptor2.enumerable || false;
    descriptor2.configurable = true;
    if ("value" in descriptor2)
      descriptor2.writable = true;
    Object.defineProperty(target2, descriptor2.key, descriptor2);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  return Constructor;
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++)
      arr2[i] = arr[i];
    return arr2;
  }
}
function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]")
    return Array.from(iter);
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}
function processOptions(value) {
  var options;
  if (typeof value === "function") {
    options = {
      callback: value
    };
  } else {
    options = value;
  }
  return options;
}
function throttle(callback, delay) {
  var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
  var timeout;
  var lastState;
  var currentArgs;
  var throttled = function throttled2(state) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    currentArgs = args;
    if (timeout && state === lastState)
      return;
    var leading = options.leading;
    if (typeof leading === "function") {
      leading = leading(state, lastState);
    }
    if ((!timeout || state !== lastState) && leading) {
      callback.apply(void 0, [state].concat(_toConsumableArray(currentArgs)));
    }
    lastState = state;
    clearTimeout(timeout);
    timeout = setTimeout(function() {
      callback.apply(void 0, [state].concat(_toConsumableArray(currentArgs)));
      timeout = 0;
    }, delay);
  };
  throttled._clear = function() {
    clearTimeout(timeout);
    timeout = null;
  };
  return throttled;
}
function deepEqual(val1, val2) {
  if (val1 === val2)
    return true;
  if (_typeof(val1) === "object") {
    for (var key in val1) {
      if (!deepEqual(val1[key], val2[key])) {
        return false;
      }
    }
    return true;
  }
  return false;
}
var VisibilityState = /* @__PURE__ */ function() {
  function VisibilityState2(el, options, vnode) {
    _classCallCheck(this, VisibilityState2);
    this.el = el;
    this.observer = null;
    this.frozen = false;
    this.createObserver(options, vnode);
  }
  _createClass(VisibilityState2, [{
    key: "createObserver",
    value: function createObserver(options, vnode) {
      var _this = this;
      if (this.observer) {
        this.destroyObserver();
      }
      if (this.frozen)
        return;
      this.options = processOptions(options);
      this.callback = function(result, entry) {
        _this.options.callback(result, entry);
        if (result && _this.options.once) {
          _this.frozen = true;
          _this.destroyObserver();
        }
      };
      if (this.callback && this.options.throttle) {
        var _ref = this.options.throttleOptions || {}, _leading = _ref.leading;
        this.callback = throttle(this.callback, this.options.throttle, {
          leading: function leading(state) {
            return _leading === "both" || _leading === "visible" && state || _leading === "hidden" && !state;
          }
        });
      }
      this.oldResult = void 0;
      this.observer = new IntersectionObserver(function(entries) {
        var entry = entries[0];
        if (entries.length > 1) {
          var intersectingEntry = entries.find(function(e) {
            return e.isIntersecting;
          });
          if (intersectingEntry) {
            entry = intersectingEntry;
          }
        }
        if (_this.callback) {
          var result = entry.isIntersecting && entry.intersectionRatio >= _this.threshold;
          if (result === _this.oldResult)
            return;
          _this.oldResult = result;
          _this.callback(result, entry);
        }
      }, this.options.intersection);
      vnode.context.$nextTick(function() {
        if (_this.observer) {
          _this.observer.observe(_this.el);
        }
      });
    }
  }, {
    key: "destroyObserver",
    value: function destroyObserver() {
      if (this.observer) {
        this.observer.disconnect();
        this.observer = null;
      }
      if (this.callback && this.callback._clear) {
        this.callback._clear();
        this.callback = null;
      }
    }
  }, {
    key: "threshold",
    get: function get() {
      return this.options.intersection && this.options.intersection.threshold || 0;
    }
  }]);
  return VisibilityState2;
}();
function bind(el, _ref2, vnode) {
  var value = _ref2.value;
  if (!value)
    return;
  if (typeof IntersectionObserver === "undefined") {
    console.warn("[vue-observe-visibility] IntersectionObserver API is not available in your browser. Please install this polyfill: https://github.com/w3c/IntersectionObserver/tree/master/polyfill");
  } else {
    var state = new VisibilityState(el, value, vnode);
    el._vue_visibilityState = state;
  }
}
function update(el, _ref3, vnode) {
  var value = _ref3.value, oldValue = _ref3.oldValue;
  if (deepEqual(value, oldValue))
    return;
  var state = el._vue_visibilityState;
  if (!value) {
    unbind(el);
    return;
  }
  if (state) {
    state.createObserver(value, vnode);
  } else {
    bind(el, {
      value
    }, vnode);
  }
}
function unbind(el) {
  var state = el._vue_visibilityState;
  if (state) {
    state.destroyObserver();
    delete el._vue_visibilityState;
  }
}
var ObserveVisibility = {
  bind,
  update,
  unbind
};
function install(Vue2) {
  Vue2.directive("observe-visibility", ObserveVisibility);
}
var plugin$1 = {
  // eslint-disable-next-line no-undef
  version: "0.4.6",
  install
};
var GlobalVue$1 = null;
if (typeof window !== "undefined") {
  GlobalVue$1 = window.Vue;
} else if (typeof global !== "undefined") {
  GlobalVue$1 = global.Vue;
}
if (GlobalVue$1) {
  GlobalVue$1.use(plugin$1);
}
var scrollparent = { exports: {} };
(function(module) {
  (function(root2, factory) {
    if (module.exports) {
      module.exports = factory();
    } else {
      root2.Scrollparent = factory();
    }
  })(commonjsGlobal, function() {
    function isScrolling(node) {
      var overflow = getComputedStyle(node, null).getPropertyValue("overflow");
      return overflow.indexOf("scroll") > -1 || overflow.indexOf("auto") > -1;
    }
    function scrollParent(node) {
      if (!(node instanceof HTMLElement || node instanceof SVGElement)) {
        return void 0;
      }
      var current = node.parentNode;
      while (current.parentNode) {
        if (isScrolling(current)) {
          return current;
        }
        current = current.parentNode;
      }
      return document.scrollingElement || document.documentElement;
    }
    return scrollParent;
  });
})(scrollparent);
var scrollparentExports = scrollparent.exports;
const ScrollParent = /* @__PURE__ */ getDefaultExportFromCjs(scrollparentExports);
var config = {
  itemsLimit: 1e3
};
const props = {
  items: {
    type: Array,
    required: true
  },
  keyField: {
    type: String,
    default: "id"
  },
  direction: {
    type: String,
    default: "vertical",
    validator: (value) => ["vertical", "horizontal"].includes(value)
  },
  listTag: {
    type: String,
    default: "div"
  },
  itemTag: {
    type: String,
    default: "div"
  }
};
function simpleArray() {
  return this.items.length && typeof this.items[0] !== "object";
}
let supportsPassive = false;
if (typeof window !== "undefined") {
  supportsPassive = false;
  try {
    var opts = Object.defineProperty({}, "passive", {
      get() {
        supportsPassive = true;
      }
    });
    window.addEventListener("test", null, opts);
  } catch (e) {
  }
}
let uid = 0;
var script$2 = {
  name: "RecycleScroller",
  components: {
    ResizeObserver: ResizeObserver$1
  },
  directives: {
    ObserveVisibility
  },
  props: {
    ...props,
    itemSize: {
      type: Number,
      default: null
    },
    gridItems: {
      type: Number,
      default: void 0
    },
    itemSecondarySize: {
      type: Number,
      default: void 0
    },
    minItemSize: {
      type: [Number, String],
      default: null
    },
    sizeField: {
      type: String,
      default: "size"
    },
    typeField: {
      type: String,
      default: "type"
    },
    buffer: {
      type: Number,
      default: 200
    },
    pageMode: {
      type: Boolean,
      default: false
    },
    prerender: {
      type: Number,
      default: 0
    },
    emitUpdate: {
      type: Boolean,
      default: false
    },
    skipHover: {
      type: Boolean,
      default: false
    },
    listTag: {
      type: String,
      default: "div"
    },
    itemTag: {
      type: String,
      default: "div"
    },
    listClass: {
      type: [String, Object, Array],
      default: ""
    },
    itemClass: {
      type: [String, Object, Array],
      default: ""
    }
  },
  data() {
    return {
      pool: [],
      totalSize: 0,
      ready: false,
      hoverKey: null
    };
  },
  computed: {
    sizes() {
      if (this.itemSize === null) {
        const sizes = {
          "-1": {
            accumulator: 0
          }
        };
        const items = this.items;
        const field = this.sizeField;
        const minItemSize = this.minItemSize;
        let computedMinSize = 1e4;
        let accumulator = 0;
        let current;
        for (let i = 0, l = items.length; i < l; i++) {
          current = items[i][field] || minItemSize;
          if (current < computedMinSize) {
            computedMinSize = current;
          }
          accumulator += current;
          sizes[i] = {
            accumulator,
            size: current
          };
        }
        this.$_computedMinItemSize = computedMinSize;
        return sizes;
      }
      return [];
    },
    simpleArray
  },
  watch: {
    items() {
      this.updateVisibleItems(true);
    },
    pageMode() {
      this.applyPageMode();
      this.updateVisibleItems(false);
    },
    sizes: {
      handler() {
        this.updateVisibleItems(false);
      },
      deep: true
    },
    gridItems() {
      this.updateVisibleItems(true);
    },
    itemSecondarySize() {
      this.updateVisibleItems(true);
    }
  },
  created() {
    this.$_startIndex = 0;
    this.$_endIndex = 0;
    this.$_views = /* @__PURE__ */ new Map();
    this.$_unusedViews = /* @__PURE__ */ new Map();
    this.$_scrollDirty = false;
    this.$_lastUpdateScrollPosition = 0;
    if (this.prerender) {
      this.$_prerender = true;
      this.updateVisibleItems(false);
    }
    if (this.gridItems && !this.itemSize) {
      console.error("[vue-recycle-scroller] You must provide an itemSize when using gridItems");
    }
  },
  mounted() {
    this.applyPageMode();
    this.$nextTick(() => {
      this.$_prerender = false;
      this.updateVisibleItems(true);
      this.ready = true;
    });
  },
  activated() {
    const lastPosition = this.$_lastUpdateScrollPosition;
    if (typeof lastPosition === "number") {
      this.$nextTick(() => {
        this.scrollToPosition(lastPosition);
      });
    }
  },
  beforeDestroy() {
    this.removeListeners();
  },
  methods: {
    addView(pool, index2, item, key, type2) {
      const view = {
        item,
        position: 0
      };
      const nonReactive = {
        id: uid++,
        index: index2,
        used: true,
        key,
        type: type2
      };
      Object.defineProperty(view, "nr", {
        configurable: false,
        value: nonReactive
      });
      pool.push(view);
      return view;
    },
    unuseView(view, fake = false) {
      const unusedViews = this.$_unusedViews;
      const type2 = view.nr.type;
      let unusedPool = unusedViews.get(type2);
      if (!unusedPool) {
        unusedPool = [];
        unusedViews.set(type2, unusedPool);
      }
      unusedPool.push(view);
      if (!fake) {
        view.nr.used = false;
        view.position = -9999;
        this.$_views.delete(view.nr.key);
      }
    },
    handleResize() {
      this.$emit("resize");
      if (this.ready)
        this.updateVisibleItems(false);
    },
    handleScroll(event) {
      if (!this.$_scrollDirty) {
        this.$_scrollDirty = true;
        requestAnimationFrame(() => {
          this.$_scrollDirty = false;
          const {
            continuous
          } = this.updateVisibleItems(false, true);
          if (!continuous) {
            clearTimeout(this.$_refreshTimout);
            this.$_refreshTimout = setTimeout(this.handleScroll, 100);
          }
        });
      }
    },
    handleVisibilityChange(isVisible, entry) {
      if (this.ready) {
        if (isVisible || entry.boundingClientRect.width !== 0 || entry.boundingClientRect.height !== 0) {
          this.$emit("visible");
          requestAnimationFrame(() => {
            this.updateVisibleItems(false);
          });
        } else {
          this.$emit("hidden");
        }
      }
    },
    updateVisibleItems(checkItem, checkPositionDiff = false) {
      const itemSize = this.itemSize;
      const gridItems = this.gridItems || 1;
      const itemSecondarySize = this.itemSecondarySize || itemSize;
      const minItemSize = this.$_computedMinItemSize;
      const typeField = this.typeField;
      const keyField = this.simpleArray ? null : this.keyField;
      const items = this.items;
      const count = items.length;
      const sizes = this.sizes;
      const views = this.$_views;
      const unusedViews = this.$_unusedViews;
      const pool = this.pool;
      let startIndex, endIndex;
      let totalSize;
      let visibleStartIndex, visibleEndIndex;
      if (!count) {
        startIndex = endIndex = visibleStartIndex = visibleEndIndex = totalSize = 0;
      } else if (this.$_prerender) {
        startIndex = visibleStartIndex = 0;
        endIndex = visibleEndIndex = Math.min(this.prerender, items.length);
        totalSize = null;
      } else {
        const scroll = this.getScroll();
        if (checkPositionDiff) {
          let positionDiff = scroll.start - this.$_lastUpdateScrollPosition;
          if (positionDiff < 0)
            positionDiff = -positionDiff;
          if (itemSize === null && positionDiff < minItemSize || positionDiff < itemSize) {
            return {
              continuous: true
            };
          }
        }
        this.$_lastUpdateScrollPosition = scroll.start;
        const buffer = this.buffer;
        scroll.start -= buffer;
        scroll.end += buffer;
        let beforeSize = 0;
        if (this.$refs.before) {
          beforeSize = this.$refs.before.scrollHeight;
          scroll.start -= beforeSize;
        }
        if (this.$refs.after) {
          const afterSize = this.$refs.after.scrollHeight;
          scroll.end += afterSize;
        }
        if (itemSize === null) {
          let h2;
          let a = 0;
          let b = count - 1;
          let i = ~~(count / 2);
          let oldI;
          do {
            oldI = i;
            h2 = sizes[i].accumulator;
            if (h2 < scroll.start) {
              a = i;
            } else if (i < count - 1 && sizes[i + 1].accumulator > scroll.start) {
              b = i;
            }
            i = ~~((a + b) / 2);
          } while (i !== oldI);
          i < 0 && (i = 0);
          startIndex = i;
          totalSize = sizes[count - 1].accumulator;
          for (endIndex = i; endIndex < count && sizes[endIndex].accumulator < scroll.end; endIndex++)
            ;
          if (endIndex === -1) {
            endIndex = items.length - 1;
          } else {
            endIndex++;
            endIndex > count && (endIndex = count);
          }
          for (visibleStartIndex = startIndex; visibleStartIndex < count && beforeSize + sizes[visibleStartIndex].accumulator < scroll.start; visibleStartIndex++)
            ;
          for (visibleEndIndex = visibleStartIndex; visibleEndIndex < count && beforeSize + sizes[visibleEndIndex].accumulator < scroll.end; visibleEndIndex++)
            ;
        } else {
          startIndex = ~~(scroll.start / itemSize * gridItems);
          const remainer = startIndex % gridItems;
          startIndex -= remainer;
          endIndex = Math.ceil(scroll.end / itemSize * gridItems);
          visibleStartIndex = Math.max(0, Math.floor((scroll.start - beforeSize) / itemSize * gridItems));
          visibleEndIndex = Math.floor((scroll.end - beforeSize) / itemSize * gridItems);
          startIndex < 0 && (startIndex = 0);
          endIndex > count && (endIndex = count);
          visibleStartIndex < 0 && (visibleStartIndex = 0);
          visibleEndIndex > count && (visibleEndIndex = count);
          totalSize = Math.ceil(count / gridItems) * itemSize;
        }
      }
      if (endIndex - startIndex > config.itemsLimit) {
        this.itemsLimitError();
      }
      this.totalSize = totalSize;
      let view;
      const continuous = startIndex <= this.$_endIndex && endIndex >= this.$_startIndex;
      if (this.$_continuous !== continuous) {
        if (continuous) {
          views.clear();
          unusedViews.clear();
          for (let i = 0, l = pool.length; i < l; i++) {
            view = pool[i];
            this.unuseView(view);
          }
        }
        this.$_continuous = continuous;
      } else if (continuous) {
        for (let i = 0, l = pool.length; i < l; i++) {
          view = pool[i];
          if (view.nr.used) {
            if (checkItem) {
              view.nr.index = items.indexOf(view.item);
            }
            if (view.nr.index === -1 || view.nr.index < startIndex || view.nr.index >= endIndex) {
              this.unuseView(view);
            }
          }
        }
      }
      const unusedIndex = continuous ? null : /* @__PURE__ */ new Map();
      let item, type2, unusedPool;
      let v;
      for (let i = startIndex; i < endIndex; i++) {
        item = items[i];
        const key = keyField ? item[keyField] : item;
        if (key == null) {
          throw new Error(`Key is ${key} on item (keyField is '${keyField}')`);
        }
        view = views.get(key);
        if (!itemSize && !sizes[i].size) {
          if (view)
            this.unuseView(view);
          continue;
        }
        if (!view) {
          if (i === items.length - 1)
            this.$emit("scroll-end");
          if (i === 0)
            this.$emit("scroll-start");
          type2 = item[typeField];
          unusedPool = unusedViews.get(type2);
          if (continuous) {
            if (unusedPool && unusedPool.length) {
              view = unusedPool.pop();
              view.item = item;
              view.nr.used = true;
              view.nr.index = i;
              view.nr.key = key;
              view.nr.type = type2;
            } else {
              view = this.addView(pool, i, item, key, type2);
            }
          } else {
            v = unusedIndex.get(type2) || 0;
            if (!unusedPool || v >= unusedPool.length) {
              view = this.addView(pool, i, item, key, type2);
              this.unuseView(view, true);
              unusedPool = unusedViews.get(type2);
            }
            view = unusedPool[v];
            view.item = item;
            view.nr.used = true;
            view.nr.index = i;
            view.nr.key = key;
            view.nr.type = type2;
            unusedIndex.set(type2, v + 1);
            v++;
          }
          views.set(key, view);
        } else {
          view.nr.used = true;
          view.item = item;
        }
        if (itemSize === null) {
          view.position = sizes[i - 1].accumulator;
          view.offset = 0;
        } else {
          view.position = Math.floor(i / gridItems) * itemSize;
          view.offset = i % gridItems * itemSecondarySize;
        }
      }
      this.$_startIndex = startIndex;
      this.$_endIndex = endIndex;
      if (this.emitUpdate)
        this.$emit("update", startIndex, endIndex, visibleStartIndex, visibleEndIndex);
      clearTimeout(this.$_sortTimer);
      this.$_sortTimer = setTimeout(this.sortViews, 300);
      return {
        continuous
      };
    },
    getListenerTarget() {
      let target2 = ScrollParent(this.$el);
      if (window.document && (target2 === window.document.documentElement || target2 === window.document.body)) {
        target2 = window;
      }
      return target2;
    },
    getScroll() {
      const {
        $el: el,
        direction
      } = this;
      const isVertical = direction === "vertical";
      let scrollState;
      if (this.pageMode) {
        const bounds = el.getBoundingClientRect();
        const boundsSize = isVertical ? bounds.height : bounds.width;
        let start = -(isVertical ? bounds.top : bounds.left);
        let size = isVertical ? window.innerHeight : window.innerWidth;
        if (start < 0) {
          size += start;
          start = 0;
        }
        if (start + size > boundsSize) {
          size = boundsSize - start;
        }
        scrollState = {
          start,
          end: start + size
        };
      } else if (isVertical) {
        scrollState = {
          start: el.scrollTop,
          end: el.scrollTop + el.clientHeight
        };
      } else {
        scrollState = {
          start: el.scrollLeft,
          end: el.scrollLeft + el.clientWidth
        };
      }
      return scrollState;
    },
    applyPageMode() {
      if (this.pageMode) {
        this.addListeners();
      } else {
        this.removeListeners();
      }
    },
    addListeners() {
      this.listenerTarget = this.getListenerTarget();
      this.listenerTarget.addEventListener("scroll", this.handleScroll, supportsPassive ? {
        passive: true
      } : false);
      this.listenerTarget.addEventListener("resize", this.handleResize);
    },
    removeListeners() {
      if (!this.listenerTarget) {
        return;
      }
      this.listenerTarget.removeEventListener("scroll", this.handleScroll);
      this.listenerTarget.removeEventListener("resize", this.handleResize);
      this.listenerTarget = null;
    },
    scrollToItem(index2) {
      let scroll;
      if (this.itemSize === null) {
        scroll = index2 > 0 ? this.sizes[index2 - 1].accumulator : 0;
      } else {
        scroll = Math.floor(index2 / this.gridItems) * this.itemSize;
      }
      this.scrollToPosition(scroll);
    },
    scrollToPosition(position) {
      const direction = this.direction === "vertical" ? {
        scroll: "scrollTop",
        start: "top"
      } : {
        scroll: "scrollLeft",
        start: "left"
      };
      let viewport;
      let scrollDirection;
      let scrollDistance;
      if (this.pageMode) {
        const viewportEl = ScrollParent(this.$el);
        const scrollTop = viewportEl.tagName === "HTML" ? 0 : viewportEl[direction.scroll];
        const bounds = viewportEl.getBoundingClientRect();
        const scroller = this.$el.getBoundingClientRect();
        const scrollerPosition = scroller[direction.start] - bounds[direction.start];
        viewport = viewportEl;
        scrollDirection = direction.scroll;
        scrollDistance = position + scrollTop + scrollerPosition;
      } else {
        viewport = this.$el;
        scrollDirection = direction.scroll;
        scrollDistance = position;
      }
      viewport[scrollDirection] = scrollDistance;
    },
    itemsLimitError() {
      setTimeout(() => {
        console.log("It seems the scroller element isn't scrolling, so it tries to render all the items at once.", "Scroller:", this.$el);
        console.log("Make sure the scroller has a fixed height (or width) and 'overflow-y' (or 'overflow-x') set to 'auto' so it can scroll correctly and only render the items visible in the scroll viewport.");
      });
      throw new Error("Rendered items limit reached");
    },
    sortViews() {
      this.pool.sort((viewA, viewB) => viewA.nr.index - viewB.nr.index);
    }
  }
};
function normalizeComponent$1(template, style2, script2, scopeId, isFunctionalTemplate, moduleIdentifier, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
  if (typeof shadowMode !== "boolean") {
    createInjectorSSR = createInjector;
    createInjector = shadowMode;
    shadowMode = false;
  }
  const options = typeof script2 === "function" ? script2.options : script2;
  if (template && template.render) {
    options.render = template.render;
    options.staticRenderFns = template.staticRenderFns;
    options._compiled = true;
    if (isFunctionalTemplate) {
      options.functional = true;
    }
  }
  if (scopeId) {
    options._scopeId = scopeId;
  }
  let hook;
  if (moduleIdentifier) {
    hook = function(context) {
      context = context || // cached call
      this.$vnode && this.$vnode.ssrContext || // stateful
      this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
      if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
        context = __VUE_SSR_CONTEXT__;
      }
      if (style2) {
        style2.call(this, createInjectorSSR(context));
      }
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier);
      }
    };
    options._ssrRegister = hook;
  } else if (style2) {
    hook = shadowMode ? function(context) {
      style2.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
    } : function(context) {
      style2.call(this, createInjector(context));
    };
  }
  if (hook) {
    if (options.functional) {
      const originalRender = options.render;
      options.render = function renderWithStyleInjection(h2, context) {
        hook.call(context);
        return originalRender(h2, context);
      };
    } else {
      const existing = options.beforeCreate;
      options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
    }
  }
  return script2;
}
const __vue_script__$2 = script$2;
var __vue_render__$1 = function() {
  var _obj, _obj$1;
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c(
    "div",
    {
      directives: [
        {
          name: "observe-visibility",
          rawName: "v-observe-visibility",
          value: _vm.handleVisibilityChange,
          expression: "handleVisibilityChange"
        }
      ],
      staticClass: "vue-recycle-scroller",
      class: (_obj = {
        ready: _vm.ready,
        "page-mode": _vm.pageMode
      }, _obj["direction-" + _vm.direction] = true, _obj),
      on: {
        "&scroll": function($event) {
          return _vm.handleScroll.apply(null, arguments);
        }
      }
    },
    [
      _vm.$slots.before ? _c(
        "div",
        { ref: "before", staticClass: "vue-recycle-scroller__slot" },
        [_vm._t("before")],
        2
      ) : _vm._e(),
      _vm._v(" "),
      _c(
        _vm.listTag,
        {
          ref: "wrapper",
          tag: "component",
          staticClass: "vue-recycle-scroller__item-wrapper",
          class: _vm.listClass,
          style: (_obj$1 = {}, _obj$1[_vm.direction === "vertical" ? "minHeight" : "minWidth"] = _vm.totalSize + "px", _obj$1)
        },
        [
          _vm._l(_vm.pool, function(view) {
            return _c(
              _vm.itemTag,
              _vm._g(
                {
                  key: view.nr.id,
                  tag: "component",
                  staticClass: "vue-recycle-scroller__item-view",
                  class: [
                    _vm.itemClass,
                    {
                      hover: !_vm.skipHover && _vm.hoverKey === view.nr.key
                    }
                  ],
                  style: _vm.ready ? {
                    transform: "translate" + (_vm.direction === "vertical" ? "Y" : "X") + "(" + view.position + "px) translate" + (_vm.direction === "vertical" ? "X" : "Y") + "(" + view.offset + "px)",
                    width: _vm.gridItems ? (_vm.direction === "vertical" ? _vm.itemSecondarySize || _vm.itemSize : _vm.itemSize) + "px" : void 0,
                    height: _vm.gridItems ? (_vm.direction === "horizontal" ? _vm.itemSecondarySize || _vm.itemSize : _vm.itemSize) + "px" : void 0
                  } : null
                },
                _vm.skipHover ? {} : {
                  mouseenter: function() {
                    _vm.hoverKey = view.nr.key;
                  },
                  mouseleave: function() {
                    _vm.hoverKey = null;
                  }
                }
              ),
              [
                _vm._t("default", null, {
                  item: view.item,
                  index: view.nr.index,
                  active: view.nr.used
                })
              ],
              2
            );
          }),
          _vm._v(" "),
          _vm._t("empty")
        ],
        2
      ),
      _vm._v(" "),
      _vm.$slots.after ? _c(
        "div",
        { ref: "after", staticClass: "vue-recycle-scroller__slot" },
        [_vm._t("after")],
        2
      ) : _vm._e(),
      _vm._v(" "),
      _c("ResizeObserver", { on: { notify: _vm.handleResize } })
    ],
    1
  );
};
var __vue_staticRenderFns__$1 = [];
__vue_render__$1._withStripped = true;
const __vue_inject_styles__$2 = void 0;
const __vue_scope_id__$2 = void 0;
const __vue_module_identifier__$2 = void 0;
const __vue_is_functional_template__$2 = false;
const __vue_component__$2 = /* @__PURE__ */ normalizeComponent$1(
  { render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 },
  __vue_inject_styles__$2,
  __vue_script__$2,
  __vue_scope_id__$2,
  __vue_is_functional_template__$2,
  __vue_module_identifier__$2,
  false,
  void 0,
  void 0,
  void 0
);
var script$1 = {
  name: "DynamicScroller",
  components: {
    RecycleScroller: __vue_component__$2
  },
  provide() {
    if (typeof ResizeObserver !== "undefined") {
      this.$_resizeObserver = new ResizeObserver((entries) => {
        requestAnimationFrame(() => {
          if (!Array.isArray(entries)) {
            return;
          }
          for (const entry of entries) {
            if (entry.target) {
              const event = new CustomEvent("resize", {
                detail: {
                  contentRect: entry.contentRect
                }
              });
              entry.target.dispatchEvent(event);
            }
          }
        });
      });
    }
    return {
      vscrollData: this.vscrollData,
      vscrollParent: this,
      vscrollResizeObserver: this.$_resizeObserver
    };
  },
  inheritAttrs: false,
  props: {
    ...props,
    minItemSize: {
      type: [Number, String],
      required: true
    }
  },
  data() {
    return {
      vscrollData: {
        active: true,
        sizes: {},
        validSizes: {},
        keyField: this.keyField,
        simpleArray: false
      }
    };
  },
  computed: {
    simpleArray,
    itemsWithSize() {
      const result = [];
      const {
        items,
        keyField,
        simpleArray: simpleArray2
      } = this;
      const sizes = this.vscrollData.sizes;
      const l = items.length;
      for (let i = 0; i < l; i++) {
        const item = items[i];
        const id2 = simpleArray2 ? i : item[keyField];
        let size = sizes[id2];
        if (typeof size === "undefined" && !this.$_undefinedMap[id2]) {
          size = 0;
        }
        result.push({
          item,
          id: id2,
          size
        });
      }
      return result;
    },
    listeners() {
      const listeners = {};
      for (const key in this.$listeners) {
        if (key !== "resize" && key !== "visible") {
          listeners[key] = this.$listeners[key];
        }
      }
      return listeners;
    }
  },
  watch: {
    items() {
      this.forceUpdate(false);
    },
    simpleArray: {
      handler(value) {
        this.vscrollData.simpleArray = value;
      },
      immediate: true
    },
    direction(value) {
      this.forceUpdate(true);
    },
    itemsWithSize(next, prev) {
      const scrollTop = this.$el.scrollTop;
      let prevActiveTop = 0;
      let activeTop = 0;
      const length = Math.min(next.length, prev.length);
      for (let i = 0; i < length; i++) {
        if (prevActiveTop >= scrollTop) {
          break;
        }
        prevActiveTop += prev[i].size || this.minItemSize;
        activeTop += next[i].size || this.minItemSize;
      }
      const offset = activeTop - prevActiveTop;
      if (offset === 0) {
        return;
      }
      this.$el.scrollTop += offset;
    }
  },
  beforeCreate() {
    this.$_updates = [];
    this.$_undefinedSizes = 0;
    this.$_undefinedMap = {};
  },
  activated() {
    this.vscrollData.active = true;
  },
  deactivated() {
    this.vscrollData.active = false;
  },
  methods: {
    onScrollerResize() {
      const scroller = this.$refs.scroller;
      if (scroller) {
        this.forceUpdate();
      }
      this.$emit("resize");
    },
    onScrollerVisible() {
      this.$emit("vscroll:update", {
        force: false
      });
      this.$emit("visible");
    },
    forceUpdate(clear = true) {
      if (clear || this.simpleArray) {
        this.vscrollData.validSizes = {};
      }
      this.$emit("vscroll:update", {
        force: true
      });
    },
    scrollToItem(index2) {
      const scroller = this.$refs.scroller;
      if (scroller)
        scroller.scrollToItem(index2);
    },
    getItemSize(item, index2 = void 0) {
      const id2 = this.simpleArray ? index2 != null ? index2 : this.items.indexOf(item) : item[this.keyField];
      return this.vscrollData.sizes[id2] || 0;
    },
    scrollToBottom() {
      if (this.$_scrollingToBottom)
        return;
      this.$_scrollingToBottom = true;
      const el = this.$el;
      this.$nextTick(() => {
        el.scrollTop = el.scrollHeight + 5e3;
        const cb = () => {
          el.scrollTop = el.scrollHeight + 5e3;
          requestAnimationFrame(() => {
            el.scrollTop = el.scrollHeight + 5e3;
            if (this.$_undefinedSizes === 0) {
              this.$_scrollingToBottom = false;
            } else {
              requestAnimationFrame(cb);
            }
          });
        };
        requestAnimationFrame(cb);
      });
    }
  }
};
const __vue_script__$1 = script$1;
var __vue_render__ = function() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c(
    "RecycleScroller",
    _vm._g(
      _vm._b(
        {
          ref: "scroller",
          attrs: {
            items: _vm.itemsWithSize,
            "min-item-size": _vm.minItemSize,
            direction: _vm.direction,
            "key-field": "id",
            "list-tag": _vm.listTag,
            "item-tag": _vm.itemTag
          },
          on: { resize: _vm.onScrollerResize, visible: _vm.onScrollerVisible },
          scopedSlots: _vm._u(
            [
              {
                key: "default",
                fn: function(ref2) {
                  var itemWithSize = ref2.item;
                  var index2 = ref2.index;
                  var active = ref2.active;
                  return [
                    _vm._t("default", null, null, {
                      item: itemWithSize.item,
                      index: index2,
                      active,
                      itemWithSize
                    })
                  ];
                }
              }
            ],
            null,
            true
          )
        },
        "RecycleScroller",
        _vm.$attrs,
        false
      ),
      _vm.listeners
    ),
    [
      _vm._v(" "),
      _c("template", { slot: "before" }, [_vm._t("before")], 2),
      _vm._v(" "),
      _c("template", { slot: "after" }, [_vm._t("after")], 2),
      _vm._v(" "),
      _c("template", { slot: "empty" }, [_vm._t("empty")], 2)
    ],
    2
  );
};
var __vue_staticRenderFns__ = [];
__vue_render__._withStripped = true;
const __vue_inject_styles__$1 = void 0;
const __vue_scope_id__$1 = void 0;
const __vue_module_identifier__$1 = void 0;
const __vue_is_functional_template__$1 = false;
const __vue_component__$1 = /* @__PURE__ */ normalizeComponent$1(
  { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
  __vue_inject_styles__$1,
  __vue_script__$1,
  __vue_scope_id__$1,
  __vue_is_functional_template__$1,
  __vue_module_identifier__$1,
  false,
  void 0,
  void 0,
  void 0
);
var script = {
  name: "DynamicScrollerItem",
  inject: ["vscrollData", "vscrollParent", "vscrollResizeObserver"],
  props: {
    // eslint-disable-next-line vue/require-prop-types
    item: {
      required: true
    },
    watchData: {
      type: Boolean,
      default: false
    },
    /**
     * Indicates if the view is actively used to display an item.
     */
    active: {
      type: Boolean,
      required: true
    },
    index: {
      type: Number,
      default: void 0
    },
    sizeDependencies: {
      type: [Array, Object],
      default: null
    },
    emitResize: {
      type: Boolean,
      default: false
    },
    tag: {
      type: String,
      default: "div"
    }
  },
  computed: {
    id() {
      if (this.vscrollData.simpleArray)
        return this.index;
      if (this.item.hasOwnProperty(this.vscrollData.keyField))
        return this.item[this.vscrollData.keyField];
      throw new Error(`keyField '${this.vscrollData.keyField}' not found in your item. You should set a valid keyField prop on your Scroller`);
    },
    size() {
      return this.vscrollData.validSizes[this.id] && this.vscrollData.sizes[this.id] || 0;
    },
    finalActive() {
      return this.active && this.vscrollData.active;
    }
  },
  watch: {
    watchData: "updateWatchData",
    id() {
      if (!this.size) {
        this.onDataUpdate();
      }
    },
    finalActive(value) {
      if (!this.size) {
        if (value) {
          if (!this.vscrollParent.$_undefinedMap[this.id]) {
            this.vscrollParent.$_undefinedSizes++;
            this.vscrollParent.$_undefinedMap[this.id] = true;
          }
        } else {
          if (this.vscrollParent.$_undefinedMap[this.id]) {
            this.vscrollParent.$_undefinedSizes--;
            this.vscrollParent.$_undefinedMap[this.id] = false;
          }
        }
      }
      if (this.vscrollResizeObserver) {
        if (value) {
          this.observeSize();
        } else {
          this.unobserveSize();
        }
      } else if (value && this.$_pendingVScrollUpdate === this.id) {
        this.updateSize();
      }
    }
  },
  created() {
    if (this.$isServer)
      return;
    this.$_forceNextVScrollUpdate = null;
    this.updateWatchData();
    if (!this.vscrollResizeObserver) {
      for (const k in this.sizeDependencies) {
        this.$watch(() => this.sizeDependencies[k], this.onDataUpdate);
      }
      this.vscrollParent.$on("vscroll:update", this.onVscrollUpdate);
      this.vscrollParent.$on("vscroll:update-size", this.onVscrollUpdateSize);
    }
  },
  mounted() {
    if (this.vscrollData.active) {
      this.updateSize();
      this.observeSize();
    }
  },
  beforeDestroy() {
    this.vscrollParent.$off("vscroll:update", this.onVscrollUpdate);
    this.vscrollParent.$off("vscroll:update-size", this.onVscrollUpdateSize);
    this.unobserveSize();
  },
  methods: {
    updateSize() {
      if (this.finalActive) {
        if (this.$_pendingSizeUpdate !== this.id) {
          this.$_pendingSizeUpdate = this.id;
          this.$_forceNextVScrollUpdate = null;
          this.$_pendingVScrollUpdate = null;
          this.computeSize(this.id);
        }
      } else {
        this.$_forceNextVScrollUpdate = this.id;
      }
    },
    updateWatchData() {
      if (this.watchData && !this.vscrollResizeObserver) {
        this.$_watchData = this.$watch("item", () => {
          this.onDataUpdate();
        }, {
          deep: true
        });
      } else if (this.$_watchData) {
        this.$_watchData();
        this.$_watchData = null;
      }
    },
    onVscrollUpdate({
      force
    }) {
      if (!this.finalActive && force) {
        this.$_pendingVScrollUpdate = this.id;
      }
      if (this.$_forceNextVScrollUpdate === this.id || force || !this.size) {
        this.updateSize();
      }
    },
    onDataUpdate() {
      this.updateSize();
    },
    computeSize(id2) {
      this.$nextTick(() => {
        if (this.id === id2) {
          const width = this.$el.offsetWidth;
          const height = this.$el.offsetHeight;
          this.applySize(width, height);
        }
        this.$_pendingSizeUpdate = null;
      });
    },
    applySize(width, height) {
      const size = ~~(this.vscrollParent.direction === "vertical" ? height : width);
      if (size && this.size !== size) {
        if (this.vscrollParent.$_undefinedMap[this.id]) {
          this.vscrollParent.$_undefinedSizes--;
          this.vscrollParent.$_undefinedMap[this.id] = void 0;
        }
        this.$set(this.vscrollData.sizes, this.id, size);
        this.$set(this.vscrollData.validSizes, this.id, true);
        if (this.emitResize)
          this.$emit("resize", this.id);
      }
    },
    observeSize() {
      if (!this.vscrollResizeObserver || !this.$el.parentNode)
        return;
      this.vscrollResizeObserver.observe(this.$el.parentNode);
      this.$el.parentNode.addEventListener("resize", this.onResize);
    },
    unobserveSize() {
      if (!this.vscrollResizeObserver)
        return;
      this.vscrollResizeObserver.unobserve(this.$el.parentNode);
      this.$el.parentNode.removeEventListener("resize", this.onResize);
    },
    onResize(event) {
      const {
        width,
        height
      } = event.detail.contentRect;
      this.applySize(width, height);
    }
  },
  render(h2) {
    return h2(this.tag, this.$slots.default);
  }
};
const __vue_script__ = script;
const __vue_inject_styles__ = void 0;
const __vue_scope_id__ = void 0;
const __vue_module_identifier__ = void 0;
const __vue_is_functional_template__ = void 0;
const __vue_component__ = /* @__PURE__ */ normalizeComponent$1(
  {},
  __vue_inject_styles__,
  __vue_script__,
  __vue_scope_id__,
  __vue_is_functional_template__,
  __vue_module_identifier__,
  false,
  void 0,
  void 0,
  void 0
);
function registerComponents(Vue2, prefix) {
  Vue2.component(`${prefix}recycle-scroller`, __vue_component__$2);
  Vue2.component(`${prefix}RecycleScroller`, __vue_component__$2);
  Vue2.component(`${prefix}dynamic-scroller`, __vue_component__$1);
  Vue2.component(`${prefix}DynamicScroller`, __vue_component__$1);
  Vue2.component(`${prefix}dynamic-scroller-item`, __vue_component__);
  Vue2.component(`${prefix}DynamicScrollerItem`, __vue_component__);
}
const plugin = {
  // eslint-disable-next-line no-undef
  version: "1.1.2",
  install(Vue2, options) {
    const finalOptions = Object.assign({}, {
      installComponents: true,
      componentsPrefix: ""
    }, options);
    for (const key in finalOptions) {
      if (typeof finalOptions[key] !== "undefined") {
        config[key] = finalOptions[key];
      }
    }
    if (finalOptions.installComponents) {
      registerComponents(Vue2, finalOptions.componentsPrefix);
    }
  }
};
let GlobalVue = null;
if (typeof window !== "undefined") {
  GlobalVue = window.Vue;
} else if (typeof global !== "undefined") {
  GlobalVue = global.Vue;
}
if (GlobalVue) {
  GlobalVue.use(plugin);
}
const vueVirtualScroller = "";
function normalizeComponent(scriptExports, render6, staticRenderFns, functionalTemplate, injectStyles, scopeId, moduleIdentifier, shadowMode) {
  var options = typeof scriptExports === "function" ? scriptExports.options : scriptExports;
  if (render6) {
    options.render = render6;
    options.staticRenderFns = staticRenderFns;
    options._compiled = true;
  }
  if (functionalTemplate) {
    options.functional = true;
  }
  if (scopeId) {
    options._scopeId = "data-v-" + scopeId;
  }
  var hook;
  if (moduleIdentifier) {
    hook = function(context) {
      context = context || // cached call
      this.$vnode && this.$vnode.ssrContext || // stateful
      this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
      if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
        context = __VUE_SSR_CONTEXT__;
      }
      if (injectStyles) {
        injectStyles.call(this, context);
      }
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier);
      }
    };
    options._ssrRegister = hook;
  } else if (injectStyles) {
    hook = shadowMode ? function() {
      injectStyles.call(
        this,
        (options.functional ? this.parent : this).$root.$options.shadowRoot
      );
    } : injectStyles;
  }
  if (hook) {
    if (options.functional) {
      options._injectStyles = hook;
      var originalRender = options.render;
      options.render = function renderWithStyleInjection(h2, context) {
        hook.call(context);
        return originalRender(h2, context);
      };
    } else {
      var existing = options.beforeCreate;
      options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
    }
  }
  return {
    exports: scriptExports,
    options
  };
}
const _sfc_main$3 = {
  __name: "cascader-panel",
  props: {
    isResultPanel: {
      type: Boolean,
      default: false
    },
    showResultSearch: {
      type: Boolean,
      default: true
    },
    showResultCount: {
      // 展示已选数量
      type: Boolean,
      default: true
    },
    curPanelLevel: {
      type: Number,
      default: 0
    },
    cascaderMaxLevel: {
      type: Number,
      default: 2
    },
    panelMenuTitle: {
      // 当前面板标题
      type: String,
      default: ""
    },
    emptyText: {
      // 当前面板无数据时展示的文本
      type: String,
      default: "暂无数据"
    },
    panelOptions: {
      // 当前面板展示的条目
      type: Array,
      default: () => []
    },
    multiple: {
      // 当前面板是否支持多选
      type: Boolean,
      default: true
    },
    supportSelectAll: {
      // 当前面板是否支持全选
      type: Boolean,
      default: true
    },
    panelActiveList: {
      type: Array,
      default: () => []
    },
    globalSearchWord: {
      type: String,
      default: ""
    },
    colorDangerField: {
      type: String,
      default: ""
    }
  },
  emits: ["clickMenuItem", "removeSelectedCate"],
  setup(__props, { emit }) {
    const props2 = __props;
    const panelStatus = computed(() => {
      var _a;
      const totalLength = panelShowOptions.value.length;
      const checkNum = (_a = panelShowOptions.value.filter((it) => it.checked)) == null ? void 0 : _a.length;
      return {
        indeterminate: !!checkNum && checkNum !== totalLength,
        checked: !!checkNum && checkNum === totalLength
      };
    });
    const resultSearchKey = ref$1("");
    const panelShowOptions = computed(() => {
      var _a;
      return (_a = props2.panelOptions) == null ? void 0 : _a.filter((it) => !resultSearchKey.value || it.label.includes(resultSearchKey.value));
    });
    const { handleSelectAll, handleSelectChange } = useSelect(emit);
    const highLightLabel = (label) => {
      let _search = props2.isResultPanel ? resultSearchKey.value : props2.globalSearchWord;
      return _search ? label.split(_search).join(`<span style="color: #266BF6">${_search}</span>`) : label;
    };
    return { __sfc: true, emit, props: props2, panelStatus, resultSearchKey, panelShowOptions, handleSelectAll, handleSelectChange, highLightLabel, RecycleScroller: __vue_component__$2 };
  }
};
var _sfc_render$3 = function render2() {
  var _vm = this, _c = _vm._self._c, _setup = _vm._self._setupProxy;
  return _c("div", { staticClass: "cascader-panel", style: { width: `calc(100% / ${_setup.props.cascaderMaxLevel})` } }, [_c("div", { staticClass: "cascader-panel__head" }, [_vm.supportSelectAll ? _c("div", [_c("el-checkbox", { attrs: { "value": _setup.panelStatus.checked, "indeterminate": _setup.panelStatus.indeterminate, "disabled": !_setup.panelShowOptions.length }, on: { "change": (checked) => _setup.handleSelectAll(_setup.props.panelOptions, checked) } }), _vm._v(" 全选 ")], 1) : _vm._e(), _vm.panelMenuTitle ? _c("label", [_vm._v(_vm._s(_setup.props.panelMenuTitle))]) : _vm._e(), _vm.isResultPanel && _vm.showResultSearch ? _c("el-input", { staticStyle: { "width": "160px" }, attrs: { "placeholder": "请输入", "size": "small", "clearable": "", "suffix-icon": "el-icon-search" }, model: { value: _setup.resultSearchKey, callback: function($$v) {
    _setup.resultSearchKey = typeof $$v === "string" ? $$v.trim() : $$v;
  }, expression: "resultSearchKey" } }) : _vm._e()], 1), _c("div", { staticClass: "cascader-panel__menu" }, [_vm.isResultPanel && _vm.showResultCount ? _c("div", { staticClass: "cascader-panel__menu__operate" }, [_c("span", [_vm._v("已添加(" + _vm._s(_vm.panelOptions.length) + "条)")]), _c("span", { staticClass: "remove-button", class: { "remove-button__disabled": !_setup.panelStatus.checked && !_setup.panelStatus.indeterminate }, on: { "click": function($event) {
    return _setup.emit("removeSelectedCate");
  } } }, [_vm._v("移除")])]) : _vm._e(), !!_setup.panelShowOptions.length ? _c("div", [_c(_setup.RecycleScroller, { style: { height: _vm.isResultPanel && _vm.showResultSearch ? "289px" : "325px" }, attrs: { "items": _setup.panelShowOptions, "item-size": 32, "key-field": "value", "buffer": 100 }, scopedSlots: _vm._u([{ key: "default", fn: function({ item, index: index2 }) {
    return [_c("div", { staticClass: "cascader-panel__menu__item" }, [_c("el-checkbox", { attrs: { "value": item.checked, "indeterminate": item.indeterminate, "disabled": item.disabled }, on: { "change": (checked) => _setup.handleSelectChange(checked, item) } }), _c("div", { staticClass: "menu-item", class: { "menu-item__danger": _setup.props.colorDangerField && item[_setup.props.colorDangerField], "menu-item__active": _vm.panelActiveList[_setup.props.curPanelLevel] && item.value === _vm.panelActiveList[_setup.props.curPanelLevel].value }, attrs: { "title": item.label }, domProps: { "innerHTML": _vm._s(_setup.highLightLabel(item.label)) }, on: { "click": function($event) {
      return _setup.emit("clickMenuItem", item);
    } } })], 1)];
  } }], null, false, 742864597) })], 1) : _c("div", { staticClass: "cascader-panel__menu__empty" }, [_vm._v(_vm._s(_setup.props.emptyText))])])]);
};
var _sfc_staticRenderFns$3 = [];
var __component__$3 = /* @__PURE__ */ normalizeComponent(
  _sfc_main$3,
  _sfc_render$3,
  _sfc_staticRenderFns$3,
  false,
  null,
  null,
  null,
  null
);
const CascaderPanel = __component__$3.exports;
const cascaderSelect_vue_vue_type_style_index_0_scoped_0937b566_lang = "";
const _sfc_main$2 = {
  __name: "cascader-select",
  props: {
    options: {
      type: Array,
      default: () => []
    },
    cascaderMaxLevel: {
      type: Number,
      default: 3
    },
    globalSearchWord: {
      type: String,
      default: ""
    },
    panelTitleList: {
      type: Array,
      default: () => []
    }
  },
  setup(__props, { expose }) {
    const props2 = __props;
    const panelActiveNode = ref$1([]);
    const getPanelOptions = (level) => {
      var _a, _b, _c;
      if (level === 0)
        return (_a = props2.options) == null ? void 0 : _a.filter((it) => it.menuNodeShow);
      let cur = (_b = panelActiveNode.value) == null ? void 0 : _b[level - 1];
      return ((_c = cur == null ? void 0 : cur.children) == null ? void 0 : _c.filter((it) => it.menuNodeShow)) || [];
    };
    const convertActive = (item) => {
      var _a;
      const itemLevel = (item == null ? void 0 : item.level) || 0;
      const activeList = (_a = panelActiveNode.value) == null ? void 0 : _a.slice(0, itemLevel);
      activeList.push(item);
      let cur = item;
      while (cur && cur.children) {
        const visibleLists = cur == null ? void 0 : cur.getVisibleChild();
        cur = (visibleLists == null ? void 0 : visibleLists.find((it) => it.checked || it.indeterminate)) || (visibleLists == null ? void 0 : visibleLists[0]);
        activeList.push(cur);
      }
      panelActiveNode.value = activeList;
    };
    watch(() => props2.options, (val) => {
      if (!Array.isArray(val) || !val.length)
        panelActiveNode.value = [];
      let _firstSelected = val == null ? void 0 : val.find((it) => it.checked || it.indeterminate);
      convertActive(_firstSelected || (val == null ? void 0 : val[0]));
    });
    expose({ convertActive });
    return { __sfc: true, props: props2, panelActiveNode, getPanelOptions, convertActive, CascaderPanel };
  }
};
var _sfc_render$2 = function render3() {
  var _vm = this, _c = _vm._self._c, _setup = _vm._self._setupProxy;
  return _c("div", { staticClass: "cascader-select" }, _vm._l(_setup.props.cascaderMaxLevel + 1, function(level) {
    return _c(_setup.CascaderPanel, { key: level, attrs: { "cur-panel-level": level - 1, "cascader-max-level": _setup.props.cascaderMaxLevel, "panel-options": _setup.getPanelOptions(level - 1), "panel-menu-title": _vm.panelTitleList[level - 1], "panel-active-list": _setup.panelActiveNode, "global-search-word": _vm.globalSearchWord }, on: { "clickMenuItem": _setup.convertActive } });
  }), 1);
};
var _sfc_staticRenderFns$2 = [];
var __component__$2 = /* @__PURE__ */ normalizeComponent(
  _sfc_main$2,
  _sfc_render$2,
  _sfc_staticRenderFns$2,
  false,
  null,
  "0937b566",
  null,
  null
);
const CascaderSelect = __component__$2.exports;
const cascaderResult_vue_vue_type_style_index_0_scoped_b2705c62_lang = "";
const _sfc_main$1 = {
  __name: "cascader-result",
  props: {
    resultOptions: {
      type: Array,
      default: () => []
    },
    showResultSearch: {
      type: Boolean,
      default: true
    },
    showResultCount: {
      type: Boolean,
      default: true
    }
  },
  setup(__props) {
    const props2 = __props;
    return { __sfc: true, props: props2, CascaderPanel };
  }
};
var _sfc_render$1 = function render4() {
  var _vm = this, _c = _vm._self._c, _setup = _vm._self._setupProxy;
  return _c("div", { staticClass: "cascader-result" }, [_c(_setup.CascaderPanel, _vm._g({ attrs: { "is-result-panel": "", "cascaderMaxLevel": 1, "show-result-search": _setup.props.showResultSearch, "show-rsult-count": _setup.props.showResultCount, "panel-options": _setup.props.resultOptions, "cur-panel-level": 0 } }, _vm.$listeners))], 1);
};
var _sfc_staticRenderFns$1 = [];
var __component__$1 = /* @__PURE__ */ normalizeComponent(
  _sfc_main$1,
  _sfc_render$1,
  _sfc_staticRenderFns$1,
  false,
  null,
  "b2705c62",
  null,
  null
);
const CascaderResult = __component__$1.exports;
var jsShortid = { exports: {} };
(function(module) {
  (function(root2, factory) {
    if (module.exports) {
      module.exports = factory();
    } else {
      var _previousRoot = root2.shortid;
      var self2 = factory();
      self2.noConflict = function() {
        root2.shortid = _previousRoot;
        return self2;
      };
      root2.shortid = self2;
    }
  })(commonjsGlobal, function() {
    var __initime = 14603328e5, __symbols = [
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      "a",
      "b",
      "c",
      "d",
      "e",
      "f",
      "g",
      "h",
      "i",
      "j",
      "k",
      "l",
      "m",
      "n",
      "o",
      "p",
      "q",
      "r",
      "s",
      "t",
      "u",
      "v",
      "w",
      "x",
      "y",
      "z",
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H",
      "I",
      "J",
      "K",
      "L",
      "M",
      "N",
      "O",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z"
    ], __base = 62, __paddingLeft = function(padding, val) {
      return (padding + val).slice(-padding.length);
    }, ShortId = function(opt) {
      this._opt = opt || {};
    };
    ShortId.prototype = {
      _toBase: function(decimal, base) {
        var opt = this._opt, symbols = opt.symbols || __symbols, conversion = "";
        if (base > symbols.length || base <= 1) {
          return false;
        }
        while (decimal >= 1) {
          conversion = symbols[decimal - base * Math.floor(decimal / base)] + conversion;
          decimal = Math.floor(decimal / base);
        }
        return base < 11 ? parseInt(conversion) : conversion;
      },
      _salts: function() {
        var self2 = this, opt = self2._opt, salts = opt.salts || 2, ret = "";
        for (var i = 0; i < salts; i++) {
          var salt = Math.floor(Math.random() * 3844);
          ret += __paddingLeft("00", self2._toBase(salt, __base));
        }
        return ret;
      },
      gen: function() {
        var self2 = this, opt = self2._opt, interval = opt.interval || 1, initime = opt.initTime || __initime, elapsed = interval > 0 ? Math.floor(((/* @__PURE__ */ new Date()).getTime() - initime) / interval) : 0, salts = self2._salts();
        return elapsed === 0 ? salts : self2._toBase(elapsed, __base) + salts;
      }
    };
    return {
      inst: function(opt) {
        return new ShortId(opt);
      },
      gen: function(opt) {
        return new ShortId(opt).gen();
      },
      uuid: function() {
        return new ShortId({ salts: 4 }).gen();
      }
    };
  });
})(jsShortid);
var jsShortidExports = jsShortid.exports;
const shortid = /* @__PURE__ */ getDefaultExportFromCjs(jsShortidExports);
const spliter = ",";
class MenuNode {
  constructor({
    data = {},
    level = 0,
    leaf = false,
    parent = null,
    children = [],
    store: store2,
    indeterminate,
    checked
  }) {
    this.uid = shortid.gen();
    this.value = data.value;
    this.label = data.label;
    this.level = level;
    this.leaf = leaf;
    this.parent = parent;
    this.children = children;
    this.disabled = !!data.disabled;
    this.path = data.path || this.formatPath();
    this.pathName = data.pathName || this.formatLabel();
    this.store = store2;
    this.leafNodesNum = 0;
    this.checked = checked;
    this.indeterminate = indeterminate;
    this.sensitiveFlag = data.sensitiveFlag;
    this.menuNodeShow = true;
  }
  formatKeyFromParent(key) {
    const list = [this == null ? void 0 : this[key]];
    let parent = this.parent;
    while (parent) {
      list.unshift(parent == null ? void 0 : parent[key]);
      parent = parent == null ? void 0 : parent.parent;
    }
    return list;
  }
  formatPath() {
    return this.formatKeyFromParent("value");
  }
  formatLabel() {
    return this.formatKeyFromParent("label");
  }
  getVisibleChild() {
    const lists = this.children || [];
    return lists.filter((item) => item.menuNodeShow);
  }
  changeCheckVal(val) {
    this.checked = val;
    this.indeterminate = false;
  }
  changeCompStatus(type2) {
    if (!type2)
      return;
    if (type2 === "checked") {
      this.checked = true;
      this.indeterminate = false;
    } else if (type2 === "indeterminate") {
      this.checked = false;
      this.indeterminate = true;
    } else if (type2 === "empty") {
      this.checked = false;
      this.indeterminate = false;
    }
  }
  changeChildrenVal(val) {
    this.children = Array.isArray(val) ? val : null;
  }
  changeNodeShow(val) {
    this.menuNodeShow = val;
  }
  changeShowStatus(searchKey, ancestorHitShow = false) {
    const ancestorHasInSearch = (node) => {
      if (!node)
        return false;
      if (node.label.includes(searchKey))
        return true;
      return !!ancestorHasInSearch(node.parent);
    };
    const hasLabelInSearch = (node) => {
      if (!searchKey)
        return true;
      if (!node || !(node == null ? void 0 : node.label))
        return false;
      if (node.label.includes(searchKey))
        return true;
      if (ancestorHitShow)
        return !!ancestorHasInSearch(node.parent);
    };
    const loopNum = (node) => {
      if (!node)
        return 0;
      if (node.leaf) {
        const hasLeafSearched = hasLabelInSearch(node);
        this.changeNodeShow(hasLeafSearched);
        return hasLeafSearched ? 1 : 0;
      }
      if (node.children && node.children.length) {
        let selectedChildNum = 0;
        node.children.forEach((it) => {
          selectedChildNum += loopNum(it);
        });
        this.changeNodeShow(!!selectedChildNum);
        return selectedChildNum;
      }
    };
    loopNum(this);
  }
  onCheckedClick(val) {
    var _a;
    this.changeCheckVal(val);
    this.changeChildStatus(val);
    this.changeParentStatus(val);
    if (typeof ((_a = this.store) == null ? void 0 : _a.onNodeChange) === "function")
      this.store.onNodeChange(this);
  }
  changeChildStatus(val) {
    if (this.leaf)
      return;
    for (let it of this.getVisibleChild()) {
      it == null ? void 0 : it.changeCheckVal(val);
      it == null ? void 0 : it.changeChildStatus(val);
    }
  }
  findSiblings() {
    if (!this.parent)
      return [];
    const child = this.parent.children;
    return Array.isArray(child) ? child : [];
  }
  findLeafs(onlyShow = false) {
    const res = [];
    const loop = (item) => {
      if (!item)
        return;
      if (item.leaf && (onlyShow ? item.menuNodeShow : true))
        res.push(item);
      if ((item == null ? void 0 : item.children) && (item == null ? void 0 : item.children.length))
        item.children.forEach((it) => loop(it));
    };
    loop(this);
    return res;
  }
  changeParentStatus() {
    var _a, _b;
    if (!this.parent)
      return;
    const showSiblings = ((_a = this.findSiblings()) == null ? void 0 : _a.filter((item) => item.menuNodeShow)) || [];
    const siblingsCheckedNum = (_b = showSiblings.filter((item) => item.checked)) == null ? void 0 : _b.length;
    const childrenHasIndeterminate = showSiblings.some((item) => item.indeterminate);
    const parentStatus = siblingsCheckedNum ? siblingsCheckedNum === showSiblings.length ? "checked" : "indeterminate" : childrenHasIndeterminate ? "indeterminate" : "empty";
    this.parent.changeCompStatus(parentStatus);
    this.parent.changeParentStatus();
  }
}
const emitsEnum = {
  "resultChange": "resultChange",
  "checkedNode": "checkedNode"
};
class MenuStore {
  constructor(options = [], editVal = [], cascaderMaxLevel = 2) {
    this.nodesTree = [];
    this.result = /* @__PURE__ */ new Map();
    this.callbacks = {};
    this.initLists(options, editVal, cascaderMaxLevel);
  }
  onNodeChange(item) {
    item.checked ? this.onChecked(item) : this.onCancelCheck(item);
    this.emitChange(emitsEnum.checkedNode, this.result);
  }
  hasParentKeyInEdit(path, editVal) {
    if (!path || !editVal)
      return false;
    return editVal.some((it) => path.join(spliter).startsWith(it + spliter));
  }
  listenChange(key, func) {
    if (typeof func === "function") {
      if (!this.callbacks[key])
        this.callbacks[key] = [];
      this.callbacks[key].push(func);
    }
  }
  emitChange(key, value) {
    const cbs = this.callbacks[key];
    if (cbs) {
      cbs.forEach((cb) => cb(value));
    }
  }
  delKeysFromResult(keys2 = []) {
    keys2.forEach((item) => {
      this.result.delete(item);
    });
    this.emitChange(emitsEnum.resultChange, this.result);
  }
  insetKeyInResult(path, node) {
    this.result.set(path.join(spliter), node);
    this.emitChange(emitsEnum.resultChange, this.result);
  }
  onChecked(item) {
    const { path, leafNodesNum } = item;
    let _allShowLeafs = item.findLeafs(true) || [];
    let _isAllLeafsShow = _allShowLeafs.length === leafNodesNum;
    if (_isAllLeafsShow) {
      this.insetKeyInResult(path, item);
      const loopAddParent = (node) => {
        if (!node.parent)
          return;
        const siblings = node.findSiblings();
        let allSiblingsChecked = true;
        for (let item2 of siblings) {
          if (!item2.checked) {
            allSiblingsChecked = false;
            break;
          }
        }
        if (allSiblingsChecked) {
          let _allSiblingsKeys = siblings.map((it) => it.path.join(spliter));
          this.delKeysFromResult(_allSiblingsKeys);
          this.insetKeyInResult(node.parent.path, node.parent);
          loopAddParent(node.parent);
        }
      };
      loopAddParent(item);
      const childKeys = this.getChildKeysFromResult(item.path);
      this.delKeysFromResult(childKeys);
      return;
    }
    _allShowLeafs.forEach((it) => this.onChecked(it));
  }
  getChildKeysFromResult(path) {
    if (!path)
      return [];
    let key = path.join(spliter);
    if (!key)
      return [];
    const res = [];
    const reg = new RegExp(`^${key}${spliter}.+$`);
    for (const item of this.result.keys()) {
      if (reg.test(item))
        res.push(item);
    }
    return res;
  }
  onCancelCheck(item) {
    if (!item.path)
      return;
    const loopDel = (node) => {
      if (!node.parent)
        return;
      const siblings = node.findSiblings();
      const siblingsExceptSelf = siblings == null ? void 0 : siblings.filter((item2) => item2.path.join(spliter) !== node.path.join(spliter));
      let allSiblingsChecked = true;
      for (let item2 of siblingsExceptSelf) {
        if (!item2.checked) {
          allSiblingsChecked = false;
          break;
        }
      }
      if (allSiblingsChecked) {
        siblingsExceptSelf.forEach((item2) => {
          this.insetKeyInResult(item2.path, item2);
        });
        this.delKeysFromResult([node.parent.path.join(spliter)]);
        loopDel(node.parent);
      }
    };
    loopDel(item);
    this.delKeysFromResult([item.path.join(spliter)]);
    const childKeys = this.getChildKeysFromResult(item.path);
    this.delKeysFromResult(childKeys);
  }
  initLists(options = [], editVal, cascaderMaxLevel) {
    const initNodes = (lists = [], level = 0, parent = null) => {
      return lists == null ? void 0 : lists.map((item) => {
        var _a;
        const isLeaf = !((_a = item == null ? void 0 : item.children) == null ? void 0 : _a.length) || level === cascaderMaxLevel;
        const config2 = {
          data: item,
          level,
          leaf: isLeaf,
          parent,
          checked: false,
          indeterminate: false,
          children: (item == null ? void 0 : item.children) || null,
          store: this
        };
        const node = new MenuNode(config2);
        if (item == null ? void 0 : item.children) {
          node.changeChildrenVal(initNodes(item.children, level + 1, node));
        }
        node.leafNodesNum = node.leaf ? 1 : node.children.reduce((result, it) => {
          return result + it.leafNodesNum;
        }, 0);
        if (editVal.length) {
          let _childrenNum = editVal.filter((it) => it.startsWith(node.path.join(","))).length;
          let _parentSelected = editVal.some((it) => node.path.join(",").startsWith(it));
          let selfSelected = editVal.find((it) => it === node.path.join(","));
          node.checked = _parentSelected || _childrenNum === node.leafNodesNum;
          node.indeterminate = !!_childrenNum && _childrenNum < node.leafNodesNum && !selfSelected;
          if (node.checked && !this.hasParentKeyInEdit(node.path, editVal)) {
            this.insetKeyInResult(node.path, node);
          }
        }
        return node;
      });
    };
    this.nodesTree = initNodes(options);
  }
  getNodesTree() {
    return this.nodesTree;
  }
  getNodeByPath(path) {
    if (!path || !Array.isArray(path))
      return null;
    let parent = this.nodesTree;
    let cur = null;
    for (let key in path) {
      cur = parent.find((it) => it.value === path[key]);
      if (!cur)
        return null;
      parent = cur.children;
    }
    return cur;
  }
}
var FUNC_ERROR_TEXT = "Expected a function";
var NAN = 0 / 0;
var symbolTag = "[object Symbol]";
var reTrim = /^\s+|\s+$/g;
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
var reIsBinary = /^0b[01]+$/i;
var reIsOctal = /^0o[0-7]+$/i;
var freeParseInt = parseInt;
var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root = freeGlobal || freeSelf || Function("return this")();
var objectProto = Object.prototype;
var objectToString = objectProto.toString;
var nativeMax = Math.max, nativeMin = Math.min;
var now = function() {
  return root.Date.now();
};
function debounce(func, wait, options) {
  var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = "maxWait" in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = "trailing" in options ? !!options.trailing : trailing;
  }
  function invokeFunc(time) {
    var args = lastArgs, thisArg = lastThis;
    lastArgs = lastThis = void 0;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }
  function leadingEdge(time) {
    lastInvokeTime = time;
    timerId = setTimeout(timerExpired, wait);
    return leading ? invokeFunc(time) : result;
  }
  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;
    return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
  }
  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
    return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }
  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    timerId = setTimeout(timerExpired, remainingWait(time));
  }
  function trailingEdge(time) {
    timerId = void 0;
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = void 0;
    return result;
  }
  function cancel() {
    if (timerId !== void 0) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = void 0;
  }
  function flush() {
    return timerId === void 0 ? result : trailingEdge(now());
  }
  function debounced() {
    var time = now(), isInvoking = shouldInvoke(time);
    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;
    if (isInvoking) {
      if (timerId === void 0) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === void 0) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}
function isObject(value) {
  var type2 = typeof value;
  return !!value && (type2 == "object" || type2 == "function");
}
function isObjectLike(value) {
  return !!value && typeof value == "object";
}
function isSymbol(value) {
  return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
}
function toNumber(value) {
  if (typeof value == "number") {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == "function" ? value.valueOf() : value;
    value = isObject(other) ? other + "" : other;
  }
  if (typeof value != "string") {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, "");
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
var lodash_debounce = debounce;
const debounce$1 = /* @__PURE__ */ getDefaultExportFromCjs(lodash_debounce);
const useStore = ({
  options = [],
  cascaderMaxLevel = 2,
  value = [],
  needResultPanel = true,
  resultLabelJoiner = " > "
}, emit) => {
  const menuStore = ref$1(null);
  const resultStore = ref$1(null);
  const formatOptions = ref$1(null);
  const initMenuStore = () => {
    let _edit = [];
    if (value.length)
      _edit = value == null ? void 0 : value.map((it) => it.join(","));
    menuStore.value = new MenuStore(options, _edit, cascaderMaxLevel);
    const debouncedListenCheckedFun = debounce$1((result) => {
      let _result = [];
      for (let [, node] of result) {
        _result.push(node.path);
      }
      if (emit)
        emit("change", _result);
    }, 300);
    menuStore.value.listenChange(emitsEnum.checkedNode, debouncedListenCheckedFun);
    if (needResultPanel) {
      const debouncedListenResFun = debounce$1((result) => {
        initResultStore(result);
      });
      menuStore.value.listenChange(emitsEnum.resultChange, debouncedListenResFun);
      if (_edit && _edit.length)
        initResultStore(menuStore.value.result);
    }
    formatOptions.value = menuStore.value.getNodesTree();
  };
  const initResultStore = (result) => {
    let _result = [];
    if (result) {
      for (let [, node] of result) {
        _result.push(node);
      }
    }
    const getLeafNodes = (node) => {
      return node.reduce((prev, cur) => {
        return [...prev, ...cur.findLeafs().map((it) => ({
          ...it,
          value: it.path.join(","),
          label: it.pathName.join(resultLabelJoiner)
        }))];
      }, []);
    };
    resultStore.value = new MenuStore(getLeafNodes(_result));
  };
  const removeSelectedCate = () => {
    if (!resultStore.value)
      return;
    const nodes = resultStore.value.getNodesTree();
    const checkedNodes = nodes.filter((it) => it.checked);
    let _store = menuStore.value;
    checkedNodes.forEach((it) => {
      const node = _store.getNodeByPath(it.path);
      if (node) {
        node.onCheckedClick(false);
      }
    });
  };
  const handleDestroyed = () => {
    menuStore.value = null;
    resultStore.value = null;
  };
  return {
    formatOptions,
    resultStore,
    initMenuStore,
    handleDestroyed,
    removeSelectedCate
  };
};
const useSearch = (cascaderSelectRef = null) => {
  const handleSearch = (formatOptions, searchKey, ancestorHitShow = true) => {
    const updateShowStatus = (list) => {
      for (let it of list) {
        it.changeShowStatus(searchKey, ancestorHitShow);
        if (it.children && it.children.length)
          updateShowStatus(it.children);
      }
    };
    updateShowStatus(formatOptions);
    formatOptions.forEach((item) => {
      var _a;
      let _allCheckedLeafs = (_a = item.findLeafs(true)) == null ? void 0 : _a.filter((it) => it.checked);
      _allCheckedLeafs.forEach((it) => {
        it.onCheckedClick(true);
      });
    });
    nextTick(() => {
      var _a;
      let _options = formatOptions.filter((it) => !!it.menuNodeShow);
      (_a = cascaderSelectRef.value) == null ? void 0 : _a.convertActive(_options.find((it) => it.checked || it.indeterminate) || (_options == null ? void 0 : _options[0]));
    });
  };
  return {
    handleSearch
  };
};
const __default__ = defineComponent({
  name: "CascaderTreeSelect"
});
const _sfc_main = /* @__PURE__ */ Object.assign(__default__, {
  props: {
    value: {
      type: Array,
      default: () => []
    },
    needSearch: {
      type: Boolean,
      default: true
    },
    needResultPanel: {
      type: Boolean,
      default: true
    },
    options: {
      type: Array,
      default: () => []
    },
    placeholder: {
      type: String,
      default: "请输入关键词进行搜索"
    },
    size: {
      type: String,
      default: "small"
    },
    cascaderMaxLevel: {
      type: Number,
      default: 2
      // 从0开始
    },
    resultLabelJoiner: {
      type: String,
      default: " > "
    },
    panelTitleList: {
      type: Array,
      default: () => ["一级", "二级", "三级", "四级"]
    },
    ancestorHitShow: {
      // 祖先元素命中，子元素中不包含搜索词也展示即展示
      type: Boolean,
      default: true
    }
  },
  emits: ["change"],
  setup(__props, { emit }) {
    const props2 = __props;
    const searchKey = ref$1("");
    const cascaderSelectRef = ref$1(null);
    const { initMenuStore, formatOptions, resultStore, handleDestroyed, removeSelectedCate } = useStore(props2, emit);
    const { handleSearch } = useSearch(cascaderSelectRef);
    watch(() => searchKey.value, () => {
      handleSearch(formatOptions.value, searchKey.value, props2.ancestorHitShow);
    });
    onMounted(() => {
      initMenuStore();
    });
    onUnmounted(() => {
      handleDestroyed();
    });
    return { __sfc: true, props: props2, searchKey, cascaderSelectRef, emit, initMenuStore, formatOptions, resultStore, handleDestroyed, removeSelectedCate, handleSearch, CascaderSelect, CascaderResult };
  }
});
var _sfc_render = function render5() {
  var _vm = this, _c = _vm._self._c, _setup = _vm._self._setupProxy;
  return _c("div", { staticClass: "cascader-tree-select" }, [_vm.needSearch ? _c("div", { staticClass: "cascader-tree-select__search" }, [_c("el-input", { staticStyle: { "width": "240px" }, attrs: { "size": _setup.props.size, "clearable": "", "placeholder": _setup.props.placeholder }, model: { value: _setup.searchKey, callback: function($$v) {
    _setup.searchKey = typeof $$v === "string" ? $$v.trim() : $$v;
  }, expression: "searchKey" } })], 1) : _vm._e(), _c("div", { staticClass: "cascader-tree-select__main" }, [_c(_setup.CascaderSelect, { ref: "cascaderSelectRef", attrs: { "options": _setup.formatOptions, "cascader-max-level": _setup.props.cascaderMaxLevel, "global-search-word": _setup.searchKey, "panel-title-list": _setup.props.panelTitleList } }), _setup.props.needResultPanel ? _c(_setup.CascaderResult, _vm._b({ attrs: { "result-options": _setup.resultStore ? _setup.resultStore.getNodesTree() : [] }, on: { "removeSelectedCate": _setup.removeSelectedCate } }, "cascader-result", _vm.$props, false)) : _vm._e()], 1)]);
};
var _sfc_staticRenderFns = [];
var __component__ = /* @__PURE__ */ normalizeComponent(
  _sfc_main,
  _sfc_render,
  _sfc_staticRenderFns,
  false,
  null,
  null,
  null,
  null
);
const CascaderTreeSelect = __component__.exports;
CascaderTreeSelect.install = function(app) {
  app.component(CascaderTreeSelect.name, CascaderTreeSelect);
};
export {
  CascaderTreeSelect as default
};
